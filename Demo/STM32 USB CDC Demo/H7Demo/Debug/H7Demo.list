
H7Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011638  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080118d8  080118d8  000128d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011e18  08011e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011e20  08011e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011e24  08011e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08011e28  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000036bc  240002cc  080120f4  000132cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003988  080120f4  00013988  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000132cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d21d  00000000  00000000  000132fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004362  00000000  00000000  00030517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001398  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ed9  00000000  00000000  00035c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003aae7  00000000  00000000  00036af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e865  00000000  00000000  000715d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d9e6  00000000  00000000  0008fe3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ed823  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000062a8  00000000  00000000  001ed868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001f3b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080118c0 	.word	0x080118c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	080118c0 	.word	0x080118c0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9c0 	b.w	8000ac0 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	468e      	mov	lr, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d962      	bls.n	80008a4 <__udivmoddi4+0xdc>
 80007de:	fab2 f682 	clz	r6, r2
 80007e2:	b14e      	cbz	r6, 80007f8 <__udivmoddi4+0x30>
 80007e4:	f1c6 0320 	rsb	r3, r6, #32
 80007e8:	fa01 f806 	lsl.w	r8, r1, r6
 80007ec:	fa20 f303 	lsr.w	r3, r0, r3
 80007f0:	40b7      	lsls	r7, r6
 80007f2:	ea43 0808 	orr.w	r8, r3, r8
 80007f6:	40b4      	lsls	r4, r6
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	fa1f fc87 	uxth.w	ip, r7
 8000800:	fbb8 f1fe 	udiv	r1, r8, lr
 8000804:	0c23      	lsrs	r3, r4, #16
 8000806:	fb0e 8811 	mls	r8, lr, r1, r8
 800080a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800080e:	fb01 f20c 	mul.w	r2, r1, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d909      	bls.n	800082a <__udivmoddi4+0x62>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f101 30ff 	add.w	r0, r1, #4294967295
 800081c:	f080 80ea 	bcs.w	80009f4 <__udivmoddi4+0x22c>
 8000820:	429a      	cmp	r2, r3
 8000822:	f240 80e7 	bls.w	80009f4 <__udivmoddi4+0x22c>
 8000826:	3902      	subs	r1, #2
 8000828:	443b      	add	r3, r7
 800082a:	1a9a      	subs	r2, r3, r2
 800082c:	b2a3      	uxth	r3, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083a:	fb00 fc0c 	mul.w	ip, r0, ip
 800083e:	459c      	cmp	ip, r3
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x8e>
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	f100 32ff 	add.w	r2, r0, #4294967295
 8000848:	f080 80d6 	bcs.w	80009f8 <__udivmoddi4+0x230>
 800084c:	459c      	cmp	ip, r3
 800084e:	f240 80d3 	bls.w	80009f8 <__udivmoddi4+0x230>
 8000852:	443b      	add	r3, r7
 8000854:	3802      	subs	r0, #2
 8000856:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085a:	eba3 030c 	sub.w	r3, r3, ip
 800085e:	2100      	movs	r1, #0
 8000860:	b11d      	cbz	r5, 800086a <__udivmoddi4+0xa2>
 8000862:	40f3      	lsrs	r3, r6
 8000864:	2200      	movs	r2, #0
 8000866:	e9c5 3200 	strd	r3, r2, [r5]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d905      	bls.n	800087e <__udivmoddi4+0xb6>
 8000872:	b10d      	cbz	r5, 8000878 <__udivmoddi4+0xb0>
 8000874:	e9c5 0100 	strd	r0, r1, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	4608      	mov	r0, r1
 800087c:	e7f5      	b.n	800086a <__udivmoddi4+0xa2>
 800087e:	fab3 f183 	clz	r1, r3
 8000882:	2900      	cmp	r1, #0
 8000884:	d146      	bne.n	8000914 <__udivmoddi4+0x14c>
 8000886:	4573      	cmp	r3, lr
 8000888:	d302      	bcc.n	8000890 <__udivmoddi4+0xc8>
 800088a:	4282      	cmp	r2, r0
 800088c:	f200 8105 	bhi.w	8000a9a <__udivmoddi4+0x2d2>
 8000890:	1a84      	subs	r4, r0, r2
 8000892:	eb6e 0203 	sbc.w	r2, lr, r3
 8000896:	2001      	movs	r0, #1
 8000898:	4690      	mov	r8, r2
 800089a:	2d00      	cmp	r5, #0
 800089c:	d0e5      	beq.n	800086a <__udivmoddi4+0xa2>
 800089e:	e9c5 4800 	strd	r4, r8, [r5]
 80008a2:	e7e2      	b.n	800086a <__udivmoddi4+0xa2>
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	f000 8090 	beq.w	80009ca <__udivmoddi4+0x202>
 80008aa:	fab2 f682 	clz	r6, r2
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	f040 80a4 	bne.w	80009fc <__udivmoddi4+0x234>
 80008b4:	1a8a      	subs	r2, r1, r2
 80008b6:	0c03      	lsrs	r3, r0, #16
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	b280      	uxth	r0, r0
 80008be:	b2bc      	uxth	r4, r7
 80008c0:	2101      	movs	r1, #1
 80008c2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008c6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ce:	fb04 f20c 	mul.w	r2, r4, ip
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x11e>
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008dc:	d202      	bcs.n	80008e4 <__udivmoddi4+0x11c>
 80008de:	429a      	cmp	r2, r3
 80008e0:	f200 80e0 	bhi.w	8000aa4 <__udivmoddi4+0x2dc>
 80008e4:	46c4      	mov	ip, r8
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008ec:	fb0e 3312 	mls	r3, lr, r2, r3
 80008f0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008f4:	fb02 f404 	mul.w	r4, r2, r4
 80008f8:	429c      	cmp	r4, r3
 80008fa:	d907      	bls.n	800090c <__udivmoddi4+0x144>
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x142>
 8000904:	429c      	cmp	r4, r3
 8000906:	f200 80ca 	bhi.w	8000a9e <__udivmoddi4+0x2d6>
 800090a:	4602      	mov	r2, r0
 800090c:	1b1b      	subs	r3, r3, r4
 800090e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000912:	e7a5      	b.n	8000860 <__udivmoddi4+0x98>
 8000914:	f1c1 0620 	rsb	r6, r1, #32
 8000918:	408b      	lsls	r3, r1
 800091a:	fa22 f706 	lsr.w	r7, r2, r6
 800091e:	431f      	orrs	r7, r3
 8000920:	fa0e f401 	lsl.w	r4, lr, r1
 8000924:	fa20 f306 	lsr.w	r3, r0, r6
 8000928:	fa2e fe06 	lsr.w	lr, lr, r6
 800092c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000930:	4323      	orrs	r3, r4
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	fa1f fc87 	uxth.w	ip, r7
 800093a:	fbbe f0f9 	udiv	r0, lr, r9
 800093e:	0c1c      	lsrs	r4, r3, #16
 8000940:	fb09 ee10 	mls	lr, r9, r0, lr
 8000944:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000948:	fb00 fe0c 	mul.w	lr, r0, ip
 800094c:	45a6      	cmp	lr, r4
 800094e:	fa02 f201 	lsl.w	r2, r2, r1
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x1a0>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 3aff 	add.w	sl, r0, #4294967295
 800095a:	f080 809c 	bcs.w	8000a96 <__udivmoddi4+0x2ce>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8099 	bls.w	8000a96 <__udivmoddi4+0x2ce>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	eba4 040e 	sub.w	r4, r4, lr
 800096c:	fa1f fe83 	uxth.w	lr, r3
 8000970:	fbb4 f3f9 	udiv	r3, r4, r9
 8000974:	fb09 4413 	mls	r4, r9, r3, r4
 8000978:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800097c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000980:	45a4      	cmp	ip, r4
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x1ce>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f103 3eff 	add.w	lr, r3, #4294967295
 800098a:	f080 8082 	bcs.w	8000a92 <__udivmoddi4+0x2ca>
 800098e:	45a4      	cmp	ip, r4
 8000990:	d97f      	bls.n	8000a92 <__udivmoddi4+0x2ca>
 8000992:	3b02      	subs	r3, #2
 8000994:	443c      	add	r4, r7
 8000996:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800099a:	eba4 040c 	sub.w	r4, r4, ip
 800099e:	fba0 ec02 	umull	lr, ip, r0, r2
 80009a2:	4564      	cmp	r4, ip
 80009a4:	4673      	mov	r3, lr
 80009a6:	46e1      	mov	r9, ip
 80009a8:	d362      	bcc.n	8000a70 <__udivmoddi4+0x2a8>
 80009aa:	d05f      	beq.n	8000a6c <__udivmoddi4+0x2a4>
 80009ac:	b15d      	cbz	r5, 80009c6 <__udivmoddi4+0x1fe>
 80009ae:	ebb8 0203 	subs.w	r2, r8, r3
 80009b2:	eb64 0409 	sbc.w	r4, r4, r9
 80009b6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ba:	fa22 f301 	lsr.w	r3, r2, r1
 80009be:	431e      	orrs	r6, r3
 80009c0:	40cc      	lsrs	r4, r1
 80009c2:	e9c5 6400 	strd	r6, r4, [r5]
 80009c6:	2100      	movs	r1, #0
 80009c8:	e74f      	b.n	800086a <__udivmoddi4+0xa2>
 80009ca:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ce:	0c01      	lsrs	r1, r0, #16
 80009d0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009d4:	b280      	uxth	r0, r0
 80009d6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009da:	463b      	mov	r3, r7
 80009dc:	4638      	mov	r0, r7
 80009de:	463c      	mov	r4, r7
 80009e0:	46b8      	mov	r8, r7
 80009e2:	46be      	mov	lr, r7
 80009e4:	2620      	movs	r6, #32
 80009e6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ea:	eba2 0208 	sub.w	r2, r2, r8
 80009ee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009f2:	e766      	b.n	80008c2 <__udivmoddi4+0xfa>
 80009f4:	4601      	mov	r1, r0
 80009f6:	e718      	b.n	800082a <__udivmoddi4+0x62>
 80009f8:	4610      	mov	r0, r2
 80009fa:	e72c      	b.n	8000856 <__udivmoddi4+0x8e>
 80009fc:	f1c6 0220 	rsb	r2, r6, #32
 8000a00:	fa2e f302 	lsr.w	r3, lr, r2
 8000a04:	40b7      	lsls	r7, r6
 8000a06:	40b1      	lsls	r1, r6
 8000a08:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a10:	430a      	orrs	r2, r1
 8000a12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a16:	b2bc      	uxth	r4, r7
 8000a18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a1c:	0c11      	lsrs	r1, r2, #16
 8000a1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a22:	fb08 f904 	mul.w	r9, r8, r4
 8000a26:	40b0      	lsls	r0, r6
 8000a28:	4589      	cmp	r9, r1
 8000a2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a2e:	b280      	uxth	r0, r0
 8000a30:	d93e      	bls.n	8000ab0 <__udivmoddi4+0x2e8>
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a38:	d201      	bcs.n	8000a3e <__udivmoddi4+0x276>
 8000a3a:	4589      	cmp	r9, r1
 8000a3c:	d81f      	bhi.n	8000a7e <__udivmoddi4+0x2b6>
 8000a3e:	eba1 0109 	sub.w	r1, r1, r9
 8000a42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a46:	fb09 f804 	mul.w	r8, r9, r4
 8000a4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a54:	4542      	cmp	r2, r8
 8000a56:	d229      	bcs.n	8000aac <__udivmoddi4+0x2e4>
 8000a58:	18ba      	adds	r2, r7, r2
 8000a5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a5e:	d2c4      	bcs.n	80009ea <__udivmoddi4+0x222>
 8000a60:	4542      	cmp	r2, r8
 8000a62:	d2c2      	bcs.n	80009ea <__udivmoddi4+0x222>
 8000a64:	f1a9 0102 	sub.w	r1, r9, #2
 8000a68:	443a      	add	r2, r7
 8000a6a:	e7be      	b.n	80009ea <__udivmoddi4+0x222>
 8000a6c:	45f0      	cmp	r8, lr
 8000a6e:	d29d      	bcs.n	80009ac <__udivmoddi4+0x1e4>
 8000a70:	ebbe 0302 	subs.w	r3, lr, r2
 8000a74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a78:	3801      	subs	r0, #1
 8000a7a:	46e1      	mov	r9, ip
 8000a7c:	e796      	b.n	80009ac <__udivmoddi4+0x1e4>
 8000a7e:	eba7 0909 	sub.w	r9, r7, r9
 8000a82:	4449      	add	r1, r9
 8000a84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a8c:	fb09 f804 	mul.w	r8, r9, r4
 8000a90:	e7db      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a92:	4673      	mov	r3, lr
 8000a94:	e77f      	b.n	8000996 <__udivmoddi4+0x1ce>
 8000a96:	4650      	mov	r0, sl
 8000a98:	e766      	b.n	8000968 <__udivmoddi4+0x1a0>
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e6fd      	b.n	800089a <__udivmoddi4+0xd2>
 8000a9e:	443b      	add	r3, r7
 8000aa0:	3a02      	subs	r2, #2
 8000aa2:	e733      	b.n	800090c <__udivmoddi4+0x144>
 8000aa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000aa8:	443b      	add	r3, r7
 8000aaa:	e71c      	b.n	80008e6 <__udivmoddi4+0x11e>
 8000aac:	4649      	mov	r1, r9
 8000aae:	e79c      	b.n	80009ea <__udivmoddi4+0x222>
 8000ab0:	eba1 0109 	sub.w	r1, r1, r9
 8000ab4:	46c4      	mov	ip, r8
 8000ab6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aba:	fb09 f804 	mul.w	r8, r9, r4
 8000abe:	e7c4      	b.n	8000a4a <__udivmoddi4+0x282>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <Rec_Proc>:
// 返回参数     void
// 使用示例     Rec_Proc(USART1_Protocol, Rec_Data);
// 备注信息     本函数需要在串口接收中断中调用
//-------------------------------------------------------------------------------------------------------------------
void Rec_Proc(Protocol_t* x, uint8_t* Data)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	uwTick  = 0;
 8000ace:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <Rec_Proc+0xb8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
    // 获取字符串长度
    size_t data_len = strlen((char*)Data);
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f7ff fc63 	bl	80003a0 <strlen>
 8000ada:	6178      	str	r0, [r7, #20]

    // 计算缓冲区剩余空间
    size_t buffer_size = sizeof(x->Buffer.Protocol_Buffer);
 8000adc:	2364      	movs	r3, #100	@ 0x64
 8000ade:	60fb      	str	r3, [r7, #12]
    size_t available_space = buffer_size - (x->Buffer.Stroage_Ptr - x->Buffer.Protocol_Buffer);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]

    size_t Cut_size = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]

    // 确保不会溢出缓冲区
    if (data_len > available_space)
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d905      	bls.n	8000b0a <Rec_Proc+0x46>
    {
        Cut_size = data_len - available_space;
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	613b      	str	r3, [r7, #16]
        data_len = available_space; // 截断到可用空间大小
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	617b      	str	r3, [r7, #20]
    }

    // 快速复制字符串到缓冲区
    memcpy(x->Buffer.Stroage_Ptr, Data, data_len);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	6839      	ldr	r1, [r7, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00e fcbd 	bl	800f492 <memcpy>

    // 更新存储指针
    x->Buffer.Stroage_Ptr += data_len;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	441a      	add	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	66da      	str	r2, [r3, #108]	@ 0x6c

    // 边界检查，防止指针越界
    if (x->Buffer.Stroage_Ptr > x->Buffer.Protocol_Buffer + buffer_size - 1 ||
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	1d19      	adds	r1, r3, #4
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	440b      	add	r3, r1
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d805      	bhi.n	8000b42 <Rec_Proc+0x7e>
        x->Buffer.Stroage_Ptr < x->Buffer.Protocol_Buffer)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3304      	adds	r3, #4
    if (x->Buffer.Stroage_Ptr > x->Buffer.Protocol_Buffer + buffer_size - 1 ||
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d203      	bcs.n	8000b4a <Rec_Proc+0x86>
    {
        x->Buffer.Stroage_Ptr = x->Buffer.Protocol_Buffer; // 重置指针
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	1d1a      	adds	r2, r3, #4
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* 被剪切的尾部还需要放入缓冲区中 */
    Data+=data_len;
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	4413      	add	r3, r2
 8000b50:	603b      	str	r3, [r7, #0]
    if(Cut_size)
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00c      	beq.n	8000b72 <Rec_Proc+0xae>
    {
    	memcpy(x->Buffer.Stroage_Ptr, Data, Cut_size);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	6839      	ldr	r1, [r7, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00e fc96 	bl	800f492 <memcpy>
    	x->Buffer.Stroage_Ptr += Cut_size;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	441a      	add	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24001c54 	.word	0x24001c54

08000b80 <Protocol_Reset>:

void Protocol_Reset(Protocol_t* x)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	x->Status = STATE_HEAD; 							/* 进入类型处理模式 */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	x->Val_Name_Ptr = x->Val_Name;						/* 重置变量名获取指针 */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f103 0273 	add.w	r2, r3, #115	@ 0x73
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	x->Val_Data_Ptr = x->Val_Data;						/* 重置变量获取指针 */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	x->Command_Type = 0;									/* 重置数据类型参数 */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	x->Machine_Addr = 0;								/* 重置机器地址参数 */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	//*x->Buffer.Main_Ptr = 0;							/* 接收的内容设置为空 */
	//x->Buffer.Main_Ptr++;
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <Ptr_Dect>:

void Ptr_Dect(Protocol_t* x)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	/* 检测当前指针位置是否异常 */
	if(
			x->Buffer.Main_Ptr > (x->Buffer.Protocol_Buffer + BufferSize - 1)  	/* 检测越界 */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	3363      	adds	r3, #99	@ 0x63
	if(
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d805      	bhi.n	8000be6 <Ptr_Dect+0x22>
			|| x->Buffer.Main_Ptr < x->Buffer.Protocol_Buffer)										/* 检测错误地址 */
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3304      	adds	r3, #4
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d206      	bcs.n	8000bf4 <Ptr_Dect+0x30>
	{
		x->Buffer.Main_Ptr = x->Buffer.Protocol_Buffer;												/* 重置指针位置为协议缓冲区的头部 */
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	1d1a      	adds	r2, r3, #4
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	669a      	str	r2, [r3, #104]	@ 0x68
		printf("\n=========== Over Range Reset ==========\n");
 8000bee:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <Ptr_Dect+0x38>)
 8000bf0:	f00e fad6 	bl	800f1a0 <puts>
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	080118d8 	.word	0x080118d8

08000c00 <Protocol>:
// 返回参数     void
// 使用示例     Protocol(USART1_Protocol, SLOW_TYPE);
// 备注信息     本函数需要While循环中调用，不要在中断中调用！
//-------------------------------------------------------------------------------------------------------------------
void Protocol(Protocol_t* x,uint8_t Mode)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08d      	sub	sp, #52	@ 0x34
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	Ptr_Dect(x);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ffd9 	bl	8000bc4 <Ptr_Dect>
	//if(*x->Buffer.Main_Ptr == 0)return;																/* 遇到0x00直接退出，防止损耗CPU性能 */
	switch (Mode)
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	f000 8270 	beq.w	80010fa <Protocol+0x4fa>
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	f040 82f2 	bne.w	8001204 <Protocol+0x604>
	{
		/* 慢模式的参数调节 */
		case SLOW_TYPE:
			switch (x->Status)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8000c26:	2b05      	cmp	r3, #5
 8000c28:	f200 82e7 	bhi.w	80011fa <Protocol+0x5fa>
 8000c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <Protocol+0x34>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c4d 	.word	0x08000c4d
 8000c38:	080011fb 	.word	0x080011fb
 8000c3c:	080011fb 	.word	0x080011fb
 8000c40:	08000d4f 	.word	0x08000d4f
 8000c44:	08000e5b 	.word	0x08000e5b
 8000c48:	08000f47 	.word	0x08000f47
			{
			/* 头部接收模式 */
			case STATE_HEAD:
				if(*x->Buffer.Main_Ptr == '@')
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b40      	cmp	r3, #64	@ 0x40
 8000c54:	f040 824d 	bne.w	80010f2 <Protocol+0x4f2>
				{
#if PERFORMACE == 1
					Start_Tick = DWT_GetMicrosecond();		/* 获取SysTick寄存器的值 */
#endif
					x->Status = STATE_TYPE; 		/* 进入类型处理模式 */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					x->Val_Name_Ptr = x->Val_Name;	/* 重置变量名获取指针 */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f103 0273 	add.w	r2, r3, #115	@ 0x73
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					x->Val_Data_Ptr = x->Val_Data;	/* 重置变量获取指针 */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
					x->Command_Type = 0;				/* 重置数据类型参数 */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
					x->Machine_Addr = 0;			/* 重置机器地址参数 */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
					*x->Buffer.Main_Ptr = 0;		/* 接收的内容设置为空 */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;			/* 推进接收缓冲区 */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	669a      	str	r2, [r3, #104]	@ 0x68
					Ptr_Dect(x);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff92 	bl	8000bc4 <Ptr_Dect>
					x->Data_Type = INT;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5

#if DEBUG_MODE == 1
					/* ======== For DeBug ======== */
					printf("Get Head\r\n");
 8000ca8:	4894      	ldr	r0, [pc, #592]	@ (8000efc <Protocol+0x2fc>)
 8000caa:	f00e fa79 	bl	800f1a0 <puts>
					/* ======== For DeBug ======== */
#endif
					x->Command_Type = *x->Buffer.Main_Ptr;			/* 存储数据类型 */
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
					*x->Buffer.Main_Ptr = 0;					/* 清空当前数据 */
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;						/* 推进数据指针 */
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	669a      	str	r2, [r3, #104]	@ 0x68
					Ptr_Dect(x);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff79 	bl	8000bc4 <Ptr_Dect>
					x->Status = STATE_MACHINE;					/* 更新标志位  */
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

#if DEBUG_MODE == 1
					/* ======== For DeBug ======== */
					/* ======== 判断数据类型 ======== */
					if(x->Command_Type == CMD_TYPE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d102      	bne.n	8000cea <Protocol+0xea>
					{
						/* ======== For DeBug ======== */
						printf("IS CMD\r\n");
 8000ce4:	4886      	ldr	r0, [pc, #536]	@ (8000f00 <Protocol+0x300>)
 8000ce6:	f00e fa5b 	bl	800f1a0 <puts>
						/* ======== For DeBug ======== */
					}
					if(x->Command_Type == VAR_TYPE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d102      	bne.n	8000cfa <Protocol+0xfa>
					{
						/* ======== For DeBug ======== */
						printf("IS VAR\r\n");
 8000cf4:	4883      	ldr	r0, [pc, #524]	@ (8000f04 <Protocol+0x304>)
 8000cf6:	f00e fa53 	bl	800f1a0 <puts>
					}
					/* ======== For DeBug ======== */
#endif

					/* 接收机器地址 */
					x->Machine_Addr = *x->Buffer.Main_Ptr;	/* 存储机器地址 */
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
					*x->Buffer.Main_Ptr = 0;				/* 清空当前数据 */
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;					/* 推进数据指针 */
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	669a      	str	r2, [r3, #104]	@ 0x68
					Ptr_Dect(x);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff53 	bl	8000bc4 <Ptr_Dect>
					x->Status = STATE_NAME;					/* 更新标志位  */
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2203      	movs	r2, #3
 8000d22:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#if PERFORMACE == 1
					Head_Tick = DWT_GetMicrosecond();				/* 记录完成获取头部的时候的SysTick */
#endif

					/* 判断是否控制当前设备 */
					if(x->Machine_Addr == MACHINE_ADDR)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8000d2c:	2b20      	cmp	r3, #32
 8000d2e:	d103      	bne.n	8000d38 <Protocol+0x138>
					{
#if DEBUG_MODE == 1
						printf("ACK\r\n");
 8000d30:	4875      	ldr	r0, [pc, #468]	@ (8000f08 <Protocol+0x308>)
 8000d32:	f00e fa35 	bl	800f1a0 <puts>
#endif
						/* 非控制当前设备 */
						Protocol_Reset(x);
					}
				}
			break;
 8000d36:	e1dc      	b.n	80010f2 <Protocol+0x4f2>
						printf("NO ACK For %d\r\n",x->Machine_Addr);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4872      	ldr	r0, [pc, #456]	@ (8000f0c <Protocol+0x30c>)
 8000d42:	f00e f9c5 	bl	800f0d0 <iprintf>
						Protocol_Reset(x);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff1a 	bl	8000b80 <Protocol_Reset>
			break;
 8000d4c:	e1d1      	b.n	80010f2 <Protocol+0x4f2>
			case STATE_NAME:
				/*  接收变量名/指令名	*/
				/********** 阻塞模式 接收名称 **********/
				if(x->Block == BLOCK)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d12a      	bne.n	8000dae <Protocol+0x1ae>
				{

					/* 阻塞处理变量名 */
					while(*x->Buffer.Main_Ptr != ':')
 8000d58:	e023      	b.n	8000da2 <Protocol+0x1a2>
					{
						*(x->Val_Name_Ptr) = *(x->Buffer.Main_Ptr);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	701a      	strb	r2, [r3, #0]
						x->Val_Name_Ptr++;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
						/* 推进指针 */
						*x->Buffer.Main_Ptr = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
						x->Buffer.Main_Ptr++;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	669a      	str	r2, [r3, #104]	@ 0x68
						Ptr_Dect(x);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff1b 	bl	8000bc4 <Ptr_Dect>
						/* 检测到冒号直接退出该模式 */
						if(*x->Buffer.Main_Ptr == ':')
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d96:	d104      	bne.n	8000da2 <Protocol+0x1a2>
						{
							x->Status = STATE_IDLE; 	/* 进入数据处理模式 */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
							break;
 8000da0:	e024      	b.n	8000dec <Protocol+0x1ec>
					while(*x->Buffer.Main_Ptr != ':')
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b3a      	cmp	r3, #58	@ 0x3a
 8000daa:	d1d6      	bne.n	8000d5a <Protocol+0x15a>
 8000dac:	e01e      	b.n	8000dec <Protocol+0x1ec>

				/********** 非阻塞模式 接收名称 **********/
				else
				{
					/* 非阻塞处理变量名 */
					if(*x->Buffer.Main_Ptr != ':')
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b3a      	cmp	r3, #58	@ 0x3a
 8000db6:	d019      	beq.n	8000dec <Protocol+0x1ec>
					{
						*(x->Val_Name_Ptr) = *(x->Buffer.Main_Ptr);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	701a      	strb	r2, [r3, #0]
						x->Val_Name_Ptr++;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
						/* 推进指针 */
						*x->Buffer.Main_Ptr = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
						x->Buffer.Main_Ptr++;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	669a      	str	r2, [r3, #104]	@ 0x68
						Ptr_Dect(x);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff feec 	bl	8000bc4 <Ptr_Dect>
					}
				}
				/********** 非阻塞模式 接收名称 **********/

				/*********** 结束 名称接收 ***********/
				if(*x->Buffer.Main_Ptr == BUFFER_END_SIGN && x->Command_Type == CMD_TYPE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b0d      	cmp	r3, #13
 8000df4:	d114      	bne.n	8000e20 <Protocol+0x220>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10f      	bne.n	8000e20 <Protocol+0x220>
				{
					x->Status = STATE_IDLE; 	/* 进入数据处理模式 */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2205      	movs	r2, #5
 8000e04:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					/* 推进指针 */
					*x->Buffer.Main_Ptr = 0;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	669a      	str	r2, [r3, #104]	@ 0x68
					Ptr_Dect(x);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fed2 	bl	8000bc4 <Ptr_Dect>
				}
				/* 结束条件
				 * 当前指令为 数据包
				 * 检测到冒号
				 * */
				if(*x->Buffer.Main_Ptr == ':' && x->Command_Type == VAR_TYPE)//接收到名字帧尾，退出名字接收模式
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b3a      	cmp	r3, #58	@ 0x3a
 8000e28:	f040 8165 	bne.w	80010f6 <Protocol+0x4f6>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	f040 815f 	bne.w	80010f6 <Protocol+0x4f6>
				{
					x->Status = STATE_DATA;		/* 进入数据接收模式 */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					/* 推进指针 */
					*x->Buffer.Main_Ptr = 0;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	669a      	str	r2, [r3, #104]	@ 0x68
					Ptr_Dect(x);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff feb6 	bl	8000bc4 <Ptr_Dect>
#endif
					/*---------- Performance ----------*/

				}
				/*********** 结束 名称接收 ***********/
			break;
 8000e58:	e14d      	b.n	80010f6 <Protocol+0x4f6>
			case STATE_DATA:
				if(*x->Buffer.Main_Ptr == BUFFER_END_SIGN)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b0d      	cmp	r3, #13
 8000e62:	d110      	bne.n	8000e86 <Protocol+0x286>
				{
					x->Status = STATE_IDLE; 	/* 进入数据处理模式 */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2205      	movs	r2, #5
 8000e68:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					/* 推进指针 */
					*x->Buffer.Main_Ptr = 0;	/* 清空当前数据*/
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	669a      	str	r2, [r3, #104]	@ 0x68
					Ptr_Dect(x);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fea0 	bl	8000bc4 <Ptr_Dect>
						*x->Buffer.Main_Ptr = 0;
						x->Buffer.Main_Ptr++;
						Ptr_Dect(x);
					}
				}
				break;
 8000e84:	e138      	b.n	80010f8 <Protocol+0x4f8>
					if(x->Block == BLOCK)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d13f      	bne.n	8000f10 <Protocol+0x310>
						while(*x->Buffer.Main_Ptr != BUFFER_END_SIGN)
 8000e90:	e02d      	b.n	8000eee <Protocol+0x2ee>
							if(*(x->Buffer.Main_Ptr) == '.')
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e9a:	d103      	bne.n	8000ea4 <Protocol+0x2a4>
								x->Data_Type = FLOAT;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
							*(x->Val_Data_Ptr) = *(x->Buffer.Main_Ptr);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	7812      	ldrb	r2, [r2, #0]
 8000eb0:	701a      	strb	r2, [r3, #0]
							x->Val_Data_Ptr++;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
							*x->Buffer.Main_Ptr = 0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
							x->Buffer.Main_Ptr++;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	669a      	str	r2, [r3, #104]	@ 0x68
							Ptr_Dect(x);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fe76 	bl	8000bc4 <Ptr_Dect>
							if(*x->Buffer.Main_Ptr == BUFFER_END_SIGN)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b0d      	cmp	r3, #13
 8000ee0:	d105      	bne.n	8000eee <Protocol+0x2ee>
								x->Status = STATE_IDLE; 	/* 进入数据处理模式 */
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2205      	movs	r2, #5
 8000ee6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
								break;
 8000eea:	bf00      	nop
				break;
 8000eec:	e104      	b.n	80010f8 <Protocol+0x4f8>
						while(*x->Buffer.Main_Ptr != BUFFER_END_SIGN)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b0d      	cmp	r3, #13
 8000ef6:	d1cc      	bne.n	8000e92 <Protocol+0x292>
				break;
 8000ef8:	e0fe      	b.n	80010f8 <Protocol+0x4f8>
 8000efa:	bf00      	nop
 8000efc:	08011904 	.word	0x08011904
 8000f00:	08011910 	.word	0x08011910
 8000f04:	08011918 	.word	0x08011918
 8000f08:	08011920 	.word	0x08011920
 8000f0c:	08011928 	.word	0x08011928
						*(x->Val_Data_Ptr) = *(x->Buffer.Main_Ptr);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	701a      	strb	r2, [r3, #0]
						x->Val_Data_Ptr++;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
						*x->Buffer.Main_Ptr = 0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
						x->Buffer.Main_Ptr++;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	669a      	str	r2, [r3, #104]	@ 0x68
						Ptr_Dect(x);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fe40 	bl	8000bc4 <Ptr_Dect>
				break;
 8000f44:	e0d8      	b.n	80010f8 <Protocol+0x4f8>
			case STATE_IDLE:
				//接收到结束码并且数据为参数
				if(x->Command_Type == VAR_TYPE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d177      	bne.n	8001040 <Protocol+0x440>
				{
					Protocol_Reset(x);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fe15 	bl	8000b80 <Protocol_Reset>
					int Val_Name_Len = strlen((char*)x->Val_Name);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3373      	adds	r3, #115	@ 0x73
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa20 	bl	80003a0 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	613b      	str	r3, [r7, #16]
					int Val_Data_Len = strlen((char*)x->Val_Data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	33ac      	adds	r3, #172	@ 0xac
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa19 	bl	80003a0 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60fb      	str	r3, [r7, #12]
					for(int i = 0; i < Val_Num;i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f76:	e03d      	b.n	8000ff4 <Protocol+0x3f4>
					{
							if(!strcmp((char*)x->Val_Name,(char*)Val[i].Name))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f103 0073 	add.w	r0, r3, #115	@ 0x73
 8000f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	4aa0      	ldr	r2, [pc, #640]	@ (800120c <Protocol+0x60c>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff f9a7 	bl	80002e0 <strcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d12a      	bne.n	8000fee <Protocol+0x3ee>
							{
									if(x->Data_Type == FLOAT)*Val[i].Data.f_Data = strtof((char*)x->Val_Data,NULL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d113      	bne.n	8000fca <Protocol+0x3ca>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 8000fa8:	4998      	ldr	r1, [pc, #608]	@ (800120c <Protocol+0x60c>)
 8000faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fac:	4613      	mov	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3334      	adds	r3, #52	@ 0x34
 8000fb8:	681c      	ldr	r4, [r3, #0]
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f00d fac0 	bl	800e540 <strtof>
 8000fc0:	eef0 7a40 	vmov.f32	s15, s0
 8000fc4:	edc4 7a00 	vstr	s15, [r4]
 8000fc8:	e011      	b.n	8000fee <Protocol+0x3ee>
									else *Val[i].Data.I_Data = strtol((char*)x->Val_Data,NULL,10);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 8000fd0:	498e      	ldr	r1, [pc, #568]	@ (800120c <Protocol+0x60c>)
 8000fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	3334      	adds	r3, #52	@ 0x34
 8000fe0:	681c      	ldr	r4, [r3, #0]
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f00d fb73 	bl	800e6d0 <strtol>
 8000fea:	4603      	mov	r3, r0
 8000fec:	6023      	str	r3, [r4, #0]
					for(int i = 0; i < Val_Num;i++)
 8000fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ff4:	4b86      	ldr	r3, [pc, #536]	@ (8001210 <Protocol+0x610>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbbc      	blt.n	8000f78 <Protocol+0x378>
							 }
					}
							for(int i = 0 ; i < Val_Name_Len;i++)x->Val_Name[i] = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001002:	e008      	b.n	8001016 <Protocol+0x416>
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001008:	4413      	add	r3, r2
 800100a:	3373      	adds	r3, #115	@ 0x73
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001012:	3301      	adds	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001016:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbf2      	blt.n	8001004 <Protocol+0x404>
							for(int i = 0 ; i < Val_Data_Len;i++)x->Val_Data[i] = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
 8001022:	e008      	b.n	8001036 <Protocol+0x436>
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	4413      	add	r3, r2
 800102a:	33ac      	adds	r3, #172	@ 0xac
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	3301      	adds	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
 8001036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	429a      	cmp	r2, r3
 800103c:	dbf2      	blt.n	8001024 <Protocol+0x424>
							Total_Tick = DWT_GetMicrosecond();			/* 记录完成整个过程之后的Tick */
							Tick_Rec_Finish_Flag = 1;
#endif
							/*---------- Performance ----------*/

					return;
 800103e:	e0e1      	b.n	8001204 <Protocol+0x604>
				}
				//接收到结束码并且数据为指令
				if(x->Command_Type == CMD_TYPE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001046:	2b01      	cmp	r3, #1
 8001048:	d14f      	bne.n	80010ea <Protocol+0x4ea>
				{
						Protocol_Reset(x);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fd98 	bl	8000b80 <Protocol_Reset>
						int Val_Name_Len = strlen((char*)x->Val_Name);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3373      	adds	r3, #115	@ 0x73
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f9a3 	bl	80003a0 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	617b      	str	r3, [r7, #20]
						for(int i = 0; i < CMD_Num;i++)
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
 8001062:	e02c      	b.n	80010be <Protocol+0x4be>
						{
								if(!strcmp((char*)x->Val_Name,(char*)CMD_Arry[i].Name))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f103 0073 	add.w	r0, r3, #115	@ 0x73
 800106a:	6a3a      	ldr	r2, [r7, #32]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4a67      	ldr	r2, [pc, #412]	@ (8001214 <Protocol+0x614>)
 8001076:	4413      	add	r3, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff f931 	bl	80002e0 <strcmp>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d119      	bne.n	80010b8 <Protocol+0x4b8>
								{
										for(int i = 0 ; i < Val_Name_Len;i++)x->Val_Name[i] = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	e008      	b.n	800109c <Protocol+0x49c>
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	4413      	add	r3, r2
 8001090:	3373      	adds	r3, #115	@ 0x73
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf2      	blt.n	800108a <Protocol+0x48a>
										CMD_Arry[i].func();
 80010a4:	495b      	ldr	r1, [pc, #364]	@ (8001214 <Protocol+0x614>)
 80010a6:	6a3a      	ldr	r2, [r7, #32]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	3334      	adds	r3, #52	@ 0x34
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4798      	blx	r3
						for(int i = 0; i < CMD_Num;i++)
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	3301      	adds	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
 80010be:	4b56      	ldr	r3, [pc, #344]	@ (8001218 <Protocol+0x618>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6a3a      	ldr	r2, [r7, #32]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbcd      	blt.n	8001064 <Protocol+0x464>
								}
						}
						for(int i = 0 ; i < Val_Name_Len;i++)x->Val_Name[i] = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	e008      	b.n	80010e0 <Protocol+0x4e0>
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	4413      	add	r3, r2
 80010d4:	3373      	adds	r3, #115	@ 0x73
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	3301      	adds	r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf2      	blt.n	80010ce <Protocol+0x4ce>
						return;
 80010e8:	e08c      	b.n	8001204 <Protocol+0x604>
				/*---------- Performance ----------*/
#if PERFORMACE == 1
				Total_Tick = DWT_GetMicrosecond();			/* 记录完成整个过程之后的Tick */
#endif
				/*---------- Performance ----------*/
				Tick_Rec_Finish_Flag = 1;
 80010ea:	4b4c      	ldr	r3, [pc, #304]	@ (800121c <Protocol+0x61c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]

			break;
 80010f0:	e002      	b.n	80010f8 <Protocol+0x4f8>
			break;
 80010f2:	bf00      	nop
 80010f4:	e081      	b.n	80011fa <Protocol+0x5fa>
			break;
 80010f6:	bf00      	nop
			}


		break;
 80010f8:	e07f      	b.n	80011fa <Protocol+0x5fa>
		
		case FAST_TYPE:
			switch(x->Status)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <Protocol+0x50a>
 8001104:	2b04      	cmp	r3, #4
 8001106:	d013      	beq.n	8001130 <Protocol+0x530>
 8001108:	e07c      	b.n	8001204 <Protocol+0x604>
			{
				/* 检测头部状态 */
				case STATE_HEAD:
					/* 检测到头部 */
					if(*x->Buffer.Main_Ptr == '@')
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b40      	cmp	r3, #64	@ 0x40
 8001112:	d174      	bne.n	80011fe <Protocol+0x5fe>
					{
						x->Status = STATE_DATA;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
						*x->Buffer.Main_Ptr = 0;		/* 清空 Buffer */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
						x->Buffer.Main_Ptr++;			/* 指针后移 */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	669a      	str	r2, [r3, #104]	@ 0x68
						return;
 800112e:	e069      	b.n	8001204 <Protocol+0x604>
					}
				break;
				/* 数据接收模式 */
				case STATE_DATA:

					if(*x->Buffer.Main_Ptr != ',' && *x->Buffer.Main_Ptr != '\r')
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b2c      	cmp	r3, #44	@ 0x2c
 8001138:	d02a      	beq.n	8001190 <Protocol+0x590>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b0d      	cmp	r3, #13
 8001142:	d025      	beq.n	8001190 <Protocol+0x590>
					{
						x->Data_Buffer.Data_Arry[x->Data_Buffer.Data_Arry_Index][x->Data_Buffer.Data_Index] = *x->Buffer.Main_Ptr;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 800114e:	4611      	mov	r1, r2
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8001156:	4614      	mov	r4, r2
 8001158:	7818      	ldrb	r0, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	4423      	add	r3, r4
 8001168:	33e8      	adds	r3, #232	@ 0xe8
 800116a:	4602      	mov	r2, r0
 800116c:	701a      	strb	r2, [r3, #0]
						x->Data_Buffer.Data_Index++;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8001174:	3301      	adds	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
						*x->Buffer.Main_Ptr = 0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
						x->Buffer.Main_Ptr++;			/* 指针后移 */
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	669a      	str	r2, [r3, #104]	@ 0x68
					}
					/* 接收到数据分割符 */
					if(*x->Buffer.Main_Ptr == ',')
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b2c      	cmp	r3, #44	@ 0x2c
 8001198:	d114      	bne.n	80011c4 <Protocol+0x5c4>
					{
						*x->Buffer.Main_Ptr = 0;		/* 清空 Buffer */
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
						x->Buffer.Main_Ptr++;			/* 指针后移 */
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	669a      	str	r2, [r3, #104]	@ 0x68
						//数据缓冲区位置更新
						x->Data_Buffer.Data_Index = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
						x->Data_Buffer.Data_Arry_Index++;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
						//还有数据
					}
					if(*x->Buffer.Main_Ptr == '\r')
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b0d      	cmp	r3, #13
 80011cc:	d119      	bne.n	8001202 <Protocol+0x602>
					{
						x->Status = STATE_HEAD;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
						*x->Buffer.Main_Ptr = 0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
						x->Data_Buffer.Data_Arry_Index = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
						x->Data_Buffer.Data_Index = 0;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
						x->Buffer.Main_Ptr++;			/* 指针后移 */
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	669a      	str	r2, [r3, #104]	@ 0x68
					}
					break;
 80011f8:	e003      	b.n	8001202 <Protocol+0x602>
		break;
 80011fa:	bf00      	nop
 80011fc:	e002      	b.n	8001204 <Protocol+0x604>
				break;
 80011fe:	bf00      	nop
 8001200:	e000      	b.n	8001204 <Protocol+0x604>
					break;
 8001202:	bf00      	nop
			}

	}
		
}
 8001204:	3734      	adds	r7, #52	@ 0x34
 8001206:	46bd      	mov	sp, r7
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	bf00      	nop
 800120c:	240002e8 	.word	0x240002e8
 8001210:	24000dd8 	.word	0x24000dd8
 8001214:	24000ddc 	.word	0x24000ddc
 8001218:	240018cc 	.word	0x240018cc
 800121c:	24001bac 	.word	0x24001bac

08001220 <Protocol_Init>:
// 返回参数     void
// 使用示例     Protocol_Init(USART1_Protocol, SLOW_TYPE);
// 备注信息     本函数需要初始化的过程中调用来对对象进行初始化
//-------------------------------------------------------------------------------------------------------------------
void Protocol_Init(Protocol_t* x,uint8_t Mode)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
    x->Buffer.Protocol_Buffer[99] = BUFFER_END_SIGN;//End Sign
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	220d      	movs	r2, #13
 8001230:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
    x->Buffer.Main_Ptr = x->Buffer.Protocol_Buffer;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	1d1a      	adds	r2, r3, #4
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	669a      	str	r2, [r3, #104]	@ 0x68
    x->Buffer.Stroage_Ptr = x->Buffer.Protocol_Buffer;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1d1a      	adds	r2, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <Val_Create>:
// 返回参数     void
// 使用示例     Val_Create(“Speed”, &Speed);
// 备注信息     本函数需要初始化的过程中调用来
//-------------------------------------------------------------------------------------------------------------------
void Val_Create(char* Name,void*Var)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    strcpy((char*)Val[Val_Num].Name,(char*)Name);
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <Val_Create+0x4c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <Val_Create+0x50>)
 8001268:	4413      	add	r3, r2
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f00e f908 	bl	800f482 <strcpy>
    Val[Val_Num].Data.Data_Addr = Var;
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <Val_Create+0x4c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	490a      	ldr	r1, [pc, #40]	@ (80012a0 <Val_Create+0x50>)
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	3334      	adds	r3, #52	@ 0x34
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	601a      	str	r2, [r3, #0]
    Val_Num++;
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <Val_Create+0x4c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a03      	ldr	r2, [pc, #12]	@ (800129c <Val_Create+0x4c>)
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24000dd8 	.word	0x24000dd8
 80012a0:	240002e8 	.word	0x240002e8

080012a4 <Get_Write_Ptr>:
	CMD_Num++;
}

/* 辅助函数 - 用于返回当前写指针的位置 */
uint32_t Get_Write_Ptr(Protocol_t *x)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	return x->Buffer.Stroage_Ptr - x->Buffer.Protocol_Buffer;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3304      	adds	r3, #4
 80012b4:	1ad3      	subs	r3, r2, r3
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <Get_Read_Ptr>:

uint32_t Get_Read_Ptr(Protocol_t *x)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	return x->Buffer.Main_Ptr - x->Buffer.Protocol_Buffer;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3304      	adds	r3, #4
 80012d2:	1ad3      	subs	r3, r2, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <Get_Read_Remain>:

uint32_t Get_Read_Remain(Protocol_t *x)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	return x->Buffer.Protocol_Buffer + BufferSize - x->Buffer.Main_Ptr;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3304      	adds	r3, #4
 80012ec:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012f4:	1ad3      	subs	r3, r2, r3
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
	uint8_t data = (uint8_t)ch;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	73fb      	strb	r3, [r7, #15]
	while (CDC_Transmit_FS(&data, 1) == USBD_BUSY) {
 8001310:	e002      	b.n	8001318 <__io_putchar+0x16>
		HAL_Delay(1); // 等待 USB 空闲
 8001312:	2001      	movs	r0, #1
 8001314:	f000 fd16 	bl	8001d44 <HAL_Delay>
	while (CDC_Transmit_FS(&data, 1) == USBD_BUSY) {
 8001318:	f107 030f 	add.w	r3, r7, #15
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f00b fec6 	bl	800d0b0 <CDC_Transmit_FS>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d0f3      	beq.n	8001312 <__io_putchar+0x10>
	}
	return ch;
 800132a:	687b      	ldr	r3, [r7, #4]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <HAL_UART_RxCpltCallback+0x34>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10b      	bne.n	800135e <HAL_UART_RxCpltCallback+0x2a>
    {
        rx_flag = 1; // 设置接收标志
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_UART_RxCpltCallback+0x38>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, sizeof(rx_data)); // 重新启动接收中断
 800134c:	2201      	movs	r2, #1
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <HAL_UART_RxCpltCallback+0x3c>)
 8001350:	4808      	ldr	r0, [pc, #32]	@ (8001374 <HAL_UART_RxCpltCallback+0x40>)
 8001352:	f005 ff27 	bl	80071a4 <HAL_UART_Receive_IT>
        Rec_Proc(&USART1_Protocol,rx_data);
 8001356:	4906      	ldr	r1, [pc, #24]	@ (8001370 <HAL_UART_RxCpltCallback+0x3c>)
 8001358:	4807      	ldr	r0, [pc, #28]	@ (8001378 <HAL_UART_RxCpltCallback+0x44>)
 800135a:	f7ff fbb3 	bl	8000ac4 <Rec_Proc>
    }
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40011000 	.word	0x40011000
 800136c:	24001bb1 	.word	0x24001bb1
 8001370:	24001bb0 	.word	0x24001bb0
 8001374:	24001bbc 	.word	0x24001bbc
 8001378:	240018d0 	.word	0x240018d0

0800137c <User_Main>:



void User_Main(void)
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	ed2d 8b02 	vpush	{d8}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af06      	add	r7, sp, #24
	Protocol_Init(&USART1_Protocol,SLOW_TYPE);
 8001386:	2102      	movs	r1, #2
 8001388:	4824      	ldr	r0, [pc, #144]	@ (800141c <User_Main+0xa0>)
 800138a:	f7ff ff49 	bl	8001220 <Protocol_Init>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2108      	movs	r1, #8
 8001392:	4823      	ldr	r0, [pc, #140]	@ (8001420 <User_Main+0xa4>)
 8001394:	f001 fda2 	bl	8002edc <HAL_GPIO_WritePin>
    HAL_UART_Receive_IT(&huart1, rx_data, 1);
 8001398:	2201      	movs	r2, #1
 800139a:	4922      	ldr	r1, [pc, #136]	@ (8001424 <User_Main+0xa8>)
 800139c:	4822      	ldr	r0, [pc, #136]	@ (8001428 <User_Main+0xac>)
 800139e:	f005 ff01 	bl	80071a4 <HAL_UART_Receive_IT>

    /* Debugging parameter initialization */
    Val_Create("Para_A",&Parament_A);
 80013a2:	4922      	ldr	r1, [pc, #136]	@ (800142c <User_Main+0xb0>)
 80013a4:	4822      	ldr	r0, [pc, #136]	@ (8001430 <User_Main+0xb4>)
 80013a6:	f7ff ff53 	bl	8001250 <Val_Create>
    Val_Create("Para_B",&Parament_B);
 80013aa:	4922      	ldr	r1, [pc, #136]	@ (8001434 <User_Main+0xb8>)
 80013ac:	4822      	ldr	r0, [pc, #136]	@ (8001438 <User_Main+0xbc>)
 80013ae:	f7ff ff4f 	bl	8001250 <Val_Create>
    printf("System Online!\r\n");
 80013b2:	4822      	ldr	r0, [pc, #136]	@ (800143c <User_Main+0xc0>)
 80013b4:	f00d fef4 	bl	800f1a0 <puts>
    /*  */
    USART1_Protocol.Block = UNBLOCK;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <User_Main+0xa0>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
#if PERFORMACE == 1
    DWT_Init();
#endif
    while (1)
    {
    	Protocol(&USART1_Protocol,SLOW_TYPE);
 80013c0:	2102      	movs	r1, #2
 80013c2:	4816      	ldr	r0, [pc, #88]	@ (800141c <User_Main+0xa0>)
 80013c4:	f7ff fc1c 	bl	8000c00 <Protocol>
//    	Parament_A = strtol((char*)USART1_Protocol.Data_Buffer.Data_Arry[0],NULL,10);
//    	Parament_B = strtof((char*)USART1_Protocol.Data_Buffer.Data_Arry[1],NULL);
    	//printf("%s,%s,%ld\n",USART1_Protocol.Data_Buffer.Data_Arry[0],USART1_Protocol.Data_Buffer.Data_Arry[1],Get_Write_Ptr(&USART1_Protocol));
    	printf("%d,%f,%d,%ld,%ld,%c,%ld\r\n",Parament_A,Parament_B,USART1_Protocol.Status,Get_Write_Ptr(&USART1_Protocol),Get_Read_Ptr(&USART1_Protocol),*USART1_Protocol.Buffer.Main_Ptr,Get_Read_Remain(&USART1_Protocol));
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <User_Main+0xb0>)
 80013ca:	681c      	ldr	r4, [r3, #0]
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <User_Main+0xb8>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <User_Main+0xa0>)
 80013d8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	480f      	ldr	r0, [pc, #60]	@ (800141c <User_Main+0xa0>)
 80013e0:	f7ff ff60 	bl	80012a4 <Get_Write_Ptr>
 80013e4:	4605      	mov	r5, r0
 80013e6:	480d      	ldr	r0, [pc, #52]	@ (800141c <User_Main+0xa0>)
 80013e8:	f7ff ff6b 	bl	80012c2 <Get_Read_Ptr>
 80013ec:	4606      	mov	r6, r0
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <User_Main+0xa0>)
 80013f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <User_Main+0xa0>)
 80013f8:	f7ff ff72 	bl	80012e0 <Get_Read_Remain>
 80013fc:	4603      	mov	r3, r0
 80013fe:	9304      	str	r3, [sp, #16]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	9203      	str	r2, [sp, #12]
 8001404:	9602      	str	r6, [sp, #8]
 8001406:	9501      	str	r5, [sp, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	ec53 2b18 	vmov	r2, r3, d8
 8001410:	4621      	mov	r1, r4
 8001412:	480b      	ldr	r0, [pc, #44]	@ (8001440 <User_Main+0xc4>)
 8001414:	f00d fe5c 	bl	800f0d0 <iprintf>
    	Protocol(&USART1_Protocol,SLOW_TYPE);
 8001418:	bf00      	nop
 800141a:	e7d1      	b.n	80013c0 <User_Main+0x44>
 800141c:	240018d0 	.word	0x240018d0
 8001420:	58021000 	.word	0x58021000
 8001424:	24001bb0 	.word	0x24001bb0
 8001428:	24001bbc 	.word	0x24001bbc
 800142c:	24001bb4 	.word	0x24001bb4
 8001430:	08011938 	.word	0x08011938
 8001434:	24001bb8 	.word	0x24001bb8
 8001438:	08011940 	.word	0x08011940
 800143c:	08011948 	.word	0x08011948
 8001440:	08011958 	.word	0x08011958

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001448:	f000 f92a 	bl	80016a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f000 fbe8 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f80a 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f000 f8d0 	bl	80015f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001458:	f000 f882 	bl	8001560 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800145c:	f00b fd62 	bl	800cf24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  User_Main();
 8001460:	f7ff ff8c 	bl	800137c <User_Main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <main+0x20>

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b09c      	sub	sp, #112	@ 0x70
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	224c      	movs	r2, #76	@ 0x4c
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f00d ff72 	bl	800f360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2220      	movs	r2, #32
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f00d ff6c 	bl	800f360 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001488:	2002      	movs	r0, #2
 800148a:	f002 ffe1 	bl	8004450 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <SystemClock_Config+0xf0>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	4a30      	ldr	r2, [pc, #192]	@ (8001558 <SystemClock_Config+0xf0>)
 8001498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800149c:	6193      	str	r3, [r2, #24]
 800149e:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <SystemClock_Config+0xf0>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <SystemClock_Config+0xf4>)
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	4a2b      	ldr	r2, [pc, #172]	@ (800155c <SystemClock_Config+0xf4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <SystemClock_Config+0xf4>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014c0:	bf00      	nop
 80014c2:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <SystemClock_Config+0xf0>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014ce:	d1f8      	bne.n	80014c2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014da:	2302      	movs	r3, #2
 80014dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014de:	2302      	movs	r3, #2
 80014e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80014e2:	2303      	movs	r3, #3
 80014e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 87;
 80014e6:	2357      	movs	r3, #87	@ 0x57
 80014e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80014ee:	230f      	movs	r3, #15
 80014f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014f6:	230c      	movs	r3, #12
 80014f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 7296;
 80014fe:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 8001502:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	4618      	mov	r0, r3
 800150a:	f002 ffeb 	bl	80044e4 <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001514:	f000 f8f0 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	233f      	movs	r3, #63	@ 0x3f
 800151a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151c:	2303      	movs	r3, #3
 800151e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001524:	2308      	movs	r3, #8
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001528:	2340      	movs	r3, #64	@ 0x40
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800152c:	2340      	movs	r3, #64	@ 0x40
 800152e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001534:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001536:	2340      	movs	r3, #64	@ 0x40
 8001538:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2104      	movs	r1, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fc2a 	bl	8004d98 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800154a:	f000 f8d5 	bl	80016f8 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3770      	adds	r7, #112	@ 0x70
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	58024800 	.word	0x58024800
 800155c:	58000400 	.word	0x58000400

08001560 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001564:	4b22      	ldr	r3, [pc, #136]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001566:	4a23      	ldr	r2, [pc, #140]	@ (80015f4 <MX_USART1_UART_Init+0x94>)
 8001568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a8:	4811      	ldr	r0, [pc, #68]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015aa:	f005 fdab 	bl	8007104 <HAL_UART_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015b4:	f000 f8a0 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b8:	2100      	movs	r1, #0
 80015ba:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015bc:	f008 f893 	bl	80096e6 <HAL_UARTEx_SetTxFifoThreshold>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015c6:	f000 f897 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ca:	2100      	movs	r1, #0
 80015cc:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015ce:	f008 f8c8 	bl	8009762 <HAL_UARTEx_SetRxFifoThreshold>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015d8:	f000 f88e 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <MX_USART1_UART_Init+0x90>)
 80015de:	f008 f849 	bl	8009674 <HAL_UARTEx_DisableFifoMode>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015e8:	f000 f886 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	24001bbc 	.word	0x24001bbc
 80015f4:	40011000 	.word	0x40011000

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <MX_GPIO_Init+0xa0>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	4a20      	ldr	r2, [pc, #128]	@ (8001698 <MX_GPIO_Init+0xa0>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161e:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <MX_GPIO_Init+0xa0>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162c:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_GPIO_Init+0xa0>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	4a19      	ldr	r2, [pc, #100]	@ (8001698 <MX_GPIO_Init+0xa0>)
 8001634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_GPIO_Init+0xa0>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <MX_GPIO_Init+0xa0>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001650:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <MX_GPIO_Init+0xa0>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_GPIO_Init+0xa0>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2108      	movs	r1, #8
 800166c:	480b      	ldr	r0, [pc, #44]	@ (800169c <MX_GPIO_Init+0xa4>)
 800166e:	f001 fc35 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001672:	2308      	movs	r3, #8
 8001674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_GPIO_Init+0xa4>)
 800168a:	f001 fa77 	bl	8002b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	58024400 	.word	0x58024400
 800169c:	58021000 	.word	0x58021000

080016a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016a6:	463b      	mov	r3, r7
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80016b2:	f000 fc87 	bl	8001fc4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016c2:	231f      	movs	r3, #31
 80016c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016c6:	2387      	movs	r3, #135	@ 0x87
 80016c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016ce:	2300      	movs	r3, #0
 80016d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016e2:	463b      	mov	r3, r7
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fca5 	bl	8002034 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016ea:	2004      	movs	r0, #4
 80016ec:	f000 fc82 	bl	8001ff4 <HAL_MPU_Enable>

}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_MspInit+0x30>)
 800170c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001710:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_MspInit+0x30>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_MspInit+0x30>)
 800171c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	58024400 	.word	0x58024400

08001738 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0ba      	sub	sp, #232	@ 0xe8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	22c0      	movs	r2, #192	@ 0xc0
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f00d fe01 	bl	800f360 <memset>
  if(huart->Instance==USART1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2b      	ldr	r2, [pc, #172]	@ (8001810 <HAL_UART_MspInit+0xd8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d14e      	bne.n	8001806 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001768:	f04f 0201 	mov.w	r2, #1
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fe94 	bl	80054ac <HAL_RCCEx_PeriphCLKConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800178a:	f7ff ffb5 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_UART_MspInit+0xdc>)
 8001790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001794:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <HAL_UART_MspInit+0xdc>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_UART_MspInit+0xdc>)
 80017a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_UART_MspInit+0xdc>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b2:	4a18      	ldr	r2, [pc, #96]	@ (8001814 <HAL_UART_MspInit+0xdc>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_UART_MspInit+0xdc>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e4:	2307      	movs	r3, #7
 80017e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4809      	ldr	r0, [pc, #36]	@ (8001818 <HAL_UART_MspInit+0xe0>)
 80017f2:	f001 f9c3 	bl	8002b7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2101      	movs	r1, #1
 80017fa:	2025      	movs	r0, #37	@ 0x25
 80017fc:	f000 fbad 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001800:	2025      	movs	r0, #37	@ 0x25
 8001802:	f000 fbc4 	bl	8001f8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001806:	bf00      	nop
 8001808:	37e8      	adds	r7, #232	@ 0xe8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40011000 	.word	0x40011000
 8001814:	58024400 	.word	0x58024400
 8001818:	58020000 	.word	0x58020000

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <NMI_Handler+0x4>

08001824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <MemManage_Handler+0x4>

08001834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <UsageFault_Handler+0x4>

08001844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 fa47 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <USART1_IRQHandler+0x10>)
 8001882:	f005 fcdb 	bl	800723c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	24001bbc 	.word	0x24001bbc

08001890 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8001896:	f001 fc7b 	bl	8003190 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24003138 	.word	0x24003138

080018a4 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 80018aa:	f001 fc71 	bl	8003190 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24003138 	.word	0x24003138

080018b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <OTG_FS_IRQHandler+0x10>)
 80018be:	f001 fc67 	bl	8003190 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	24003138 	.word	0x24003138

080018cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_kill>:

int _kill(int pid, int sig)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e6:	f00d fd9f 	bl	800f428 <__errno>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2216      	movs	r2, #22
 80018ee:	601a      	str	r2, [r3, #0]
  return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_exit>:

void _exit (int status)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ffe7 	bl	80018dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800190e:	bf00      	nop
 8001910:	e7fd      	b.n	800190e <_exit+0x12>

08001912 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e00a      	b.n	800193a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001924:	f3af 8000 	nop.w
 8001928:	4601      	mov	r1, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	60ba      	str	r2, [r7, #8]
 8001930:	b2ca      	uxtb	r2, r1
 8001932:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	dbf0      	blt.n	8001924 <_read+0x12>
  }

  return len;
 8001942:	687b      	ldr	r3, [r7, #4]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e009      	b.n	8001972 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	60ba      	str	r2, [r7, #8]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fccb 	bl	8001302 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbf1      	blt.n	800195e <_write+0x12>
  }
  return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_close>:

int _close(int file)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ac:	605a      	str	r2, [r3, #4]
  return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_isatty>:

int _isatty(int file)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	@ (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f00d fd04 	bl	800f428 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	24080000 	.word	0x24080000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	24001c50 	.word	0x24001c50
 8001a54:	24003988 	.word	0x24003988

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b43      	ldr	r3, [pc, #268]	@ (8001b6c <SystemInit+0x114>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a62:	4a42      	ldr	r2, [pc, #264]	@ (8001b6c <SystemInit+0x114>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a6c:	4b40      	ldr	r3, [pc, #256]	@ (8001b70 <SystemInit+0x118>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	2b06      	cmp	r3, #6
 8001a76:	d807      	bhi.n	8001a88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a78:	4b3d      	ldr	r3, [pc, #244]	@ (8001b70 <SystemInit+0x118>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 030f 	bic.w	r3, r3, #15
 8001a80:	4a3b      	ldr	r2, [pc, #236]	@ (8001b70 <SystemInit+0x118>)
 8001a82:	f043 0307 	orr.w	r3, r3, #7
 8001a86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a88:	4b3a      	ldr	r3, [pc, #232]	@ (8001b74 <SystemInit+0x11c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a39      	ldr	r2, [pc, #228]	@ (8001b74 <SystemInit+0x11c>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a94:	4b37      	ldr	r3, [pc, #220]	@ (8001b74 <SystemInit+0x11c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a9a:	4b36      	ldr	r3, [pc, #216]	@ (8001b74 <SystemInit+0x11c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4935      	ldr	r1, [pc, #212]	@ (8001b74 <SystemInit+0x11c>)
 8001aa0:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <SystemInit+0x120>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aa6:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <SystemInit+0x118>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <SystemInit+0x118>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 030f 	bic.w	r3, r3, #15
 8001aba:	4a2d      	ldr	r2, [pc, #180]	@ (8001b70 <SystemInit+0x118>)
 8001abc:	f043 0307 	orr.w	r3, r3, #7
 8001ac0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b74 <SystemInit+0x11c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <SystemInit+0x11c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ace:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <SystemInit+0x11c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <SystemInit+0x11c>)
 8001ad6:	4a29      	ldr	r2, [pc, #164]	@ (8001b7c <SystemInit+0x124>)
 8001ad8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <SystemInit+0x11c>)
 8001adc:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <SystemInit+0x128>)
 8001ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <SystemInit+0x11c>)
 8001ae2:	4a28      	ldr	r2, [pc, #160]	@ (8001b84 <SystemInit+0x12c>)
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <SystemInit+0x11c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001aec:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <SystemInit+0x11c>)
 8001aee:	4a25      	ldr	r2, [pc, #148]	@ (8001b84 <SystemInit+0x12c>)
 8001af0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <SystemInit+0x11c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001af8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <SystemInit+0x11c>)
 8001afa:	4a22      	ldr	r2, [pc, #136]	@ (8001b84 <SystemInit+0x12c>)
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <SystemInit+0x11c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <SystemInit+0x11c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	@ (8001b74 <SystemInit+0x11c>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <SystemInit+0x11c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <SystemInit+0x130>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <SystemInit+0x134>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b22:	d202      	bcs.n	8001b2a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <SystemInit+0x138>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <SystemInit+0x11c>)
 8001b2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d113      	bne.n	8001b60 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <SystemInit+0x11c>)
 8001b3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <SystemInit+0x11c>)
 8001b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <SystemInit+0x13c>)
 8001b4a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <SystemInit+0x11c>)
 8001b52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b56:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <SystemInit+0x11c>)
 8001b58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b5c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00
 8001b70:	52002000 	.word	0x52002000
 8001b74:	58024400 	.word	0x58024400
 8001b78:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b7c:	02020200 	.word	0x02020200
 8001b80:	01ff0000 	.word	0x01ff0000
 8001b84:	01010280 	.word	0x01010280
 8001b88:	5c001000 	.word	0x5c001000
 8001b8c:	ffff0000 	.word	0xffff0000
 8001b90:	51008108 	.word	0x51008108
 8001b94:	52004000 	.word	0x52004000

08001b98 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <ExitRun0Mode+0x2c>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <ExitRun0Mode+0x2c>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001ba8:	bf00      	nop
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <ExitRun0Mode+0x2c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f9      	beq.n	8001baa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	58024800 	.word	0x58024800

08001bc8 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:


                                   ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001c04 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001bcc:	f7ff ffe4 	bl	8001b98 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd0:	f7ff ff42 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f00d fc1b 	bl	800f434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff fc21 	bl	8001444 <main>
  bx  lr
 8001c02:	4770      	bx	lr
                                   ldr   sp, =_estack      /* set stack pointer */
 8001c04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c0c:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8001c10:	08011e28 	.word	0x08011e28
  ldr r2, =_sbss
 8001c14:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8001c18:	24003988 	.word	0x24003988

08001c1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC3_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f000 f98c 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c2c:	f003 fa6a 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <HAL_Init+0x68>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	4913      	ldr	r1, [pc, #76]	@ (8001c8c <HAL_Init+0x6c>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <HAL_Init+0x68>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <HAL_Init+0x6c>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <HAL_Init+0x70>)
 8001c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c64:	4a0b      	ldr	r2, [pc, #44]	@ (8001c94 <HAL_Init+0x74>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6a:	200f      	movs	r0, #15
 8001c6c:	f000 f814 	bl	8001c98 <HAL_InitTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e002      	b.n	8001c80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7a:	f7ff fd43 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	080119bc 	.word	0x080119bc
 8001c90:	24000004 	.word	0x24000004
 8001c94:	24000000 	.word	0x24000000

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <HAL_InitTick+0x60>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e021      	b.n	8001cf0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HAL_InitTick+0x64>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <HAL_InitTick+0x60>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f971 	bl	8001faa <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 f93b 	bl	8001f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	@ (8001d00 <HAL_InitTick+0x68>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2400000c 	.word	0x2400000c
 8001cfc:	24000000 	.word	0x24000000
 8001d00:	24000008 	.word	0x24000008

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	2400000c 	.word	0x2400000c
 8001d28:	24001c54 	.word	0x24001c54

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	24001c54 	.word	0x24001c54

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2400000c 	.word	0x2400000c

08001d8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetREVID+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0c1b      	lsrs	r3, r3, #16
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	5c001000 	.word	0x5c001000

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x40>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00
 8001de8:	05fa0000 	.word	0x05fa0000

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db0b      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4907      	ldr	r1, [pc, #28]	@ (8001e40 <__NVIC_EnableIRQ+0x38>)
 8001e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	@ (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	@ (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	@ 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
         );
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	@ 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f7ff ff8e 	bl	8001e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff29 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff40 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff90 	bl	8001e98 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5f 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff33 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa4 	bl	8001f00 <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001fc8:	f3bf 8f5f 	dmb	sy
}
 8001fcc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001fce:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <HAL_MPU_Disable+0x28>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	4a06      	ldr	r2, [pc, #24]	@ (8001fec <HAL_MPU_Disable+0x28>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001fda:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <HAL_MPU_Disable+0x2c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00
 8001ff0:	e000ed90 	.word	0xe000ed90

08001ff4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <HAL_MPU_Enable+0x38>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_MPU_Enable+0x3c>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <HAL_MPU_Enable+0x3c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002010:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002012:	f3bf 8f4f 	dsb	sy
}
 8002016:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002018:	f3bf 8f6f 	isb	sy
}
 800201c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed90 	.word	0xe000ed90
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	785a      	ldrb	r2, [r3, #1]
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002042:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_MPU_ConfigRegion+0x7c>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002050:	4a17      	ldr	r2, [pc, #92]	@ (80020b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7b1b      	ldrb	r3, [r3, #12]
 800205c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7adb      	ldrb	r3, [r3, #11]
 8002062:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002064:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7a9b      	ldrb	r3, [r3, #10]
 800206a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800206c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7b5b      	ldrb	r3, [r3, #13]
 8002072:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002074:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7b9b      	ldrb	r3, [r3, #14]
 800207a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800207c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7bdb      	ldrb	r3, [r3, #15]
 8002082:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002084:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7a5b      	ldrb	r3, [r3, #9]
 800208a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800208c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7a1b      	ldrb	r3, [r3, #8]
 8002092:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002094:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800209e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020a0:	6113      	str	r3, [r2, #16]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed90 	.word	0xe000ed90

080020b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff fe36 	bl	8001d2c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e2dc      	b.n	8002686 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d008      	beq.n	80020ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2280      	movs	r2, #128	@ 0x80
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e2cd      	b.n	8002686 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a76      	ldr	r2, [pc, #472]	@ (80022c8 <HAL_DMA_Abort+0x214>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d04a      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a74      	ldr	r2, [pc, #464]	@ (80022cc <HAL_DMA_Abort+0x218>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d045      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a73      	ldr	r2, [pc, #460]	@ (80022d0 <HAL_DMA_Abort+0x21c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d040      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a71      	ldr	r2, [pc, #452]	@ (80022d4 <HAL_DMA_Abort+0x220>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d03b      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a70      	ldr	r2, [pc, #448]	@ (80022d8 <HAL_DMA_Abort+0x224>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d036      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a6e      	ldr	r2, [pc, #440]	@ (80022dc <HAL_DMA_Abort+0x228>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d031      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6d      	ldr	r2, [pc, #436]	@ (80022e0 <HAL_DMA_Abort+0x22c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d02c      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a6b      	ldr	r2, [pc, #428]	@ (80022e4 <HAL_DMA_Abort+0x230>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d027      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6a      	ldr	r2, [pc, #424]	@ (80022e8 <HAL_DMA_Abort+0x234>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a68      	ldr	r2, [pc, #416]	@ (80022ec <HAL_DMA_Abort+0x238>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01d      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a67      	ldr	r2, [pc, #412]	@ (80022f0 <HAL_DMA_Abort+0x23c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d018      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a65      	ldr	r2, [pc, #404]	@ (80022f4 <HAL_DMA_Abort+0x240>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a64      	ldr	r2, [pc, #400]	@ (80022f8 <HAL_DMA_Abort+0x244>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00e      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a62      	ldr	r2, [pc, #392]	@ (80022fc <HAL_DMA_Abort+0x248>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a61      	ldr	r2, [pc, #388]	@ (8002300 <HAL_DMA_Abort+0x24c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_DMA_Abort+0xd6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a5f      	ldr	r2, [pc, #380]	@ (8002304 <HAL_DMA_Abort+0x250>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_DMA_Abort+0xda>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_DMA_Abort+0xdc>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 021e 	bic.w	r2, r2, #30
 80021a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e00a      	b.n	80021d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 020e 	bic.w	r2, r2, #14
 80021ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a3c      	ldr	r2, [pc, #240]	@ (80022c8 <HAL_DMA_Abort+0x214>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d072      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a3a      	ldr	r2, [pc, #232]	@ (80022cc <HAL_DMA_Abort+0x218>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d06d      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a39      	ldr	r2, [pc, #228]	@ (80022d0 <HAL_DMA_Abort+0x21c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d068      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a37      	ldr	r2, [pc, #220]	@ (80022d4 <HAL_DMA_Abort+0x220>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d063      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a36      	ldr	r2, [pc, #216]	@ (80022d8 <HAL_DMA_Abort+0x224>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d05e      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a34      	ldr	r2, [pc, #208]	@ (80022dc <HAL_DMA_Abort+0x228>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d059      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a33      	ldr	r2, [pc, #204]	@ (80022e0 <HAL_DMA_Abort+0x22c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d054      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a31      	ldr	r2, [pc, #196]	@ (80022e4 <HAL_DMA_Abort+0x230>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d04f      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a30      	ldr	r2, [pc, #192]	@ (80022e8 <HAL_DMA_Abort+0x234>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04a      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2e      	ldr	r2, [pc, #184]	@ (80022ec <HAL_DMA_Abort+0x238>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d045      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <HAL_DMA_Abort+0x23c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d040      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2b      	ldr	r2, [pc, #172]	@ (80022f4 <HAL_DMA_Abort+0x240>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d03b      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2a      	ldr	r2, [pc, #168]	@ (80022f8 <HAL_DMA_Abort+0x244>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d036      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a28      	ldr	r2, [pc, #160]	@ (80022fc <HAL_DMA_Abort+0x248>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d031      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a27      	ldr	r2, [pc, #156]	@ (8002300 <HAL_DMA_Abort+0x24c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d02c      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a25      	ldr	r2, [pc, #148]	@ (8002304 <HAL_DMA_Abort+0x250>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d027      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a24      	ldr	r2, [pc, #144]	@ (8002308 <HAL_DMA_Abort+0x254>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a22      	ldr	r2, [pc, #136]	@ (800230c <HAL_DMA_Abort+0x258>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <HAL_DMA_Abort+0x25c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <HAL_DMA_Abort+0x260>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1e      	ldr	r2, [pc, #120]	@ (8002318 <HAL_DMA_Abort+0x264>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <HAL_DMA_Abort+0x268>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002320 <HAL_DMA_Abort+0x26c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_DMA_Abort+0x20e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_DMA_Abort+0x270>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d132      	bne.n	8002328 <HAL_DMA_Abort+0x274>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e031      	b.n	800232a <HAL_DMA_Abort+0x276>
 80022c6:	bf00      	nop
 80022c8:	40020010 	.word	0x40020010
 80022cc:	40020028 	.word	0x40020028
 80022d0:	40020040 	.word	0x40020040
 80022d4:	40020058 	.word	0x40020058
 80022d8:	40020070 	.word	0x40020070
 80022dc:	40020088 	.word	0x40020088
 80022e0:	400200a0 	.word	0x400200a0
 80022e4:	400200b8 	.word	0x400200b8
 80022e8:	40020410 	.word	0x40020410
 80022ec:	40020428 	.word	0x40020428
 80022f0:	40020440 	.word	0x40020440
 80022f4:	40020458 	.word	0x40020458
 80022f8:	40020470 	.word	0x40020470
 80022fc:	40020488 	.word	0x40020488
 8002300:	400204a0 	.word	0x400204a0
 8002304:	400204b8 	.word	0x400204b8
 8002308:	58025408 	.word	0x58025408
 800230c:	5802541c 	.word	0x5802541c
 8002310:	58025430 	.word	0x58025430
 8002314:	58025444 	.word	0x58025444
 8002318:	58025458 	.word	0x58025458
 800231c:	5802546c 	.word	0x5802546c
 8002320:	58025480 	.word	0x58025480
 8002324:	58025494 	.word	0x58025494
 8002328:	2300      	movs	r3, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800233c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6d      	ldr	r2, [pc, #436]	@ (80024f8 <HAL_DMA_Abort+0x444>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d04a      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6b      	ldr	r2, [pc, #428]	@ (80024fc <HAL_DMA_Abort+0x448>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d045      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6a      	ldr	r2, [pc, #424]	@ (8002500 <HAL_DMA_Abort+0x44c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d040      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a68      	ldr	r2, [pc, #416]	@ (8002504 <HAL_DMA_Abort+0x450>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d03b      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a67      	ldr	r2, [pc, #412]	@ (8002508 <HAL_DMA_Abort+0x454>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d036      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a65      	ldr	r2, [pc, #404]	@ (800250c <HAL_DMA_Abort+0x458>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d031      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a64      	ldr	r2, [pc, #400]	@ (8002510 <HAL_DMA_Abort+0x45c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d02c      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a62      	ldr	r2, [pc, #392]	@ (8002514 <HAL_DMA_Abort+0x460>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d027      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a61      	ldr	r2, [pc, #388]	@ (8002518 <HAL_DMA_Abort+0x464>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a5f      	ldr	r2, [pc, #380]	@ (800251c <HAL_DMA_Abort+0x468>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002520 <HAL_DMA_Abort+0x46c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d018      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002524 <HAL_DMA_Abort+0x470>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002528 <HAL_DMA_Abort+0x474>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a59      	ldr	r2, [pc, #356]	@ (800252c <HAL_DMA_Abort+0x478>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a58      	ldr	r2, [pc, #352]	@ (8002530 <HAL_DMA_Abort+0x47c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_DMA_Abort+0x32a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a56      	ldr	r2, [pc, #344]	@ (8002534 <HAL_DMA_Abort+0x480>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d108      	bne.n	80023f0 <HAL_DMA_Abort+0x33c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e007      	b.n	8002400 <HAL_DMA_Abort+0x34c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002400:	e013      	b.n	800242a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002402:	f7ff fc93 	bl	8001d2c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b05      	cmp	r3, #5
 800240e:	d90c      	bls.n	800242a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2203      	movs	r2, #3
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e12d      	b.n	8002686 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e5      	bne.n	8002402 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2f      	ldr	r2, [pc, #188]	@ (80024f8 <HAL_DMA_Abort+0x444>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d04a      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2d      	ldr	r2, [pc, #180]	@ (80024fc <HAL_DMA_Abort+0x448>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d045      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a2c      	ldr	r2, [pc, #176]	@ (8002500 <HAL_DMA_Abort+0x44c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d040      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2a      	ldr	r2, [pc, #168]	@ (8002504 <HAL_DMA_Abort+0x450>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d03b      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a29      	ldr	r2, [pc, #164]	@ (8002508 <HAL_DMA_Abort+0x454>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d036      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a27      	ldr	r2, [pc, #156]	@ (800250c <HAL_DMA_Abort+0x458>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d031      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a26      	ldr	r2, [pc, #152]	@ (8002510 <HAL_DMA_Abort+0x45c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d02c      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a24      	ldr	r2, [pc, #144]	@ (8002514 <HAL_DMA_Abort+0x460>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d027      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a23      	ldr	r2, [pc, #140]	@ (8002518 <HAL_DMA_Abort+0x464>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d022      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a21      	ldr	r2, [pc, #132]	@ (800251c <HAL_DMA_Abort+0x468>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01d      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a20      	ldr	r2, [pc, #128]	@ (8002520 <HAL_DMA_Abort+0x46c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d018      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <HAL_DMA_Abort+0x470>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <HAL_DMA_Abort+0x474>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00e      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1b      	ldr	r2, [pc, #108]	@ (800252c <HAL_DMA_Abort+0x478>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d009      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002530 <HAL_DMA_Abort+0x47c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d004      	beq.n	80024d6 <HAL_DMA_Abort+0x422>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a18      	ldr	r2, [pc, #96]	@ (8002534 <HAL_DMA_Abort+0x480>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_DMA_Abort+0x426>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_DMA_Abort+0x428>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d02b      	beq.n	8002538 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	223f      	movs	r2, #63	@ 0x3f
 80024f0:	409a      	lsls	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	e02a      	b.n	800254e <HAL_DMA_Abort+0x49a>
 80024f8:	40020010 	.word	0x40020010
 80024fc:	40020028 	.word	0x40020028
 8002500:	40020040 	.word	0x40020040
 8002504:	40020058 	.word	0x40020058
 8002508:	40020070 	.word	0x40020070
 800250c:	40020088 	.word	0x40020088
 8002510:	400200a0 	.word	0x400200a0
 8002514:	400200b8 	.word	0x400200b8
 8002518:	40020410 	.word	0x40020410
 800251c:	40020428 	.word	0x40020428
 8002520:	40020440 	.word	0x40020440
 8002524:	40020458 	.word	0x40020458
 8002528:	40020470 	.word	0x40020470
 800252c:	40020488 	.word	0x40020488
 8002530:	400204a0 	.word	0x400204a0
 8002534:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2201      	movs	r2, #1
 8002548:	409a      	lsls	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a4f      	ldr	r2, [pc, #316]	@ (8002690 <HAL_DMA_Abort+0x5dc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d072      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a4d      	ldr	r2, [pc, #308]	@ (8002694 <HAL_DMA_Abort+0x5e0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d06d      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a4c      	ldr	r2, [pc, #304]	@ (8002698 <HAL_DMA_Abort+0x5e4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d068      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a4a      	ldr	r2, [pc, #296]	@ (800269c <HAL_DMA_Abort+0x5e8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d063      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a49      	ldr	r2, [pc, #292]	@ (80026a0 <HAL_DMA_Abort+0x5ec>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d05e      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a47      	ldr	r2, [pc, #284]	@ (80026a4 <HAL_DMA_Abort+0x5f0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d059      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a46      	ldr	r2, [pc, #280]	@ (80026a8 <HAL_DMA_Abort+0x5f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d054      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a44      	ldr	r2, [pc, #272]	@ (80026ac <HAL_DMA_Abort+0x5f8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d04f      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a43      	ldr	r2, [pc, #268]	@ (80026b0 <HAL_DMA_Abort+0x5fc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d04a      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a41      	ldr	r2, [pc, #260]	@ (80026b4 <HAL_DMA_Abort+0x600>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d045      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a40      	ldr	r2, [pc, #256]	@ (80026b8 <HAL_DMA_Abort+0x604>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d040      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a3e      	ldr	r2, [pc, #248]	@ (80026bc <HAL_DMA_Abort+0x608>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d03b      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a3d      	ldr	r2, [pc, #244]	@ (80026c0 <HAL_DMA_Abort+0x60c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d036      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a3b      	ldr	r2, [pc, #236]	@ (80026c4 <HAL_DMA_Abort+0x610>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d031      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a3a      	ldr	r2, [pc, #232]	@ (80026c8 <HAL_DMA_Abort+0x614>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d02c      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a38      	ldr	r2, [pc, #224]	@ (80026cc <HAL_DMA_Abort+0x618>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d027      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a37      	ldr	r2, [pc, #220]	@ (80026d0 <HAL_DMA_Abort+0x61c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d022      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a35      	ldr	r2, [pc, #212]	@ (80026d4 <HAL_DMA_Abort+0x620>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01d      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a34      	ldr	r2, [pc, #208]	@ (80026d8 <HAL_DMA_Abort+0x624>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d018      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a32      	ldr	r2, [pc, #200]	@ (80026dc <HAL_DMA_Abort+0x628>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a31      	ldr	r2, [pc, #196]	@ (80026e0 <HAL_DMA_Abort+0x62c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00e      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2f      	ldr	r2, [pc, #188]	@ (80026e4 <HAL_DMA_Abort+0x630>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d009      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2e      	ldr	r2, [pc, #184]	@ (80026e8 <HAL_DMA_Abort+0x634>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d004      	beq.n	800263e <HAL_DMA_Abort+0x58a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2c      	ldr	r2, [pc, #176]	@ (80026ec <HAL_DMA_Abort+0x638>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_DMA_Abort+0x58e>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_DMA_Abort+0x590>
 8002642:	2300      	movs	r3, #0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002650:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002668:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002672:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40020010 	.word	0x40020010
 8002694:	40020028 	.word	0x40020028
 8002698:	40020040 	.word	0x40020040
 800269c:	40020058 	.word	0x40020058
 80026a0:	40020070 	.word	0x40020070
 80026a4:	40020088 	.word	0x40020088
 80026a8:	400200a0 	.word	0x400200a0
 80026ac:	400200b8 	.word	0x400200b8
 80026b0:	40020410 	.word	0x40020410
 80026b4:	40020428 	.word	0x40020428
 80026b8:	40020440 	.word	0x40020440
 80026bc:	40020458 	.word	0x40020458
 80026c0:	40020470 	.word	0x40020470
 80026c4:	40020488 	.word	0x40020488
 80026c8:	400204a0 	.word	0x400204a0
 80026cc:	400204b8 	.word	0x400204b8
 80026d0:	58025408 	.word	0x58025408
 80026d4:	5802541c 	.word	0x5802541c
 80026d8:	58025430 	.word	0x58025430
 80026dc:	58025444 	.word	0x58025444
 80026e0:	58025458 	.word	0x58025458
 80026e4:	5802546c 	.word	0x5802546c
 80026e8:	58025480 	.word	0x58025480
 80026ec:	58025494 	.word	0x58025494

080026f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e237      	b.n	8002b72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d004      	beq.n	8002718 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e22c      	b.n	8002b72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5c      	ldr	r2, [pc, #368]	@ (8002890 <HAL_DMA_Abort_IT+0x1a0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d04a      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5b      	ldr	r2, [pc, #364]	@ (8002894 <HAL_DMA_Abort_IT+0x1a4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d045      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a59      	ldr	r2, [pc, #356]	@ (8002898 <HAL_DMA_Abort_IT+0x1a8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d040      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a58      	ldr	r2, [pc, #352]	@ (800289c <HAL_DMA_Abort_IT+0x1ac>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d03b      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a56      	ldr	r2, [pc, #344]	@ (80028a0 <HAL_DMA_Abort_IT+0x1b0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d036      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a55      	ldr	r2, [pc, #340]	@ (80028a4 <HAL_DMA_Abort_IT+0x1b4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d031      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a53      	ldr	r2, [pc, #332]	@ (80028a8 <HAL_DMA_Abort_IT+0x1b8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d02c      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a52      	ldr	r2, [pc, #328]	@ (80028ac <HAL_DMA_Abort_IT+0x1bc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d027      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a50      	ldr	r2, [pc, #320]	@ (80028b0 <HAL_DMA_Abort_IT+0x1c0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d022      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a4f      	ldr	r2, [pc, #316]	@ (80028b4 <HAL_DMA_Abort_IT+0x1c4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d01d      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a4d      	ldr	r2, [pc, #308]	@ (80028b8 <HAL_DMA_Abort_IT+0x1c8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d018      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a4c      	ldr	r2, [pc, #304]	@ (80028bc <HAL_DMA_Abort_IT+0x1cc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d013      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_DMA_Abort_IT+0x1d0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00e      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a49      	ldr	r2, [pc, #292]	@ (80028c4 <HAL_DMA_Abort_IT+0x1d4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d009      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a47      	ldr	r2, [pc, #284]	@ (80028c8 <HAL_DMA_Abort_IT+0x1d8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d004      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a46      	ldr	r2, [pc, #280]	@ (80028cc <HAL_DMA_Abort_IT+0x1dc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_DMA_Abort_IT+0xcc>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_DMA_Abort_IT+0xce>
 80027bc:	2300      	movs	r3, #0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8086 	beq.w	80028d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002890 <HAL_DMA_Abort_IT+0x1a0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04a      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2e      	ldr	r2, [pc, #184]	@ (8002894 <HAL_DMA_Abort_IT+0x1a4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d045      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002898 <HAL_DMA_Abort_IT+0x1a8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d040      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2b      	ldr	r2, [pc, #172]	@ (800289c <HAL_DMA_Abort_IT+0x1ac>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d03b      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a29      	ldr	r2, [pc, #164]	@ (80028a0 <HAL_DMA_Abort_IT+0x1b0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d036      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <HAL_DMA_Abort_IT+0x1b4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d031      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a26      	ldr	r2, [pc, #152]	@ (80028a8 <HAL_DMA_Abort_IT+0x1b8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02c      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a25      	ldr	r2, [pc, #148]	@ (80028ac <HAL_DMA_Abort_IT+0x1bc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d027      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a23      	ldr	r2, [pc, #140]	@ (80028b0 <HAL_DMA_Abort_IT+0x1c0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d022      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a22      	ldr	r2, [pc, #136]	@ (80028b4 <HAL_DMA_Abort_IT+0x1c4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a20      	ldr	r2, [pc, #128]	@ (80028b8 <HAL_DMA_Abort_IT+0x1c8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d018      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <HAL_DMA_Abort_IT+0x1cc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <HAL_DMA_Abort_IT+0x1d0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1c      	ldr	r2, [pc, #112]	@ (80028c4 <HAL_DMA_Abort_IT+0x1d4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1a      	ldr	r2, [pc, #104]	@ (80028c8 <HAL_DMA_Abort_IT+0x1d8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_DMA_Abort_IT+0x17c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <HAL_DMA_Abort_IT+0x1dc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d108      	bne.n	800287e <HAL_DMA_Abort_IT+0x18e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e178      	b.n	8002b70 <HAL_DMA_Abort_IT+0x480>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e16f      	b.n	8002b70 <HAL_DMA_Abort_IT+0x480>
 8002890:	40020010 	.word	0x40020010
 8002894:	40020028 	.word	0x40020028
 8002898:	40020040 	.word	0x40020040
 800289c:	40020058 	.word	0x40020058
 80028a0:	40020070 	.word	0x40020070
 80028a4:	40020088 	.word	0x40020088
 80028a8:	400200a0 	.word	0x400200a0
 80028ac:	400200b8 	.word	0x400200b8
 80028b0:	40020410 	.word	0x40020410
 80028b4:	40020428 	.word	0x40020428
 80028b8:	40020440 	.word	0x40020440
 80028bc:	40020458 	.word	0x40020458
 80028c0:	40020470 	.word	0x40020470
 80028c4:	40020488 	.word	0x40020488
 80028c8:	400204a0 	.word	0x400204a0
 80028cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 020e 	bic.w	r2, r2, #14
 80028de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a6c      	ldr	r2, [pc, #432]	@ (8002a98 <HAL_DMA_Abort_IT+0x3a8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d04a      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6b      	ldr	r2, [pc, #428]	@ (8002a9c <HAL_DMA_Abort_IT+0x3ac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d045      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a69      	ldr	r2, [pc, #420]	@ (8002aa0 <HAL_DMA_Abort_IT+0x3b0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d040      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a68      	ldr	r2, [pc, #416]	@ (8002aa4 <HAL_DMA_Abort_IT+0x3b4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d03b      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a66      	ldr	r2, [pc, #408]	@ (8002aa8 <HAL_DMA_Abort_IT+0x3b8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d036      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a65      	ldr	r2, [pc, #404]	@ (8002aac <HAL_DMA_Abort_IT+0x3bc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d031      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a63      	ldr	r2, [pc, #396]	@ (8002ab0 <HAL_DMA_Abort_IT+0x3c0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02c      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a62      	ldr	r2, [pc, #392]	@ (8002ab4 <HAL_DMA_Abort_IT+0x3c4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d027      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a60      	ldr	r2, [pc, #384]	@ (8002ab8 <HAL_DMA_Abort_IT+0x3c8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d022      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5f      	ldr	r2, [pc, #380]	@ (8002abc <HAL_DMA_Abort_IT+0x3cc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d01d      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac0 <HAL_DMA_Abort_IT+0x3d0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac4 <HAL_DMA_Abort_IT+0x3d4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac8 <HAL_DMA_Abort_IT+0x3d8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a59      	ldr	r2, [pc, #356]	@ (8002acc <HAL_DMA_Abort_IT+0x3dc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a57      	ldr	r2, [pc, #348]	@ (8002ad0 <HAL_DMA_Abort_IT+0x3e0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_DMA_Abort_IT+0x290>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a56      	ldr	r2, [pc, #344]	@ (8002ad4 <HAL_DMA_Abort_IT+0x3e4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d108      	bne.n	8002992 <HAL_DMA_Abort_IT+0x2a2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e007      	b.n	80029a2 <HAL_DMA_Abort_IT+0x2b2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002a98 <HAL_DMA_Abort_IT+0x3a8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d072      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3a      	ldr	r2, [pc, #232]	@ (8002a9c <HAL_DMA_Abort_IT+0x3ac>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d06d      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a39      	ldr	r2, [pc, #228]	@ (8002aa0 <HAL_DMA_Abort_IT+0x3b0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d068      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a37      	ldr	r2, [pc, #220]	@ (8002aa4 <HAL_DMA_Abort_IT+0x3b4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d063      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a36      	ldr	r2, [pc, #216]	@ (8002aa8 <HAL_DMA_Abort_IT+0x3b8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d05e      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a34      	ldr	r2, [pc, #208]	@ (8002aac <HAL_DMA_Abort_IT+0x3bc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d059      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a33      	ldr	r2, [pc, #204]	@ (8002ab0 <HAL_DMA_Abort_IT+0x3c0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d054      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a31      	ldr	r2, [pc, #196]	@ (8002ab4 <HAL_DMA_Abort_IT+0x3c4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d04f      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a30      	ldr	r2, [pc, #192]	@ (8002ab8 <HAL_DMA_Abort_IT+0x3c8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d04a      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <HAL_DMA_Abort_IT+0x3cc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d045      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac0 <HAL_DMA_Abort_IT+0x3d0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d040      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac4 <HAL_DMA_Abort_IT+0x3d4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d03b      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac8 <HAL_DMA_Abort_IT+0x3d8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d036      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a28      	ldr	r2, [pc, #160]	@ (8002acc <HAL_DMA_Abort_IT+0x3dc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d031      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <HAL_DMA_Abort_IT+0x3e0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d02c      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a25      	ldr	r2, [pc, #148]	@ (8002ad4 <HAL_DMA_Abort_IT+0x3e4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d027      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a24      	ldr	r2, [pc, #144]	@ (8002ad8 <HAL_DMA_Abort_IT+0x3e8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d022      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <HAL_DMA_Abort_IT+0x3ec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01d      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ae0 <HAL_DMA_Abort_IT+0x3f0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae4 <HAL_DMA_Abort_IT+0x3f4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae8 <HAL_DMA_Abort_IT+0x3f8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00e      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <HAL_DMA_Abort_IT+0x3fc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <HAL_DMA_Abort_IT+0x400>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x3a2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	@ (8002af4 <HAL_DMA_Abort_IT+0x404>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d132      	bne.n	8002af8 <HAL_DMA_Abort_IT+0x408>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e031      	b.n	8002afa <HAL_DMA_Abort_IT+0x40a>
 8002a96:	bf00      	nop
 8002a98:	40020010 	.word	0x40020010
 8002a9c:	40020028 	.word	0x40020028
 8002aa0:	40020040 	.word	0x40020040
 8002aa4:	40020058 	.word	0x40020058
 8002aa8:	40020070 	.word	0x40020070
 8002aac:	40020088 	.word	0x40020088
 8002ab0:	400200a0 	.word	0x400200a0
 8002ab4:	400200b8 	.word	0x400200b8
 8002ab8:	40020410 	.word	0x40020410
 8002abc:	40020428 	.word	0x40020428
 8002ac0:	40020440 	.word	0x40020440
 8002ac4:	40020458 	.word	0x40020458
 8002ac8:	40020470 	.word	0x40020470
 8002acc:	40020488 	.word	0x40020488
 8002ad0:	400204a0 	.word	0x400204a0
 8002ad4:	400204b8 	.word	0x400204b8
 8002ad8:	58025408 	.word	0x58025408
 8002adc:	5802541c 	.word	0x5802541c
 8002ae0:	58025430 	.word	0x58025430
 8002ae4:	58025444 	.word	0x58025444
 8002ae8:	58025458 	.word	0x58025458
 8002aec:	5802546c 	.word	0x5802546c
 8002af0:	58025480 	.word	0x58025480
 8002af4:	58025494 	.word	0x58025494
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d028      	beq.n	8002b50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	@ 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b8a:	4b89      	ldr	r3, [pc, #548]	@ (8002db0 <HAL_GPIO_Init+0x234>)
 8002b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b8e:	e194      	b.n	8002eba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8186 	beq.w	8002eb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d005      	beq.n	8002bc0 <HAL_GPIO_Init+0x44>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d130      	bne.n	8002c22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0201 	and.w	r2, r3, #1
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d017      	beq.n	8002c5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d123      	bne.n	8002cb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3208      	adds	r2, #8
 8002c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0203 	and.w	r2, r3, #3
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80e0 	beq.w	8002eb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8002db4 <HAL_GPIO_Init+0x238>)
 8002cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cfa:	4a2e      	ldr	r2, [pc, #184]	@ (8002db4 <HAL_GPIO_Init+0x238>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d04:	4b2b      	ldr	r3, [pc, #172]	@ (8002db4 <HAL_GPIO_Init+0x238>)
 8002d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d12:	4a29      	ldr	r2, [pc, #164]	@ (8002db8 <HAL_GPIO_Init+0x23c>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a20      	ldr	r2, [pc, #128]	@ (8002dbc <HAL_GPIO_Init+0x240>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d052      	beq.n	8002de4 <HAL_GPIO_Init+0x268>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc0 <HAL_GPIO_Init+0x244>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d031      	beq.n	8002daa <HAL_GPIO_Init+0x22e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc4 <HAL_GPIO_Init+0x248>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02b      	beq.n	8002da6 <HAL_GPIO_Init+0x22a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc8 <HAL_GPIO_Init+0x24c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d025      	beq.n	8002da2 <HAL_GPIO_Init+0x226>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_GPIO_Init+0x250>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01f      	beq.n	8002d9e <HAL_GPIO_Init+0x222>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd0 <HAL_GPIO_Init+0x254>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d019      	beq.n	8002d9a <HAL_GPIO_Init+0x21e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd4 <HAL_GPIO_Init+0x258>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0x21a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a19      	ldr	r2, [pc, #100]	@ (8002dd8 <HAL_GPIO_Init+0x25c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00d      	beq.n	8002d92 <HAL_GPIO_Init+0x216>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a18      	ldr	r2, [pc, #96]	@ (8002ddc <HAL_GPIO_Init+0x260>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <HAL_GPIO_Init+0x212>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a17      	ldr	r2, [pc, #92]	@ (8002de0 <HAL_GPIO_Init+0x264>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_GPIO_Init+0x20e>
 8002d86:	2309      	movs	r3, #9
 8002d88:	e02d      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002d8a:	230a      	movs	r3, #10
 8002d8c:	e02b      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002d8e:	2308      	movs	r3, #8
 8002d90:	e029      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002d92:	2307      	movs	r3, #7
 8002d94:	e027      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002d96:	2306      	movs	r3, #6
 8002d98:	e025      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	e023      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	e021      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002da2:	2303      	movs	r3, #3
 8002da4:	e01f      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e01d      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e01b      	b.n	8002de6 <HAL_GPIO_Init+0x26a>
 8002dae:	bf00      	nop
 8002db0:	58000080 	.word	0x58000080
 8002db4:	58024400 	.word	0x58024400
 8002db8:	58000400 	.word	0x58000400
 8002dbc:	58020000 	.word	0x58020000
 8002dc0:	58020400 	.word	0x58020400
 8002dc4:	58020800 	.word	0x58020800
 8002dc8:	58020c00 	.word	0x58020c00
 8002dcc:	58021000 	.word	0x58021000
 8002dd0:	58021400 	.word	0x58021400
 8002dd4:	58021800 	.word	0x58021800
 8002dd8:	58021c00 	.word	0x58021c00
 8002ddc:	58022000 	.word	0x58022000
 8002de0:	58022400 	.word	0x58022400
 8002de4:	2300      	movs	r3, #0
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	f002 0203 	and.w	r2, r2, #3
 8002dec:	0092      	lsls	r2, r2, #2
 8002dee:	4093      	lsls	r3, r2
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df6:	4938      	ldr	r1, [pc, #224]	@ (8002ed8 <HAL_GPIO_Init+0x35c>)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f ae63 	bne.w	8002b90 <HAL_GPIO_Init+0x14>
  }
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	3724      	adds	r7, #36	@ 0x24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	58000400 	.word	0x58000400

08002edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eec:	787b      	ldrb	r3, [r7, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ef8:	e003      	b.n	8002f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	041a      	lsls	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af02      	add	r7, sp, #8
 8002f14:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0fe      	b.n	800311e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f00a fa03 	bl	800d340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f006 fdbd 	bl	8009ac6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7c1a      	ldrb	r2, [r3, #16]
 8002f54:	f88d 2000 	strb.w	r2, [sp]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5c:	f006 fc8e 	bl	800987c <USB_CoreInit>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0d5      	b.n	800311e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f006 fdb5 	bl	8009ae8 <USB_SetCurrentMode>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0c6      	b.n	800311e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e04a      	b.n	800302c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3315      	adds	r3, #21
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3314      	adds	r3, #20
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	b298      	uxth	r0, r3
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	332e      	adds	r3, #46	@ 0x2e
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3318      	adds	r3, #24
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	331c      	adds	r3, #28
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3320      	adds	r3, #32
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	3324      	adds	r3, #36	@ 0x24
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	3301      	adds	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	791b      	ldrb	r3, [r3, #4]
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	429a      	cmp	r2, r3
 8003034:	d3af      	bcc.n	8002f96 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	e044      	b.n	80030c6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	3301      	adds	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	791b      	ldrb	r3, [r3, #4]
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d3b5      	bcc.n	800303c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7c1a      	ldrb	r2, [r3, #16]
 80030d8:	f88d 2000 	strb.w	r2, [sp]
 80030dc:	3304      	adds	r3, #4
 80030de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e0:	f006 fd4e 	bl	8009b80 <USB_DevInit>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e013      	b.n	800311e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7b1b      	ldrb	r3, [r3, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d102      	bne.n	8003112 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f001 f96f 	bl	80043f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f007 fd91 	bl	800ac3e <USB_DevDisconnect>

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_PCD_Start+0x1c>
 800313e:	2302      	movs	r3, #2
 8003140:	e022      	b.n	8003188 <HAL_PCD_Start+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800315a:	2b01      	cmp	r3, #1
 800315c:	d105      	bne.n	800316a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f006 fc98 	bl	8009aa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f007 fd3f 	bl	800abfc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b08d      	sub	sp, #52	@ 0x34
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f007 fdfd 	bl	800ada6 <USB_GetMode>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 84b9 	bne.w	8003b26 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f007 fd61 	bl	800ac80 <USB_ReadInterrupts>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 84af 	beq.w	8003b24 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f007 fd4e 	bl	800ac80 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d107      	bne.n	80031fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f002 0202 	and.w	r2, r2, #2
 80031fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f007 fd3c 	bl	800ac80 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b10      	cmp	r3, #16
 8003210:	d161      	bne.n	80032d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0210 	bic.w	r2, r2, #16
 8003220:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003248:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800324c:	d124      	bne.n	8003298 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d035      	beq.n	80032c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	6a38      	ldr	r0, [r7, #32]
 800326e:	f007 fb73 	bl	800a958 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800327e:	441a      	add	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003290:	441a      	add	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	615a      	str	r2, [r3, #20]
 8003296:	e016      	b.n	80032c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800329e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032a2:	d110      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032aa:	2208      	movs	r2, #8
 80032ac:	4619      	mov	r1, r3
 80032ae:	6a38      	ldr	r0, [r7, #32]
 80032b0:	f007 fb52 	bl	800a958 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c0:	441a      	add	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0210 	orr.w	r2, r2, #16
 80032d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f007 fcd0 	bl	800ac80 <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032ea:	f040 80a7 	bne.w	800343c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f007 fcd5 	bl	800aca6 <USB_ReadDevAllOutEpInterrupt>
 80032fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80032fe:	e099      	b.n	8003434 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 808e 	beq.w	8003428 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f007 fcf9 	bl	800ad0e <USB_ReadDevOutEPInterrupt>
 800331c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	2301      	movs	r3, #1
 8003338:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800333a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fed1 	bl	80040e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00c      	beq.n	8003366 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	2308      	movs	r3, #8
 800335c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800335e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 ffa7 	bl	80042b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800337c:	461a      	mov	r2, r3
 800337e:	2310      	movs	r3, #16
 8003380:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d030      	beq.n	80033ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003394:	2b80      	cmp	r3, #128	@ 0x80
 8003396:	d109      	bne.n	80033ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	3304      	adds	r3, #4
 80033c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	78db      	ldrb	r3, [r3, #3]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d108      	bne.n	80033dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f00a f8e8 	bl	800d5ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	2302      	movs	r3, #2
 80033ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	2320      	movs	r3, #32
 8003408:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003420:	461a      	mov	r2, r3
 8003422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003426:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	3301      	adds	r3, #1
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	f47f af62 	bne.w	8003300 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f007 fc1d 	bl	800ac80 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800344c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003450:	f040 80db 	bne.w	800360a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f007 fc3e 	bl	800acda <USB_ReadDevAllInEpInterrupt>
 800345e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003464:	e0cd      	b.n	8003602 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80c2 	beq.w	80035f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f007 fc64 	bl	800ad4a <USB_ReadDevInEPInterrupt>
 8003482:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d057      	beq.n	800353e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	2201      	movs	r2, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69f9      	ldr	r1, [r7, #28]
 80034aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034ae:	4013      	ands	r3, r2
 80034b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034be:	461a      	mov	r2, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	799b      	ldrb	r3, [r3, #6]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d132      	bne.n	8003532 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3320      	adds	r3, #32
 80034dc:	6819      	ldr	r1, [r3, #0]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4403      	add	r3, r0
 80034ec:	331c      	adds	r3, #28
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4419      	add	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4403      	add	r3, r0
 8003500:	3320      	adds	r3, #32
 8003502:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d113      	bne.n	8003532 <HAL_PCD_IRQHandler+0x3a2>
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3324      	adds	r3, #36	@ 0x24
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d108      	bne.n	8003532 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800352a:	461a      	mov	r2, r3
 800352c:	2101      	movs	r1, #1
 800352e:	f007 fc6d 	bl	800ae0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f009 ffb2 	bl	800d4a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003554:	461a      	mov	r2, r3
 8003556:	2308      	movs	r3, #8
 8003558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003570:	461a      	mov	r2, r3
 8003572:	2310      	movs	r3, #16
 8003574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	2340      	movs	r3, #64	@ 0x40
 8003590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d023      	beq.n	80035e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800359c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800359e:	6a38      	ldr	r0, [r7, #32]
 80035a0:	f006 fc4c 	bl	8009e3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	3310      	adds	r3, #16
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	3304      	adds	r3, #4
 80035b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d108      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	4619      	mov	r1, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f009 ffff 	bl	800d5d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035de:	461a      	mov	r2, r3
 80035e0:	2302      	movs	r3, #2
 80035e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fcea 	bl	8003fca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	3301      	adds	r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	f47f af2e 	bne.w	8003466 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f007 fb36 	bl	800ac80 <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800361a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800361e:	d122      	bne.n	8003666 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800363a:	2b01      	cmp	r3, #1
 800363c:	d108      	bne.n	8003650 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003646:	2100      	movs	r1, #0
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fef5 	bl	8004438 <HAL_PCDEx_LPM_Callback>
 800364e:	e002      	b.n	8003656 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f009 ff9d 	bl	800d590 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f007 fb08 	bl	800ac80 <USB_ReadInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800367a:	d112      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d102      	bne.n	8003692 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f009 ff59 	bl	800d544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80036a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f007 faea 	bl	800ac80 <USB_ReadInterrupts>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036b6:	d121      	bne.n	80036fc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80036c6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d111      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	f003 020f 	and.w	r2, r3, #15
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80036ec:	2101      	movs	r1, #1
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fea2 	bl	8004438 <HAL_PCDEx_LPM_Callback>
 80036f4:	e002      	b.n	80036fc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f009 ff24 	bl	800d544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f007 fabd 	bl	800ac80 <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003710:	f040 80b7 	bne.w	8003882 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2110      	movs	r1, #16
 800372e:	4618      	mov	r0, r3
 8003730:	f006 fb84 	bl	8009e3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003738:	e046      	b.n	80037c8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800373a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003746:	461a      	mov	r2, r3
 8003748:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800374c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	440a      	add	r2, r1
 8003764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003768:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800376c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377a:	461a      	mov	r2, r3
 800377c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003780:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003792:	0151      	lsls	r1, r2, #5
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	440a      	add	r2, r1
 8003798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800379c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c4:	3301      	adds	r3, #1
 80037c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	791b      	ldrb	r3, [r3, #4]
 80037cc:	461a      	mov	r2, r3
 80037ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d3b2      	bcc.n	800373a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037e2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80037e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7bdb      	ldrb	r3, [r3, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d016      	beq.n	800381e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003800:	f043 030b 	orr.w	r3, r3, #11
 8003804:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003816:	f043 030b 	orr.w	r3, r3, #11
 800381a:	6453      	str	r3, [r2, #68]	@ 0x44
 800381c:	e015      	b.n	800384a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800382c:	4619      	mov	r1, r3
 800382e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003832:	4313      	orrs	r3, r2
 8003834:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003844:	f043 030b 	orr.w	r3, r3, #11
 8003848:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003858:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800385c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800386c:	461a      	mov	r2, r3
 800386e:	f007 facd 	bl	800ae0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f007 f9fa 	bl	800ac80 <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003896:	d123      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f007 fa91 	bl	800adc4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f006 fb41 	bl	8009f2e <USB_GetDevSpeed>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681c      	ldr	r4, [r3, #0]
 80038b8:	f001 fd9c 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 80038bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038c2:	461a      	mov	r2, r3
 80038c4:	4620      	mov	r0, r4
 80038c6:	f006 f84b 	bl	8009960 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f009 fe11 	bl	800d4f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80038de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f007 f9cb 	bl	800ac80 <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d10a      	bne.n	800390a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f009 fdee 	bl	800d4d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f002 0208 	and.w	r2, r2, #8
 8003908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f007 f9b6 	bl	800ac80 <USB_ReadInterrupts>
 8003914:	4603      	mov	r3, r0
 8003916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391a:	2b80      	cmp	r3, #128	@ 0x80
 800391c:	d123      	bne.n	8003966 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800392a:	2301      	movs	r3, #1
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
 800392e:	e014      	b.n	800395a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	b2db      	uxtb	r3, r3
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fb0a 	bl	8003f68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	3301      	adds	r3, #1
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	791b      	ldrb	r3, [r3, #4]
 800395e:	461a      	mov	r2, r3
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	4293      	cmp	r3, r2
 8003964:	d3e4      	bcc.n	8003930 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f007 f988 	bl	800ac80 <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800397a:	d13c      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003980:	e02b      	b.n	80039da <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3318      	adds	r3, #24
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d115      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da12      	bge.n	80039d4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	3317      	adds	r3, #23
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 faca 	bl	8003f68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	3301      	adds	r3, #1
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	791b      	ldrb	r3, [r3, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d3cd      	bcc.n	8003982 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80039f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f007 f940 	bl	800ac80 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a0a:	d156      	bne.n	8003aba <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a10:	e045      	b.n	8003a9e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d12e      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da2b      	bge.n	8003a98 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	0c1a      	lsrs	r2, r3, #16
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a4a:	4053      	eors	r3, r2
 8003a4c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d121      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a94:	6053      	str	r3, [r2, #4]
            break;
 8003a96:	e008      	b.n	8003aaa <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	791b      	ldrb	r3, [r3, #4]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d3b3      	bcc.n	8003a12 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f007 f8de 	bl	800ac80 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ace:	d10a      	bne.n	8003ae6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f009 fd8f 	bl	800d5f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f007 f8c8 	bl	800ac80 <USB_ReadInterrupts>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d115      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f009 fd7f 	bl	800d610 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e000      	b.n	8003b26 <HAL_PCD_IRQHandler+0x996>
      return;
 8003b24:	bf00      	nop
    }
  }
}
 8003b26:	3734      	adds	r7, #52	@ 0x34
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd90      	pop	{r4, r7, pc}

08003b2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_PCD_SetAddress+0x1a>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e012      	b.n	8003b6c <HAL_PCD_SetAddress+0x40>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f007 f827 	bl	800abb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	70fb      	strb	r3, [r7, #3]
 8003b86:	460b      	mov	r3, r1
 8003b88:	803b      	strh	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	da0f      	bge.n	8003bba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	3310      	adds	r3, #16
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	3304      	adds	r3, #4
 8003bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	705a      	strb	r2, [r3, #1]
 8003bb8:	e00f      	b.n	8003bda <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003be6:	883b      	ldrh	r3, [r7, #0]
 8003be8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	78ba      	ldrb	r2, [r7, #2]
 8003bf4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c08:	78bb      	ldrb	r3, [r7, #2]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d102      	bne.n	8003c14 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_PCD_EP_Open+0xae>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e00e      	b.n	8003c40 <HAL_PCD_EP_Open+0xcc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f006 f9a1 	bl	8009f78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c3e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da0f      	bge.n	8003c7c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	3310      	adds	r3, #16
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	705a      	strb	r2, [r3, #1]
 8003c7a:	e00f      	b.n	8003c9c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_PCD_EP_Close+0x6e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e00e      	b.n	8003cd4 <HAL_PCD_EP_Close+0x8c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f006 f9df 	bl	800a088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cec:	7afb      	ldrb	r3, [r7, #11]
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	3304      	adds	r3, #4
 8003d04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	799b      	ldrb	r3, [r3, #6]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d102      	bne.n	8003d38 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	799b      	ldrb	r3, [r3, #6]
 8003d40:	461a      	mov	r2, r3
 8003d42:	6979      	ldr	r1, [r7, #20]
 8003d44:	f006 fa7c 	bl	800a240 <USB_EPStartXfer>

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d74:	681b      	ldr	r3, [r3, #0]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d92:	7afb      	ldrb	r3, [r7, #11]
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	3310      	adds	r3, #16
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	3304      	adds	r3, #4
 8003da8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2200      	movs	r2, #0
 8003dba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc2:	7afb      	ldrb	r3, [r7, #11]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	799b      	ldrb	r3, [r3, #6]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d102      	bne.n	8003ddc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	799b      	ldrb	r3, [r3, #6]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6979      	ldr	r1, [r7, #20]
 8003de8:	f006 fa2a 	bl	800a240 <USB_EPStartXfer>

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	7912      	ldrb	r2, [r2, #4]
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e04f      	b.n	8003eb4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da0f      	bge.n	8003e3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f003 020f 	and.w	r2, r3, #15
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	3310      	adds	r3, #16
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	3304      	adds	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	705a      	strb	r2, [r3, #1]
 8003e3a:	e00d      	b.n	8003e58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3304      	adds	r3, #4
 8003e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_PCD_EP_SetStall+0x82>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e01d      	b.n	8003eb4 <HAL_PCD_EP_SetStall+0xbe>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68f9      	ldr	r1, [r7, #12]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f006 fdbe 	bl	800aa08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7999      	ldrb	r1, [r3, #6]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f006 ffb1 	bl	800ae0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	7912      	ldrb	r2, [r2, #4]
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e042      	b.n	8003f60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da0f      	bge.n	8003f02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	3310      	adds	r3, #16
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	705a      	strb	r2, [r3, #1]
 8003f00:	e00f      	b.n	8003f22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	3304      	adds	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_PCD_EP_ClrStall+0x86>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e00e      	b.n	8003f60 <HAL_PCD_EP_ClrStall+0xa4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f006 fdc7 	bl	800aae4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da0c      	bge.n	8003f96 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	f003 020f 	and.w	r2, r3, #15
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	e00c      	b.n	8003fb0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 020f 	and.w	r2, r3, #15
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4413      	add	r3, r2
 8003fac:	3304      	adds	r3, #4
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68f9      	ldr	r1, [r7, #12]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f006 fbe6 	bl	800a788 <USB_EPStopXfer>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b08a      	sub	sp, #40	@ 0x28
 8003fce:	af02      	add	r7, sp, #8
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3310      	adds	r3, #16
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d901      	bls.n	8004002 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e06b      	b.n	80040da <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	429a      	cmp	r2, r3
 8004016:	d902      	bls.n	800401e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3303      	adds	r3, #3
 8004022:	089b      	lsrs	r3, r3, #2
 8004024:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004026:	e02a      	b.n	800407e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	429a      	cmp	r2, r3
 800403c:	d902      	bls.n	8004044 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3303      	adds	r3, #3
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68d9      	ldr	r1, [r3, #12]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	4603      	mov	r3, r0
 8004060:	6978      	ldr	r0, [r7, #20]
 8004062:	f006 fc3b 	bl	800a8dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	441a      	add	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	441a      	add	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	429a      	cmp	r2, r3
 8004092:	d809      	bhi.n	80040a8 <PCD_WriteEmptyTxFifo+0xde>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800409c:	429a      	cmp	r2, r3
 800409e:	d203      	bcs.n	80040a8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1bf      	bne.n	8004028 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d811      	bhi.n	80040d8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	2201      	movs	r2, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	6939      	ldr	r1, [r7, #16]
 80040d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040d4:	4013      	ands	r3, r2
 80040d6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	333c      	adds	r3, #60	@ 0x3c
 80040fc:	3304      	adds	r3, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	799b      	ldrb	r3, [r3, #6]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d17b      	bne.n	8004212 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d015      	beq.n	8004150 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4a61      	ldr	r2, [pc, #388]	@ (80042ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	f240 80b9 	bls.w	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80b3 	beq.w	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004146:	461a      	mov	r2, r3
 8004148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414c:	6093      	str	r3, [r2, #8]
 800414e:	e0a7      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	2320      	movs	r3, #32
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	e098      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 8093 	bne.w	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4a4b      	ldr	r2, [pc, #300]	@ (80042ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d90f      	bls.n	80041a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004198:	461a      	mov	r2, r3
 800419a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800419e:	6093      	str	r3, [r2, #8]
 80041a0:	e07e      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	3304      	adds	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1a      	ldr	r2, [r3, #32]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	0159      	lsls	r1, r3, #5
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ce:	1ad2      	subs	r2, r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d114      	bne.n	8004204 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041ec:	461a      	mov	r2, r3
 80041ee:	2101      	movs	r1, #1
 80041f0:	f006 fe0c 	bl	800ae0c <USB_EP0_OutStart>
 80041f4:	e006      	b.n	8004204 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	441a      	add	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f009 f92e 	bl	800d46c <HAL_PCD_DataOutStageCallback>
 8004210:	e046      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4a26      	ldr	r2, [pc, #152]	@ (80042b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d124      	bne.n	8004264 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	e032      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	2320      	movs	r3, #32
 8004254:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f009 f905 	bl	800d46c <HAL_PCD_DataOutStageCallback>
 8004262:	e01d      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d114      	bne.n	8004294 <PCD_EP_OutXfrComplete_int+0x1b0>
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d108      	bne.n	8004294 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800428c:	461a      	mov	r2, r3
 800428e:	2100      	movs	r1, #0
 8004290:	f006 fdbc 	bl	800ae0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f009 f8e6 	bl	800d46c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	4f54300a 	.word	0x4f54300a
 80042b0:	4f54310a 	.word	0x4f54310a

080042b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	333c      	adds	r3, #60	@ 0x3c
 80042cc:	3304      	adds	r3, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a15      	ldr	r2, [pc, #84]	@ (800433c <PCD_EP_OutSetupPacket_int+0x88>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d90e      	bls.n	8004308 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004306:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f009 f89d 	bl	800d448 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <PCD_EP_OutSetupPacket_int+0x88>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d90c      	bls.n	8004330 <PCD_EP_OutSetupPacket_int+0x7c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	799b      	ldrb	r3, [r3, #6]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004328:	461a      	mov	r2, r3
 800432a:	2101      	movs	r1, #1
 800432c:	f006 fd6e 	bl	800ae0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	4f54300a 	.word	0x4f54300a

08004340 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
 800434c:	4613      	mov	r3, r2
 800434e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d107      	bne.n	800436e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800435e:	883b      	ldrh	r3, [r7, #0]
 8004360:	0419      	lsls	r1, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	430a      	orrs	r2, r1
 800436a:	629a      	str	r2, [r3, #40]	@ 0x28
 800436c:	e028      	b.n	80043c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4413      	add	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800437c:	2300      	movs	r3, #0
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	e00d      	b.n	800439e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	3340      	adds	r3, #64	@ 0x40
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4413      	add	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	3301      	adds	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d3ec      	bcc.n	8004382 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043a8:	883b      	ldrh	r3, [r7, #0]
 80043aa:	0418      	lsls	r0, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	4302      	orrs	r2, r0
 80043b8:	3340      	adds	r3, #64	@ 0x40
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800441e:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_PCDEx_ActivateLPM+0x44>)
 8004420:	4313      	orrs	r3, r2
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	10000003 	.word	0x10000003

08004438 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004458:	4b19      	ldr	r3, [pc, #100]	@ (80044c0 <HAL_PWREx_ConfigSupply+0x70>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d00a      	beq.n	800447a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004464:	4b16      	ldr	r3, [pc, #88]	@ (80044c0 <HAL_PWREx_ConfigSupply+0x70>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d001      	beq.n	8004476 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e01f      	b.n	80044b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e01d      	b.n	80044b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800447a:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_PWREx_ConfigSupply+0x70>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f023 0207 	bic.w	r2, r3, #7
 8004482:	490f      	ldr	r1, [pc, #60]	@ (80044c0 <HAL_PWREx_ConfigSupply+0x70>)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4313      	orrs	r3, r2
 8004488:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800448a:	f7fd fc4f 	bl	8001d2c <HAL_GetTick>
 800448e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004490:	e009      	b.n	80044a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004492:	f7fd fc4b 	bl	8001d2c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044a0:	d901      	bls.n	80044a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044a6:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_PWREx_ConfigSupply+0x70>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b2:	d1ee      	bne.n	8004492 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	58024800 	.word	0x58024800

080044c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a04      	ldr	r2, [pc, #16]	@ (80044e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80044ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044d2:	60d3      	str	r3, [r2, #12]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	58024800 	.word	0x58024800

080044e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	@ 0x30
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f000 bc48 	b.w	8004d88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8088 	beq.w	8004616 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004506:	4b99      	ldr	r3, [pc, #612]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800450e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004510:	4b96      	ldr	r3, [pc, #600]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004518:	2b10      	cmp	r3, #16
 800451a:	d007      	beq.n	800452c <HAL_RCC_OscConfig+0x48>
 800451c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451e:	2b18      	cmp	r3, #24
 8004520:	d111      	bne.n	8004546 <HAL_RCC_OscConfig+0x62>
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d10c      	bne.n	8004546 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	4b8f      	ldr	r3, [pc, #572]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d06d      	beq.n	8004614 <HAL_RCC_OscConfig+0x130>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d169      	bne.n	8004614 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f000 bc21 	b.w	8004d88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x7a>
 8004550:	4b86      	ldr	r3, [pc, #536]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a85      	ldr	r2, [pc, #532]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	e02e      	b.n	80045bc <HAL_RCC_OscConfig+0xd8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x9c>
 8004566:	4b81      	ldr	r3, [pc, #516]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a80      	ldr	r2, [pc, #512]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 800456c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b7e      	ldr	r3, [pc, #504]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a7d      	ldr	r2, [pc, #500]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e01d      	b.n	80045bc <HAL_RCC_OscConfig+0xd8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0xc0>
 800458a:	4b78      	ldr	r3, [pc, #480]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a77      	ldr	r2, [pc, #476]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b75      	ldr	r3, [pc, #468]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a74      	ldr	r2, [pc, #464]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0xd8>
 80045a4:	4b71      	ldr	r3, [pc, #452]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a70      	ldr	r2, [pc, #448]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b6e      	ldr	r3, [pc, #440]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6d      	ldr	r2, [pc, #436]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fbb2 	bl	8001d2c <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd fbae 	bl	8001d2c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e3d4      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045de:	4b63      	ldr	r3, [pc, #396]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0xe8>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd fb9e 	bl	8001d2c <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd fb9a 	bl	8001d2c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e3c0      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004606:	4b59      	ldr	r3, [pc, #356]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x110>
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80ca 	beq.w	80047b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004624:	4b51      	ldr	r3, [pc, #324]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800462c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800462e:	4b4f      	ldr	r3, [pc, #316]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004632:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_RCC_OscConfig+0x166>
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	2b18      	cmp	r3, #24
 800463e:	d156      	bne.n	80046ee <HAL_RCC_OscConfig+0x20a>
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d151      	bne.n	80046ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800464a:	4b48      	ldr	r3, [pc, #288]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_RCC_OscConfig+0x17e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e392      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004662:	4b42      	ldr	r3, [pc, #264]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 0219 	bic.w	r2, r3, #25
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	493f      	ldr	r1, [pc, #252]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fd fb5a 	bl	8001d2c <HAL_GetTick>
 8004678:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467c:	f7fd fb56 	bl	8001d2c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e37c      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800468e:	4b37      	ldr	r3, [pc, #220]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	f7fd fb77 	bl	8001d8c <HAL_GetREVID>
 800469e:	4603      	mov	r3, r0
 80046a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d817      	bhi.n	80046d8 <HAL_RCC_OscConfig+0x1f4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d108      	bne.n	80046c2 <HAL_RCC_OscConfig+0x1de>
 80046b0:	4b2e      	ldr	r3, [pc, #184]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80046b8:	4a2c      	ldr	r2, [pc, #176]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80046ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c0:	e07a      	b.n	80047b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c2:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	031b      	lsls	r3, r3, #12
 80046d0:	4926      	ldr	r1, [pc, #152]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d6:	e06f      	b.n	80047b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d8:	4b24      	ldr	r3, [pc, #144]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	4921      	ldr	r1, [pc, #132]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ec:	e064      	b.n	80047b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d047      	beq.n	8004786 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046f6:	4b1d      	ldr	r3, [pc, #116]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 0219 	bic.w	r2, r3, #25
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	491a      	ldr	r1, [pc, #104]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd fb10 	bl	8001d2c <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004710:	f7fd fb0c 	bl	8001d2c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e332      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004722:	4b12      	ldr	r3, [pc, #72]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472e:	f7fd fb2d 	bl	8001d8c <HAL_GetREVID>
 8004732:	4603      	mov	r3, r0
 8004734:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004738:	4293      	cmp	r3, r2
 800473a:	d819      	bhi.n	8004770 <HAL_RCC_OscConfig+0x28c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b40      	cmp	r3, #64	@ 0x40
 8004742:	d108      	bne.n	8004756 <HAL_RCC_OscConfig+0x272>
 8004744:	4b09      	ldr	r3, [pc, #36]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800474c:	4a07      	ldr	r2, [pc, #28]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004752:	6053      	str	r3, [r2, #4]
 8004754:	e030      	b.n	80047b8 <HAL_RCC_OscConfig+0x2d4>
 8004756:	4b05      	ldr	r3, [pc, #20]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	031b      	lsls	r3, r3, #12
 8004764:	4901      	ldr	r1, [pc, #4]	@ (800476c <HAL_RCC_OscConfig+0x288>)
 8004766:	4313      	orrs	r3, r2
 8004768:	604b      	str	r3, [r1, #4]
 800476a:	e025      	b.n	80047b8 <HAL_RCC_OscConfig+0x2d4>
 800476c:	58024400 	.word	0x58024400
 8004770:	4b9a      	ldr	r3, [pc, #616]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	4997      	ldr	r1, [pc, #604]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	e018      	b.n	80047b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b95      	ldr	r3, [pc, #596]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a94      	ldr	r2, [pc, #592]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fd facb 	bl	8001d2c <HAL_GetTick>
 8004796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479a:	f7fd fac7 	bl	8001d2c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e2ed      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047ac:	4b8b      	ldr	r3, [pc, #556]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80a9 	beq.w	8004918 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c6:	4b85      	ldr	r3, [pc, #532]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047d0:	4b82      	ldr	r3, [pc, #520]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d007      	beq.n	80047ec <HAL_RCC_OscConfig+0x308>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b18      	cmp	r3, #24
 80047e0:	d13a      	bne.n	8004858 <HAL_RCC_OscConfig+0x374>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d135      	bne.n	8004858 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047ec:	4b7b      	ldr	r3, [pc, #492]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_OscConfig+0x320>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2b80      	cmp	r3, #128	@ 0x80
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e2c1      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004804:	f7fd fac2 	bl	8001d8c <HAL_GetREVID>
 8004808:	4603      	mov	r3, r0
 800480a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800480e:	4293      	cmp	r3, r2
 8004810:	d817      	bhi.n	8004842 <HAL_RCC_OscConfig+0x35e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	2b20      	cmp	r3, #32
 8004818:	d108      	bne.n	800482c <HAL_RCC_OscConfig+0x348>
 800481a:	4b70      	ldr	r3, [pc, #448]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004822:	4a6e      	ldr	r2, [pc, #440]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004828:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800482a:	e075      	b.n	8004918 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800482c:	4b6b      	ldr	r3, [pc, #428]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	069b      	lsls	r3, r3, #26
 800483a:	4968      	ldr	r1, [pc, #416]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004840:	e06a      	b.n	8004918 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004842:	4b66      	ldr	r3, [pc, #408]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	4962      	ldr	r1, [pc, #392]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004856:	e05f      	b.n	8004918 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d042      	beq.n	80048e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004860:	4b5e      	ldr	r3, [pc, #376]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a5d      	ldr	r2, [pc, #372]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fd fa5e 	bl	8001d2c <HAL_GetTick>
 8004870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004874:	f7fd fa5a 	bl	8001d2c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e280      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004886:	4b55      	ldr	r3, [pc, #340]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004892:	f7fd fa7b 	bl	8001d8c <HAL_GetREVID>
 8004896:	4603      	mov	r3, r0
 8004898:	f241 0203 	movw	r2, #4099	@ 0x1003
 800489c:	4293      	cmp	r3, r2
 800489e:	d817      	bhi.n	80048d0 <HAL_RCC_OscConfig+0x3ec>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d108      	bne.n	80048ba <HAL_RCC_OscConfig+0x3d6>
 80048a8:	4b4c      	ldr	r3, [pc, #304]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048b0:	4a4a      	ldr	r2, [pc, #296]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80048b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048b6:	6053      	str	r3, [r2, #4]
 80048b8:	e02e      	b.n	8004918 <HAL_RCC_OscConfig+0x434>
 80048ba:	4b48      	ldr	r3, [pc, #288]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	069b      	lsls	r3, r3, #26
 80048c8:	4944      	ldr	r1, [pc, #272]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
 80048ce:	e023      	b.n	8004918 <HAL_RCC_OscConfig+0x434>
 80048d0:	4b42      	ldr	r3, [pc, #264]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	493f      	ldr	r1, [pc, #252]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60cb      	str	r3, [r1, #12]
 80048e4:	e018      	b.n	8004918 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048e6:	4b3d      	ldr	r3, [pc, #244]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3c      	ldr	r2, [pc, #240]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80048ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fd fa1b 	bl	8001d2c <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048fa:	f7fd fa17 	bl	8001d2c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e23d      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800490c:	4b33      	ldr	r3, [pc, #204]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d036      	beq.n	8004992 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d019      	beq.n	8004960 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800492c:	4b2b      	ldr	r3, [pc, #172]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 800492e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004930:	4a2a      	ldr	r2, [pc, #168]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fd f9f8 	bl	8001d2c <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004940:	f7fd f9f4 	bl	8001d2c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e21a      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004952:	4b22      	ldr	r3, [pc, #136]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x45c>
 800495e:	e018      	b.n	8004992 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004960:	4b1e      	ldr	r3, [pc, #120]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004964:	4a1d      	ldr	r2, [pc, #116]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fd f9de 	bl	8001d2c <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004974:	f7fd f9da 	bl	8001d2c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e200      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004986:	4b15      	ldr	r3, [pc, #84]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 8004988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d039      	beq.n	8004a12 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80049ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049b2:	f7fd f9bb 	bl	8001d2c <HAL_GetTick>
 80049b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ba:	f7fd f9b7 	bl	8001d2c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e1dd      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049cc:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <HAL_RCC_OscConfig+0x4f8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x4d6>
 80049d8:	e01b      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
 80049da:	bf00      	nop
 80049dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049e0:	4b9b      	ldr	r3, [pc, #620]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a9a      	ldr	r2, [pc, #616]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 80049e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049ec:	f7fd f99e 	bl	8001d2c <HAL_GetTick>
 80049f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f4:	f7fd f99a 	bl	8001d2c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e1c0      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a06:	4b92      	ldr	r3, [pc, #584]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8081 	beq.w	8004b22 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a20:	4b8c      	ldr	r3, [pc, #560]	@ (8004c54 <HAL_RCC_OscConfig+0x770>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a8b      	ldr	r2, [pc, #556]	@ (8004c54 <HAL_RCC_OscConfig+0x770>)
 8004a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2c:	f7fd f97e 	bl	8001d2c <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fd f97a 	bl	8001d2c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e1a0      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a46:	4b83      	ldr	r3, [pc, #524]	@ (8004c54 <HAL_RCC_OscConfig+0x770>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d106      	bne.n	8004a68 <HAL_RCC_OscConfig+0x584>
 8004a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a66:	e02d      	b.n	8004ac4 <HAL_RCC_OscConfig+0x5e0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10c      	bne.n	8004a8a <HAL_RCC_OscConfig+0x5a6>
 8004a70:	4b77      	ldr	r3, [pc, #476]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a74:	4a76      	ldr	r2, [pc, #472]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a7c:	4b74      	ldr	r3, [pc, #464]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a80:	4a73      	ldr	r2, [pc, #460]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a82:	f023 0304 	bic.w	r3, r3, #4
 8004a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a88:	e01c      	b.n	8004ac4 <HAL_RCC_OscConfig+0x5e0>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b05      	cmp	r3, #5
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c8>
 8004a92:	4b6f      	ldr	r3, [pc, #444]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	4a6e      	ldr	r2, [pc, #440]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa2:	4a6b      	ldr	r2, [pc, #428]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0x5e0>
 8004aac:	4b68      	ldr	r3, [pc, #416]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab0:	4a67      	ldr	r2, [pc, #412]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab8:	4b65      	ldr	r3, [pc, #404]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abc:	4a64      	ldr	r2, [pc, #400]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d015      	beq.n	8004af8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fd f92e 	bl	8001d2c <HAL_GetTick>
 8004ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ad2:	e00a      	b.n	8004aea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	f7fd f92a 	bl	8001d2c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e14e      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aea:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0ee      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x5f0>
 8004af6:	e014      	b.n	8004b22 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af8:	f7fd f918 	bl	8001d2c <HAL_GetTick>
 8004afc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b00:	f7fd f914 	bl	8001d2c <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e138      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b16:	4b4e      	ldr	r3, [pc, #312]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ee      	bne.n	8004b00 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 812d 	beq.w	8004d86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b2c:	4b48      	ldr	r3, [pc, #288]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b34:	2b18      	cmp	r3, #24
 8004b36:	f000 80bd 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	f040 809e 	bne.w	8004c80 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b44:	4b42      	ldr	r3, [pc, #264]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a41      	ldr	r2, [pc, #260]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fd f8ec 	bl	8001d2c <HAL_GetTick>
 8004b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b58:	f7fd f8e8 	bl	8001d2c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e10e      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b6a:	4b39      	ldr	r3, [pc, #228]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b76:	4b36      	ldr	r3, [pc, #216]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b7a:	4b37      	ldr	r3, [pc, #220]	@ (8004c58 <HAL_RCC_OscConfig+0x774>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	4931      	ldr	r1, [pc, #196]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	3b01      	subs	r3, #1
 8004b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	025b      	lsls	r3, r3, #9
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004baa:	3b01      	subs	r3, #1
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	061b      	lsls	r3, r3, #24
 8004bbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bc0:	4923      	ldr	r1, [pc, #140]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004bc6:	4b22      	ldr	r3, [pc, #136]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	4a21      	ldr	r2, [pc, #132]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bd6:	4b21      	ldr	r3, [pc, #132]	@ (8004c5c <HAL_RCC_OscConfig+0x778>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bde:	00d2      	lsls	r2, r2, #3
 8004be0:	491b      	ldr	r1, [pc, #108]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004be6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	f023 020c 	bic.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	4917      	ldr	r1, [pc, #92]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004bf8:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	f023 0202 	bic.w	r2, r3, #2
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c04:	4912      	ldr	r1, [pc, #72]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c0a:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	4a10      	ldr	r2, [pc, #64]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c16:	4b0e      	ldr	r3, [pc, #56]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c22:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4a0a      	ldr	r2, [pc, #40]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c2e:	4b08      	ldr	r3, [pc, #32]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	4a07      	ldr	r2, [pc, #28]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a04      	ldr	r2, [pc, #16]	@ (8004c50 <HAL_RCC_OscConfig+0x76c>)
 8004c40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fd f871 	bl	8001d2c <HAL_GetTick>
 8004c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c4c:	e011      	b.n	8004c72 <HAL_RCC_OscConfig+0x78e>
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	58024800 	.word	0x58024800
 8004c58:	fffffc0c 	.word	0xfffffc0c
 8004c5c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fd f864 	bl	8001d2c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e08a      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c72:	4b47      	ldr	r3, [pc, #284]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x77c>
 8004c7e:	e082      	b.n	8004d86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c80:	4b43      	ldr	r3, [pc, #268]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a42      	ldr	r2, [pc, #264]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd f84e 	bl	8001d2c <HAL_GetTick>
 8004c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c94:	f7fd f84a 	bl	8001d2c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e070      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x7b0>
 8004cb2:	e068      	b.n	8004d86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cb4:	4b36      	ldr	r3, [pc, #216]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cba:	4b35      	ldr	r3, [pc, #212]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d031      	beq.n	8004d2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f003 0203 	and.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d12a      	bne.n	8004d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d122      	bne.n	8004d2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d11a      	bne.n	8004d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	0a5b      	lsrs	r3, r3, #9
 8004cfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d111      	bne.n	8004d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d108      	bne.n	8004d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0e1b      	lsrs	r3, r3, #24
 8004d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e02b      	b.n	8004d88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d30:	4b17      	ldr	r3, [pc, #92]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d34:	08db      	lsrs	r3, r3, #3
 8004d36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d01f      	beq.n	8004d86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d46:	4b12      	ldr	r3, [pc, #72]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4a:	4a11      	ldr	r2, [pc, #68]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d52:	f7fc ffeb 	bl	8001d2c <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d58:	bf00      	nop
 8004d5a:	f7fc ffe7 	bl	8001d2c <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d0f9      	beq.n	8004d5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d66:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <HAL_RCC_OscConfig+0x8b0>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d72:	00d2      	lsls	r2, r2, #3
 8004d74:	4906      	ldr	r1, [pc, #24]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d7a:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	4a04      	ldr	r2, [pc, #16]	@ (8004d90 <HAL_RCC_OscConfig+0x8ac>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3730      	adds	r7, #48	@ 0x30
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	58024400 	.word	0x58024400
 8004d94:	ffff0007 	.word	0xffff0007

08004d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e19c      	b.n	80050e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dac:	4b8a      	ldr	r3, [pc, #552]	@ (8004fd8 <HAL_RCC_ClockConfig+0x240>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d910      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b87      	ldr	r3, [pc, #540]	@ (8004fd8 <HAL_RCC_ClockConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 020f 	bic.w	r2, r3, #15
 8004dc2:	4985      	ldr	r1, [pc, #532]	@ (8004fd8 <HAL_RCC_ClockConfig+0x240>)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b83      	ldr	r3, [pc, #524]	@ (8004fd8 <HAL_RCC_ClockConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e184      	b.n	80050e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d010      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	4b7b      	ldr	r3, [pc, #492]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d908      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004df8:	4b78      	ldr	r3, [pc, #480]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	4975      	ldr	r1, [pc, #468]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	4b70      	ldr	r3, [pc, #448]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d908      	bls.n	8004e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e26:	4b6d      	ldr	r3, [pc, #436]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	496a      	ldr	r1, [pc, #424]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d010      	beq.n	8004e66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	4b64      	ldr	r3, [pc, #400]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d908      	bls.n	8004e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e54:	4b61      	ldr	r3, [pc, #388]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	495e      	ldr	r1, [pc, #376]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d010      	beq.n	8004e94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69da      	ldr	r2, [r3, #28]
 8004e76:	4b59      	ldr	r3, [pc, #356]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d908      	bls.n	8004e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e82:	4b56      	ldr	r3, [pc, #344]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	4953      	ldr	r1, [pc, #332]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d010      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d908      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f023 020f 	bic.w	r2, r3, #15
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4947      	ldr	r1, [pc, #284]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d055      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ece:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	4940      	ldr	r1, [pc, #256]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d121      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0f6      	b.n	80050e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f00:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d115      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0ea      	b.n	80050e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f18:	4b30      	ldr	r3, [pc, #192]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0de      	b.n	80050e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f28:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0d6      	b.n	80050e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f38:	4b28      	ldr	r3, [pc, #160]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f023 0207 	bic.w	r2, r3, #7
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4925      	ldr	r1, [pc, #148]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4a:	f7fc feef 	bl	8001d2c <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f50:	e00a      	b.n	8004f68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f52:	f7fc feeb 	bl	8001d2c <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e0be      	b.n	80050e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f68:	4b1c      	ldr	r3, [pc, #112]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d1eb      	bne.n	8004f52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d010      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	4b14      	ldr	r3, [pc, #80]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d208      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f96:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f023 020f 	bic.w	r2, r3, #15
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	490e      	ldr	r1, [pc, #56]	@ (8004fdc <HAL_RCC_ClockConfig+0x244>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_RCC_ClockConfig+0x240>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d214      	bcs.n	8004fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <HAL_RCC_ClockConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 020f 	bic.w	r2, r3, #15
 8004fbe:	4906      	ldr	r1, [pc, #24]	@ (8004fd8 <HAL_RCC_ClockConfig+0x240>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b04      	ldr	r3, [pc, #16]	@ (8004fd8 <HAL_RCC_ClockConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e086      	b.n	80050e6 <HAL_RCC_ClockConfig+0x34e>
 8004fd8:	52002000 	.word	0x52002000
 8004fdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d208      	bcs.n	800500e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ffc:	4b3c      	ldr	r3, [pc, #240]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	4939      	ldr	r1, [pc, #228]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 800500a:	4313      	orrs	r3, r2
 800500c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d010      	beq.n	800503c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	4b34      	ldr	r3, [pc, #208]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005026:	429a      	cmp	r2, r3
 8005028:	d208      	bcs.n	800503c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800502a:	4b31      	ldr	r3, [pc, #196]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	492e      	ldr	r1, [pc, #184]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 8005038:	4313      	orrs	r3, r2
 800503a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b00      	cmp	r3, #0
 8005046:	d010      	beq.n	800506a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699a      	ldr	r2, [r3, #24]
 800504c:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005054:	429a      	cmp	r2, r3
 8005056:	d208      	bcs.n	800506a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005058:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	4922      	ldr	r1, [pc, #136]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 8005066:	4313      	orrs	r3, r2
 8005068:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d010      	beq.n	8005098 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005082:	429a      	cmp	r2, r3
 8005084:	d208      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005086:	4b1a      	ldr	r3, [pc, #104]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	4917      	ldr	r1, [pc, #92]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 8005094:	4313      	orrs	r3, r2
 8005096:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005098:	f000 f834 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 800509c:	4602      	mov	r2, r0
 800509e:	4b14      	ldr	r3, [pc, #80]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	0a1b      	lsrs	r3, r3, #8
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	4912      	ldr	r1, [pc, #72]	@ (80050f4 <HAL_RCC_ClockConfig+0x35c>)
 80050aa:	5ccb      	ldrb	r3, [r1, r3]
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050b6:	4b0e      	ldr	r3, [pc, #56]	@ (80050f0 <HAL_RCC_ClockConfig+0x358>)
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	4a0d      	ldr	r2, [pc, #52]	@ (80050f4 <HAL_RCC_ClockConfig+0x35c>)
 80050c0:	5cd3      	ldrb	r3, [r2, r3]
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	fa22 f303 	lsr.w	r3, r2, r3
 80050cc:	4a0a      	ldr	r2, [pc, #40]	@ (80050f8 <HAL_RCC_ClockConfig+0x360>)
 80050ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050d0:	4a0a      	ldr	r2, [pc, #40]	@ (80050fc <HAL_RCC_ClockConfig+0x364>)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <HAL_RCC_ClockConfig+0x368>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fc fddc 	bl	8001c98 <HAL_InitTick>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
 80050f4:	080119bc 	.word	0x080119bc
 80050f8:	24000004 	.word	0x24000004
 80050fc:	24000000 	.word	0x24000000
 8005100:	24000008 	.word	0x24000008

08005104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	b089      	sub	sp, #36	@ 0x24
 8005108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800510a:	4bb3      	ldr	r3, [pc, #716]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005112:	2b18      	cmp	r3, #24
 8005114:	f200 8156 	bhi.w	80053c4 <HAL_RCC_GetSysClockFreq+0x2c0>
 8005118:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005185 	.word	0x08005185
 8005124:	080053c5 	.word	0x080053c5
 8005128:	080053c5 	.word	0x080053c5
 800512c:	080053c5 	.word	0x080053c5
 8005130:	080053c5 	.word	0x080053c5
 8005134:	080053c5 	.word	0x080053c5
 8005138:	080053c5 	.word	0x080053c5
 800513c:	080053c5 	.word	0x080053c5
 8005140:	080051ab 	.word	0x080051ab
 8005144:	080053c5 	.word	0x080053c5
 8005148:	080053c5 	.word	0x080053c5
 800514c:	080053c5 	.word	0x080053c5
 8005150:	080053c5 	.word	0x080053c5
 8005154:	080053c5 	.word	0x080053c5
 8005158:	080053c5 	.word	0x080053c5
 800515c:	080053c5 	.word	0x080053c5
 8005160:	080051b1 	.word	0x080051b1
 8005164:	080053c5 	.word	0x080053c5
 8005168:	080053c5 	.word	0x080053c5
 800516c:	080053c5 	.word	0x080053c5
 8005170:	080053c5 	.word	0x080053c5
 8005174:	080053c5 	.word	0x080053c5
 8005178:	080053c5 	.word	0x080053c5
 800517c:	080053c5 	.word	0x080053c5
 8005180:	080051b9 	.word	0x080051b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005184:	4b94      	ldr	r3, [pc, #592]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005190:	4b91      	ldr	r3, [pc, #580]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	08db      	lsrs	r3, r3, #3
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	4a90      	ldr	r2, [pc, #576]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
 80051a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051a2:	e112      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x2c6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051a4:	4b8d      	ldr	r3, [pc, #564]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051a6:	61bb      	str	r3, [r7, #24]
      break;
 80051a8:	e10f      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x2c6>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051aa:	4b8d      	ldr	r3, [pc, #564]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051ac:	61bb      	str	r3, [r7, #24]
      break;
 80051ae:	e10c      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x2c6>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051b0:	f04f 73fa 	mov.w	r3, #32768000	@ 0x1f40000
 80051b4:	61bb      	str	r3, [r7, #24]
      break;
 80051b6:	e108      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x2c6>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051b8:	4b87      	ldr	r3, [pc, #540]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051c2:	4b85      	ldr	r3, [pc, #532]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051cc:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051ce:	4b82      	ldr	r3, [pc, #520]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051d8:	4b7f      	ldr	r3, [pc, #508]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f0:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80e1 	beq.w	80053be <HAL_RCC_GetSysClockFreq+0x2ba>
      {
        switch (pllsource)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	f000 8083 	beq.w	800530a <HAL_RCC_GetSysClockFreq+0x206>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b02      	cmp	r3, #2
 8005208:	f200 80a1 	bhi.w	800534e <HAL_RCC_GetSysClockFreq+0x24a>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_RCC_GetSysClockFreq+0x116>
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d056      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0x1c2>
 8005218:	e099      	b.n	800534e <HAL_RCC_GetSysClockFreq+0x24a>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800521a:	4b6f      	ldr	r3, [pc, #444]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02d      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0x17e>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005226:	4b6c      	ldr	r3, [pc, #432]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	08db      	lsrs	r3, r3, #3
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	4a6a      	ldr	r2, [pc, #424]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005232:	fa22 f303 	lsr.w	r3, r2, r3
 8005236:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005250:	4b61      	ldr	r3, [pc, #388]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005260:	ed97 6a02 	vldr	s12, [r7, #8]
 8005264:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005270:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527c:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005280:	e087      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x28e>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80053e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005294:	4b50      	ldr	r3, [pc, #320]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529c:	ee07 3a90 	vmov	s15, r3
 80052a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a8:	eddf 5a4e 	vldr	s11, [pc, #312]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80052ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c0:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052c4:	e065      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x28e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80053ec <HAL_RCC_GetSysClockFreq+0x2e8>
 80052d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d8:	4b3f      	ldr	r3, [pc, #252]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ec:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80052f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005304:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005308:	e043      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x28e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005314:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80053f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531c:	4b2e      	ldr	r3, [pc, #184]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005330:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005348:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800534c:	e021      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x28e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	ee07 3a90 	vmov	s15, r3
 8005354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005358:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80053ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800535c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005360:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005370:	ed97 6a02 	vldr	s12, [r7, #8]
 8005374:	eddf 5a1b 	vldr	s11, [pc, #108]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538c:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005390:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005392:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	0a5b      	lsrs	r3, r3, #9
 8005398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800539c:	3301      	adds	r3, #1
 800539e:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b6:	ee17 3a90 	vmov	r3, s15
 80053ba:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053bc:	e005      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x2c6>
        sysclockfreq = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
      break;
 80053c2:	e002      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x2c6>

    default:
      sysclockfreq = CSI_VALUE;
 80053c4:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053c6:	61bb      	str	r3, [r7, #24]
      break;
 80053c8:	bf00      	nop
  }

  return sysclockfreq;
 80053ca:	69bb      	ldr	r3, [r7, #24]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3724      	adds	r7, #36	@ 0x24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	58024400 	.word	0x58024400
 80053dc:	03d09000 	.word	0x03d09000
 80053e0:	003d0900 	.word	0x003d0900
 80053e4:	46000000 	.word	0x46000000
 80053e8:	4c742400 	.word	0x4c742400
 80053ec:	4a742400 	.word	0x4a742400
 80053f0:	4bfa0000 	.word	0x4bfa0000

080053f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053fa:	f7ff fe83 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 80053fe:	4602      	mov	r2, r0
 8005400:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <HAL_RCC_GetHCLKFreq+0x50>)
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	490f      	ldr	r1, [pc, #60]	@ (8005448 <HAL_RCC_GetHCLKFreq+0x54>)
 800540c:	5ccb      	ldrb	r3, [r1, r3]
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <HAL_RCC_GetHCLKFreq+0x50>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	4a09      	ldr	r2, [pc, #36]	@ (8005448 <HAL_RCC_GetHCLKFreq+0x54>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	fa22 f303 	lsr.w	r3, r2, r3
 800542e:	4a07      	ldr	r2, [pc, #28]	@ (800544c <HAL_RCC_GetHCLKFreq+0x58>)
 8005430:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005432:	4a07      	ldr	r2, [pc, #28]	@ (8005450 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005438:	4b04      	ldr	r3, [pc, #16]	@ (800544c <HAL_RCC_GetHCLKFreq+0x58>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	58024400 	.word	0x58024400
 8005448:	080119bc 	.word	0x080119bc
 800544c:	24000004 	.word	0x24000004
 8005450:	24000000 	.word	0x24000000

08005454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005458:	f7ff ffcc 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	091b      	lsrs	r3, r3, #4
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4904      	ldr	r1, [pc, #16]	@ (800547c <HAL_RCC_GetPCLK1Freq+0x28>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	58024400 	.word	0x58024400
 800547c:	080119bc 	.word	0x080119bc

08005480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005484:	f7ff ffb6 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4904      	ldr	r1, [pc, #16]	@ (80054a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	58024400 	.word	0x58024400
 80054a8:	080119bc 	.word	0x080119bc

080054ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b0:	b0ca      	sub	sp, #296	@ 0x128
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054be:	2300      	movs	r3, #0
 80054c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80054d0:	2500      	movs	r5, #0
 80054d2:	ea54 0305 	orrs.w	r3, r4, r5
 80054d6:	d049      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054e2:	d02f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80054e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054e8:	d828      	bhi.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054ee:	d01a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054f4:	d822      	bhi.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054fe:	d007      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005500:	e01c      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005502:	4bb8      	ldr	r3, [pc, #736]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	4ab7      	ldr	r2, [pc, #732]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800550c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800550e:	e01a      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005514:	3308      	adds	r3, #8
 8005516:	2102      	movs	r1, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f001 fc8f 	bl	8006e3c <RCCEx_PLL2_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005524:	e00f      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552a:	3328      	adds	r3, #40	@ 0x28
 800552c:	2102      	movs	r1, #2
 800552e:	4618      	mov	r0, r3
 8005530:	f001 fd36 	bl	8006fa0 <RCCEx_PLL3_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800553a:	e004      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005542:	e000      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800554e:	4ba5      	ldr	r3, [pc, #660]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005552:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800555c:	4aa1      	ldr	r2, [pc, #644]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800555e:	430b      	orrs	r3, r1
 8005560:	6513      	str	r3, [r2, #80]	@ 0x50
 8005562:	e003      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005578:	f04f 0900 	mov.w	r9, #0
 800557c:	ea58 0309 	orrs.w	r3, r8, r9
 8005580:	d047      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	2b04      	cmp	r3, #4
 800558a:	d82a      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800558c:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055a9 	.word	0x080055a9
 8005598:	080055b7 	.word	0x080055b7
 800559c:	080055cd 	.word	0x080055cd
 80055a0:	080055eb 	.word	0x080055eb
 80055a4:	080055eb 	.word	0x080055eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a8:	4b8e      	ldr	r3, [pc, #568]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	4a8d      	ldr	r2, [pc, #564]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055b4:	e01a      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ba:	3308      	adds	r3, #8
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fc3c 	bl	8006e3c <RCCEx_PLL2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055ca:	e00f      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d0:	3328      	adds	r3, #40	@ 0x28
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fce3 	bl	8006fa0 <RCCEx_PLL3_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055e0:	e004      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055e8:	e000      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80055ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f4:	4b7b      	ldr	r3, [pc, #492]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f8:	f023 0107 	bic.w	r1, r3, #7
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005602:	4a78      	ldr	r2, [pc, #480]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005604:	430b      	orrs	r3, r1
 8005606:	6513      	str	r3, [r2, #80]	@ 0x50
 8005608:	e003      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800560e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800561e:	f04f 0b00 	mov.w	fp, #0
 8005622:	ea5a 030b 	orrs.w	r3, sl, fp
 8005626:	d04c      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005632:	d030      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005638:	d829      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800563a:	2bc0      	cmp	r3, #192	@ 0xc0
 800563c:	d02d      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800563e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005640:	d825      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005642:	2b80      	cmp	r3, #128	@ 0x80
 8005644:	d018      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005646:	2b80      	cmp	r3, #128	@ 0x80
 8005648:	d821      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800564e:	2b40      	cmp	r3, #64	@ 0x40
 8005650:	d007      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005652:	e01c      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005654:	4b63      	ldr	r3, [pc, #396]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4a62      	ldr	r2, [pc, #392]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800565a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800565e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005660:	e01c      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005666:	3308      	adds	r3, #8
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f001 fbe6 	bl	8006e3c <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005676:	e011      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567c:	3328      	adds	r3, #40	@ 0x28
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fc8d 	bl	8006fa0 <RCCEx_PLL3_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800568c:	e006      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005694:	e002      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005696:	bf00      	nop
 8005698:	e000      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800569a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80056a4:	4b4f      	ldr	r3, [pc, #316]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b2:	4a4c      	ldr	r2, [pc, #304]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80056ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80056d2:	2300      	movs	r3, #0
 80056d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80056d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d053      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056ee:	d035      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80056f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056f4:	d82e      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056fa:	d031      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80056fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005700:	d828      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005706:	d01a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800570c:	d822      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005716:	d007      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005718:	e01c      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571a:	4b32      	ldr	r3, [pc, #200]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	4a31      	ldr	r2, [pc, #196]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005724:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005726:	e01c      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572c:	3308      	adds	r3, #8
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f001 fb83 	bl	8006e3c <RCCEx_PLL2_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800573c:	e011      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005742:	3328      	adds	r3, #40	@ 0x28
 8005744:	2100      	movs	r1, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fc2a 	bl	8006fa0 <RCCEx_PLL3_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005752:	e006      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800575a:	e002      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800576a:	4b1e      	ldr	r3, [pc, #120]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800577a:	4a1a      	ldr	r2, [pc, #104]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800577c:	430b      	orrs	r3, r1
 800577e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005796:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80057a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80057a4:	460b      	mov	r3, r1
 80057a6:	4313      	orrs	r3, r2
 80057a8:	d056      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b6:	d038      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80057b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057bc:	d831      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057c2:	d034      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80057c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057c8:	d82b      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057ce:	d01d      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057d4:	d825      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d006      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80057da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057e0:	e01f      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057e2:	bf00      	nop
 80057e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e8:	4ba2      	ldr	r3, [pc, #648]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	4aa1      	ldr	r2, [pc, #644]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057f4:	e01c      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fa:	3308      	adds	r3, #8
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 fb1c 	bl	8006e3c <RCCEx_PLL2_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800580a:	e011      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005810:	3328      	adds	r3, #40	@ 0x28
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f001 fbc3 	bl	8006fa0 <RCCEx_PLL3_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005820:	e006      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005838:	4b8e      	ldr	r3, [pc, #568]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005848:	4a8a      	ldr	r2, [pc, #552]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800584a:	430b      	orrs	r3, r1
 800584c:	6593      	str	r3, [r2, #88]	@ 0x58
 800584e:	e003      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005864:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800586e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	d03a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	2b30      	cmp	r3, #48	@ 0x30
 8005880:	d01f      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005882:	2b30      	cmp	r3, #48	@ 0x30
 8005884:	d819      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005886:	2b20      	cmp	r3, #32
 8005888:	d00c      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800588a:	2b20      	cmp	r3, #32
 800588c:	d815      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d019      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005892:	2b10      	cmp	r3, #16
 8005894:	d111      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005896:	4b77      	ldr	r3, [pc, #476]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	4a76      	ldr	r2, [pc, #472]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800589c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	3308      	adds	r3, #8
 80058aa:	2102      	movs	r1, #2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fac5 	bl	8006e3c <RCCEx_PLL2_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058d0:	4b68      	ldr	r3, [pc, #416]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058de:	4a65      	ldr	r2, [pc, #404]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005904:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d051      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005914:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005918:	d035      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800591a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800591e:	d82e      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005920:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005924:	d031      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005926:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800592a:	d828      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800592c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005930:	d01a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005936:	d822      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800593c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005940:	d007      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005942:	e01c      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005944:	4b4b      	ldr	r3, [pc, #300]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	4a4a      	ldr	r2, [pc, #296]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800594e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005950:	e01c      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	3308      	adds	r3, #8
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f001 fa6e 	bl	8006e3c <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005966:	e011      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596c:	3328      	adds	r3, #40	@ 0x28
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f001 fb15 	bl	8006fa0 <RCCEx_PLL3_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800597c:	e006      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005984:	e002      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005994:	4b37      	ldr	r3, [pc, #220]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005998:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a2:	4a34      	ldr	r2, [pc, #208]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d056      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059dc:	d033      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80059de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059e2:	d82c      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059e8:	d02f      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80059ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059ee:	d826      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059f4:	d02b      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80059f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059fa:	d820      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a00:	d012      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a06:	d81a      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d022      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a10:	d115      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	3308      	adds	r3, #8
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 fa0e 	bl	8006e3c <RCCEx_PLL2_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a26:	e015      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2c:	3328      	adds	r3, #40	@ 0x28
 8005a2e:	2101      	movs	r1, #1
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 fab5 	bl	8006fa0 <RCCEx_PLL3_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a46:	bf00      	nop
 8005a48:	e004      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a4a:	bf00      	nop
 8005a4c:	e002      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10d      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a6a:	4a02      	ldr	r2, [pc, #8]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a70:	e006      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a72:	bf00      	nop
 8005a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d055      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aac:	d033      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ab2:	d82c      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab8:	d02f      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005abe:	d826      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ac0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ac4:	d02b      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005ac6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005aca:	d820      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad0:	d012      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad6:	d81a      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d022      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005adc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ae0:	d115      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 f9a6 	bl	8006e3c <RCCEx_PLL2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005af6:	e015      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	3328      	adds	r3, #40	@ 0x28
 8005afe:	2101      	movs	r1, #1
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fa4d 	bl	8006fa0 <RCCEx_PLL3_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b0c:	e00a      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b14:	e006      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b16:	bf00      	nop
 8005b18:	e004      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b2c:	4ba3      	ldr	r3, [pc, #652]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b30:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b3c:	4a9f      	ldr	r2, [pc, #636]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d037      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b76:	d00e      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b7c:	d816      	bhi.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d018      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b86:	d111      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b88:	4b8c      	ldr	r3, [pc, #560]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	4a8b      	ldr	r2, [pc, #556]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b94:	e00f      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 f94c 	bl	8006e3c <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005baa:	e004      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bcc:	4a7b      	ldr	r2, [pc, #492]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd2:	e003      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bec:	2300      	movs	r3, #0
 8005bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bf2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d039      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d81c      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005c06:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c49 	.word	0x08005c49
 8005c10:	08005c1d 	.word	0x08005c1d
 8005c14:	08005c2b 	.word	0x08005c2b
 8005c18:	08005c49 	.word	0x08005c49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1c:	4b67      	ldr	r3, [pc, #412]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c20:	4a66      	ldr	r2, [pc, #408]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c28:	e00f      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	3308      	adds	r3, #8
 8005c30:	2102      	movs	r1, #2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 f902 	bl	8006e3c <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c46:	e000      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c52:	4b5a      	ldr	r3, [pc, #360]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c56:	f023 0103 	bic.w	r1, r3, #3
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c60:	4a56      	ldr	r2, [pc, #344]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c62:	430b      	orrs	r3, r1
 8005c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c66:	e003      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f000 809f 	beq.w	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c92:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c9e:	f7fc f845 	bl	8001d2c <HAL_GetTick>
 8005ca2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca8:	f7fc f840 	bl	8001d2c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b64      	cmp	r3, #100	@ 0x64
 8005cb6:	d903      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cbe:	e005      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ed      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d179      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cd4:	4b39      	ldr	r3, [pc, #228]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ce0:	4053      	eors	r3, r2
 8005ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d015      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cea:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cf6:	4b31      	ldr	r3, [pc, #196]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	4a30      	ldr	r2, [pc, #192]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d02:	4b2e      	ldr	r3, [pc, #184]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d06:	4a2d      	ldr	r2, [pc, #180]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d22:	d118      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fc f802 	bl	8001d2c <HAL_GetTick>
 8005d28:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d2c:	e00d      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2e:	f7fb fffd 	bl	8001d2c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d38:	1ad2      	subs	r2, r2, r3
 8005d3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d903      	bls.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005d48:	e005      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0eb      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d129      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d6e:	d10e      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d70:	4b12      	ldr	r3, [pc, #72]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d80:	091a      	lsrs	r2, r3, #4
 8005d82:	4b10      	ldr	r3, [pc, #64]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	4a0d      	ldr	r2, [pc, #52]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6113      	str	r3, [r2, #16]
 8005d8c:	e005      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	4a0a      	ldr	r2, [pc, #40]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d98:	6113      	str	r3, [r2, #16]
 8005d9a:	4b08      	ldr	r3, [pc, #32]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d9c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005daa:	4a04      	ldr	r2, [pc, #16]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005db0:	e00e      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005dba:	e009      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	58024800 	.word	0x58024800
 8005dc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f002 0301 	and.w	r3, r2, #1
 8005ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005de6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f000 8089 	beq.w	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005df8:	2b28      	cmp	r3, #40	@ 0x28
 8005dfa:	d86b      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005edd 	.word	0x08005edd
 8005e08:	08005ed5 	.word	0x08005ed5
 8005e0c:	08005ed5 	.word	0x08005ed5
 8005e10:	08005ed5 	.word	0x08005ed5
 8005e14:	08005ed5 	.word	0x08005ed5
 8005e18:	08005ed5 	.word	0x08005ed5
 8005e1c:	08005ed5 	.word	0x08005ed5
 8005e20:	08005ed5 	.word	0x08005ed5
 8005e24:	08005ea9 	.word	0x08005ea9
 8005e28:	08005ed5 	.word	0x08005ed5
 8005e2c:	08005ed5 	.word	0x08005ed5
 8005e30:	08005ed5 	.word	0x08005ed5
 8005e34:	08005ed5 	.word	0x08005ed5
 8005e38:	08005ed5 	.word	0x08005ed5
 8005e3c:	08005ed5 	.word	0x08005ed5
 8005e40:	08005ed5 	.word	0x08005ed5
 8005e44:	08005ebf 	.word	0x08005ebf
 8005e48:	08005ed5 	.word	0x08005ed5
 8005e4c:	08005ed5 	.word	0x08005ed5
 8005e50:	08005ed5 	.word	0x08005ed5
 8005e54:	08005ed5 	.word	0x08005ed5
 8005e58:	08005ed5 	.word	0x08005ed5
 8005e5c:	08005ed5 	.word	0x08005ed5
 8005e60:	08005ed5 	.word	0x08005ed5
 8005e64:	08005edd 	.word	0x08005edd
 8005e68:	08005ed5 	.word	0x08005ed5
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005ed5 	.word	0x08005ed5
 8005e74:	08005ed5 	.word	0x08005ed5
 8005e78:	08005ed5 	.word	0x08005ed5
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ed5 	.word	0x08005ed5
 8005e8c:	08005ed5 	.word	0x08005ed5
 8005e90:	08005ed5 	.word	0x08005ed5
 8005e94:	08005ed5 	.word	0x08005ed5
 8005e98:	08005ed5 	.word	0x08005ed5
 8005e9c:	08005ed5 	.word	0x08005ed5
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005edd 	.word	0x08005edd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	3308      	adds	r3, #8
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 ffc3 	bl	8006e3c <RCCEx_PLL2_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ebc:	e00f      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	3328      	adds	r3, #40	@ 0x28
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 f86a 	bl	8006fa0 <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ed2:	e004      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eda:	e000      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ee6:	4bbf      	ldr	r3, [pc, #764]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ef4:	4abb      	ldr	r2, [pc, #748]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005efa:	e003      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f002 0302 	and.w	r3, r2, #2
 8005f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4313      	orrs	r3, r2
 8005f22:	d041      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	d824      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005f4d 	.word	0x08005f4d
 8005f3c:	08005f63 	.word	0x08005f63
 8005f40:	08005f81 	.word	0x08005f81
 8005f44:	08005f81 	.word	0x08005f81
 8005f48:	08005f81 	.word	0x08005f81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f50:	3308      	adds	r3, #8
 8005f52:	2101      	movs	r1, #1
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 ff71 	bl	8006e3c <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f60:	e00f      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f66:	3328      	adds	r3, #40	@ 0x28
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 f818 	bl	8006fa0 <RCCEx_PLL3_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f76:	e004      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f8a:	4b96      	ldr	r3, [pc, #600]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8e:	f023 0107 	bic.w	r1, r3, #7
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f98:	4a92      	ldr	r2, [pc, #584]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f9e:	e003      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f002 0304 	and.w	r3, r2, #4
 8005fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	d044      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd0:	2b05      	cmp	r3, #5
 8005fd2:	d825      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08006029 	.word	0x08006029
 8005fe0:	08005ff5 	.word	0x08005ff5
 8005fe4:	0800600b 	.word	0x0800600b
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08006029 	.word	0x08006029
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 ff1d 	bl	8006e3c <RCCEx_PLL2_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006008:	e00f      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800600a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600e:	3328      	adds	r3, #40	@ 0x28
 8006010:	2101      	movs	r1, #1
 8006012:	4618      	mov	r0, r3
 8006014:	f000 ffc4 	bl	8006fa0 <RCCEx_PLL3_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800601e:	e004      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006026:	e000      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006032:	4b6c      	ldr	r3, [pc, #432]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006036:	f023 0107 	bic.w	r1, r3, #7
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006042:	4a68      	ldr	r2, [pc, #416]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006044:	430b      	orrs	r3, r1
 8006046:	6593      	str	r3, [r2, #88]	@ 0x58
 8006048:	e003      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f002 0320 	and.w	r3, r2, #32
 800605e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006062:	2300      	movs	r3, #0
 8006064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800606c:	460b      	mov	r3, r1
 800606e:	4313      	orrs	r3, r2
 8006070:	d055      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800607e:	d033      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006084:	d82c      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800608a:	d02f      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006090:	d826      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006092:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006096:	d02b      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006098:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800609c:	d820      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a2:	d012      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80060a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a8:	d81a      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d022      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80060ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060b2:	d115      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	3308      	adds	r3, #8
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 febd 	bl	8006e3c <RCCEx_PLL2_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060c8:	e015      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ce:	3328      	adds	r3, #40	@ 0x28
 80060d0:	2102      	movs	r1, #2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 ff64 	bl	8006fa0 <RCCEx_PLL3_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060de:	e00a      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e6:	e006      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e8:	bf00      	nop
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060fe:	4b39      	ldr	r3, [pc, #228]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006102:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610e:	4a35      	ldr	r2, [pc, #212]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006110:	430b      	orrs	r3, r1
 8006112:	6553      	str	r3, [r2, #84]	@ 0x54
 8006114:	e003      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800612a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006134:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006138:	460b      	mov	r3, r1
 800613a:	4313      	orrs	r3, r2
 800613c:	d058      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006146:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800614a:	d033      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800614c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006150:	d82c      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	d02f      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615c:	d826      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800615e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006162:	d02b      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006164:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006168:	d820      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800616a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800616e:	d012      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006174:	d81a      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d022      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800617e:	d115      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006184:	3308      	adds	r3, #8
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fe57 	bl	8006e3c <RCCEx_PLL2_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006194:	e015      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	3328      	adds	r3, #40	@ 0x28
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fefe 	bl	8006fa0 <RCCEx_PLL3_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061aa:	e00a      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061b2:	e006      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b4:	bf00      	nop
 80061b6:	e004      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b8:	bf00      	nop
 80061ba:	e002      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061bc:	bf00      	nop
 80061be:	e000      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10e      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061ca:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061da:	4a02      	ldr	r2, [pc, #8]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061dc:	430b      	orrs	r3, r1
 80061de:	6593      	str	r3, [r2, #88]	@ 0x58
 80061e0:	e006      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006206:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800620a:	460b      	mov	r3, r1
 800620c:	4313      	orrs	r3, r2
 800620e:	d055      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006214:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006218:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800621c:	d033      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800621e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006222:	d82c      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006228:	d02f      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622e:	d826      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006230:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006234:	d02b      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006236:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800623a:	d820      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800623c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006240:	d012      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006246:	d81a      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d022      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006250:	d115      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006256:	3308      	adds	r3, #8
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fdee 	bl	8006e3c <RCCEx_PLL2_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006266:	e015      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626c:	3328      	adds	r3, #40	@ 0x28
 800626e:	2102      	movs	r1, #2
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fe95 	bl	8006fa0 <RCCEx_PLL3_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800627c:	e00a      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006284:	e006      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006286:	bf00      	nop
 8006288:	e004      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800628a:	bf00      	nop
 800628c:	e002      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800629c:	4ba1      	ldr	r3, [pc, #644]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800629e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062ac:	4a9d      	ldr	r2, [pc, #628]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ae:	430b      	orrs	r3, r1
 80062b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 0308 	and.w	r3, r2, #8
 80062c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d01e      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e8:	d10c      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	3328      	adds	r3, #40	@ 0x28
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fe54 	bl	8006fa0 <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006304:	4b87      	ldr	r3, [pc, #540]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006308:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006314:	4a83      	ldr	r2, [pc, #524]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006316:	430b      	orrs	r3, r1
 8006318:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f002 0310 	and.w	r3, r2, #16
 8006326:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800632a:	2300      	movs	r3, #0
 800632c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006330:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006334:	460b      	mov	r3, r1
 8006336:	4313      	orrs	r3, r2
 8006338:	d01e      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006346:	d10c      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	3328      	adds	r3, #40	@ 0x28
 800634e:	2102      	movs	r1, #2
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fe25 	bl	8006fa0 <RCCEx_PLL3_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006362:	4b70      	ldr	r3, [pc, #448]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006366:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006372:	4a6c      	ldr	r2, [pc, #432]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800638e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d03e      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a4:	d022      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80063a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063aa:	d81b      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d00b      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80063b6:	e015      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	3308      	adds	r3, #8
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fd3b 	bl	8006e3c <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063cc:	e00f      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	3328      	adds	r3, #40	@ 0x28
 80063d4:	2102      	movs	r1, #2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fde2 	bl	8006fa0 <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063e2:	e004      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063f6:	4b4b      	ldr	r3, [pc, #300]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006406:	4a47      	ldr	r2, [pc, #284]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006408:	430b      	orrs	r3, r1
 800640a:	6593      	str	r3, [r2, #88]	@ 0x58
 800640c:	e003      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006422:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006424:	2300      	movs	r3, #0
 8006426:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006428:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800642c:	460b      	mov	r3, r1
 800642e:	4313      	orrs	r3, r2
 8006430:	d03b      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800643e:	d01f      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006440:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006444:	d818      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800644a:	d003      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800644c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006450:	d007      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006452:	e011      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006454:	4b33      	ldr	r3, [pc, #204]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	4a32      	ldr	r2, [pc, #200]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800645a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800645e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006460:	e00f      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006466:	3328      	adds	r3, #40	@ 0x28
 8006468:	2101      	movs	r1, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fd98 	bl	8006fa0 <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006476:	e004      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800647e:	e000      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800648a:	4b26      	ldr	r3, [pc, #152]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800648c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649a:	4a22      	ldr	r2, [pc, #136]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800649c:	430b      	orrs	r3, r1
 800649e:	6553      	str	r3, [r2, #84]	@ 0x54
 80064a0:	e003      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80064b8:	2300      	movs	r3, #0
 80064ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80064bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d034      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d4:	d007      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80064d6:	e011      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d8:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	4a11      	ldr	r2, [pc, #68]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064e4:	e00e      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ea:	3308      	adds	r3, #8
 80064ec:	2102      	movs	r1, #2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fca4 	bl	8006e3c <RCCEx_PLL2_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064fa:	e003      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10d      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800650c:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800650e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006510:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651a:	4a02      	ldr	r2, [pc, #8]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800651c:	430b      	orrs	r3, r1
 800651e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006520:	e006      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006522:	bf00      	nop
 8006524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800653c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800653e:	2300      	movs	r3, #0
 8006540:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006542:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d00c      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006550:	3328      	adds	r3, #40	@ 0x28
 8006552:	2102      	movs	r1, #2
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fd23 	bl	8006fa0 <RCCEx_PLL3_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006572:	663b      	str	r3, [r7, #96]	@ 0x60
 8006574:	2300      	movs	r3, #0
 8006576:	667b      	str	r3, [r7, #100]	@ 0x64
 8006578:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800657c:	460b      	mov	r3, r1
 800657e:	4313      	orrs	r3, r2
 8006580:	d038      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800658e:	d018      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006590:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006594:	d811      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800659a:	d014      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800659c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a0:	d80b      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d011      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065aa:	d106      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ac:	4bc3      	ldr	r3, [pc, #780]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	4ac2      	ldr	r2, [pc, #776]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065b8:	e008      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065c0:	e004      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10b      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065d4:	4bb9      	ldr	r3, [pc, #740]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e4:	4ab5      	ldr	r2, [pc, #724]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e6:	430b      	orrs	r3, r1
 80065e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80065ea:	e003      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006600:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006602:	2300      	movs	r3, #0
 8006604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006606:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800660a:	460b      	mov	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006610:	4baa      	ldr	r3, [pc, #680]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006614:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800661e:	4aa7      	ldr	r2, [pc, #668]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006620:	430b      	orrs	r3, r1
 8006622:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006630:	653b      	str	r3, [r7, #80]	@ 0x50
 8006632:	2300      	movs	r3, #0
 8006634:	657b      	str	r3, [r7, #84]	@ 0x54
 8006636:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800663a:	460b      	mov	r3, r1
 800663c:	4313      	orrs	r3, r2
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006640:	4b9e      	ldr	r3, [pc, #632]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006650:	4a9a      	ldr	r2, [pc, #616]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006652:	430b      	orrs	r3, r1
 8006654:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006664:	2300      	movs	r3, #0
 8006666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006668:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800666c:	460b      	mov	r3, r1
 800666e:	4313      	orrs	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006672:	4b92      	ldr	r3, [pc, #584]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006676:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006680:	4a8e      	ldr	r2, [pc, #568]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006682:	430b      	orrs	r3, r1
 8006684:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006692:	643b      	str	r3, [r7, #64]	@ 0x40
 8006694:	2300      	movs	r3, #0
 8006696:	647b      	str	r3, [r7, #68]	@ 0x44
 8006698:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800669c:	460b      	mov	r3, r1
 800669e:	4313      	orrs	r3, r2
 80066a0:	d00e      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066a2:	4b86      	ldr	r3, [pc, #536]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	4a85      	ldr	r2, [pc, #532]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066ac:	6113      	str	r3, [r2, #16]
 80066ae:	4b83      	ldr	r3, [pc, #524]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066b0:	6919      	ldr	r1, [r3, #16]
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066ba:	4a80      	ldr	r2, [pc, #512]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066ce:	2300      	movs	r3, #0
 80066d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066d6:	460b      	mov	r3, r1
 80066d8:	4313      	orrs	r3, r2
 80066da:	d009      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066dc:	4b77      	ldr	r3, [pc, #476]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ea:	4a74      	ldr	r2, [pc, #464]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ec:	430b      	orrs	r3, r1
 80066ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fe:	2300      	movs	r3, #0
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
 8006702:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006706:	460b      	mov	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800670c:	4b6b      	ldr	r3, [pc, #428]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800670e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006710:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800671c:	4a67      	ldr	r2, [pc, #412]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800671e:	430b      	orrs	r3, r1
 8006720:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	2100      	movs	r1, #0
 800672c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006734:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d011      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	3308      	adds	r3, #8
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fb78 	bl	8006e3c <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	2100      	movs	r1, #0
 800676c:	6239      	str	r1, [r7, #32]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
 8006774:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006778:	460b      	mov	r3, r1
 800677a:	4313      	orrs	r3, r2
 800677c:	d011      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	3308      	adds	r3, #8
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fb58 	bl	8006e3c <RCCEx_PLL2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800679e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	2100      	movs	r1, #0
 80067ac:	61b9      	str	r1, [r7, #24]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d011      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	3308      	adds	r3, #8
 80067c4:	2102      	movs	r1, #2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fb38 	bl	8006e3c <RCCEx_PLL2_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	2100      	movs	r1, #0
 80067ec:	6139      	str	r1, [r7, #16]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d011      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	3328      	adds	r3, #40	@ 0x28
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fbca 	bl	8006fa0 <RCCEx_PLL3_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800681e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	2100      	movs	r1, #0
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006838:	460b      	mov	r3, r1
 800683a:	4313      	orrs	r3, r2
 800683c:	d011      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	3328      	adds	r3, #40	@ 0x28
 8006844:	2101      	movs	r1, #1
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fbaa 	bl	8006fa0 <RCCEx_PLL3_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	2100      	movs	r1, #0
 800686c:	6039      	str	r1, [r7, #0]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d011      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	3328      	adds	r3, #40	@ 0x28
 8006884:	2102      	movs	r1, #2
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fb8a 	bl	8006fa0 <RCCEx_PLL3_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800689e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80068a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e000      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80068b6:	46bd      	mov	sp, r7
 80068b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068bc:	58024400 	.word	0x58024400

080068c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068c4:	f7fe fd96 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b06      	ldr	r3, [pc, #24]	@ (80068e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	4904      	ldr	r1, [pc, #16]	@ (80068e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068d6:	5ccb      	ldrb	r3, [r1, r3]
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	58024400 	.word	0x58024400
 80068e8:	080119bc 	.word	0x080119bc

080068ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	@ 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068f4:	4ba1      	ldr	r3, [pc, #644]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80068fe:	4b9f      	ldr	r3, [pc, #636]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	0b1b      	lsrs	r3, r3, #12
 8006904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006908:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800690a:	4b9c      	ldr	r3, [pc, #624]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	091b      	lsrs	r3, r3, #4
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006916:	4b99      	ldr	r3, [pc, #612]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691a:	08db      	lsrs	r3, r3, #3
 800691c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8111 	beq.w	8006b5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b02      	cmp	r3, #2
 800693e:	f000 8083 	beq.w	8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b02      	cmp	r3, #2
 8006946:	f200 80a1 	bhi.w	8006a8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d056      	beq.n	8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006956:	e099      	b.n	8006a8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006958:	4b88      	ldr	r3, [pc, #544]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d02d      	beq.n	80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006964:	4b85      	ldr	r3, [pc, #532]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	08db      	lsrs	r3, r3, #3
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	4a84      	ldr	r2, [pc, #528]	@ (8006b80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006970:	fa22 f303 	lsr.w	r3, r2, r3
 8006974:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	ee07 3a90 	vmov	s15, r3
 800697c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800698e:	4b7b      	ldr	r3, [pc, #492]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699e:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069be:	e087      	b.n	8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80069ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d2:	4b6a      	ldr	r3, [pc, #424]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a02:	e065      	b.n	8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a16:	4b59      	ldr	r3, [pc, #356]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a46:	e043      	b.n	8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5a:	4b48      	ldr	r3, [pc, #288]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a8a:	e021      	b.n	8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9e:	4b37      	ldr	r3, [pc, #220]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ab2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ace:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	0a5b      	lsrs	r3, r3, #9
 8006ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af6:	ee17 2a90 	vmov	r2, s15
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006afe:	4b1f      	ldr	r3, [pc, #124]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b02:	0c1b      	lsrs	r3, r3, #16
 8006b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b24:	ee17 2a90 	vmov	r2, s15
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b2c:	4b13      	ldr	r3, [pc, #76]	@ (8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	0e1b      	lsrs	r3, r3, #24
 8006b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b52:	ee17 2a90 	vmov	r2, s15
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b5a:	e008      	b.n	8006b6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	609a      	str	r2, [r3, #8]
}
 8006b6e:	bf00      	nop
 8006b70:	3724      	adds	r7, #36	@ 0x24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	03d09000 	.word	0x03d09000
 8006b84:	46000000 	.word	0x46000000
 8006b88:	4c742400 	.word	0x4c742400
 8006b8c:	4a742400 	.word	0x4a742400
 8006b90:	4bfa0000 	.word	0x4bfa0000

08006b94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b089      	sub	sp, #36	@ 0x24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b9c:	4ba1      	ldr	r3, [pc, #644]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba0:	f003 0303 	and.w	r3, r3, #3
 8006ba4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006ba6:	4b9f      	ldr	r3, [pc, #636]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006baa:	0d1b      	lsrs	r3, r3, #20
 8006bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006bb2:	4b9c      	ldr	r3, [pc, #624]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb6:	0a1b      	lsrs	r3, r3, #8
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006bbe:	4b99      	ldr	r3, [pc, #612]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc2:	08db      	lsrs	r3, r3, #3
 8006bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8111 	beq.w	8006e04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	f000 8083 	beq.w	8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f200 80a1 	bhi.w	8006d34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d056      	beq.n	8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006bfe:	e099      	b.n	8006d34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c00:	4b88      	ldr	r3, [pc, #544]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d02d      	beq.n	8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c0c:	4b85      	ldr	r3, [pc, #532]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	08db      	lsrs	r3, r3, #3
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	4a84      	ldr	r2, [pc, #528]	@ (8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	ee07 3a90 	vmov	s15, r3
 8006c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c36:	4b7b      	ldr	r3, [pc, #492]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c66:	e087      	b.n	8006d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006caa:	e065      	b.n	8006d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cbe:	4b59      	ldr	r3, [pc, #356]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cee:	e043      	b.n	8006d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d02:	4b48      	ldr	r3, [pc, #288]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d32:	e021      	b.n	8006d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d46:	4b37      	ldr	r3, [pc, #220]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d78:	4b2a      	ldr	r3, [pc, #168]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	0a5b      	lsrs	r3, r3, #9
 8006d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d9e:	ee17 2a90 	vmov	r2, s15
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006da6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	0c1b      	lsrs	r3, r3, #16
 8006dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dcc:	ee17 2a90 	vmov	r2, s15
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006dd4:	4b13      	ldr	r3, [pc, #76]	@ (8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd8:	0e1b      	lsrs	r3, r3, #24
 8006dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dfa:	ee17 2a90 	vmov	r2, s15
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e02:	e008      	b.n	8006e16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	609a      	str	r2, [r3, #8]
}
 8006e16:	bf00      	nop
 8006e18:	3724      	adds	r7, #36	@ 0x24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	58024400 	.word	0x58024400
 8006e28:	03d09000 	.word	0x03d09000
 8006e2c:	46000000 	.word	0x46000000
 8006e30:	4c742400 	.word	0x4c742400
 8006e34:	4a742400 	.word	0x4a742400
 8006e38:	4bfa0000 	.word	0x4bfa0000

08006e3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e4a:	4b53      	ldr	r3, [pc, #332]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d101      	bne.n	8006e5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e099      	b.n	8006f8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006e60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e66:	f7fa ff61 	bl	8001d2c <HAL_GetTick>
 8006e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e6c:	e008      	b.n	8006e80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e6e:	f7fa ff5d 	bl	8001d2c <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d901      	bls.n	8006e80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e086      	b.n	8006f8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e80:	4b45      	ldr	r3, [pc, #276]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1f0      	bne.n	8006e6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e8c:	4b42      	ldr	r3, [pc, #264]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	031b      	lsls	r3, r3, #12
 8006e9a:	493f      	ldr	r1, [pc, #252]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	025b      	lsls	r3, r3, #9
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	041b      	lsls	r3, r3, #16
 8006ebe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	061b      	lsls	r3, r3, #24
 8006ecc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ed0:	4931      	ldr	r1, [pc, #196]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ed6:	4b30      	ldr	r3, [pc, #192]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	492d      	ldr	r1, [pc, #180]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	f023 0220 	bic.w	r2, r3, #32
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	4928      	ldr	r1, [pc, #160]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006efa:	4b27      	ldr	r3, [pc, #156]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	4a26      	ldr	r2, [pc, #152]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f00:	f023 0310 	bic.w	r3, r3, #16
 8006f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f06:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f0a:	4b24      	ldr	r3, [pc, #144]	@ (8006f9c <RCCEx_PLL2_Config+0x160>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	69d2      	ldr	r2, [r2, #28]
 8006f12:	00d2      	lsls	r2, r2, #3
 8006f14:	4920      	ldr	r1, [pc, #128]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f20:	f043 0310 	orr.w	r3, r3, #16
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	4a19      	ldr	r2, [pc, #100]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f38:	e00f      	b.n	8006f5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d106      	bne.n	8006f4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f40:	4b15      	ldr	r3, [pc, #84]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	4a14      	ldr	r2, [pc, #80]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f4c:	e005      	b.n	8006f5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f4e:	4b12      	ldr	r3, [pc, #72]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	4a11      	ldr	r2, [pc, #68]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f66:	f7fa fee1 	bl	8001d2c <HAL_GetTick>
 8006f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f6c:	e008      	b.n	8006f80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f6e:	f7fa fedd 	bl	8001d2c <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d901      	bls.n	8006f80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e006      	b.n	8006f8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f80:	4b05      	ldr	r3, [pc, #20]	@ (8006f98 <RCCEx_PLL2_Config+0x15c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0f0      	beq.n	8006f6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	58024400 	.word	0x58024400
 8006f9c:	ffff0007 	.word	0xffff0007

08006fa0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fae:	4b53      	ldr	r3, [pc, #332]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d101      	bne.n	8006fbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e099      	b.n	80070f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8006fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fca:	f7fa feaf 	bl	8001d2c <HAL_GetTick>
 8006fce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fd0:	e008      	b.n	8006fe4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fd2:	f7fa feab 	bl	8001d2c <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e086      	b.n	80070f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fe4:	4b45      	ldr	r3, [pc, #276]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f0      	bne.n	8006fd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ff0:	4b42      	ldr	r3, [pc, #264]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	051b      	lsls	r3, r3, #20
 8006ffe:	493f      	ldr	r1, [pc, #252]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007000:	4313      	orrs	r3, r2
 8007002:	628b      	str	r3, [r1, #40]	@ 0x28
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	3b01      	subs	r3, #1
 800700a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	3b01      	subs	r3, #1
 8007014:	025b      	lsls	r3, r3, #9
 8007016:	b29b      	uxth	r3, r3
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	3b01      	subs	r3, #1
 8007020:	041b      	lsls	r3, r3, #16
 8007022:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	3b01      	subs	r3, #1
 800702e:	061b      	lsls	r3, r3, #24
 8007030:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007034:	4931      	ldr	r1, [pc, #196]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007036:	4313      	orrs	r3, r2
 8007038:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800703a:	4b30      	ldr	r3, [pc, #192]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	492d      	ldr	r1, [pc, #180]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007048:	4313      	orrs	r3, r2
 800704a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800704c:	4b2b      	ldr	r3, [pc, #172]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	4928      	ldr	r1, [pc, #160]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 800705a:	4313      	orrs	r3, r2
 800705c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800705e:	4b27      	ldr	r3, [pc, #156]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	4a26      	ldr	r2, [pc, #152]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007068:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800706a:	4b24      	ldr	r3, [pc, #144]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 800706c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706e:	4b24      	ldr	r3, [pc, #144]	@ (8007100 <RCCEx_PLL3_Config+0x160>)
 8007070:	4013      	ands	r3, r2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	69d2      	ldr	r2, [r2, #28]
 8007076:	00d2      	lsls	r2, r2, #3
 8007078:	4920      	ldr	r1, [pc, #128]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 800707a:	4313      	orrs	r3, r2
 800707c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800707e:	4b1f      	ldr	r3, [pc, #124]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	4a1e      	ldr	r2, [pc, #120]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007090:	4b1a      	ldr	r3, [pc, #104]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007094:	4a19      	ldr	r2, [pc, #100]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 8007096:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800709a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800709c:	e00f      	b.n	80070be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d106      	bne.n	80070b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070a4:	4b15      	ldr	r3, [pc, #84]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	4a14      	ldr	r2, [pc, #80]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 80070aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070b0:	e005      	b.n	80070be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070b2:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b6:	4a11      	ldr	r2, [pc, #68]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 80070b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070be:	4b0f      	ldr	r3, [pc, #60]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a0e      	ldr	r2, [pc, #56]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 80070c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ca:	f7fa fe2f 	bl	8001d2c <HAL_GetTick>
 80070ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070d0:	e008      	b.n	80070e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070d2:	f7fa fe2b 	bl	8001d2c <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e006      	b.n	80070f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070e4:	4b05      	ldr	r3, [pc, #20]	@ (80070fc <RCCEx_PLL3_Config+0x15c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f0      	beq.n	80070d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400
 8007100:	ffff0007 	.word	0xffff0007

08007104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e042      	b.n	800719c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fa fb05 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2224      	movs	r2, #36	@ 0x24
 8007132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 f9d2 	bl	80084f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fc67 	bl	8007a28 <UART_SetConfig>
 800715a:	4603      	mov	r3, r0
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e01b      	b.n	800719c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fa51 	bl	800863c <UART_CheckIdleState>
 800719a:	4603      	mov	r3, r0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	@ 0x28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d137      	bne.n	800722c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <HAL_UART_Receive_IT+0x24>
 80071c2:	88fb      	ldrh	r3, [r7, #6]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e030      	b.n	800722e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a18      	ldr	r2, [pc, #96]	@ (8007238 <HAL_UART_Receive_IT+0x94>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d01f      	beq.n	800721c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d018      	beq.n	800721c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	613b      	str	r3, [r7, #16]
   return(result);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	623b      	str	r3, [r7, #32]
 800720a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	69f9      	ldr	r1, [r7, #28]
 800720e:	6a3a      	ldr	r2, [r7, #32]
 8007210:	e841 2300 	strex	r3, r2, [r1]
 8007214:	61bb      	str	r3, [r7, #24]
   return(result);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e6      	bne.n	80071ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	461a      	mov	r2, r3
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f001 fb22 	bl	800886c <UART_Start_Receive_IT>
 8007228:	4603      	mov	r3, r0
 800722a:	e000      	b.n	800722e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3728      	adds	r7, #40	@ 0x28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	58000c00 	.word	0x58000c00

0800723c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b0ba      	sub	sp, #232	@ 0xe8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007266:	f640 030f 	movw	r3, #2063	@ 0x80f
 800726a:	4013      	ands	r3, r2
 800726c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11b      	bne.n	80072b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d015      	beq.n	80072b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007288:	f003 0320 	and.w	r3, r3, #32
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d009      	beq.n	80072b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8393 	beq.w	80079cc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
      }
      return;
 80072ae:	e38d      	b.n	80079cc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8123 	beq.w	8007500 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80072ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80072be:	4b8d      	ldr	r3, [pc, #564]	@ (80074f4 <HAL_UART_IRQHandler+0x2b8>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80072ca:	4b8b      	ldr	r3, [pc, #556]	@ (80074f8 <HAL_UART_IRQHandler+0x2bc>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8116 	beq.w	8007500 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d011      	beq.n	8007304 <HAL_UART_IRQHandler+0xc8>
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2201      	movs	r2, #1
 80072f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fa:	f043 0201 	orr.w	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d011      	beq.n	8007334 <HAL_UART_IRQHandler+0xf8>
 8007310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00b      	beq.n	8007334 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2202      	movs	r2, #2
 8007322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732a:	f043 0204 	orr.w	r2, r3, #4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d011      	beq.n	8007364 <HAL_UART_IRQHandler+0x128>
 8007340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2204      	movs	r2, #4
 8007352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735a:	f043 0202 	orr.w	r2, r3, #2
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b00      	cmp	r3, #0
 800736e:	d017      	beq.n	80073a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800737c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007380:	4b5c      	ldr	r3, [pc, #368]	@ (80074f4 <HAL_UART_IRQHandler+0x2b8>)
 8007382:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00b      	beq.n	80073a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2208      	movs	r2, #8
 800738e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007396:	f043 0208 	orr.w	r2, r3, #8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d012      	beq.n	80073d2 <HAL_UART_IRQHandler+0x196>
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00c      	beq.n	80073d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c8:	f043 0220 	orr.w	r2, r3, #32
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 82f9 	beq.w	80079d0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d013      	beq.n	8007412 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007418:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	d005      	beq.n	8007436 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800742a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800742e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007432:	2b00      	cmp	r3, #0
 8007434:	d054      	beq.n	80074e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 fb3a 	bl	8008ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d146      	bne.n	80074d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3308      	adds	r3, #8
 8007472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007476:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800747a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800748e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1d9      	bne.n	800744a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800749c:	2b00      	cmp	r3, #0
 800749e:	d017      	beq.n	80074d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074a6:	4a15      	ldr	r2, [pc, #84]	@ (80074fc <HAL_UART_IRQHandler+0x2c0>)
 80074a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fb f91d 	bl	80026f0 <HAL_DMA_Abort_IT>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d019      	beq.n	80074f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80074ca:	4610      	mov	r0, r2
 80074cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ce:	e00f      	b.n	80074f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fa93 	bl	80079fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d6:	e00b      	b.n	80074f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa8f 	bl	80079fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074de:	e007      	b.n	80074f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fa8b 	bl	80079fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80074ee:	e26f      	b.n	80079d0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f0:	bf00      	nop
    return;
 80074f2:	e26d      	b.n	80079d0 <HAL_UART_IRQHandler+0x794>
 80074f4:	10000001 	.word	0x10000001
 80074f8:	04000120 	.word	0x04000120
 80074fc:	08008b7d 	.word	0x08008b7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007504:	2b01      	cmp	r3, #1
 8007506:	f040 8203 	bne.w	8007910 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 81fc 	beq.w	8007910 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 81f5 	beq.w	8007910 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2210      	movs	r2, #16
 800752c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007538:	2b40      	cmp	r3, #64	@ 0x40
 800753a:	f040 816d 	bne.w	8007818 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4aa4      	ldr	r2, [pc, #656]	@ (80077d8 <HAL_UART_IRQHandler+0x59c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d068      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4aa1      	ldr	r2, [pc, #644]	@ (80077dc <HAL_UART_IRQHandler+0x5a0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d061      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a9f      	ldr	r2, [pc, #636]	@ (80077e0 <HAL_UART_IRQHandler+0x5a4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d05a      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a9c      	ldr	r2, [pc, #624]	@ (80077e4 <HAL_UART_IRQHandler+0x5a8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d053      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a9a      	ldr	r2, [pc, #616]	@ (80077e8 <HAL_UART_IRQHandler+0x5ac>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d04c      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a97      	ldr	r2, [pc, #604]	@ (80077ec <HAL_UART_IRQHandler+0x5b0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d045      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a95      	ldr	r2, [pc, #596]	@ (80077f0 <HAL_UART_IRQHandler+0x5b4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d03e      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a92      	ldr	r2, [pc, #584]	@ (80077f4 <HAL_UART_IRQHandler+0x5b8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d037      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a90      	ldr	r2, [pc, #576]	@ (80077f8 <HAL_UART_IRQHandler+0x5bc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d030      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a8d      	ldr	r2, [pc, #564]	@ (80077fc <HAL_UART_IRQHandler+0x5c0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d029      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a8b      	ldr	r2, [pc, #556]	@ (8007800 <HAL_UART_IRQHandler+0x5c4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d022      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a88      	ldr	r2, [pc, #544]	@ (8007804 <HAL_UART_IRQHandler+0x5c8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d01b      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a86      	ldr	r2, [pc, #536]	@ (8007808 <HAL_UART_IRQHandler+0x5cc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d014      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a83      	ldr	r2, [pc, #524]	@ (800780c <HAL_UART_IRQHandler+0x5d0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00d      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a81      	ldr	r2, [pc, #516]	@ (8007810 <HAL_UART_IRQHandler+0x5d4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d006      	beq.n	800761e <HAL_UART_IRQHandler+0x3e2>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a7e      	ldr	r2, [pc, #504]	@ (8007814 <HAL_UART_IRQHandler+0x5d8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d106      	bne.n	800762c <HAL_UART_IRQHandler+0x3f0>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	b29b      	uxth	r3, r3
 800762a:	e005      	b.n	8007638 <HAL_UART_IRQHandler+0x3fc>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800763c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 80ad 	beq.w	80077a0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800764c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007650:	429a      	cmp	r2, r3
 8007652:	f080 80a5 	bcs.w	80077a0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800765c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800766c:	f000 8087 	beq.w	800777e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800768c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800769a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800769e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1da      	bne.n	8007670 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e1      	bne.n	80076ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3308      	adds	r3, #8
 80076fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800770c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800771a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800771c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007720:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e3      	bne.n	80076f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800774a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800774c:	f023 0310 	bic.w	r3, r3, #16
 8007750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800775e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007760:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800776c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e4      	bne.n	800773c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007778:	4618      	mov	r0, r3
 800777a:	f7fa fc9b 	bl	80020b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2202      	movs	r2, #2
 8007782:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007790:	b29b      	uxth	r3, r3
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	b29b      	uxth	r3, r3
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f939 	bl	8007a10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800779e:	e119      	b.n	80079d4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077aa:	429a      	cmp	r2, r3
 80077ac:	f040 8112 	bne.w	80079d4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077bc:	f040 810a 	bne.w	80079d4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f91e 	bl	8007a10 <HAL_UARTEx_RxEventCallback>
      return;
 80077d4:	e0fe      	b.n	80079d4 <HAL_UART_IRQHandler+0x798>
 80077d6:	bf00      	nop
 80077d8:	40020010 	.word	0x40020010
 80077dc:	40020028 	.word	0x40020028
 80077e0:	40020040 	.word	0x40020040
 80077e4:	40020058 	.word	0x40020058
 80077e8:	40020070 	.word	0x40020070
 80077ec:	40020088 	.word	0x40020088
 80077f0:	400200a0 	.word	0x400200a0
 80077f4:	400200b8 	.word	0x400200b8
 80077f8:	40020410 	.word	0x40020410
 80077fc:	40020428 	.word	0x40020428
 8007800:	40020440 	.word	0x40020440
 8007804:	40020458 	.word	0x40020458
 8007808:	40020470 	.word	0x40020470
 800780c:	40020488 	.word	0x40020488
 8007810:	400204a0 	.word	0x400204a0
 8007814:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007824:	b29b      	uxth	r3, r3
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80cf 	beq.w	80079d8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800783a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 80ca 	beq.w	80079d8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007858:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007866:	647b      	str	r3, [r7, #68]	@ 0x44
 8007868:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800786c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e4      	bne.n	8007844 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3308      	adds	r3, #8
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	623b      	str	r3, [r7, #32]
   return(result);
 800788a:	6a3a      	ldr	r2, [r7, #32]
 800788c:	4b55      	ldr	r3, [pc, #340]	@ (80079e4 <HAL_UART_IRQHandler+0x7a8>)
 800788e:	4013      	ands	r3, r2
 8007890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800789e:	633a      	str	r2, [r7, #48]	@ 0x30
 80078a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e3      	bne.n	800787a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0310 	bic.w	r3, r3, #16
 80078da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078e8:	61fb      	str	r3, [r7, #28]
 80078ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	69b9      	ldr	r1, [r7, #24]
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	617b      	str	r3, [r7, #20]
   return(result);
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e4      	bne.n	80078c6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f881 	bl	8007a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800790e:	e063      	b.n	80079d8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00e      	beq.n	800793a <HAL_UART_IRQHandler+0x6fe>
 800791c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fe80 	bl	8009638 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007938:	e051      	b.n	80079de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007942:	2b00      	cmp	r3, #0
 8007944:	d014      	beq.n	8007970 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800794a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d008      	beq.n	8007970 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007962:	2b00      	cmp	r3, #0
 8007964:	d03a      	beq.n	80079dc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
    }
    return;
 800796e:	e035      	b.n	80079dc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d009      	beq.n	8007990 <HAL_UART_IRQHandler+0x754>
 800797c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 f909 	bl	8008ba0 <UART_EndTransmit_IT>
    return;
 800798e:	e026      	b.n	80079de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <HAL_UART_IRQHandler+0x774>
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fe59 	bl	8009660 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ae:	e016      	b.n	80079de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d010      	beq.n	80079de <HAL_UART_IRQHandler+0x7a2>
 80079bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da0c      	bge.n	80079de <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 fe41 	bl	800964c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ca:	e008      	b.n	80079de <HAL_UART_IRQHandler+0x7a2>
      return;
 80079cc:	bf00      	nop
 80079ce:	e006      	b.n	80079de <HAL_UART_IRQHandler+0x7a2>
    return;
 80079d0:	bf00      	nop
 80079d2:	e004      	b.n	80079de <HAL_UART_IRQHandler+0x7a2>
      return;
 80079d4:	bf00      	nop
 80079d6:	e002      	b.n	80079de <HAL_UART_IRQHandler+0x7a2>
      return;
 80079d8:	bf00      	nop
 80079da:	e000      	b.n	80079de <HAL_UART_IRQHandler+0x7a2>
    return;
 80079dc:	bf00      	nop
  }
}
 80079de:	37e8      	adds	r7, #232	@ 0xe8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	effffffe 	.word	0xeffffffe

080079e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a2c:	b092      	sub	sp, #72	@ 0x48
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	4bbe      	ldr	r3, [pc, #760]	@ (8007d50 <UART_SetConfig+0x328>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	6812      	ldr	r2, [r2, #0]
 8007a5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a60:	430b      	orrs	r3, r1
 8007a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	68da      	ldr	r2, [r3, #12]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4ab3      	ldr	r2, [pc, #716]	@ (8007d54 <UART_SetConfig+0x32c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d004      	beq.n	8007a94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a90:	4313      	orrs	r3, r2
 8007a92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	4baf      	ldr	r3, [pc, #700]	@ (8007d58 <UART_SetConfig+0x330>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	6812      	ldr	r2, [r2, #0]
 8007aa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aae:	f023 010f 	bic.w	r1, r3, #15
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4aa6      	ldr	r2, [pc, #664]	@ (8007d5c <UART_SetConfig+0x334>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d177      	bne.n	8007bb8 <UART_SetConfig+0x190>
 8007ac8:	4ba5      	ldr	r3, [pc, #660]	@ (8007d60 <UART_SetConfig+0x338>)
 8007aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007acc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ad0:	2b28      	cmp	r3, #40	@ 0x28
 8007ad2:	d86d      	bhi.n	8007bb0 <UART_SetConfig+0x188>
 8007ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8007adc <UART_SetConfig+0xb4>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007b81 	.word	0x08007b81
 8007ae0:	08007bb1 	.word	0x08007bb1
 8007ae4:	08007bb1 	.word	0x08007bb1
 8007ae8:	08007bb1 	.word	0x08007bb1
 8007aec:	08007bb1 	.word	0x08007bb1
 8007af0:	08007bb1 	.word	0x08007bb1
 8007af4:	08007bb1 	.word	0x08007bb1
 8007af8:	08007bb1 	.word	0x08007bb1
 8007afc:	08007b89 	.word	0x08007b89
 8007b00:	08007bb1 	.word	0x08007bb1
 8007b04:	08007bb1 	.word	0x08007bb1
 8007b08:	08007bb1 	.word	0x08007bb1
 8007b0c:	08007bb1 	.word	0x08007bb1
 8007b10:	08007bb1 	.word	0x08007bb1
 8007b14:	08007bb1 	.word	0x08007bb1
 8007b18:	08007bb1 	.word	0x08007bb1
 8007b1c:	08007b91 	.word	0x08007b91
 8007b20:	08007bb1 	.word	0x08007bb1
 8007b24:	08007bb1 	.word	0x08007bb1
 8007b28:	08007bb1 	.word	0x08007bb1
 8007b2c:	08007bb1 	.word	0x08007bb1
 8007b30:	08007bb1 	.word	0x08007bb1
 8007b34:	08007bb1 	.word	0x08007bb1
 8007b38:	08007bb1 	.word	0x08007bb1
 8007b3c:	08007b99 	.word	0x08007b99
 8007b40:	08007bb1 	.word	0x08007bb1
 8007b44:	08007bb1 	.word	0x08007bb1
 8007b48:	08007bb1 	.word	0x08007bb1
 8007b4c:	08007bb1 	.word	0x08007bb1
 8007b50:	08007bb1 	.word	0x08007bb1
 8007b54:	08007bb1 	.word	0x08007bb1
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007ba1 	.word	0x08007ba1
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007bb1 	.word	0x08007bb1
 8007b6c:	08007bb1 	.word	0x08007bb1
 8007b70:	08007bb1 	.word	0x08007bb1
 8007b74:	08007bb1 	.word	0x08007bb1
 8007b78:	08007bb1 	.word	0x08007bb1
 8007b7c:	08007ba9 	.word	0x08007ba9
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e222      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007b88:	2304      	movs	r3, #4
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e21e      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007b90:	2308      	movs	r3, #8
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e21a      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e216      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ba0:	2320      	movs	r3, #32
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e212      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ba8:	2340      	movs	r3, #64	@ 0x40
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e20e      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007bb0:	2380      	movs	r3, #128	@ 0x80
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e20a      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a69      	ldr	r2, [pc, #420]	@ (8007d64 <UART_SetConfig+0x33c>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d130      	bne.n	8007c24 <UART_SetConfig+0x1fc>
 8007bc2:	4b67      	ldr	r3, [pc, #412]	@ (8007d60 <UART_SetConfig+0x338>)
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	d826      	bhi.n	8007c1c <UART_SetConfig+0x1f4>
 8007bce:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd4 <UART_SetConfig+0x1ac>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007bed 	.word	0x08007bed
 8007bd8:	08007bf5 	.word	0x08007bf5
 8007bdc:	08007bfd 	.word	0x08007bfd
 8007be0:	08007c05 	.word	0x08007c05
 8007be4:	08007c0d 	.word	0x08007c0d
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	2300      	movs	r3, #0
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e1ec      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e1e8      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e1e4      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c04:	2310      	movs	r3, #16
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e1e0      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e1dc      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c14:	2340      	movs	r3, #64	@ 0x40
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1a:	e1d8      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c1c:	2380      	movs	r3, #128	@ 0x80
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e1d4      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a4f      	ldr	r2, [pc, #316]	@ (8007d68 <UART_SetConfig+0x340>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d130      	bne.n	8007c90 <UART_SetConfig+0x268>
 8007c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8007d60 <UART_SetConfig+0x338>)
 8007c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d826      	bhi.n	8007c88 <UART_SetConfig+0x260>
 8007c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c40 <UART_SetConfig+0x218>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c59 	.word	0x08007c59
 8007c44:	08007c61 	.word	0x08007c61
 8007c48:	08007c69 	.word	0x08007c69
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e1b6      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e1b2      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e1ae      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e1aa      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c78:	2320      	movs	r3, #32
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e1a6      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c80:	2340      	movs	r3, #64	@ 0x40
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e1a2      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c88:	2380      	movs	r3, #128	@ 0x80
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e19e      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a35      	ldr	r2, [pc, #212]	@ (8007d6c <UART_SetConfig+0x344>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d130      	bne.n	8007cfc <UART_SetConfig+0x2d4>
 8007c9a:	4b31      	ldr	r3, [pc, #196]	@ (8007d60 <UART_SetConfig+0x338>)
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d826      	bhi.n	8007cf4 <UART_SetConfig+0x2cc>
 8007ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <UART_SetConfig+0x284>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007cd5 	.word	0x08007cd5
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e180      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e17c      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e178      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e174      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e170      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007cec:	2340      	movs	r3, #64	@ 0x40
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e16c      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007cf4:	2380      	movs	r3, #128	@ 0x80
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e168      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1b      	ldr	r2, [pc, #108]	@ (8007d70 <UART_SetConfig+0x348>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d142      	bne.n	8007d8c <UART_SetConfig+0x364>
 8007d06:	4b16      	ldr	r3, [pc, #88]	@ (8007d60 <UART_SetConfig+0x338>)
 8007d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d838      	bhi.n	8007d84 <UART_SetConfig+0x35c>
 8007d12:	a201      	add	r2, pc, #4	@ (adr r2, 8007d18 <UART_SetConfig+0x2f0>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d31 	.word	0x08007d31
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d41 	.word	0x08007d41
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d75 	.word	0x08007d75
 8007d2c:	08007d7d 	.word	0x08007d7d
 8007d30:	2300      	movs	r3, #0
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e14a      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e146      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e142      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e13e      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007d50:	cfff69f3 	.word	0xcfff69f3
 8007d54:	58000c00 	.word	0x58000c00
 8007d58:	11fff4ff 	.word	0x11fff4ff
 8007d5c:	40011000 	.word	0x40011000
 8007d60:	58024400 	.word	0x58024400
 8007d64:	40004400 	.word	0x40004400
 8007d68:	40004800 	.word	0x40004800
 8007d6c:	40004c00 	.word	0x40004c00
 8007d70:	40005000 	.word	0x40005000
 8007d74:	2320      	movs	r3, #32
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7a:	e128      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007d7c:	2340      	movs	r3, #64	@ 0x40
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d82:	e124      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007d84:	2380      	movs	r3, #128	@ 0x80
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8a:	e120      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4acb      	ldr	r2, [pc, #812]	@ (80080c0 <UART_SetConfig+0x698>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d176      	bne.n	8007e84 <UART_SetConfig+0x45c>
 8007d96:	4bcb      	ldr	r3, [pc, #812]	@ (80080c4 <UART_SetConfig+0x69c>)
 8007d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d9e:	2b28      	cmp	r3, #40	@ 0x28
 8007da0:	d86c      	bhi.n	8007e7c <UART_SetConfig+0x454>
 8007da2:	a201      	add	r2, pc, #4	@ (adr r2, 8007da8 <UART_SetConfig+0x380>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007e4d 	.word	0x08007e4d
 8007dac:	08007e7d 	.word	0x08007e7d
 8007db0:	08007e7d 	.word	0x08007e7d
 8007db4:	08007e7d 	.word	0x08007e7d
 8007db8:	08007e7d 	.word	0x08007e7d
 8007dbc:	08007e7d 	.word	0x08007e7d
 8007dc0:	08007e7d 	.word	0x08007e7d
 8007dc4:	08007e7d 	.word	0x08007e7d
 8007dc8:	08007e55 	.word	0x08007e55
 8007dcc:	08007e7d 	.word	0x08007e7d
 8007dd0:	08007e7d 	.word	0x08007e7d
 8007dd4:	08007e7d 	.word	0x08007e7d
 8007dd8:	08007e7d 	.word	0x08007e7d
 8007ddc:	08007e7d 	.word	0x08007e7d
 8007de0:	08007e7d 	.word	0x08007e7d
 8007de4:	08007e7d 	.word	0x08007e7d
 8007de8:	08007e5d 	.word	0x08007e5d
 8007dec:	08007e7d 	.word	0x08007e7d
 8007df0:	08007e7d 	.word	0x08007e7d
 8007df4:	08007e7d 	.word	0x08007e7d
 8007df8:	08007e7d 	.word	0x08007e7d
 8007dfc:	08007e7d 	.word	0x08007e7d
 8007e00:	08007e7d 	.word	0x08007e7d
 8007e04:	08007e7d 	.word	0x08007e7d
 8007e08:	08007e65 	.word	0x08007e65
 8007e0c:	08007e7d 	.word	0x08007e7d
 8007e10:	08007e7d 	.word	0x08007e7d
 8007e14:	08007e7d 	.word	0x08007e7d
 8007e18:	08007e7d 	.word	0x08007e7d
 8007e1c:	08007e7d 	.word	0x08007e7d
 8007e20:	08007e7d 	.word	0x08007e7d
 8007e24:	08007e7d 	.word	0x08007e7d
 8007e28:	08007e6d 	.word	0x08007e6d
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	08007e7d 	.word	0x08007e7d
 8007e34:	08007e7d 	.word	0x08007e7d
 8007e38:	08007e7d 	.word	0x08007e7d
 8007e3c:	08007e7d 	.word	0x08007e7d
 8007e40:	08007e7d 	.word	0x08007e7d
 8007e44:	08007e7d 	.word	0x08007e7d
 8007e48:	08007e75 	.word	0x08007e75
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e0bc      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007e54:	2304      	movs	r3, #4
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e0b8      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e62:	e0b4      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007e64:	2310      	movs	r3, #16
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6a:	e0b0      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007e6c:	2320      	movs	r3, #32
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e0ac      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007e74:	2340      	movs	r3, #64	@ 0x40
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7a:	e0a8      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007e7c:	2380      	movs	r3, #128	@ 0x80
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e0a4      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a8f      	ldr	r2, [pc, #572]	@ (80080c8 <UART_SetConfig+0x6a0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d130      	bne.n	8007ef0 <UART_SetConfig+0x4c8>
 8007e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80080c4 <UART_SetConfig+0x69c>)
 8007e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	d826      	bhi.n	8007ee8 <UART_SetConfig+0x4c0>
 8007e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea0 <UART_SetConfig+0x478>)
 8007e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea0:	08007eb9 	.word	0x08007eb9
 8007ea4:	08007ec1 	.word	0x08007ec1
 8007ea8:	08007ec9 	.word	0x08007ec9
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007ed9 	.word	0x08007ed9
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ebe:	e086      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec6:	e082      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ec8:	2308      	movs	r3, #8
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ece:	e07e      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed6:	e07a      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ed8:	2320      	movs	r3, #32
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ede:	e076      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ee0:	2340      	movs	r3, #64	@ 0x40
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee6:	e072      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ee8:	2380      	movs	r3, #128	@ 0x80
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eee:	e06e      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a75      	ldr	r2, [pc, #468]	@ (80080cc <UART_SetConfig+0x6a4>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d130      	bne.n	8007f5c <UART_SetConfig+0x534>
 8007efa:	4b72      	ldr	r3, [pc, #456]	@ (80080c4 <UART_SetConfig+0x69c>)
 8007efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d826      	bhi.n	8007f54 <UART_SetConfig+0x52c>
 8007f06:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <UART_SetConfig+0x4e4>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f25 	.word	0x08007f25
 8007f10:	08007f2d 	.word	0x08007f2d
 8007f14:	08007f35 	.word	0x08007f35
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f45 	.word	0x08007f45
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	2300      	movs	r3, #0
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e050      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f32:	e04c      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007f34:	2308      	movs	r3, #8
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3a:	e048      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f42:	e044      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007f44:	2320      	movs	r3, #32
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4a:	e040      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007f4c:	2340      	movs	r3, #64	@ 0x40
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f52:	e03c      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007f54:	2380      	movs	r3, #128	@ 0x80
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e038      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a5b      	ldr	r2, [pc, #364]	@ (80080d0 <UART_SetConfig+0x6a8>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d130      	bne.n	8007fc8 <UART_SetConfig+0x5a0>
 8007f66:	4b57      	ldr	r3, [pc, #348]	@ (80080c4 <UART_SetConfig+0x69c>)
 8007f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b05      	cmp	r3, #5
 8007f70:	d826      	bhi.n	8007fc0 <UART_SetConfig+0x598>
 8007f72:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <UART_SetConfig+0x550>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f91 	.word	0x08007f91
 8007f7c:	08007f99 	.word	0x08007f99
 8007f80:	08007fa1 	.word	0x08007fa1
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb9 	.word	0x08007fb9
 8007f90:	2302      	movs	r3, #2
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e01a      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e016      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa6:	e012      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fae:	e00e      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007fb0:	2320      	movs	r3, #32
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb6:	e00a      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007fb8:	2340      	movs	r3, #64	@ 0x40
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fbe:	e006      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007fc0:	2380      	movs	r3, #128	@ 0x80
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	e002      	b.n	8007fce <UART_SetConfig+0x5a6>
 8007fc8:	2380      	movs	r3, #128	@ 0x80
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80080d0 <UART_SetConfig+0x6a8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	f040 80f8 	bne.w	80081ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	dc46      	bgt.n	8008070 <UART_SetConfig+0x648>
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	f2c0 8082 	blt.w	80080ec <UART_SetConfig+0x6c4>
 8007fe8:	3b02      	subs	r3, #2
 8007fea:	2b1e      	cmp	r3, #30
 8007fec:	d87e      	bhi.n	80080ec <UART_SetConfig+0x6c4>
 8007fee:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff4 <UART_SetConfig+0x5cc>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	08008077 	.word	0x08008077
 8007ff8:	080080ed 	.word	0x080080ed
 8007ffc:	0800807f 	.word	0x0800807f
 8008000:	080080ed 	.word	0x080080ed
 8008004:	080080ed 	.word	0x080080ed
 8008008:	080080ed 	.word	0x080080ed
 800800c:	0800808f 	.word	0x0800808f
 8008010:	080080ed 	.word	0x080080ed
 8008014:	080080ed 	.word	0x080080ed
 8008018:	080080ed 	.word	0x080080ed
 800801c:	080080ed 	.word	0x080080ed
 8008020:	080080ed 	.word	0x080080ed
 8008024:	080080ed 	.word	0x080080ed
 8008028:	080080ed 	.word	0x080080ed
 800802c:	0800809f 	.word	0x0800809f
 8008030:	080080ed 	.word	0x080080ed
 8008034:	080080ed 	.word	0x080080ed
 8008038:	080080ed 	.word	0x080080ed
 800803c:	080080ed 	.word	0x080080ed
 8008040:	080080ed 	.word	0x080080ed
 8008044:	080080ed 	.word	0x080080ed
 8008048:	080080ed 	.word	0x080080ed
 800804c:	080080ed 	.word	0x080080ed
 8008050:	080080ed 	.word	0x080080ed
 8008054:	080080ed 	.word	0x080080ed
 8008058:	080080ed 	.word	0x080080ed
 800805c:	080080ed 	.word	0x080080ed
 8008060:	080080ed 	.word	0x080080ed
 8008064:	080080ed 	.word	0x080080ed
 8008068:	080080ed 	.word	0x080080ed
 800806c:	080080df 	.word	0x080080df
 8008070:	2b40      	cmp	r3, #64	@ 0x40
 8008072:	d037      	beq.n	80080e4 <UART_SetConfig+0x6bc>
 8008074:	e03a      	b.n	80080ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008076:	f7fe fc23 	bl	80068c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800807a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800807c:	e03c      	b.n	80080f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800807e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fc32 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800808c:	e034      	b.n	80080f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800808e:	f107 0318 	add.w	r3, r7, #24
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fd7e 	bl	8006b94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800809c:	e02c      	b.n	80080f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800809e:	4b09      	ldr	r3, [pc, #36]	@ (80080c4 <UART_SetConfig+0x69c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d016      	beq.n	80080d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080aa:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <UART_SetConfig+0x69c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	08db      	lsrs	r3, r3, #3
 80080b0:	f003 0303 	and.w	r3, r3, #3
 80080b4:	4a07      	ldr	r2, [pc, #28]	@ (80080d4 <UART_SetConfig+0x6ac>)
 80080b6:	fa22 f303 	lsr.w	r3, r2, r3
 80080ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080bc:	e01c      	b.n	80080f8 <UART_SetConfig+0x6d0>
 80080be:	bf00      	nop
 80080c0:	40011400 	.word	0x40011400
 80080c4:	58024400 	.word	0x58024400
 80080c8:	40007800 	.word	0x40007800
 80080cc:	40007c00 	.word	0x40007c00
 80080d0:	58000c00 	.word	0x58000c00
 80080d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80080d8:	4b9d      	ldr	r3, [pc, #628]	@ (8008350 <UART_SetConfig+0x928>)
 80080da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080dc:	e00c      	b.n	80080f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080de:	4b9d      	ldr	r3, [pc, #628]	@ (8008354 <UART_SetConfig+0x92c>)
 80080e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e2:	e009      	b.n	80080f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ea:	e005      	b.n	80080f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80080f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 81de 	beq.w	80084bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008104:	4a94      	ldr	r2, [pc, #592]	@ (8008358 <UART_SetConfig+0x930>)
 8008106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800810a:	461a      	mov	r2, r3
 800810c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008112:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	4613      	mov	r3, r2
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	4413      	add	r3, r2
 800811e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008120:	429a      	cmp	r2, r3
 8008122:	d305      	bcc.n	8008130 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800812a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800812c:	429a      	cmp	r2, r3
 800812e:	d903      	bls.n	8008138 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008136:	e1c1      	b.n	80084bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800813a:	2200      	movs	r2, #0
 800813c:	60bb      	str	r3, [r7, #8]
 800813e:	60fa      	str	r2, [r7, #12]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008144:	4a84      	ldr	r2, [pc, #528]	@ (8008358 <UART_SetConfig+0x930>)
 8008146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800814a:	b29b      	uxth	r3, r3
 800814c:	2200      	movs	r2, #0
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800815a:	f7f8 fae5 	bl	8000728 <__aeabi_uldivmod>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4610      	mov	r0, r2
 8008164:	4619      	mov	r1, r3
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	f04f 0300 	mov.w	r3, #0
 800816e:	020b      	lsls	r3, r1, #8
 8008170:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008174:	0202      	lsls	r2, r0, #8
 8008176:	6979      	ldr	r1, [r7, #20]
 8008178:	6849      	ldr	r1, [r1, #4]
 800817a:	0849      	lsrs	r1, r1, #1
 800817c:	2000      	movs	r0, #0
 800817e:	460c      	mov	r4, r1
 8008180:	4605      	mov	r5, r0
 8008182:	eb12 0804 	adds.w	r8, r2, r4
 8008186:	eb43 0905 	adc.w	r9, r3, r5
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	469a      	mov	sl, r3
 8008192:	4693      	mov	fp, r2
 8008194:	4652      	mov	r2, sl
 8008196:	465b      	mov	r3, fp
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	f7f8 fac4 	bl	8000728 <__aeabi_uldivmod>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4613      	mov	r3, r2
 80081a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081ae:	d308      	bcc.n	80081c2 <UART_SetConfig+0x79a>
 80081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b6:	d204      	bcs.n	80081c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081be:	60da      	str	r2, [r3, #12]
 80081c0:	e17c      	b.n	80084bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081c8:	e178      	b.n	80084bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081d2:	f040 80c5 	bne.w	8008360 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80081d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081da:	2b20      	cmp	r3, #32
 80081dc:	dc48      	bgt.n	8008270 <UART_SetConfig+0x848>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	db7b      	blt.n	80082da <UART_SetConfig+0x8b2>
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d879      	bhi.n	80082da <UART_SetConfig+0x8b2>
 80081e6:	a201      	add	r2, pc, #4	@ (adr r2, 80081ec <UART_SetConfig+0x7c4>)
 80081e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ec:	08008277 	.word	0x08008277
 80081f0:	0800827f 	.word	0x0800827f
 80081f4:	080082db 	.word	0x080082db
 80081f8:	080082db 	.word	0x080082db
 80081fc:	08008287 	.word	0x08008287
 8008200:	080082db 	.word	0x080082db
 8008204:	080082db 	.word	0x080082db
 8008208:	080082db 	.word	0x080082db
 800820c:	08008297 	.word	0x08008297
 8008210:	080082db 	.word	0x080082db
 8008214:	080082db 	.word	0x080082db
 8008218:	080082db 	.word	0x080082db
 800821c:	080082db 	.word	0x080082db
 8008220:	080082db 	.word	0x080082db
 8008224:	080082db 	.word	0x080082db
 8008228:	080082db 	.word	0x080082db
 800822c:	080082a7 	.word	0x080082a7
 8008230:	080082db 	.word	0x080082db
 8008234:	080082db 	.word	0x080082db
 8008238:	080082db 	.word	0x080082db
 800823c:	080082db 	.word	0x080082db
 8008240:	080082db 	.word	0x080082db
 8008244:	080082db 	.word	0x080082db
 8008248:	080082db 	.word	0x080082db
 800824c:	080082db 	.word	0x080082db
 8008250:	080082db 	.word	0x080082db
 8008254:	080082db 	.word	0x080082db
 8008258:	080082db 	.word	0x080082db
 800825c:	080082db 	.word	0x080082db
 8008260:	080082db 	.word	0x080082db
 8008264:	080082db 	.word	0x080082db
 8008268:	080082db 	.word	0x080082db
 800826c:	080082cd 	.word	0x080082cd
 8008270:	2b40      	cmp	r3, #64	@ 0x40
 8008272:	d02e      	beq.n	80082d2 <UART_SetConfig+0x8aa>
 8008274:	e031      	b.n	80082da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008276:	f7fd f8ed 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 800827a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800827c:	e033      	b.n	80082e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800827e:	f7fd f8ff 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 8008282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008284:	e02f      	b.n	80082e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fb2e 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008294:	e027      	b.n	80082e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008296:	f107 0318 	add.w	r3, r7, #24
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fc7a 	bl	8006b94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a4:	e01f      	b.n	80082e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082a6:	4b2d      	ldr	r3, [pc, #180]	@ (800835c <UART_SetConfig+0x934>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d009      	beq.n	80082c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082b2:	4b2a      	ldr	r3, [pc, #168]	@ (800835c <UART_SetConfig+0x934>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	08db      	lsrs	r3, r3, #3
 80082b8:	f003 0303 	and.w	r3, r3, #3
 80082bc:	4a24      	ldr	r2, [pc, #144]	@ (8008350 <UART_SetConfig+0x928>)
 80082be:	fa22 f303 	lsr.w	r3, r2, r3
 80082c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082c4:	e00f      	b.n	80082e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80082c6:	4b22      	ldr	r3, [pc, #136]	@ (8008350 <UART_SetConfig+0x928>)
 80082c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082ca:	e00c      	b.n	80082e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082cc:	4b21      	ldr	r3, [pc, #132]	@ (8008354 <UART_SetConfig+0x92c>)
 80082ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d0:	e009      	b.n	80082e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d8:	e005      	b.n	80082e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 80e7 	beq.w	80084bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	4a19      	ldr	r2, [pc, #100]	@ (8008358 <UART_SetConfig+0x930>)
 80082f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f8:	461a      	mov	r2, r3
 80082fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008300:	005a      	lsls	r2, r3, #1
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	085b      	lsrs	r3, r3, #1
 8008308:	441a      	add	r2, r3
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008312:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008316:	2b0f      	cmp	r3, #15
 8008318:	d916      	bls.n	8008348 <UART_SetConfig+0x920>
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008320:	d212      	bcs.n	8008348 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	b29b      	uxth	r3, r3
 8008326:	f023 030f 	bic.w	r3, r3, #15
 800832a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832e:	085b      	lsrs	r3, r3, #1
 8008330:	b29b      	uxth	r3, r3
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	b29a      	uxth	r2, r3
 8008338:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800833a:	4313      	orrs	r3, r2
 800833c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008344:	60da      	str	r2, [r3, #12]
 8008346:	e0b9      	b.n	80084bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800834e:	e0b5      	b.n	80084bc <UART_SetConfig+0xa94>
 8008350:	03d09000 	.word	0x03d09000
 8008354:	003d0900 	.word	0x003d0900
 8008358:	080119cc 	.word	0x080119cc
 800835c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008360:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008364:	2b20      	cmp	r3, #32
 8008366:	dc49      	bgt.n	80083fc <UART_SetConfig+0x9d4>
 8008368:	2b00      	cmp	r3, #0
 800836a:	db7c      	blt.n	8008466 <UART_SetConfig+0xa3e>
 800836c:	2b20      	cmp	r3, #32
 800836e:	d87a      	bhi.n	8008466 <UART_SetConfig+0xa3e>
 8008370:	a201      	add	r2, pc, #4	@ (adr r2, 8008378 <UART_SetConfig+0x950>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	08008403 	.word	0x08008403
 800837c:	0800840b 	.word	0x0800840b
 8008380:	08008467 	.word	0x08008467
 8008384:	08008467 	.word	0x08008467
 8008388:	08008413 	.word	0x08008413
 800838c:	08008467 	.word	0x08008467
 8008390:	08008467 	.word	0x08008467
 8008394:	08008467 	.word	0x08008467
 8008398:	08008423 	.word	0x08008423
 800839c:	08008467 	.word	0x08008467
 80083a0:	08008467 	.word	0x08008467
 80083a4:	08008467 	.word	0x08008467
 80083a8:	08008467 	.word	0x08008467
 80083ac:	08008467 	.word	0x08008467
 80083b0:	08008467 	.word	0x08008467
 80083b4:	08008467 	.word	0x08008467
 80083b8:	08008433 	.word	0x08008433
 80083bc:	08008467 	.word	0x08008467
 80083c0:	08008467 	.word	0x08008467
 80083c4:	08008467 	.word	0x08008467
 80083c8:	08008467 	.word	0x08008467
 80083cc:	08008467 	.word	0x08008467
 80083d0:	08008467 	.word	0x08008467
 80083d4:	08008467 	.word	0x08008467
 80083d8:	08008467 	.word	0x08008467
 80083dc:	08008467 	.word	0x08008467
 80083e0:	08008467 	.word	0x08008467
 80083e4:	08008467 	.word	0x08008467
 80083e8:	08008467 	.word	0x08008467
 80083ec:	08008467 	.word	0x08008467
 80083f0:	08008467 	.word	0x08008467
 80083f4:	08008467 	.word	0x08008467
 80083f8:	08008459 	.word	0x08008459
 80083fc:	2b40      	cmp	r3, #64	@ 0x40
 80083fe:	d02e      	beq.n	800845e <UART_SetConfig+0xa36>
 8008400:	e031      	b.n	8008466 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008402:	f7fd f827 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 8008406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008408:	e033      	b.n	8008472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800840a:	f7fd f839 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 800840e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008410:	e02f      	b.n	8008472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fa68 	bl	80068ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008420:	e027      	b.n	8008472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008422:	f107 0318 	add.w	r3, r7, #24
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe fbb4 	bl	8006b94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008430:	e01f      	b.n	8008472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008432:	4b2d      	ldr	r3, [pc, #180]	@ (80084e8 <UART_SetConfig+0xac0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800843e:	4b2a      	ldr	r3, [pc, #168]	@ (80084e8 <UART_SetConfig+0xac0>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	08db      	lsrs	r3, r3, #3
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	4a28      	ldr	r2, [pc, #160]	@ (80084ec <UART_SetConfig+0xac4>)
 800844a:	fa22 f303 	lsr.w	r3, r2, r3
 800844e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008450:	e00f      	b.n	8008472 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008452:	4b26      	ldr	r3, [pc, #152]	@ (80084ec <UART_SetConfig+0xac4>)
 8008454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008456:	e00c      	b.n	8008472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008458:	4b25      	ldr	r3, [pc, #148]	@ (80084f0 <UART_SetConfig+0xac8>)
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800845c:	e009      	b.n	8008472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800845e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008464:	e005      	b.n	8008472 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008470:	bf00      	nop
    }

    if (pclk != 0U)
 8008472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d021      	beq.n	80084bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847c:	4a1d      	ldr	r2, [pc, #116]	@ (80084f4 <UART_SetConfig+0xacc>)
 800847e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008482:	461a      	mov	r2, r3
 8008484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008486:	fbb3 f2f2 	udiv	r2, r3, r2
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	085b      	lsrs	r3, r3, #1
 8008490:	441a      	add	r2, r3
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	fbb2 f3f3 	udiv	r3, r2, r3
 800849a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800849c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849e:	2b0f      	cmp	r3, #15
 80084a0:	d909      	bls.n	80084b6 <UART_SetConfig+0xa8e>
 80084a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084a8:	d205      	bcs.n	80084b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60da      	str	r2, [r3, #12]
 80084b4:	e002      	b.n	80084bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2201      	movs	r2, #1
 80084c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2200      	movs	r2, #0
 80084d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2200      	movs	r2, #0
 80084d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3748      	adds	r7, #72	@ 0x48
 80084e0:	46bd      	mov	sp, r7
 80084e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084e6:	bf00      	nop
 80084e8:	58024400 	.word	0x58024400
 80084ec:	03d09000 	.word	0x03d09000
 80084f0:	003d0900 	.word	0x003d0900
 80084f4:	080119cc 	.word	0x080119cc

080084f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856a:	f003 0304 	and.w	r3, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	f003 0310 	and.w	r3, r3, #16
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00a      	beq.n	80085aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01a      	beq.n	800860e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085f6:	d10a      	bne.n	800860e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	605a      	str	r2, [r3, #4]
  }
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b098      	sub	sp, #96	@ 0x60
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800864c:	f7f9 fb6e 	bl	8001d2c <HAL_GetTick>
 8008650:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b08      	cmp	r3, #8
 800865e:	d12f      	bne.n	80086c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008660:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008668:	2200      	movs	r2, #0
 800866a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f88e 	bl	8008790 <UART_WaitOnFlagUntilTimeout>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d022      	beq.n	80086c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800868e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	461a      	mov	r2, r3
 8008696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008698:	647b      	str	r3, [r7, #68]	@ 0x44
 800869a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800869e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e6      	bne.n	800867a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e063      	b.n	8008788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d149      	bne.n	8008762 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086d6:	2200      	movs	r2, #0
 80086d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f857 	bl	8008790 <UART_WaitOnFlagUntilTimeout>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d03c      	beq.n	8008762 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	623b      	str	r3, [r7, #32]
   return(result);
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008706:	633b      	str	r3, [r7, #48]	@ 0x30
 8008708:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800870c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1e6      	bne.n	80086e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	60fb      	str	r3, [r7, #12]
   return(result);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800873a:	61fa      	str	r2, [r7, #28]
 800873c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	69b9      	ldr	r1, [r7, #24]
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	617b      	str	r3, [r7, #20]
   return(result);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e5      	bne.n	800871a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e012      	b.n	8008788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3758      	adds	r7, #88	@ 0x58
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087a0:	e04f      	b.n	8008842 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d04b      	beq.n	8008842 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087aa:	f7f9 fabf 	bl	8001d2c <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d302      	bcc.n	80087c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e04e      	b.n	8008862 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d037      	beq.n	8008842 <UART_WaitOnFlagUntilTimeout+0xb2>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b80      	cmp	r3, #128	@ 0x80
 80087d6:	d034      	beq.n	8008842 <UART_WaitOnFlagUntilTimeout+0xb2>
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b40      	cmp	r3, #64	@ 0x40
 80087dc:	d031      	beq.n	8008842 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d110      	bne.n	800880e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2208      	movs	r2, #8
 80087f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f95b 	bl	8008ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2208      	movs	r2, #8
 80087fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e029      	b.n	8008862 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800881c:	d111      	bne.n	8008842 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f941 	bl	8008ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e00f      	b.n	8008862 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	4013      	ands	r3, r2
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	429a      	cmp	r2, r3
 8008850:	bf0c      	ite	eq
 8008852:	2301      	moveq	r3, #1
 8008854:	2300      	movne	r3, #0
 8008856:	b2db      	uxtb	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	429a      	cmp	r2, r3
 800885e:	d0a0      	beq.n	80087a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800886c:	b480      	push	{r7}
 800886e:	b0a3      	sub	sp, #140	@ 0x8c
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	88fa      	ldrh	r2, [r7, #6]
 8008884:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	88fa      	ldrh	r2, [r7, #6]
 800888c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800889e:	d10e      	bne.n	80088be <UART_Start_Receive_IT+0x52>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d105      	bne.n	80088b4 <UART_Start_Receive_IT+0x48>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80088ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088b2:	e02d      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	22ff      	movs	r2, #255	@ 0xff
 80088b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088bc:	e028      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10d      	bne.n	80088e2 <UART_Start_Receive_IT+0x76>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <UART_Start_Receive_IT+0x6c>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	22ff      	movs	r2, #255	@ 0xff
 80088d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088d6:	e01b      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	227f      	movs	r2, #127	@ 0x7f
 80088dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088e0:	e016      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ea:	d10d      	bne.n	8008908 <UART_Start_Receive_IT+0x9c>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <UART_Start_Receive_IT+0x92>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	227f      	movs	r2, #127	@ 0x7f
 80088f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088fc:	e008      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	223f      	movs	r2, #63	@ 0x3f
 8008902:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008906:	e003      	b.n	8008910 <UART_Start_Receive_IT+0xa4>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2222      	movs	r2, #34	@ 0x22
 800891c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3308      	adds	r3, #8
 8008926:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008944:	673a      	str	r2, [r7, #112]	@ 0x70
 8008946:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800894a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e3      	bne.n	8008920 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800895c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008960:	d14f      	bne.n	8008a02 <UART_Start_Receive_IT+0x196>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008968:	88fa      	ldrh	r2, [r7, #6]
 800896a:	429a      	cmp	r2, r3
 800896c:	d349      	bcc.n	8008a02 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008976:	d107      	bne.n	8008988 <UART_Start_Receive_IT+0x11c>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4a47      	ldr	r2, [pc, #284]	@ (8008aa0 <UART_Start_Receive_IT+0x234>)
 8008984:	675a      	str	r2, [r3, #116]	@ 0x74
 8008986:	e002      	b.n	800898e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4a46      	ldr	r2, [pc, #280]	@ (8008aa4 <UART_Start_Receive_IT+0x238>)
 800898c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01a      	beq.n	80089cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089ba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80089be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80089c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e4      	bne.n	8008996 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3308      	adds	r3, #8
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d6:	e853 3f00 	ldrex	r3, [r3]
 80089da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80089ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80089ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089f4:	e841 2300 	strex	r3, r2, [r1]
 80089f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e5      	bne.n	80089cc <UART_Start_Receive_IT+0x160>
 8008a00:	e046      	b.n	8008a90 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0a:	d107      	bne.n	8008a1c <UART_Start_Receive_IT+0x1b0>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d103      	bne.n	8008a1c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4a24      	ldr	r2, [pc, #144]	@ (8008aa8 <UART_Start_Receive_IT+0x23c>)
 8008a18:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a1a:	e002      	b.n	8008a22 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a23      	ldr	r2, [pc, #140]	@ (8008aac <UART_Start_Receive_IT+0x240>)
 8008a20:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d019      	beq.n	8008a5e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_Start_Receive_IT+0x1be>
 8008a5c:	e018      	b.n	8008a90 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f043 0320 	orr.w	r3, r3, #32
 8008a72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a7c:	623b      	str	r3, [r7, #32]
 8008a7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	69f9      	ldr	r1, [r7, #28]
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e6      	bne.n	8008a5e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	378c      	adds	r7, #140	@ 0x8c
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	080092cd 	.word	0x080092cd
 8008aa4:	08008f69 	.word	0x08008f69
 8008aa8:	08008db1 	.word	0x08008db1
 8008aac:	08008bf9 	.word	0x08008bf9

08008ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b095      	sub	sp, #84	@ 0x54
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ad8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e6      	bne.n	8008ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	4b1e      	ldr	r3, [pc, #120]	@ (8008b78 <UART_EndRxTransfer+0xc8>)
 8008afe:	4013      	ands	r3, r2
 8008b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e5      	bne.n	8008aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d118      	bne.n	8008b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f023 0310 	bic.w	r3, r3, #16
 8008b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6979      	ldr	r1, [r7, #20]
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	613b      	str	r3, [r7, #16]
   return(result);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e6      	bne.n	8008b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b6c:	bf00      	nop
 8008b6e:	3754      	adds	r7, #84	@ 0x54
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	effffffe 	.word	0xeffffffe

08008b7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f7fe ff32 	bl	80079fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6979      	ldr	r1, [r7, #20]
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e6      	bne.n	8008ba8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7fe fefd 	bl	80079e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bee:	bf00      	nop
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b09c      	sub	sp, #112	@ 0x70
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c10:	2b22      	cmp	r3, #34	@ 0x22
 8008c12:	f040 80be 	bne.w	8008d92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c24:	b2d9      	uxtb	r1, r3
 8008c26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c30:	400a      	ands	r2, r1
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f040 80a1 	bne.w	8008da2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e6      	bne.n	8008c60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca4:	f023 0301 	bic.w	r3, r3, #1
 8008ca8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e5      	bne.n	8008c92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a33      	ldr	r2, [pc, #204]	@ (8008dac <UART_RxISR_8BIT+0x1b4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d01f      	beq.n	8008d24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d018      	beq.n	8008d24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d06:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e6      	bne.n	8008cf2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d12e      	bne.n	8008d8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0310 	bic.w	r3, r3, #16
 8008d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d50:	61fb      	str	r3, [r7, #28]
 8008d52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	69b9      	ldr	r1, [r7, #24]
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e6      	bne.n	8008d32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	f003 0310 	and.w	r3, r3, #16
 8008d6e:	2b10      	cmp	r3, #16
 8008d70:	d103      	bne.n	8008d7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2210      	movs	r2, #16
 8008d78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7fe fe44 	bl	8007a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d88:	e00b      	b.n	8008da2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7f8 fad2 	bl	8001334 <HAL_UART_RxCpltCallback>
}
 8008d90:	e007      	b.n	8008da2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	699a      	ldr	r2, [r3, #24]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0208 	orr.w	r2, r2, #8
 8008da0:	619a      	str	r2, [r3, #24]
}
 8008da2:	bf00      	nop
 8008da4:	3770      	adds	r7, #112	@ 0x70
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	58000c00 	.word	0x58000c00

08008db0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b09c      	sub	sp, #112	@ 0x70
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dc8:	2b22      	cmp	r3, #34	@ 0x22
 8008dca:	f040 80be 	bne.w	8008f4a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008dde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008de2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008de6:	4013      	ands	r3, r2
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df2:	1c9a      	adds	r2, r3, #2
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f040 80a1 	bne.w	8008f5a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e36:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e38:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e6      	bne.n	8008e18 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	f023 0301 	bic.w	r3, r3, #1
 8008e60:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3308      	adds	r3, #8
 8008e68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e5      	bne.n	8008e4a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a33      	ldr	r2, [pc, #204]	@ (8008f64 <UART_RxISR_16BIT+0x1b4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d01f      	beq.n	8008edc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d018      	beq.n	8008edc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d12e      	bne.n	8008f42 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f023 0310 	bic.w	r3, r3, #16
 8008efe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f08:	61bb      	str	r3, [r7, #24]
 8008f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6979      	ldr	r1, [r7, #20]
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	613b      	str	r3, [r7, #16]
   return(result);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f003 0310 	and.w	r3, r3, #16
 8008f26:	2b10      	cmp	r3, #16
 8008f28:	d103      	bne.n	8008f32 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2210      	movs	r2, #16
 8008f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7fe fd68 	bl	8007a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f40:	e00b      	b.n	8008f5a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7f8 f9f6 	bl	8001334 <HAL_UART_RxCpltCallback>
}
 8008f48:	e007      	b.n	8008f5a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	699a      	ldr	r2, [r3, #24]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f042 0208 	orr.w	r2, r2, #8
 8008f58:	619a      	str	r2, [r3, #24]
}
 8008f5a:	bf00      	nop
 8008f5c:	3770      	adds	r7, #112	@ 0x70
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	58000c00 	.word	0x58000c00

08008f68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b0ac      	sub	sp, #176	@ 0xb0
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f76:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f9e:	2b22      	cmp	r3, #34	@ 0x22
 8008fa0:	f040 8181 	bne.w	80092a6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008faa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fae:	e124      	b.n	80091fa <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008fbe:	b2d9      	uxtb	r1, r3
 8008fc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fca:	400a      	ands	r2, r1
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d053      	beq.n	80090aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d011      	beq.n	8009032 <UART_RxISR_8BIT_FIFOEN+0xca>
 800900e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2201      	movs	r2, #1
 8009020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009028:	f043 0201 	orr.w	r2, r3, #1
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d011      	beq.n	8009062 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800903e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2202      	movs	r2, #2
 8009050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009058:	f043 0204 	orr.w	r2, r3, #4
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d011      	beq.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800906e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00b      	beq.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2204      	movs	r2, #4
 8009080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009088:	f043 0202 	orr.w	r2, r3, #2
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009098:	2b00      	cmp	r3, #0
 800909a:	d006      	beq.n	80090aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7fe fcad 	bl	80079fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f040 80a1 	bne.w	80091fa <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80090c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80090e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80090e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e4      	bne.n	80090b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3308      	adds	r3, #8
 80090f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80090fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009100:	4b6f      	ldr	r3, [pc, #444]	@ (80092c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009102:	4013      	ands	r3, r2
 8009104:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3308      	adds	r3, #8
 800910e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009112:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009114:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009118:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009120:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e3      	bne.n	80090ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2220      	movs	r2, #32
 800912a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a61      	ldr	r2, [pc, #388]	@ (80092c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d021      	beq.n	8009188 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d01a      	beq.n	8009188 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009162:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009174:	657b      	str	r3, [r7, #84]	@ 0x54
 8009176:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009178:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800917a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800917c:	e841 2300 	strex	r3, r2, [r1]
 8009180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e4      	bne.n	8009152 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800918c:	2b01      	cmp	r3, #1
 800918e:	d130      	bne.n	80091f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	f023 0310 	bic.w	r3, r3, #16
 80091aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80091ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091c0:	e841 2300 	strex	r3, r2, [r1]
 80091c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e4      	bne.n	8009196 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f003 0310 	and.w	r3, r3, #16
 80091d6:	2b10      	cmp	r3, #16
 80091d8:	d103      	bne.n	80091e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2210      	movs	r2, #16
 80091e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fe fc10 	bl	8007a10 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80091f0:	e00e      	b.n	8009210 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7f8 f89e 	bl	8001334 <HAL_UART_RxCpltCallback>
        break;
 80091f8:	e00a      	b.n	8009210 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d006      	beq.n	8009210 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8009202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	f47f aed0 	bne.w	8008fb0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009216:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800921a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800921e:	2b00      	cmp	r3, #0
 8009220:	d049      	beq.n	80092b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009228:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800922c:	429a      	cmp	r2, r3
 800922e:	d242      	bcs.n	80092b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3308      	adds	r3, #8
 8009236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009246:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009254:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800925a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e3      	bne.n	8009230 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a17      	ldr	r2, [pc, #92]	@ (80092c8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800926c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	60bb      	str	r3, [r7, #8]
   return(result);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f043 0320 	orr.w	r3, r3, #32
 8009282:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009290:	61bb      	str	r3, [r7, #24]
 8009292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6979      	ldr	r1, [r7, #20]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	613b      	str	r3, [r7, #16]
   return(result);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e4      	bne.n	800926e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092a4:	e007      	b.n	80092b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	699a      	ldr	r2, [r3, #24]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f042 0208 	orr.w	r2, r2, #8
 80092b4:	619a      	str	r2, [r3, #24]
}
 80092b6:	bf00      	nop
 80092b8:	37b0      	adds	r7, #176	@ 0xb0
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	effffffe 	.word	0xeffffffe
 80092c4:	58000c00 	.word	0x58000c00
 80092c8:	08008bf9 	.word	0x08008bf9

080092cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b0ae      	sub	sp, #184	@ 0xb8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092da:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009302:	2b22      	cmp	r3, #34	@ 0x22
 8009304:	f040 8185 	bne.w	8009612 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800930e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009312:	e128      	b.n	8009566 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009326:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800932a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800932e:	4013      	ands	r3, r2
 8009330:	b29a      	uxth	r2, r3
 8009332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009336:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933c:	1c9a      	adds	r2, r3, #2
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009348:	b29b      	uxth	r3, r3
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800935e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d053      	beq.n	8009412 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800936a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d011      	beq.n	800939a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800937a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00b      	beq.n	800939a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2201      	movs	r2, #1
 8009388:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009390:	f043 0201 	orr.w	r2, r3, #1
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800939a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d011      	beq.n	80093ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00b      	beq.n	80093ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2202      	movs	r2, #2
 80093b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c0:	f043 0204 	orr.w	r2, r3, #4
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ce:	f003 0304 	and.w	r3, r3, #4
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d011      	beq.n	80093fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00b      	beq.n	80093fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2204      	movs	r2, #4
 80093e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f0:	f043 0202 	orr.w	r2, r3, #2
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009400:	2b00      	cmp	r3, #0
 8009402:	d006      	beq.n	8009412 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7fe faf9 	bl	80079fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 80a3 	bne.w	8009566 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800942e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009442:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009446:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800944a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e2      	bne.n	8009420 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800946a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800946c:	4b6f      	ldr	r3, [pc, #444]	@ (800962c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800946e:	4013      	ands	r3, r2
 8009470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800947e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800948c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e3      	bne.n	800945a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2220      	movs	r2, #32
 8009496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a61      	ldr	r2, [pc, #388]	@ (8009630 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d021      	beq.n	80094f4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d01a      	beq.n	80094f4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094c6:	e853 3f00 	ldrex	r3, [r3]
 80094ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80094e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e4      	bne.n	80094be <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d130      	bne.n	800955e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009512:	f023 0310 	bic.w	r3, r3, #16
 8009516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009524:	647b      	str	r3, [r7, #68]	@ 0x44
 8009526:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800952a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800952c:	e841 2300 	strex	r3, r2, [r1]
 8009530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e4      	bne.n	8009502 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	f003 0310 	and.w	r3, r3, #16
 8009542:	2b10      	cmp	r3, #16
 8009544:	d103      	bne.n	800954e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2210      	movs	r2, #16
 800954c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7fe fa5a 	bl	8007a10 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800955c:	e00e      	b.n	800957c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7f7 fee8 	bl	8001334 <HAL_UART_RxCpltCallback>
        break;
 8009564:	e00a      	b.n	800957c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009566:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800956a:	2b00      	cmp	r3, #0
 800956c:	d006      	beq.n	800957c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800956e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b00      	cmp	r3, #0
 8009578:	f47f aecc 	bne.w	8009314 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009582:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009586:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800958a:	2b00      	cmp	r3, #0
 800958c:	d049      	beq.n	8009622 <UART_RxISR_16BIT_FIFOEN+0x356>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009594:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009598:	429a      	cmp	r2, r3
 800959a:	d242      	bcs.n	8009622 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	623b      	str	r3, [r7, #32]
   return(result);
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3308      	adds	r3, #8
 80095bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80095c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80095c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e3      	bne.n	800959c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a17      	ldr	r2, [pc, #92]	@ (8009634 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80095d8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f043 0320 	orr.w	r3, r3, #32
 80095ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095fc:	61fb      	str	r3, [r7, #28]
 80095fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	69b9      	ldr	r1, [r7, #24]
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	617b      	str	r3, [r7, #20]
   return(result);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e4      	bne.n	80095da <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009610:	e007      	b.n	8009622 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	699a      	ldr	r2, [r3, #24]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f042 0208 	orr.w	r2, r2, #8
 8009620:	619a      	str	r2, [r3, #24]
}
 8009622:	bf00      	nop
 8009624:	37b8      	adds	r7, #184	@ 0xb8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	effffffe 	.word	0xeffffffe
 8009630:	58000c00 	.word	0x58000c00
 8009634:	08008db1 	.word	0x08008db1

08009638 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009682:	2b01      	cmp	r3, #1
 8009684:	d101      	bne.n	800968a <HAL_UARTEx_DisableFifoMode+0x16>
 8009686:	2302      	movs	r3, #2
 8009688:	e027      	b.n	80096da <HAL_UARTEx_DisableFifoMode+0x66>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2224      	movs	r2, #36	@ 0x24
 8009696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0201 	bic.w	r2, r2, #1
 80096b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80096b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d101      	bne.n	80096fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096fa:	2302      	movs	r3, #2
 80096fc:	e02d      	b.n	800975a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2224      	movs	r2, #36	@ 0x24
 800970a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 0201 	bic.w	r2, r2, #1
 8009724:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f850 	bl	80097e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2220      	movs	r2, #32
 800974c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009776:	2302      	movs	r3, #2
 8009778:	e02d      	b.n	80097d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2224      	movs	r2, #36	@ 0x24
 8009786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 0201 	bic.w	r2, r2, #1
 80097a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f812 	bl	80097e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d108      	bne.n	8009802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009800:	e031      	b.n	8009866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009802:	2310      	movs	r3, #16
 8009804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009806:	2310      	movs	r3, #16
 8009808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	0e5b      	lsrs	r3, r3, #25
 8009812:	b2db      	uxtb	r3, r3
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	0f5b      	lsrs	r3, r3, #29
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0307 	and.w	r3, r3, #7
 8009828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	7b3a      	ldrb	r2, [r7, #12]
 800982e:	4911      	ldr	r1, [pc, #68]	@ (8009874 <UARTEx_SetNbDataToProcess+0x94>)
 8009830:	5c8a      	ldrb	r2, [r1, r2]
 8009832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009836:	7b3a      	ldrb	r2, [r7, #12]
 8009838:	490f      	ldr	r1, [pc, #60]	@ (8009878 <UARTEx_SetNbDataToProcess+0x98>)
 800983a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800983c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009840:	b29a      	uxth	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	7b7a      	ldrb	r2, [r7, #13]
 800984c:	4909      	ldr	r1, [pc, #36]	@ (8009874 <UARTEx_SetNbDataToProcess+0x94>)
 800984e:	5c8a      	ldrb	r2, [r1, r2]
 8009850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009854:	7b7a      	ldrb	r2, [r7, #13]
 8009856:	4908      	ldr	r1, [pc, #32]	@ (8009878 <UARTEx_SetNbDataToProcess+0x98>)
 8009858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800985a:	fb93 f3f2 	sdiv	r3, r3, r2
 800985e:	b29a      	uxth	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009866:	bf00      	nop
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	080119e4 	.word	0x080119e4
 8009878:	080119ec 	.word	0x080119ec

0800987c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800987c:	b084      	sub	sp, #16
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	f107 001c 	add.w	r0, r7, #28
 800988a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800988e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009892:	2b01      	cmp	r3, #1
 8009894:	d121      	bne.n	80098da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68da      	ldr	r2, [r3, #12]
 80098a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009958 <USB_CoreInit+0xdc>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d105      	bne.n	80098ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fafa 	bl	800aec8 <USB_CoreReset>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]
 80098d8:	e01b      	b.n	8009912 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 faee 	bl	800aec8 <USB_CoreReset>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80098f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d106      	bne.n	8009906 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	639a      	str	r2, [r3, #56]	@ 0x38
 8009904:	e005      	b.n	8009912 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009912:	7fbb      	ldrb	r3, [r7, #30]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d116      	bne.n	8009946 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800991c:	b29a      	uxth	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009926:	4b0d      	ldr	r3, [pc, #52]	@ (800995c <USB_CoreInit+0xe0>)
 8009928:	4313      	orrs	r3, r2
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f043 0206 	orr.w	r2, r3, #6
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f043 0220 	orr.w	r2, r3, #32
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009946:	7bfb      	ldrb	r3, [r7, #15]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009952:	b004      	add	sp, #16
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	ffbdffbf 	.word	0xffbdffbf
 800995c:	03ee0000 	.word	0x03ee0000

08009960 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	4613      	mov	r3, r2
 800996c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d165      	bne.n	8009a40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4a41      	ldr	r2, [pc, #260]	@ (8009a7c <USB_SetTurnaroundTime+0x11c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d906      	bls.n	800998a <USB_SetTurnaroundTime+0x2a>
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	4a40      	ldr	r2, [pc, #256]	@ (8009a80 <USB_SetTurnaroundTime+0x120>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d202      	bcs.n	800998a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009984:	230f      	movs	r3, #15
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	e062      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a80 <USB_SetTurnaroundTime+0x120>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d306      	bcc.n	80099a0 <USB_SetTurnaroundTime+0x40>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	4a3b      	ldr	r2, [pc, #236]	@ (8009a84 <USB_SetTurnaroundTime+0x124>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d202      	bcs.n	80099a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800999a:	230e      	movs	r3, #14
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	e057      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	4a38      	ldr	r2, [pc, #224]	@ (8009a84 <USB_SetTurnaroundTime+0x124>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d306      	bcc.n	80099b6 <USB_SetTurnaroundTime+0x56>
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	4a37      	ldr	r2, [pc, #220]	@ (8009a88 <USB_SetTurnaroundTime+0x128>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d202      	bcs.n	80099b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80099b0:	230d      	movs	r3, #13
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	e04c      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	4a33      	ldr	r2, [pc, #204]	@ (8009a88 <USB_SetTurnaroundTime+0x128>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d306      	bcc.n	80099cc <USB_SetTurnaroundTime+0x6c>
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	4a32      	ldr	r2, [pc, #200]	@ (8009a8c <USB_SetTurnaroundTime+0x12c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d802      	bhi.n	80099cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80099c6:	230c      	movs	r3, #12
 80099c8:	617b      	str	r3, [r7, #20]
 80099ca:	e041      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4a2f      	ldr	r2, [pc, #188]	@ (8009a8c <USB_SetTurnaroundTime+0x12c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d906      	bls.n	80099e2 <USB_SetTurnaroundTime+0x82>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009a90 <USB_SetTurnaroundTime+0x130>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d802      	bhi.n	80099e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099dc:	230b      	movs	r3, #11
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	e036      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009a90 <USB_SetTurnaroundTime+0x130>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d906      	bls.n	80099f8 <USB_SetTurnaroundTime+0x98>
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4a29      	ldr	r2, [pc, #164]	@ (8009a94 <USB_SetTurnaroundTime+0x134>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d802      	bhi.n	80099f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099f2:	230a      	movs	r3, #10
 80099f4:	617b      	str	r3, [r7, #20]
 80099f6:	e02b      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	4a26      	ldr	r2, [pc, #152]	@ (8009a94 <USB_SetTurnaroundTime+0x134>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d906      	bls.n	8009a0e <USB_SetTurnaroundTime+0xae>
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	4a25      	ldr	r2, [pc, #148]	@ (8009a98 <USB_SetTurnaroundTime+0x138>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d202      	bcs.n	8009a0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a08:	2309      	movs	r3, #9
 8009a0a:	617b      	str	r3, [r7, #20]
 8009a0c:	e020      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	4a21      	ldr	r2, [pc, #132]	@ (8009a98 <USB_SetTurnaroundTime+0x138>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d306      	bcc.n	8009a24 <USB_SetTurnaroundTime+0xc4>
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	4a20      	ldr	r2, [pc, #128]	@ (8009a9c <USB_SetTurnaroundTime+0x13c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d802      	bhi.n	8009a24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a1e:	2308      	movs	r3, #8
 8009a20:	617b      	str	r3, [r7, #20]
 8009a22:	e015      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4a1d      	ldr	r2, [pc, #116]	@ (8009a9c <USB_SetTurnaroundTime+0x13c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d906      	bls.n	8009a3a <USB_SetTurnaroundTime+0xda>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009aa0 <USB_SetTurnaroundTime+0x140>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d202      	bcs.n	8009a3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a34:	2307      	movs	r3, #7
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	e00a      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a3a:	2306      	movs	r3, #6
 8009a3c:	617b      	str	r3, [r7, #20]
 8009a3e:	e007      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a40:	79fb      	ldrb	r3, [r7, #7]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a46:	2309      	movs	r3, #9
 8009a48:	617b      	str	r3, [r7, #20]
 8009a4a:	e001      	b.n	8009a50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a4c:	2309      	movs	r3, #9
 8009a4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	029b      	lsls	r3, r3, #10
 8009a64:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	00d8acbf 	.word	0x00d8acbf
 8009a80:	00e4e1c0 	.word	0x00e4e1c0
 8009a84:	00f42400 	.word	0x00f42400
 8009a88:	01067380 	.word	0x01067380
 8009a8c:	011a499f 	.word	0x011a499f
 8009a90:	01312cff 	.word	0x01312cff
 8009a94:	014ca43f 	.word	0x014ca43f
 8009a98:	016e3600 	.word	0x016e3600
 8009a9c:	01a6ab1f 	.word	0x01a6ab1f
 8009aa0:	01e84800 	.word	0x01e84800

08009aa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f043 0201 	orr.w	r2, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f023 0201 	bic.w	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d115      	bne.n	8009b36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b16:	200a      	movs	r0, #10
 8009b18:	f7f8 f914 	bl	8001d44 <HAL_Delay>
      ms += 10U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	330a      	adds	r3, #10
 8009b20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 f93f 	bl	800ada6 <USB_GetMode>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d01e      	beq.n	8009b6c <USB_SetCurrentMode+0x84>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b32:	d9f0      	bls.n	8009b16 <USB_SetCurrentMode+0x2e>
 8009b34:	e01a      	b.n	8009b6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b36:	78fb      	ldrb	r3, [r7, #3]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d115      	bne.n	8009b68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b48:	200a      	movs	r0, #10
 8009b4a:	f7f8 f8fb 	bl	8001d44 <HAL_Delay>
      ms += 10U;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	330a      	adds	r3, #10
 8009b52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 f926 	bl	800ada6 <USB_GetMode>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <USB_SetCurrentMode+0x84>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b64:	d9f0      	bls.n	8009b48 <USB_SetCurrentMode+0x60>
 8009b66:	e001      	b.n	8009b6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e005      	b.n	8009b78 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009b70:	d101      	bne.n	8009b76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e000      	b.n	8009b78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b80:	b084      	sub	sp, #16
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b086      	sub	sp, #24
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	613b      	str	r3, [r7, #16]
 8009b9e:	e009      	b.n	8009bb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	3340      	adds	r3, #64	@ 0x40
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	2200      	movs	r2, #0
 8009bac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	613b      	str	r3, [r7, #16]
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b0e      	cmp	r3, #14
 8009bb8:	d9f2      	bls.n	8009ba0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009bba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d11c      	bne.n	8009bfc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bd0:	f043 0302 	orr.w	r3, r3, #2
 8009bd4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bda:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	e005      	b.n	8009c08 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c0e:	461a      	mov	r2, r3
 8009c10:	2300      	movs	r3, #0
 8009c12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d10d      	bne.n	8009c38 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009c24:	2100      	movs	r1, #0
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f968 	bl	8009efc <USB_SetDevSpeed>
 8009c2c:	e008      	b.n	8009c40 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009c2e:	2101      	movs	r1, #1
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f963 	bl	8009efc <USB_SetDevSpeed>
 8009c36:	e003      	b.n	8009c40 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c38:	2103      	movs	r1, #3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f95e 	bl	8009efc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c40:	2110      	movs	r1, #16
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f8fa 	bl	8009e3c <USB_FlushTxFifo>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f924 	bl	8009ea0 <USB_FlushRxFifo>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c68:	461a      	mov	r2, r3
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c74:	461a      	mov	r2, r3
 8009c76:	2300      	movs	r3, #0
 8009c78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c80:	461a      	mov	r2, r3
 8009c82:	2300      	movs	r3, #0
 8009c84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c86:	2300      	movs	r3, #0
 8009c88:	613b      	str	r3, [r7, #16]
 8009c8a:	e043      	b.n	8009d14 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ca2:	d118      	bne.n	8009cd6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10a      	bne.n	8009cc0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	e013      	b.n	8009ce8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	e008      	b.n	8009ce8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d06:	461a      	mov	r2, r3
 8009d08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	3301      	adds	r3, #1
 8009d12:	613b      	str	r3, [r7, #16]
 8009d14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d18:	461a      	mov	r2, r3
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d3b5      	bcc.n	8009c8c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d20:	2300      	movs	r3, #0
 8009d22:	613b      	str	r3, [r7, #16]
 8009d24:	e043      	b.n	8009dae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d3c:	d118      	bne.n	8009d70 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10a      	bne.n	8009d5a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d50:	461a      	mov	r2, r3
 8009d52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	e013      	b.n	8009d82 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d66:	461a      	mov	r2, r3
 8009d68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	e008      	b.n	8009d82 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	015a      	lsls	r2, r3, #5
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4413      	add	r3, r2
 8009d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d8e:	461a      	mov	r2, r3
 8009d90:	2300      	movs	r3, #0
 8009d92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da0:	461a      	mov	r2, r3
 8009da2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009da6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	3301      	adds	r3, #1
 8009dac:	613b      	str	r3, [r7, #16]
 8009dae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009db2:	461a      	mov	r2, r3
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d3b5      	bcc.n	8009d26 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dcc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009dda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ddc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d105      	bne.n	8009df0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	f043 0210 	orr.w	r2, r3, #16
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	699a      	ldr	r2, [r3, #24]
 8009df4:	4b0f      	ldr	r3, [pc, #60]	@ (8009e34 <USB_DevInit+0x2b4>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009dfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d005      	beq.n	8009e10 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	f043 0208 	orr.w	r2, r3, #8
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009e10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d105      	bne.n	8009e24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699a      	ldr	r2, [r3, #24]
 8009e1c:	4b06      	ldr	r3, [pc, #24]	@ (8009e38 <USB_DevInit+0x2b8>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e30:	b004      	add	sp, #16
 8009e32:	4770      	bx	lr
 8009e34:	803c3800 	.word	0x803c3800
 8009e38:	40000004 	.word	0x40000004

08009e3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e56:	d901      	bls.n	8009e5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e01b      	b.n	8009e94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	daf2      	bge.n	8009e4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	019b      	lsls	r3, r3, #6
 8009e6c:	f043 0220 	orr.w	r2, r3, #32
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3301      	adds	r3, #1
 8009e78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e80:	d901      	bls.n	8009e86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e006      	b.n	8009e94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	f003 0320 	and.w	r3, r3, #32
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d0f0      	beq.n	8009e74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009eb8:	d901      	bls.n	8009ebe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e018      	b.n	8009ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	daf2      	bge.n	8009eac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2210      	movs	r2, #16
 8009ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009edc:	d901      	bls.n	8009ee2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e006      	b.n	8009ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f003 0310 	and.w	r3, r3, #16
 8009eea:	2b10      	cmp	r3, #16
 8009eec:	d0f0      	beq.n	8009ed0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	68f9      	ldr	r1, [r7, #12]
 8009f18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b087      	sub	sp, #28
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f003 0306 	and.w	r3, r3, #6
 8009f46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d102      	bne.n	8009f54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	75fb      	strb	r3, [r7, #23]
 8009f52:	e00a      	b.n	8009f6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d002      	beq.n	8009f60 <USB_GetDevSpeed+0x32>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2b06      	cmp	r3, #6
 8009f5e:	d102      	bne.n	8009f66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f60:	2302      	movs	r3, #2
 8009f62:	75fb      	strb	r3, [r7, #23]
 8009f64:	e001      	b.n	8009f6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009f66:	230f      	movs	r3, #15
 8009f68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d139      	bne.n	800a008 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	f003 030f 	and.w	r3, r3, #15
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	68f9      	ldr	r1, [r7, #12]
 8009fae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d153      	bne.n	800a074 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	791b      	ldrb	r3, [r3, #4]
 8009fe6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fe8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	059b      	lsls	r3, r3, #22
 8009fee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	0159      	lsls	r1, r3, #5
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	440b      	add	r3, r1
 8009ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffe:	4619      	mov	r1, r3
 800a000:	4b20      	ldr	r3, [pc, #128]	@ (800a084 <USB_ActivateEndpoint+0x10c>)
 800a002:	4313      	orrs	r3, r2
 800a004:	600b      	str	r3, [r1, #0]
 800a006:	e035      	b.n	800a074 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a00e:	69da      	ldr	r2, [r3, #28]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	f003 030f 	and.w	r3, r3, #15
 800a018:	2101      	movs	r1, #1
 800a01a:	fa01 f303 	lsl.w	r3, r1, r3
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	68f9      	ldr	r1, [r7, #12]
 800a022:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a026:	4313      	orrs	r3, r2
 800a028:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d119      	bne.n	800a074 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	791b      	ldrb	r3, [r3, #4]
 800a05a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a05c:	430b      	orrs	r3, r1
 800a05e:	431a      	orrs	r2, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	0159      	lsls	r1, r3, #5
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	440b      	add	r3, r1
 800a068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a06c:	4619      	mov	r1, r3
 800a06e:	4b05      	ldr	r3, [pc, #20]	@ (800a084 <USB_ActivateEndpoint+0x10c>)
 800a070:	4313      	orrs	r3, r2
 800a072:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	10008000 	.word	0x10008000

0800a088 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	785b      	ldrb	r3, [r3, #1]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d161      	bne.n	800a168 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0ba:	d11f      	bne.n	800a0fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	0151      	lsls	r1, r2, #5
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	440a      	add	r2, r1
 800a0d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	0151      	lsls	r1, r2, #5
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	440a      	add	r2, r1
 800a0f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	f003 030f 	and.w	r3, r3, #15
 800a10c:	2101      	movs	r1, #1
 800a10e:	fa01 f303 	lsl.w	r3, r1, r3
 800a112:	b29b      	uxth	r3, r3
 800a114:	43db      	mvns	r3, r3
 800a116:	68f9      	ldr	r1, [r7, #12]
 800a118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a11c:	4013      	ands	r3, r2
 800a11e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a126:	69da      	ldr	r2, [r3, #28]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f003 030f 	and.w	r3, r3, #15
 800a130:	2101      	movs	r1, #1
 800a132:	fa01 f303 	lsl.w	r3, r1, r3
 800a136:	b29b      	uxth	r3, r3
 800a138:	43db      	mvns	r3, r3
 800a13a:	68f9      	ldr	r1, [r7, #12]
 800a13c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a140:	4013      	ands	r3, r2
 800a142:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	0159      	lsls	r1, r3, #5
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	440b      	add	r3, r1
 800a15a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a15e:	4619      	mov	r1, r3
 800a160:	4b35      	ldr	r3, [pc, #212]	@ (800a238 <USB_DeactivateEndpoint+0x1b0>)
 800a162:	4013      	ands	r3, r2
 800a164:	600b      	str	r3, [r1, #0]
 800a166:	e060      	b.n	800a22a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a17a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a17e:	d11f      	bne.n	800a1c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	0151      	lsls	r1, r2, #5
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	440a      	add	r2, r1
 800a196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a19a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a19e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	0151      	lsls	r1, r2, #5
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	440a      	add	r2, r1
 800a1b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f003 030f 	and.w	r3, r3, #15
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d6:	041b      	lsls	r3, r3, #16
 800a1d8:	43db      	mvns	r3, r3
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ea:	69da      	ldr	r2, [r3, #28]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f003 030f 	and.w	r3, r3, #15
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fa:	041b      	lsls	r3, r3, #16
 800a1fc:	43db      	mvns	r3, r3
 800a1fe:	68f9      	ldr	r1, [r7, #12]
 800a200:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a204:	4013      	ands	r3, r2
 800a206:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	0159      	lsls	r1, r3, #5
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	440b      	add	r3, r1
 800a21e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a222:	4619      	mov	r1, r3
 800a224:	4b05      	ldr	r3, [pc, #20]	@ (800a23c <USB_DeactivateEndpoint+0x1b4>)
 800a226:	4013      	ands	r3, r2
 800a228:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	ec337800 	.word	0xec337800
 800a23c:	eff37800 	.word	0xeff37800

0800a240 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	@ 0x28
 800a244:	af02      	add	r7, sp, #8
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	4613      	mov	r3, r2
 800a24c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	785b      	ldrb	r3, [r3, #1]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	f040 8185 	bne.w	800a56c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d132      	bne.n	800a2d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a276:	691a      	ldr	r2, [r3, #16]
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	0159      	lsls	r1, r3, #5
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	440b      	add	r3, r1
 800a280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a284:	4619      	mov	r1, r3
 800a286:	4ba7      	ldr	r3, [pc, #668]	@ (800a524 <USB_EPStartXfer+0x2e4>)
 800a288:	4013      	ands	r3, r2
 800a28a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b8:	691a      	ldr	r2, [r3, #16]
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	0159      	lsls	r1, r3, #5
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	440b      	add	r3, r1
 800a2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4b97      	ldr	r3, [pc, #604]	@ (800a528 <USB_EPStartXfer+0x2e8>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	610b      	str	r3, [r1, #16]
 800a2ce:	e097      	b.n	800a400 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2dc:	691a      	ldr	r2, [r3, #16]
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	0159      	lsls	r1, r3, #5
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	440b      	add	r3, r1
 800a2e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4b8e      	ldr	r3, [pc, #568]	@ (800a528 <USB_EPStartXfer+0x2e8>)
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fe:	691a      	ldr	r2, [r3, #16]
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	0159      	lsls	r1, r3, #5
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	440b      	add	r3, r1
 800a308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a30c:	4619      	mov	r1, r3
 800a30e:	4b85      	ldr	r3, [pc, #532]	@ (800a524 <USB_EPStartXfer+0x2e4>)
 800a310:	4013      	ands	r3, r2
 800a312:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d11a      	bne.n	800a350 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	691a      	ldr	r2, [r3, #16]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	429a      	cmp	r2, r3
 800a324:	d903      	bls.n	800a32e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	689a      	ldr	r2, [r3, #8]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	0151      	lsls	r1, r2, #5
 800a340:	69fa      	ldr	r2, [r7, #28]
 800a342:	440a      	add	r2, r1
 800a344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a348:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a34c:	6113      	str	r3, [r2, #16]
 800a34e:	e044      	b.n	800a3da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	691a      	ldr	r2, [r3, #16]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	4413      	add	r3, r2
 800a35a:	1e5a      	subs	r2, r3, #1
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	fbb2 f3f3 	udiv	r3, r2, r3
 800a364:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a372:	691a      	ldr	r2, [r3, #16]
 800a374:	8afb      	ldrh	r3, [r7, #22]
 800a376:	04d9      	lsls	r1, r3, #19
 800a378:	4b6c      	ldr	r3, [pc, #432]	@ (800a52c <USB_EPStartXfer+0x2ec>)
 800a37a:	400b      	ands	r3, r1
 800a37c:	69b9      	ldr	r1, [r7, #24]
 800a37e:	0148      	lsls	r0, r1, #5
 800a380:	69f9      	ldr	r1, [r7, #28]
 800a382:	4401      	add	r1, r0
 800a384:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a388:	4313      	orrs	r3, r2
 800a38a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	791b      	ldrb	r3, [r3, #4]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d122      	bne.n	800a3da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	69ba      	ldr	r2, [r7, #24]
 800a3a4:	0151      	lsls	r1, r2, #5
 800a3a6:	69fa      	ldr	r2, [r7, #28]
 800a3a8:	440a      	add	r2, r1
 800a3aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a3b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c0:	691a      	ldr	r2, [r3, #16]
 800a3c2:	8afb      	ldrh	r3, [r7, #22]
 800a3c4:	075b      	lsls	r3, r3, #29
 800a3c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a3ca:	69b9      	ldr	r1, [r7, #24]
 800a3cc:	0148      	lsls	r0, r1, #5
 800a3ce:	69f9      	ldr	r1, [r7, #28]
 800a3d0:	4401      	add	r1, r0
 800a3d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3e6:	691a      	ldr	r2, [r3, #16]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3f0:	69b9      	ldr	r1, [r7, #24]
 800a3f2:	0148      	lsls	r0, r1, #5
 800a3f4:	69f9      	ldr	r1, [r7, #28]
 800a3f6:	4401      	add	r1, r0
 800a3f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d14b      	bne.n	800a49e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d009      	beq.n	800a422 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a41a:	461a      	mov	r2, r3
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	791b      	ldrb	r3, [r3, #4]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d128      	bne.n	800a47c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a436:	2b00      	cmp	r3, #0
 800a438:	d110      	bne.n	800a45c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	0151      	lsls	r1, r2, #5
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	440a      	add	r2, r1
 800a450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a454:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	e00f      	b.n	800a47c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69ba      	ldr	r2, [r7, #24]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a47a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	0151      	lsls	r1, r2, #5
 800a48e:	69fa      	ldr	r2, [r7, #28]
 800a490:	440a      	add	r2, r1
 800a492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a496:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	e169      	b.n	800a772 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	69ba      	ldr	r2, [r7, #24]
 800a4ae:	0151      	lsls	r1, r2, #5
 800a4b0:	69fa      	ldr	r2, [r7, #28]
 800a4b2:	440a      	add	r2, r1
 800a4b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a4bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	791b      	ldrb	r3, [r3, #4]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d015      	beq.n	800a4f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 8151 	beq.w	800a772 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	f003 030f 	and.w	r3, r3, #15
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4e6:	69f9      	ldr	r1, [r7, #28]
 800a4e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	634b      	str	r3, [r1, #52]	@ 0x34
 800a4f0:	e13f      	b.n	800a772 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d116      	bne.n	800a530 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69ba      	ldr	r2, [r7, #24]
 800a512:	0151      	lsls	r1, r2, #5
 800a514:	69fa      	ldr	r2, [r7, #28]
 800a516:	440a      	add	r2, r1
 800a518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a51c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	e015      	b.n	800a550 <USB_EPStartXfer+0x310>
 800a524:	e007ffff 	.word	0xe007ffff
 800a528:	fff80000 	.word	0xfff80000
 800a52c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	0151      	lsls	r1, r2, #5
 800a542:	69fa      	ldr	r2, [r7, #28]
 800a544:	440a      	add	r2, r1
 800a546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a54a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a54e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	68d9      	ldr	r1, [r3, #12]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	781a      	ldrb	r2, [r3, #0]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	b298      	uxth	r0, r3
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	4603      	mov	r3, r0
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 f9b9 	bl	800a8dc <USB_WritePacket>
 800a56a:	e102      	b.n	800a772 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a578:	691a      	ldr	r2, [r3, #16]
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	0159      	lsls	r1, r3, #5
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	440b      	add	r3, r1
 800a582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a586:	4619      	mov	r1, r3
 800a588:	4b7c      	ldr	r3, [pc, #496]	@ (800a77c <USB_EPStartXfer+0x53c>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59a:	691a      	ldr	r2, [r3, #16]
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	0159      	lsls	r1, r3, #5
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	440b      	add	r3, r1
 800a5a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4b75      	ldr	r3, [pc, #468]	@ (800a780 <USB_EPStartXfer+0x540>)
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d12f      	bne.n	800a616 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	689a      	ldr	r2, [r3, #8]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5da:	691a      	ldr	r2, [r3, #16]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5e4:	69b9      	ldr	r1, [r7, #24]
 800a5e6:	0148      	lsls	r0, r1, #5
 800a5e8:	69f9      	ldr	r1, [r7, #28]
 800a5ea:	4401      	add	r1, r0
 800a5ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	0151      	lsls	r1, r2, #5
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	440a      	add	r2, r1
 800a60a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a60e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a612:	6113      	str	r3, [r2, #16]
 800a614:	e05f      	b.n	800a6d6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d123      	bne.n	800a666 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a634:	69b9      	ldr	r1, [r7, #24]
 800a636:	0148      	lsls	r0, r1, #5
 800a638:	69f9      	ldr	r1, [r7, #28]
 800a63a:	4401      	add	r1, r0
 800a63c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a640:	4313      	orrs	r3, r2
 800a642:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	0151      	lsls	r1, r2, #5
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	440a      	add	r2, r1
 800a65a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a65e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a662:	6113      	str	r3, [r2, #16]
 800a664:	e037      	b.n	800a6d6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	691a      	ldr	r2, [r3, #16]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	4413      	add	r3, r2
 800a670:	1e5a      	subs	r2, r3, #1
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	8afa      	ldrh	r2, [r7, #22]
 800a682:	fb03 f202 	mul.w	r2, r3, r2
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	4413      	add	r3, r2
 800a692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a696:	691a      	ldr	r2, [r3, #16]
 800a698:	8afb      	ldrh	r3, [r7, #22]
 800a69a:	04d9      	lsls	r1, r3, #19
 800a69c:	4b39      	ldr	r3, [pc, #228]	@ (800a784 <USB_EPStartXfer+0x544>)
 800a69e:	400b      	ands	r3, r1
 800a6a0:	69b9      	ldr	r1, [r7, #24]
 800a6a2:	0148      	lsls	r0, r1, #5
 800a6a4:	69f9      	ldr	r1, [r7, #28]
 800a6a6:	4401      	add	r1, r0
 800a6a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6bc:	691a      	ldr	r2, [r3, #16]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6c6:	69b9      	ldr	r1, [r7, #24]
 800a6c8:	0148      	lsls	r0, r1, #5
 800a6ca:	69f9      	ldr	r1, [r7, #28]
 800a6cc:	4401      	add	r1, r0
 800a6ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d10d      	bne.n	800a6f8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d009      	beq.n	800a6f8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	68d9      	ldr	r1, [r3, #12]
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f4:	460a      	mov	r2, r1
 800a6f6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	791b      	ldrb	r3, [r3, #4]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d128      	bne.n	800a752 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d110      	bne.n	800a732 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	0151      	lsls	r1, r2, #5
 800a722:	69fa      	ldr	r2, [r7, #28]
 800a724:	440a      	add	r2, r1
 800a726:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a72a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	e00f      	b.n	800a752 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	0151      	lsls	r1, r2, #5
 800a744:	69fa      	ldr	r2, [r7, #28]
 800a746:	440a      	add	r2, r1
 800a748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a74c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a750:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	69ba      	ldr	r2, [r7, #24]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	69fa      	ldr	r2, [r7, #28]
 800a766:	440a      	add	r2, r1
 800a768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a76c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a770:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3720      	adds	r7, #32
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	fff80000 	.word	0xfff80000
 800a780:	e007ffff 	.word	0xe007ffff
 800a784:	1ff80000 	.word	0x1ff80000

0800a788 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a788:	b480      	push	{r7}
 800a78a:	b087      	sub	sp, #28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a792:	2300      	movs	r3, #0
 800a794:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	785b      	ldrb	r3, [r3, #1]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d14a      	bne.n	800a83c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7be:	f040 8086 	bne.w	800a8ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	7812      	ldrb	r2, [r2, #0]
 800a7d6:	0151      	lsls	r1, r2, #5
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	440a      	add	r2, r1
 800a7dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a7e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	015a      	lsls	r2, r3, #5
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	7812      	ldrb	r2, [r2, #0]
 800a7fa:	0151      	lsls	r1, r2, #5
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	440a      	add	r2, r1
 800a800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a804:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a808:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3301      	adds	r3, #1
 800a80e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a816:	4293      	cmp	r3, r2
 800a818:	d902      	bls.n	800a820 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	75fb      	strb	r3, [r7, #23]
          break;
 800a81e:	e056      	b.n	800a8ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a838:	d0e7      	beq.n	800a80a <USB_EPStopXfer+0x82>
 800a83a:	e048      	b.n	800a8ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a854:	d13b      	bne.n	800a8ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	7812      	ldrb	r2, [r2, #0]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a874:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a878:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	7812      	ldrb	r2, [r2, #0]
 800a88e:	0151      	lsls	r1, r2, #5
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	440a      	add	r2, r1
 800a894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a898:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a89c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d902      	bls.n	800a8b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	75fb      	strb	r3, [r7, #23]
          break;
 800a8b2:	e00c      	b.n	800a8ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	015a      	lsls	r2, r3, #5
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	4413      	add	r3, r2
 800a8be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8cc:	d0e7      	beq.n	800a89e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	371c      	adds	r7, #28
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b089      	sub	sp, #36	@ 0x24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	71fb      	strb	r3, [r7, #7]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a8fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d123      	bne.n	800a94a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a902:	88bb      	ldrh	r3, [r7, #4]
 800a904:	3303      	adds	r3, #3
 800a906:	089b      	lsrs	r3, r3, #2
 800a908:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a90a:	2300      	movs	r3, #0
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	e018      	b.n	800a942 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	031a      	lsls	r2, r3, #12
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	4413      	add	r3, r2
 800a918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a91c:	461a      	mov	r2, r3
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	3301      	adds	r3, #1
 800a928:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	3301      	adds	r3, #1
 800a92e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	3301      	adds	r3, #1
 800a934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	3301      	adds	r3, #1
 800a93a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	3301      	adds	r3, #1
 800a940:	61bb      	str	r3, [r7, #24]
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	429a      	cmp	r2, r3
 800a948:	d3e2      	bcc.n	800a910 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3724      	adds	r7, #36	@ 0x24
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a958:	b480      	push	{r7}
 800a95a:	b08b      	sub	sp, #44	@ 0x2c
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	4613      	mov	r3, r2
 800a964:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a96e:	88fb      	ldrh	r3, [r7, #6]
 800a970:	089b      	lsrs	r3, r3, #2
 800a972:	b29b      	uxth	r3, r3
 800a974:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	f003 0303 	and.w	r3, r3, #3
 800a97c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a97e:	2300      	movs	r3, #0
 800a980:	623b      	str	r3, [r7, #32]
 800a982:	e014      	b.n	800a9ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	3301      	adds	r3, #1
 800a994:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a998:	3301      	adds	r3, #1
 800a99a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	3301      	adds	r3, #1
 800a9a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	623b      	str	r3, [r7, #32]
 800a9ae:	6a3a      	ldr	r2, [r7, #32]
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d3e6      	bcc.n	800a984 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a9b6:	8bfb      	ldrh	r3, [r7, #30]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01e      	beq.n	800a9fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f107 0310 	add.w	r3, r7, #16
 800a9cc:	6812      	ldr	r2, [r2, #0]
 800a9ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e0:	701a      	strb	r2, [r3, #0]
      i++;
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a9ee:	8bfb      	ldrh	r3, [r7, #30]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9f4:	8bfb      	ldrh	r3, [r7, #30]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1ea      	bne.n	800a9d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	372c      	adds	r7, #44	@ 0x2c
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	785b      	ldrb	r3, [r3, #1]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d12c      	bne.n	800aa7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	db12      	blt.n	800aa5c <USB_EPSetStall+0x54>
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00f      	beq.n	800aa5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	0151      	lsls	r1, r2, #5
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	440a      	add	r2, r1
 800aa52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aa5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	0151      	lsls	r1, r2, #5
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	440a      	add	r2, r1
 800aa72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	e02b      	b.n	800aad6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	db12      	blt.n	800aab6 <USB_EPSetStall+0xae>
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00f      	beq.n	800aab6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	015a      	lsls	r2, r3, #5
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	0151      	lsls	r1, r2, #5
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	440a      	add	r2, r1
 800aaac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aab0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aab4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	0151      	lsls	r1, r2, #5
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	440a      	add	r2, r1
 800aacc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aad4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	785b      	ldrb	r3, [r3, #1]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d128      	bne.n	800ab52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	015a      	lsls	r2, r3, #5
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	0151      	lsls	r1, r2, #5
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	440a      	add	r2, r1
 800ab16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	791b      	ldrb	r3, [r3, #4]
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d003      	beq.n	800ab30 <USB_EPClearStall+0x4c>
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	791b      	ldrb	r3, [r3, #4]
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d138      	bne.n	800aba2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	0151      	lsls	r1, r2, #5
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	440a      	add	r2, r1
 800ab46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	e027      	b.n	800aba2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	0151      	lsls	r1, r2, #5
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	440a      	add	r2, r1
 800ab68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	791b      	ldrb	r3, [r3, #4]
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d003      	beq.n	800ab82 <USB_EPClearStall+0x9e>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	791b      	ldrb	r3, [r3, #4]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d10f      	bne.n	800aba2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	0151      	lsls	r1, r2, #5
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	440a      	add	r2, r1
 800ab98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aba0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800abd2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	011b      	lsls	r3, r3, #4
 800abe0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800abe4:	68f9      	ldr	r1, [r7, #12]
 800abe6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abea:	4313      	orrs	r3, r2
 800abec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac16:	f023 0303 	bic.w	r3, r3, #3
 800ac1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac2a:	f023 0302 	bic.w	r3, r3, #2
 800ac2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b085      	sub	sp, #20
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac58:	f023 0303 	bic.w	r3, r3, #3
 800ac5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac6c:	f043 0302 	orr.w	r3, r3, #2
 800ac70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	4013      	ands	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac98:	68fb      	ldr	r3, [r7, #12]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b085      	sub	sp, #20
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc2:	69db      	ldr	r3, [r3, #28]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	4013      	ands	r3, r2
 800acc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	0c1b      	lsrs	r3, r3, #16
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800acda:	b480      	push	{r7}
 800acdc:	b085      	sub	sp, #20
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	4013      	ands	r3, r2
 800acfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	b29b      	uxth	r3, r3
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b085      	sub	sp, #20
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	4013      	ands	r3, r2
 800ad3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b087      	sub	sp, #28
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	f003 030f 	and.w	r3, r3, #15
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	fa22 f303 	lsr.w	r3, r2, r3
 800ad7a:	01db      	lsls	r3, r3, #7
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	4013      	ands	r3, r2
 800ad96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad98:	68bb      	ldr	r3, [r7, #8]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	f003 0301 	and.w	r3, r3, #1
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
	...

0800adc4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adde:	4619      	mov	r1, r3
 800ade0:	4b09      	ldr	r3, [pc, #36]	@ (800ae08 <USB_ActivateSetup+0x44>)
 800ade2:	4013      	ands	r3, r2
 800ade4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800adf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	fffff800 	.word	0xfffff800

0800ae0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	460b      	mov	r3, r1
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	333c      	adds	r3, #60	@ 0x3c
 800ae22:	3304      	adds	r3, #4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	4a26      	ldr	r2, [pc, #152]	@ (800aec4 <USB_EP0_OutStart+0xb8>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d90a      	bls.n	800ae46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae40:	d101      	bne.n	800ae46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	e037      	b.n	800aeb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	2300      	movs	r3, #0
 800ae50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae74:	f043 0318 	orr.w	r3, r3, #24
 800ae78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae88:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ae8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae8e:	7afb      	ldrb	r3, [r7, #11]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d10f      	bne.n	800aeb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aeae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aeb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	371c      	adds	r7, #28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	4f54300a 	.word	0x4f54300a

0800aec8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3301      	adds	r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aee0:	d901      	bls.n	800aee6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e01b      	b.n	800af1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	daf2      	bge.n	800aed4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	f043 0201 	orr.w	r2, r3, #1
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3301      	adds	r3, #1
 800af02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af0a:	d901      	bls.n	800af10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e006      	b.n	800af1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d0f0      	beq.n	800aefe <USB_CoreReset+0x36>

  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
	...

0800af2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af3c:	f002 fd04 	bl	800d948 <USBD_static_malloc>
 800af40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d109      	bne.n	800af5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	32b0      	adds	r2, #176	@ 0xb0
 800af52:	2100      	movs	r1, #0
 800af54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af58:	2302      	movs	r3, #2
 800af5a:	e0d4      	b.n	800b106 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800af5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800af60:	2100      	movs	r1, #0
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f004 f9fc 	bl	800f360 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	32b0      	adds	r2, #176	@ 0xb0
 800af72:	68f9      	ldr	r1, [r7, #12]
 800af74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	32b0      	adds	r2, #176	@ 0xb0
 800af82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7c1b      	ldrb	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d138      	bne.n	800b006 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af94:	4b5e      	ldr	r3, [pc, #376]	@ (800b110 <USBD_CDC_Init+0x1e4>)
 800af96:	7819      	ldrb	r1, [r3, #0]
 800af98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af9c:	2202      	movs	r2, #2
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f002 fbaf 	bl	800d702 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800afa4:	4b5a      	ldr	r3, [pc, #360]	@ (800b110 <USBD_CDC_Init+0x1e4>)
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 020f 	and.w	r2, r3, #15
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	3324      	adds	r3, #36	@ 0x24
 800afba:	2201      	movs	r2, #1
 800afbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800afbe:	4b55      	ldr	r3, [pc, #340]	@ (800b114 <USBD_CDC_Init+0x1e8>)
 800afc0:	7819      	ldrb	r1, [r3, #0]
 800afc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afc6:	2202      	movs	r2, #2
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f002 fb9a 	bl	800d702 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800afce:	4b51      	ldr	r3, [pc, #324]	@ (800b114 <USBD_CDC_Init+0x1e8>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	f003 020f 	and.w	r2, r3, #15
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	4613      	mov	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	440b      	add	r3, r1
 800afe2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afe6:	2201      	movs	r2, #1
 800afe8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800afea:	4b4b      	ldr	r3, [pc, #300]	@ (800b118 <USBD_CDC_Init+0x1ec>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	f003 020f 	and.w	r2, r3, #15
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	4613      	mov	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	440b      	add	r3, r1
 800affe:	3326      	adds	r3, #38	@ 0x26
 800b000:	2210      	movs	r2, #16
 800b002:	801a      	strh	r2, [r3, #0]
 800b004:	e035      	b.n	800b072 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b006:	4b42      	ldr	r3, [pc, #264]	@ (800b110 <USBD_CDC_Init+0x1e4>)
 800b008:	7819      	ldrb	r1, [r3, #0]
 800b00a:	2340      	movs	r3, #64	@ 0x40
 800b00c:	2202      	movs	r2, #2
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f002 fb77 	bl	800d702 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b014:	4b3e      	ldr	r3, [pc, #248]	@ (800b110 <USBD_CDC_Init+0x1e4>)
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	f003 020f 	and.w	r2, r3, #15
 800b01c:	6879      	ldr	r1, [r7, #4]
 800b01e:	4613      	mov	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	440b      	add	r3, r1
 800b028:	3324      	adds	r3, #36	@ 0x24
 800b02a:	2201      	movs	r2, #1
 800b02c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b02e:	4b39      	ldr	r3, [pc, #228]	@ (800b114 <USBD_CDC_Init+0x1e8>)
 800b030:	7819      	ldrb	r1, [r3, #0]
 800b032:	2340      	movs	r3, #64	@ 0x40
 800b034:	2202      	movs	r2, #2
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f002 fb63 	bl	800d702 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b03c:	4b35      	ldr	r3, [pc, #212]	@ (800b114 <USBD_CDC_Init+0x1e8>)
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	f003 020f 	and.w	r2, r3, #15
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	4613      	mov	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	440b      	add	r3, r1
 800b050:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b054:	2201      	movs	r2, #1
 800b056:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b058:	4b2f      	ldr	r3, [pc, #188]	@ (800b118 <USBD_CDC_Init+0x1ec>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	f003 020f 	and.w	r2, r3, #15
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	3326      	adds	r3, #38	@ 0x26
 800b06e:	2210      	movs	r2, #16
 800b070:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b072:	4b29      	ldr	r3, [pc, #164]	@ (800b118 <USBD_CDC_Init+0x1ec>)
 800b074:	7819      	ldrb	r1, [r3, #0]
 800b076:	2308      	movs	r3, #8
 800b078:	2203      	movs	r2, #3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f002 fb41 	bl	800d702 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b080:	4b25      	ldr	r3, [pc, #148]	@ (800b118 <USBD_CDC_Init+0x1ec>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f003 020f 	and.w	r2, r3, #15
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	440b      	add	r3, r1
 800b094:	3324      	adds	r3, #36	@ 0x24
 800b096:	2201      	movs	r2, #1
 800b098:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	33b0      	adds	r3, #176	@ 0xb0
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	e018      	b.n	800b106 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	7c1b      	ldrb	r3, [r3, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10a      	bne.n	800b0f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b114 <USBD_CDC_Init+0x1e8>)
 800b0de:	7819      	ldrb	r1, [r3, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f002 fbf8 	bl	800d8e0 <USBD_LL_PrepareReceive>
 800b0f0:	e008      	b.n	800b104 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0f2:	4b08      	ldr	r3, [pc, #32]	@ (800b114 <USBD_CDC_Init+0x1e8>)
 800b0f4:	7819      	ldrb	r1, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0fc:	2340      	movs	r3, #64	@ 0x40
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f002 fbee 	bl	800d8e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	24000097 	.word	0x24000097
 800b114:	24000098 	.word	0x24000098
 800b118:	24000099 	.word	0x24000099

0800b11c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b128:	4b3a      	ldr	r3, [pc, #232]	@ (800b214 <USBD_CDC_DeInit+0xf8>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	4619      	mov	r1, r3
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f002 fb0d 	bl	800d74e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b134:	4b37      	ldr	r3, [pc, #220]	@ (800b214 <USBD_CDC_DeInit+0xf8>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	f003 020f 	and.w	r2, r3, #15
 800b13c:	6879      	ldr	r1, [r7, #4]
 800b13e:	4613      	mov	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	440b      	add	r3, r1
 800b148:	3324      	adds	r3, #36	@ 0x24
 800b14a:	2200      	movs	r2, #0
 800b14c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b14e:	4b32      	ldr	r3, [pc, #200]	@ (800b218 <USBD_CDC_DeInit+0xfc>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f002 fafa 	bl	800d74e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b15a:	4b2f      	ldr	r3, [pc, #188]	@ (800b218 <USBD_CDC_DeInit+0xfc>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	f003 020f 	and.w	r2, r3, #15
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	4613      	mov	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	440b      	add	r3, r1
 800b16e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b172:	2200      	movs	r2, #0
 800b174:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b176:	4b29      	ldr	r3, [pc, #164]	@ (800b21c <USBD_CDC_DeInit+0x100>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f002 fae6 	bl	800d74e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b182:	4b26      	ldr	r3, [pc, #152]	@ (800b21c <USBD_CDC_DeInit+0x100>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	f003 020f 	and.w	r2, r3, #15
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	440b      	add	r3, r1
 800b196:	3324      	adds	r3, #36	@ 0x24
 800b198:	2200      	movs	r2, #0
 800b19a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b19c:	4b1f      	ldr	r3, [pc, #124]	@ (800b21c <USBD_CDC_DeInit+0x100>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f003 020f 	and.w	r2, r3, #15
 800b1a4:	6879      	ldr	r1, [r7, #4]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	440b      	add	r3, r1
 800b1b0:	3326      	adds	r3, #38	@ 0x26
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	32b0      	adds	r2, #176	@ 0xb0
 800b1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01f      	beq.n	800b208 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	33b0      	adds	r3, #176	@ 0xb0
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	32b0      	adds	r2, #176	@ 0xb0
 800b1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f002 fbba 	bl	800d964 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	32b0      	adds	r2, #176	@ 0xb0
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	24000097 	.word	0x24000097
 800b218:	24000098 	.word	0x24000098
 800b21c:	24000099 	.word	0x24000099

0800b220 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	32b0      	adds	r2, #176	@ 0xb0
 800b234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b238:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e0bf      	b.n	800b3d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d050      	beq.n	800b2fe <USBD_CDC_Setup+0xde>
 800b25c:	2b20      	cmp	r3, #32
 800b25e:	f040 80af 	bne.w	800b3c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	88db      	ldrh	r3, [r3, #6]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d03a      	beq.n	800b2e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b25b      	sxtb	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	da1b      	bge.n	800b2ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	33b0      	adds	r3, #176	@ 0xb0
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b28a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	88d2      	ldrh	r2, [r2, #6]
 800b290:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	88db      	ldrh	r3, [r3, #6]
 800b296:	2b07      	cmp	r3, #7
 800b298:	bf28      	it	cs
 800b29a:	2307      	movcs	r3, #7
 800b29c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	89fa      	ldrh	r2, [r7, #14]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f001 fdbd 	bl	800ce24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b2aa:	e090      	b.n	800b3ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	785a      	ldrb	r2, [r3, #1]
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	88db      	ldrh	r3, [r3, #6]
 800b2ba:	2b3f      	cmp	r3, #63	@ 0x3f
 800b2bc:	d803      	bhi.n	800b2c6 <USBD_CDC_Setup+0xa6>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	88db      	ldrh	r3, [r3, #6]
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	e000      	b.n	800b2c8 <USBD_CDC_Setup+0xa8>
 800b2c6:	2240      	movs	r2, #64	@ 0x40
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b2ce:	6939      	ldr	r1, [r7, #16]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f001 fdcf 	bl	800ce7c <USBD_CtlPrepareRx>
      break;
 800b2de:	e076      	b.n	800b3ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	33b0      	adds	r3, #176	@ 0xb0
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	7850      	ldrb	r0, [r2, #1]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	4798      	blx	r3
      break;
 800b2fc:	e067      	b.n	800b3ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	785b      	ldrb	r3, [r3, #1]
 800b302:	2b0b      	cmp	r3, #11
 800b304:	d851      	bhi.n	800b3aa <USBD_CDC_Setup+0x18a>
 800b306:	a201      	add	r2, pc, #4	@ (adr r2, 800b30c <USBD_CDC_Setup+0xec>)
 800b308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30c:	0800b33d 	.word	0x0800b33d
 800b310:	0800b3b9 	.word	0x0800b3b9
 800b314:	0800b3ab 	.word	0x0800b3ab
 800b318:	0800b3ab 	.word	0x0800b3ab
 800b31c:	0800b3ab 	.word	0x0800b3ab
 800b320:	0800b3ab 	.word	0x0800b3ab
 800b324:	0800b3ab 	.word	0x0800b3ab
 800b328:	0800b3ab 	.word	0x0800b3ab
 800b32c:	0800b3ab 	.word	0x0800b3ab
 800b330:	0800b3ab 	.word	0x0800b3ab
 800b334:	0800b367 	.word	0x0800b367
 800b338:	0800b391 	.word	0x0800b391
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b342:	b2db      	uxtb	r3, r3
 800b344:	2b03      	cmp	r3, #3
 800b346:	d107      	bne.n	800b358 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b348:	f107 030a 	add.w	r3, r7, #10
 800b34c:	2202      	movs	r2, #2
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f001 fd67 	bl	800ce24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b356:	e032      	b.n	800b3be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f001 fce5 	bl	800cd2a <USBD_CtlError>
            ret = USBD_FAIL;
 800b360:	2303      	movs	r3, #3
 800b362:	75fb      	strb	r3, [r7, #23]
          break;
 800b364:	e02b      	b.n	800b3be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d107      	bne.n	800b382 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b372:	f107 030d 	add.w	r3, r7, #13
 800b376:	2201      	movs	r2, #1
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f001 fd52 	bl	800ce24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b380:	e01d      	b.n	800b3be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f001 fcd0 	bl	800cd2a <USBD_CtlError>
            ret = USBD_FAIL;
 800b38a:	2303      	movs	r3, #3
 800b38c:	75fb      	strb	r3, [r7, #23]
          break;
 800b38e:	e016      	b.n	800b3be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d00f      	beq.n	800b3bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f001 fcc3 	bl	800cd2a <USBD_CtlError>
            ret = USBD_FAIL;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3a8:	e008      	b.n	800b3bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 fcbc 	bl	800cd2a <USBD_CtlError>
          ret = USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b3b6:	e002      	b.n	800b3be <USBD_CDC_Setup+0x19e>
          break;
 800b3b8:	bf00      	nop
 800b3ba:	e008      	b.n	800b3ce <USBD_CDC_Setup+0x1ae>
          break;
 800b3bc:	bf00      	nop
      }
      break;
 800b3be:	e006      	b.n	800b3ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f001 fcb1 	bl	800cd2a <USBD_CtlError>
      ret = USBD_FAIL;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b3cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	32b0      	adds	r2, #176	@ 0xb0
 800b3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e065      	b.n	800b4ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	32b0      	adds	r2, #176	@ 0xb0
 800b40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b410:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b412:	78fb      	ldrb	r3, [r7, #3]
 800b414:	f003 020f 	and.w	r2, r3, #15
 800b418:	6879      	ldr	r1, [r7, #4]
 800b41a:	4613      	mov	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	440b      	add	r3, r1
 800b424:	3318      	adds	r3, #24
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d02f      	beq.n	800b48c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	f003 020f 	and.w	r2, r3, #15
 800b432:	6879      	ldr	r1, [r7, #4]
 800b434:	4613      	mov	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4413      	add	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	440b      	add	r3, r1
 800b43e:	3318      	adds	r3, #24
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	78fb      	ldrb	r3, [r7, #3]
 800b444:	f003 010f 	and.w	r1, r3, #15
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	460b      	mov	r3, r1
 800b44c:	00db      	lsls	r3, r3, #3
 800b44e:	440b      	add	r3, r1
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4403      	add	r3, r0
 800b454:	331c      	adds	r3, #28
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	fbb2 f1f3 	udiv	r1, r2, r3
 800b45c:	fb01 f303 	mul.w	r3, r1, r3
 800b460:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b462:	2b00      	cmp	r3, #0
 800b464:	d112      	bne.n	800b48c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	f003 020f 	and.w	r2, r3, #15
 800b46c:	6879      	ldr	r1, [r7, #4]
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	440b      	add	r3, r1
 800b478:	3318      	adds	r3, #24
 800b47a:	2200      	movs	r2, #0
 800b47c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b47e:	78f9      	ldrb	r1, [r7, #3]
 800b480:	2300      	movs	r3, #0
 800b482:	2200      	movs	r2, #0
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f002 fa0a 	bl	800d89e <USBD_LL_Transmit>
 800b48a:	e01f      	b.n	800b4cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	33b0      	adds	r3, #176	@ 0xb0
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d010      	beq.n	800b4cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	33b0      	adds	r3, #176	@ 0xb0
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4413      	add	r3, r2
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b4c8:	78fa      	ldrb	r2, [r7, #3]
 800b4ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	460b      	mov	r3, r1
 800b4e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	32b0      	adds	r2, #176	@ 0xb0
 800b4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	32b0      	adds	r2, #176	@ 0xb0
 800b4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b504:	2303      	movs	r3, #3
 800b506:	e01a      	b.n	800b53e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f002 fa08 	bl	800d922 <USBD_LL_GetRxDataSize>
 800b512:	4602      	mov	r2, r0
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	33b0      	adds	r3, #176	@ 0xb0
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b538:	4611      	mov	r1, r2
 800b53a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	32b0      	adds	r2, #176	@ 0xb0
 800b558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b55c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b564:	2303      	movs	r3, #3
 800b566:	e024      	b.n	800b5b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	33b0      	adds	r3, #176	@ 0xb0
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d019      	beq.n	800b5b0 <USBD_CDC_EP0_RxReady+0x6a>
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b582:	2bff      	cmp	r3, #255	@ 0xff
 800b584:	d014      	beq.n	800b5b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	33b0      	adds	r3, #176	@ 0xb0
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b59e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	22ff      	movs	r2, #255	@ 0xff
 800b5ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5c4:	2182      	movs	r1, #130	@ 0x82
 800b5c6:	4818      	ldr	r0, [pc, #96]	@ (800b628 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5c8:	f000 fd4f 	bl	800c06a <USBD_GetEpDesc>
 800b5cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	4815      	ldr	r0, [pc, #84]	@ (800b628 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5d2:	f000 fd4a 	bl	800c06a <USBD_GetEpDesc>
 800b5d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5d8:	2181      	movs	r1, #129	@ 0x81
 800b5da:	4813      	ldr	r0, [pc, #76]	@ (800b628 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5dc:	f000 fd45 	bl	800c06a <USBD_GetEpDesc>
 800b5e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2210      	movs	r2, #16
 800b5ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5fc:	711a      	strb	r2, [r3, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d006      	beq.n	800b616 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b610:	711a      	strb	r2, [r3, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2243      	movs	r2, #67	@ 0x43
 800b61a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b61c:	4b02      	ldr	r3, [pc, #8]	@ (800b628 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	24000054 	.word	0x24000054

0800b62c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b634:	2182      	movs	r1, #130	@ 0x82
 800b636:	4818      	ldr	r0, [pc, #96]	@ (800b698 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b638:	f000 fd17 	bl	800c06a <USBD_GetEpDesc>
 800b63c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b63e:	2101      	movs	r1, #1
 800b640:	4815      	ldr	r0, [pc, #84]	@ (800b698 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b642:	f000 fd12 	bl	800c06a <USBD_GetEpDesc>
 800b646:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b648:	2181      	movs	r1, #129	@ 0x81
 800b64a:	4813      	ldr	r0, [pc, #76]	@ (800b698 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b64c:	f000 fd0d 	bl	800c06a <USBD_GetEpDesc>
 800b650:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2210      	movs	r2, #16
 800b65c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d006      	beq.n	800b672 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	2200      	movs	r2, #0
 800b668:	711a      	strb	r2, [r3, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f042 0202 	orr.w	r2, r2, #2
 800b670:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d006      	beq.n	800b686 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	711a      	strb	r2, [r3, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f042 0202 	orr.w	r2, r2, #2
 800b684:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2243      	movs	r2, #67	@ 0x43
 800b68a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b68c:	4b02      	ldr	r3, [pc, #8]	@ (800b698 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	24000054 	.word	0x24000054

0800b69c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6a4:	2182      	movs	r1, #130	@ 0x82
 800b6a6:	4818      	ldr	r0, [pc, #96]	@ (800b708 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6a8:	f000 fcdf 	bl	800c06a <USBD_GetEpDesc>
 800b6ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4815      	ldr	r0, [pc, #84]	@ (800b708 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6b2:	f000 fcda 	bl	800c06a <USBD_GetEpDesc>
 800b6b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6b8:	2181      	movs	r1, #129	@ 0x81
 800b6ba:	4813      	ldr	r0, [pc, #76]	@ (800b708 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6bc:	f000 fcd5 	bl	800c06a <USBD_GetEpDesc>
 800b6c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2210      	movs	r2, #16
 800b6cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6dc:	711a      	strb	r2, [r3, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d006      	beq.n	800b6f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6f0:	711a      	strb	r2, [r3, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2243      	movs	r2, #67	@ 0x43
 800b6fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6fc:	4b02      	ldr	r3, [pc, #8]	@ (800b708 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	24000054 	.word	0x24000054

0800b70c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	220a      	movs	r2, #10
 800b718:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b71a:	4b03      	ldr	r3, [pc, #12]	@ (800b728 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	24000010 	.word	0x24000010

0800b72c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e009      	b.n	800b754 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	33b0      	adds	r3, #176	@ 0xb0
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	32b0      	adds	r2, #176	@ 0xb0
 800b776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d101      	bne.n	800b786 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b782:	2303      	movs	r3, #3
 800b784:	e008      	b.n	800b798 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	371c      	adds	r7, #28
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	32b0      	adds	r2, #176	@ 0xb0
 800b7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e004      	b.n	800b7d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
	...

0800b7e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	32b0      	adds	r2, #176	@ 0xb0
 800b7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b802:	2303      	movs	r3, #3
 800b804:	e025      	b.n	800b852 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d11f      	bne.n	800b850 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	2201      	movs	r2, #1
 800b814:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b818:	4b10      	ldr	r3, [pc, #64]	@ (800b85c <USBD_CDC_TransmitPacket+0x7c>)
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	f003 020f 	and.w	r2, r3, #15
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	4613      	mov	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4403      	add	r3, r0
 800b832:	3318      	adds	r3, #24
 800b834:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b836:	4b09      	ldr	r3, [pc, #36]	@ (800b85c <USBD_CDC_TransmitPacket+0x7c>)
 800b838:	7819      	ldrb	r1, [r3, #0]
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f002 f829 	bl	800d89e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b850:	7bfb      	ldrb	r3, [r7, #15]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	24000097 	.word	0x24000097

0800b860 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	32b0      	adds	r2, #176	@ 0xb0
 800b872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b876:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	32b0      	adds	r2, #176	@ 0xb0
 800b882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e018      	b.n	800b8c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	7c1b      	ldrb	r3, [r3, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b896:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c8 <USBD_CDC_ReceivePacket+0x68>)
 800b898:	7819      	ldrb	r1, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f002 f81b 	bl	800d8e0 <USBD_LL_PrepareReceive>
 800b8aa:	e008      	b.n	800b8be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8ac:	4b06      	ldr	r3, [pc, #24]	@ (800b8c8 <USBD_CDC_ReceivePacket+0x68>)
 800b8ae:	7819      	ldrb	r1, [r3, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8b6:	2340      	movs	r3, #64	@ 0x40
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f002 f811 	bl	800d8e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	24000098 	.word	0x24000098

0800b8cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e01f      	b.n	800b924 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	79fa      	ldrb	r2, [r7, #7]
 800b916:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f001 fe87 	bl	800d62c <USBD_LL_Init>
 800b91e:	4603      	mov	r3, r0
 800b920:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b940:	2303      	movs	r3, #3
 800b942:	e025      	b.n	800b990 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	32ae      	adds	r2, #174	@ 0xae
 800b956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00f      	beq.n	800b980 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	32ae      	adds	r2, #174	@ 0xae
 800b96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b970:	f107 020e 	add.w	r2, r7, #14
 800b974:	4610      	mov	r0, r2
 800b976:	4798      	blx	r3
 800b978:	4602      	mov	r2, r0
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b986:	1c5a      	adds	r2, r3, #1
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f001 fe93 	bl	800d6cc <USBD_LL_Start>
 800b9a6:	4603      	mov	r3, r0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	370c      	adds	r7, #12
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d009      	beq.n	800b9f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	78fa      	ldrb	r2, [r7, #3]
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	4798      	blx	r3
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b084      	sub	sp, #16
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	78fa      	ldrb	r2, [r7, #3]
 800ba18:	4611      	mov	r1, r2
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	4798      	blx	r3
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ba24:	2303      	movs	r3, #3
 800ba26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f001 f936 	bl	800ccb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ba58:	461a      	mov	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba66:	f003 031f 	and.w	r3, r3, #31
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d01a      	beq.n	800baa4 <USBD_LL_SetupStage+0x72>
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d822      	bhi.n	800bab8 <USBD_LL_SetupStage+0x86>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <USBD_LL_SetupStage+0x4a>
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d00a      	beq.n	800ba90 <USBD_LL_SetupStage+0x5e>
 800ba7a:	e01d      	b.n	800bab8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fb63 	bl	800c150 <USBD_StdDevReq>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba8e:	e020      	b.n	800bad2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba96:	4619      	mov	r1, r3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fbcb 	bl	800c234 <USBD_StdItfReq>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]
      break;
 800baa2:	e016      	b.n	800bad2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fc2d 	bl	800c30c <USBD_StdEPReq>
 800bab2:	4603      	mov	r3, r0
 800bab4:	73fb      	strb	r3, [r7, #15]
      break;
 800bab6:	e00c      	b.n	800bad2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800babe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f001 fe60 	bl	800d78c <USBD_LL_StallEP>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
      break;
 800bad0:	bf00      	nop
  }

  return ret;
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	460b      	mov	r3, r1
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800baee:	7afb      	ldrb	r3, [r7, #11]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d16e      	bne.n	800bbd2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bafa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb02:	2b03      	cmp	r3, #3
 800bb04:	f040 8098 	bne.w	800bc38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d913      	bls.n	800bb3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	689a      	ldr	r2, [r3, #8]
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	1ad2      	subs	r2, r2, r3
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	68da      	ldr	r2, [r3, #12]
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	bf28      	it	cs
 800bb2e:	4613      	movcs	r3, r2
 800bb30:	461a      	mov	r2, r3
 800bb32:	6879      	ldr	r1, [r7, #4]
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f001 f9be 	bl	800ceb6 <USBD_CtlContinueRx>
 800bb3a:	e07d      	b.n	800bc38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb42:	f003 031f 	and.w	r3, r3, #31
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d014      	beq.n	800bb74 <USBD_LL_DataOutStage+0x98>
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d81d      	bhi.n	800bb8a <USBD_LL_DataOutStage+0xae>
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d002      	beq.n	800bb58 <USBD_LL_DataOutStage+0x7c>
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d003      	beq.n	800bb5e <USBD_LL_DataOutStage+0x82>
 800bb56:	e018      	b.n	800bb8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	75bb      	strb	r3, [r7, #22]
            break;
 800bb5c:	e018      	b.n	800bb90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	4619      	mov	r1, r3
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 fa64 	bl	800c036 <USBD_CoreFindIF>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75bb      	strb	r3, [r7, #22]
            break;
 800bb72:	e00d      	b.n	800bb90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 fa66 	bl	800c050 <USBD_CoreFindEP>
 800bb84:	4603      	mov	r3, r0
 800bb86:	75bb      	strb	r3, [r7, #22]
            break;
 800bb88:	e002      	b.n	800bb90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	75bb      	strb	r3, [r7, #22]
            break;
 800bb8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bb90:	7dbb      	ldrb	r3, [r7, #22]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d119      	bne.n	800bbca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	d113      	bne.n	800bbca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bba2:	7dba      	ldrb	r2, [r7, #22]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	32ae      	adds	r2, #174	@ 0xae
 800bba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00b      	beq.n	800bbca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bbb2:	7dba      	ldrb	r2, [r7, #22]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bbba:	7dba      	ldrb	r2, [r7, #22]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	32ae      	adds	r2, #174	@ 0xae
 800bbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f001 f984 	bl	800ced8 <USBD_CtlSendStatus>
 800bbd0:	e032      	b.n	800bc38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bbd2:	7afb      	ldrb	r3, [r7, #11]
 800bbd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	4619      	mov	r1, r3
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 fa37 	bl	800c050 <USBD_CoreFindEP>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbe6:	7dbb      	ldrb	r3, [r7, #22]
 800bbe8:	2bff      	cmp	r3, #255	@ 0xff
 800bbea:	d025      	beq.n	800bc38 <USBD_LL_DataOutStage+0x15c>
 800bbec:	7dbb      	ldrb	r3, [r7, #22]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d122      	bne.n	800bc38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d117      	bne.n	800bc2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bbfe:	7dba      	ldrb	r2, [r7, #22]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	32ae      	adds	r2, #174	@ 0xae
 800bc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00f      	beq.n	800bc2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bc0e:	7dba      	ldrb	r2, [r7, #22]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc16:	7dba      	ldrb	r2, [r7, #22]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	32ae      	adds	r2, #174	@ 0xae
 800bc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	7afa      	ldrb	r2, [r7, #11]
 800bc24:	4611      	mov	r1, r2
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	4798      	blx	r3
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	e000      	b.n	800bc3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b086      	sub	sp, #24
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	60f8      	str	r0, [r7, #12]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	607a      	str	r2, [r7, #4]
 800bc4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d16f      	bne.n	800bd36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3314      	adds	r3, #20
 800bc5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d15a      	bne.n	800bd1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	689a      	ldr	r2, [r3, #8]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d914      	bls.n	800bc9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	689a      	ldr	r2, [r3, #8]
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	1ad2      	subs	r2, r2, r3
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	461a      	mov	r2, r3
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f001 f8e6 	bl	800ce5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc8e:	2300      	movs	r3, #0
 800bc90:	2200      	movs	r2, #0
 800bc92:	2100      	movs	r1, #0
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f001 fe23 	bl	800d8e0 <USBD_LL_PrepareReceive>
 800bc9a:	e03f      	b.n	800bd1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	68da      	ldr	r2, [r3, #12]
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d11c      	bne.n	800bce2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d316      	bcc.n	800bce2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d20f      	bcs.n	800bce2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f001 f8c7 	bl	800ce5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2100      	movs	r1, #0
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f001 fe00 	bl	800d8e0 <USBD_LL_PrepareReceive>
 800bce0:	e01c      	b.n	800bd1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d10f      	bne.n	800bd0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d009      	beq.n	800bd0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd0e:	2180      	movs	r1, #128	@ 0x80
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f001 fd3b 	bl	800d78c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f001 f8f1 	bl	800cefe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d03a      	beq.n	800bd9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7ff fe42 	bl	800b9b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bd34:	e032      	b.n	800bd9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bd36:	7afb      	ldrb	r3, [r7, #11]
 800bd38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	4619      	mov	r1, r3
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f000 f985 	bl	800c050 <USBD_CoreFindEP>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	2bff      	cmp	r3, #255	@ 0xff
 800bd4e:	d025      	beq.n	800bd9c <USBD_LL_DataInStage+0x15a>
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d122      	bne.n	800bd9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d11c      	bne.n	800bd9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bd62:	7dfa      	ldrb	r2, [r7, #23]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	32ae      	adds	r2, #174	@ 0xae
 800bd68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d014      	beq.n	800bd9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bd72:	7dfa      	ldrb	r2, [r7, #23]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bd7a:	7dfa      	ldrb	r2, [r7, #23]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	32ae      	adds	r2, #174	@ 0xae
 800bd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	7afa      	ldrb	r2, [r7, #11]
 800bd88:	4611      	mov	r1, r2
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	4798      	blx	r3
 800bd8e:	4603      	mov	r3, r0
 800bd90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bd92:	7dbb      	ldrb	r3, [r7, #22]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bd98:	7dbb      	ldrb	r3, [r7, #22]
 800bd9a:	e000      	b.n	800bd9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b084      	sub	sp, #16
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d014      	beq.n	800be0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00e      	beq.n	800be0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	6852      	ldr	r2, [r2, #4]
 800bdfa:	b2d2      	uxtb	r2, r2
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	4798      	blx	r3
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800be08:	2303      	movs	r3, #3
 800be0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be0c:	2340      	movs	r3, #64	@ 0x40
 800be0e:	2200      	movs	r2, #0
 800be10:	2100      	movs	r1, #0
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 fc75 	bl	800d702 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2240      	movs	r2, #64	@ 0x40
 800be24:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be28:	2340      	movs	r3, #64	@ 0x40
 800be2a:	2200      	movs	r2, #0
 800be2c:	2180      	movs	r1, #128	@ 0x80
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f001 fc67 	bl	800d702 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2240      	movs	r2, #64	@ 0x40
 800be3e:	621a      	str	r2, [r3, #32]

  return ret;
 800be40:	7bfb      	ldrb	r3, [r7, #15]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b083      	sub	sp, #12
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	460b      	mov	r3, r1
 800be54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	78fa      	ldrb	r2, [r7, #3]
 800be5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b083      	sub	sp, #12
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b04      	cmp	r3, #4
 800be7c:	d006      	beq.n	800be8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be84:	b2da      	uxtb	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2204      	movs	r2, #4
 800be90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b083      	sub	sp, #12
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	d106      	bne.n	800bec4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b082      	sub	sp, #8
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d110      	bne.n	800bf08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00b      	beq.n	800bf08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bef6:	69db      	ldr	r3, [r3, #28]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d005      	beq.n	800bf08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf02:	69db      	ldr	r3, [r3, #28]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	32ae      	adds	r2, #174	@ 0xae
 800bf28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e01c      	b.n	800bf6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d115      	bne.n	800bf6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	32ae      	adds	r2, #174	@ 0xae
 800bf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00b      	beq.n	800bf6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	32ae      	adds	r2, #174	@ 0xae
 800bf5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf62:	6a1b      	ldr	r3, [r3, #32]
 800bf64:	78fa      	ldrb	r2, [r7, #3]
 800bf66:	4611      	mov	r1, r2
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b082      	sub	sp, #8
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	32ae      	adds	r2, #174	@ 0xae
 800bf8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf94:	2303      	movs	r3, #3
 800bf96:	e01c      	b.n	800bfd2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d115      	bne.n	800bfd0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	32ae      	adds	r2, #174	@ 0xae
 800bfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00b      	beq.n	800bfd0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	32ae      	adds	r2, #174	@ 0xae
 800bfc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfc8:	78fa      	ldrb	r2, [r7, #3]
 800bfca:	4611      	mov	r1, r2
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bfda:	b480      	push	{r7}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00e      	beq.n	800c02c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6852      	ldr	r2, [r2, #4]
 800c01a:	b2d2      	uxtb	r2, r2
 800c01c:	4611      	mov	r1, r2
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	4798      	blx	r3
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c028:	2303      	movs	r3, #3
 800c02a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c036:	b480      	push	{r7}
 800c038:	b083      	sub	sp, #12
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	460b      	mov	r3, r1
 800c040:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c042:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c044:	4618      	mov	r0, r3
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	460b      	mov	r3, r1
 800c05a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c05c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c05e:	4618      	mov	r0, r3
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b086      	sub	sp, #24
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	460b      	mov	r3, r1
 800c074:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c07e:	2300      	movs	r3, #0
 800c080:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	885b      	ldrh	r3, [r3, #2]
 800c086:	b29b      	uxth	r3, r3
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	7812      	ldrb	r2, [r2, #0]
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d91f      	bls.n	800c0d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c096:	e013      	b.n	800c0c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c098:	f107 030a 	add.w	r3, r7, #10
 800c09c:	4619      	mov	r1, r3
 800c09e:	6978      	ldr	r0, [r7, #20]
 800c0a0:	f000 f81b 	bl	800c0da <USBD_GetNextDesc>
 800c0a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	785b      	ldrb	r3, [r3, #1]
 800c0aa:	2b05      	cmp	r3, #5
 800c0ac:	d108      	bne.n	800c0c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	789b      	ldrb	r3, [r3, #2]
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d008      	beq.n	800c0ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	885b      	ldrh	r3, [r3, #2]
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	897b      	ldrh	r3, [r7, #10]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d8e5      	bhi.n	800c098 <USBD_GetEpDesc+0x2e>
 800c0cc:	e000      	b.n	800c0d0 <USBD_GetEpDesc+0x66>
          break;
 800c0ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c0d0:	693b      	ldr	r3, [r7, #16]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b085      	sub	sp, #20
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	7812      	ldrb	r2, [r2, #0]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4413      	add	r3, r2
 800c102:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c104:	68fb      	ldr	r3, [r7, #12]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c112:	b480      	push	{r7}
 800c114:	b087      	sub	sp, #28
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	3301      	adds	r3, #1
 800c128:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c130:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c134:	021b      	lsls	r3, r3, #8
 800c136:	b21a      	sxth	r2, r3
 800c138:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	b21b      	sxth	r3, r3
 800c140:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c142:	89fb      	ldrh	r3, [r7, #14]
}
 800c144:	4618      	mov	r0, r3
 800c146:	371c      	adds	r7, #28
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c166:	2b40      	cmp	r3, #64	@ 0x40
 800c168:	d005      	beq.n	800c176 <USBD_StdDevReq+0x26>
 800c16a:	2b40      	cmp	r3, #64	@ 0x40
 800c16c:	d857      	bhi.n	800c21e <USBD_StdDevReq+0xce>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00f      	beq.n	800c192 <USBD_StdDevReq+0x42>
 800c172:	2b20      	cmp	r3, #32
 800c174:	d153      	bne.n	800c21e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	32ae      	adds	r2, #174	@ 0xae
 800c180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	4798      	blx	r3
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]
      break;
 800c190:	e04a      	b.n	800c228 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	2b09      	cmp	r3, #9
 800c198:	d83b      	bhi.n	800c212 <USBD_StdDevReq+0xc2>
 800c19a:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a0 <USBD_StdDevReq+0x50>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1f5 	.word	0x0800c1f5
 800c1a4:	0800c209 	.word	0x0800c209
 800c1a8:	0800c213 	.word	0x0800c213
 800c1ac:	0800c1ff 	.word	0x0800c1ff
 800c1b0:	0800c213 	.word	0x0800c213
 800c1b4:	0800c1d3 	.word	0x0800c1d3
 800c1b8:	0800c1c9 	.word	0x0800c1c9
 800c1bc:	0800c213 	.word	0x0800c213
 800c1c0:	0800c1eb 	.word	0x0800c1eb
 800c1c4:	0800c1dd 	.word	0x0800c1dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fa3c 	bl	800c648 <USBD_GetDescriptor>
          break;
 800c1d0:	e024      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fbcb 	bl	800c970 <USBD_SetAddress>
          break;
 800c1da:	e01f      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c1dc:	6839      	ldr	r1, [r7, #0]
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fc0a 	bl	800c9f8 <USBD_SetConfig>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]
          break;
 800c1e8:	e018      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fcad 	bl	800cb4c <USBD_GetConfig>
          break;
 800c1f2:	e013      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fcde 	bl	800cbb8 <USBD_GetStatus>
          break;
 800c1fc:	e00e      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fd0d 	bl	800cc20 <USBD_SetFeature>
          break;
 800c206:	e009      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fd31 	bl	800cc72 <USBD_ClrFeature>
          break;
 800c210:	e004      	b.n	800c21c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fd88 	bl	800cd2a <USBD_CtlError>
          break;
 800c21a:	bf00      	nop
      }
      break;
 800c21c:	e004      	b.n	800c228 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fd82 	bl	800cd2a <USBD_CtlError>
      break;
 800c226:	bf00      	nop
  }

  return ret;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop

0800c234 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c24a:	2b40      	cmp	r3, #64	@ 0x40
 800c24c:	d005      	beq.n	800c25a <USBD_StdItfReq+0x26>
 800c24e:	2b40      	cmp	r3, #64	@ 0x40
 800c250:	d852      	bhi.n	800c2f8 <USBD_StdItfReq+0xc4>
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <USBD_StdItfReq+0x26>
 800c256:	2b20      	cmp	r3, #32
 800c258:	d14e      	bne.n	800c2f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c260:	b2db      	uxtb	r3, r3
 800c262:	3b01      	subs	r3, #1
 800c264:	2b02      	cmp	r3, #2
 800c266:	d840      	bhi.n	800c2ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	889b      	ldrh	r3, [r3, #4]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d836      	bhi.n	800c2e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	889b      	ldrh	r3, [r3, #4]
 800c276:	b2db      	uxtb	r3, r3
 800c278:	4619      	mov	r1, r3
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff fedb 	bl	800c036 <USBD_CoreFindIF>
 800c280:	4603      	mov	r3, r0
 800c282:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c284:	7bbb      	ldrb	r3, [r7, #14]
 800c286:	2bff      	cmp	r3, #255	@ 0xff
 800c288:	d01d      	beq.n	800c2c6 <USBD_StdItfReq+0x92>
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d11a      	bne.n	800c2c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c290:	7bba      	ldrb	r2, [r7, #14]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	32ae      	adds	r2, #174	@ 0xae
 800c296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00f      	beq.n	800c2c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c2a0:	7bba      	ldrb	r2, [r7, #14]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2a8:	7bba      	ldrb	r2, [r7, #14]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	32ae      	adds	r2, #174	@ 0xae
 800c2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	4798      	blx	r3
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2be:	e004      	b.n	800c2ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2c4:	e001      	b.n	800c2ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	88db      	ldrh	r3, [r3, #6]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d110      	bne.n	800c2f4 <USBD_StdItfReq+0xc0>
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10d      	bne.n	800c2f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fdfd 	bl	800ced8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c2de:	e009      	b.n	800c2f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fd21 	bl	800cd2a <USBD_CtlError>
          break;
 800c2e8:	e004      	b.n	800c2f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fd1c 	bl	800cd2a <USBD_CtlError>
          break;
 800c2f2:	e000      	b.n	800c2f6 <USBD_StdItfReq+0xc2>
          break;
 800c2f4:	bf00      	nop
      }
      break;
 800c2f6:	e004      	b.n	800c302 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fd15 	bl	800cd2a <USBD_CtlError>
      break;
 800c300:	bf00      	nop
  }

  return ret;
 800c302:	7bfb      	ldrb	r3, [r7, #15]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	889b      	ldrh	r3, [r3, #4]
 800c31e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c328:	2b40      	cmp	r3, #64	@ 0x40
 800c32a:	d007      	beq.n	800c33c <USBD_StdEPReq+0x30>
 800c32c:	2b40      	cmp	r3, #64	@ 0x40
 800c32e:	f200 817f 	bhi.w	800c630 <USBD_StdEPReq+0x324>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d02a      	beq.n	800c38c <USBD_StdEPReq+0x80>
 800c336:	2b20      	cmp	r3, #32
 800c338:	f040 817a 	bne.w	800c630 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff fe85 	bl	800c050 <USBD_CoreFindEP>
 800c346:	4603      	mov	r3, r0
 800c348:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c34a:	7b7b      	ldrb	r3, [r7, #13]
 800c34c:	2bff      	cmp	r3, #255	@ 0xff
 800c34e:	f000 8174 	beq.w	800c63a <USBD_StdEPReq+0x32e>
 800c352:	7b7b      	ldrb	r3, [r7, #13]
 800c354:	2b00      	cmp	r3, #0
 800c356:	f040 8170 	bne.w	800c63a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c35a:	7b7a      	ldrb	r2, [r7, #13]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c362:	7b7a      	ldrb	r2, [r7, #13]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	32ae      	adds	r2, #174	@ 0xae
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 8163 	beq.w	800c63a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c374:	7b7a      	ldrb	r2, [r7, #13]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	32ae      	adds	r2, #174	@ 0xae
 800c37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	4798      	blx	r3
 800c386:	4603      	mov	r3, r0
 800c388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c38a:	e156      	b.n	800c63a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	785b      	ldrb	r3, [r3, #1]
 800c390:	2b03      	cmp	r3, #3
 800c392:	d008      	beq.n	800c3a6 <USBD_StdEPReq+0x9a>
 800c394:	2b03      	cmp	r3, #3
 800c396:	f300 8145 	bgt.w	800c624 <USBD_StdEPReq+0x318>
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 809b 	beq.w	800c4d6 <USBD_StdEPReq+0x1ca>
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d03c      	beq.n	800c41e <USBD_StdEPReq+0x112>
 800c3a4:	e13e      	b.n	800c624 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	d002      	beq.n	800c3b8 <USBD_StdEPReq+0xac>
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d016      	beq.n	800c3e4 <USBD_StdEPReq+0xd8>
 800c3b6:	e02c      	b.n	800c412 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00d      	beq.n	800c3da <USBD_StdEPReq+0xce>
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	2b80      	cmp	r3, #128	@ 0x80
 800c3c2:	d00a      	beq.n	800c3da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f001 f9df 	bl	800d78c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3ce:	2180      	movs	r1, #128	@ 0x80
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f001 f9db 	bl	800d78c <USBD_LL_StallEP>
 800c3d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3d8:	e020      	b.n	800c41c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fca4 	bl	800cd2a <USBD_CtlError>
              break;
 800c3e2:	e01b      	b.n	800c41c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	885b      	ldrh	r3, [r3, #2]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10e      	bne.n	800c40a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00b      	beq.n	800c40a <USBD_StdEPReq+0xfe>
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	2b80      	cmp	r3, #128	@ 0x80
 800c3f6:	d008      	beq.n	800c40a <USBD_StdEPReq+0xfe>
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	88db      	ldrh	r3, [r3, #6]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d104      	bne.n	800c40a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c400:	7bbb      	ldrb	r3, [r7, #14]
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f001 f9c1 	bl	800d78c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fd64 	bl	800ced8 <USBD_CtlSendStatus>

              break;
 800c410:	e004      	b.n	800c41c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fc88 	bl	800cd2a <USBD_CtlError>
              break;
 800c41a:	bf00      	nop
          }
          break;
 800c41c:	e107      	b.n	800c62e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b02      	cmp	r3, #2
 800c428:	d002      	beq.n	800c430 <USBD_StdEPReq+0x124>
 800c42a:	2b03      	cmp	r3, #3
 800c42c:	d016      	beq.n	800c45c <USBD_StdEPReq+0x150>
 800c42e:	e04b      	b.n	800c4c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c430:	7bbb      	ldrb	r3, [r7, #14]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00d      	beq.n	800c452 <USBD_StdEPReq+0x146>
 800c436:	7bbb      	ldrb	r3, [r7, #14]
 800c438:	2b80      	cmp	r3, #128	@ 0x80
 800c43a:	d00a      	beq.n	800c452 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c43c:	7bbb      	ldrb	r3, [r7, #14]
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f001 f9a3 	bl	800d78c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c446:	2180      	movs	r1, #128	@ 0x80
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f001 f99f 	bl	800d78c <USBD_LL_StallEP>
 800c44e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c450:	e040      	b.n	800c4d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fc68 	bl	800cd2a <USBD_CtlError>
              break;
 800c45a:	e03b      	b.n	800c4d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	885b      	ldrh	r3, [r3, #2]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d136      	bne.n	800c4d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d004      	beq.n	800c478 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
 800c470:	4619      	mov	r1, r3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 f9a9 	bl	800d7ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fd2d 	bl	800ced8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff fde4 	bl	800c050 <USBD_CoreFindEP>
 800c488:	4603      	mov	r3, r0
 800c48a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c48c:	7b7b      	ldrb	r3, [r7, #13]
 800c48e:	2bff      	cmp	r3, #255	@ 0xff
 800c490:	d01f      	beq.n	800c4d2 <USBD_StdEPReq+0x1c6>
 800c492:	7b7b      	ldrb	r3, [r7, #13]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d11c      	bne.n	800c4d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c498:	7b7a      	ldrb	r2, [r7, #13]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c4a0:	7b7a      	ldrb	r2, [r7, #13]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	32ae      	adds	r2, #174	@ 0xae
 800c4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d010      	beq.n	800c4d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c4b0:	7b7a      	ldrb	r2, [r7, #13]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	32ae      	adds	r2, #174	@ 0xae
 800c4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	6839      	ldr	r1, [r7, #0]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	4798      	blx	r3
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c4c6:	e004      	b.n	800c4d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fc2d 	bl	800cd2a <USBD_CtlError>
              break;
 800c4d0:	e000      	b.n	800c4d4 <USBD_StdEPReq+0x1c8>
              break;
 800c4d2:	bf00      	nop
          }
          break;
 800c4d4:	e0ab      	b.n	800c62e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d002      	beq.n	800c4e8 <USBD_StdEPReq+0x1dc>
 800c4e2:	2b03      	cmp	r3, #3
 800c4e4:	d032      	beq.n	800c54c <USBD_StdEPReq+0x240>
 800c4e6:	e097      	b.n	800c618 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4e8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d007      	beq.n	800c4fe <USBD_StdEPReq+0x1f2>
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	2b80      	cmp	r3, #128	@ 0x80
 800c4f2:	d004      	beq.n	800c4fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fc17 	bl	800cd2a <USBD_CtlError>
                break;
 800c4fc:	e091      	b.n	800c622 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c502:	2b00      	cmp	r3, #0
 800c504:	da0b      	bge.n	800c51e <USBD_StdEPReq+0x212>
 800c506:	7bbb      	ldrb	r3, [r7, #14]
 800c508:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c50c:	4613      	mov	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	4413      	add	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	3310      	adds	r3, #16
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	4413      	add	r3, r2
 800c51a:	3304      	adds	r3, #4
 800c51c:	e00b      	b.n	800c536 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c524:	4613      	mov	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	4413      	add	r3, r2
 800c534:	3304      	adds	r3, #4
 800c536:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	2200      	movs	r2, #0
 800c53c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2202      	movs	r2, #2
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fc6d 	bl	800ce24 <USBD_CtlSendData>
              break;
 800c54a:	e06a      	b.n	800c622 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c54c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c550:	2b00      	cmp	r3, #0
 800c552:	da11      	bge.n	800c578 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	f003 020f 	and.w	r2, r3, #15
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	440b      	add	r3, r1
 800c566:	3324      	adds	r3, #36	@ 0x24
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d117      	bne.n	800c59e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fbda 	bl	800cd2a <USBD_CtlError>
                  break;
 800c576:	e054      	b.n	800c622 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	f003 020f 	and.w	r2, r3, #15
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	4613      	mov	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	440b      	add	r3, r1
 800c58a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d104      	bne.n	800c59e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fbc7 	bl	800cd2a <USBD_CtlError>
                  break;
 800c59c:	e041      	b.n	800c622 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c59e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	da0b      	bge.n	800c5be <USBD_StdEPReq+0x2b2>
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	3310      	adds	r3, #16
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	e00b      	b.n	800c5d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d002      	beq.n	800c5e4 <USBD_StdEPReq+0x2d8>
 800c5de:	7bbb      	ldrb	r3, [r7, #14]
 800c5e0:	2b80      	cmp	r3, #128	@ 0x80
 800c5e2:	d103      	bne.n	800c5ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	601a      	str	r2, [r3, #0]
 800c5ea:	e00e      	b.n	800c60a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f001 f909 	bl	800d808 <USBD_LL_IsStallEP>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2201      	movs	r2, #1
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	e002      	b.n	800c60a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2200      	movs	r2, #0
 800c608:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2202      	movs	r2, #2
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fc07 	bl	800ce24 <USBD_CtlSendData>
              break;
 800c616:	e004      	b.n	800c622 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fb85 	bl	800cd2a <USBD_CtlError>
              break;
 800c620:	bf00      	nop
          }
          break;
 800c622:	e004      	b.n	800c62e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c624:	6839      	ldr	r1, [r7, #0]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 fb7f 	bl	800cd2a <USBD_CtlError>
          break;
 800c62c:	bf00      	nop
      }
      break;
 800c62e:	e005      	b.n	800c63c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fb79 	bl	800cd2a <USBD_CtlError>
      break;
 800c638:	e000      	b.n	800c63c <USBD_StdEPReq+0x330>
      break;
 800c63a:	bf00      	nop
  }

  return ret;
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
	...

0800c648 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c652:	2300      	movs	r3, #0
 800c654:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c656:	2300      	movs	r3, #0
 800c658:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c65a:	2300      	movs	r3, #0
 800c65c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	885b      	ldrh	r3, [r3, #2]
 800c662:	0a1b      	lsrs	r3, r3, #8
 800c664:	b29b      	uxth	r3, r3
 800c666:	3b01      	subs	r3, #1
 800c668:	2b0e      	cmp	r3, #14
 800c66a:	f200 8152 	bhi.w	800c912 <USBD_GetDescriptor+0x2ca>
 800c66e:	a201      	add	r2, pc, #4	@ (adr r2, 800c674 <USBD_GetDescriptor+0x2c>)
 800c670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c674:	0800c6e5 	.word	0x0800c6e5
 800c678:	0800c6fd 	.word	0x0800c6fd
 800c67c:	0800c73d 	.word	0x0800c73d
 800c680:	0800c913 	.word	0x0800c913
 800c684:	0800c913 	.word	0x0800c913
 800c688:	0800c8b3 	.word	0x0800c8b3
 800c68c:	0800c8df 	.word	0x0800c8df
 800c690:	0800c913 	.word	0x0800c913
 800c694:	0800c913 	.word	0x0800c913
 800c698:	0800c913 	.word	0x0800c913
 800c69c:	0800c913 	.word	0x0800c913
 800c6a0:	0800c913 	.word	0x0800c913
 800c6a4:	0800c913 	.word	0x0800c913
 800c6a8:	0800c913 	.word	0x0800c913
 800c6ac:	0800c6b1 	.word	0x0800c6b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6b6:	69db      	ldr	r3, [r3, #28]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00b      	beq.n	800c6d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6c2:	69db      	ldr	r3, [r3, #28]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	7c12      	ldrb	r2, [r2, #16]
 800c6c8:	f107 0108 	add.w	r1, r7, #8
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	4798      	blx	r3
 800c6d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6d2:	e126      	b.n	800c922 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fb27 	bl	800cd2a <USBD_CtlError>
        err++;
 800c6dc:	7afb      	ldrb	r3, [r7, #11]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	72fb      	strb	r3, [r7, #11]
      break;
 800c6e2:	e11e      	b.n	800c922 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	7c12      	ldrb	r2, [r2, #16]
 800c6f0:	f107 0108 	add.w	r1, r7, #8
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4798      	blx	r3
 800c6f8:	60f8      	str	r0, [r7, #12]
      break;
 800c6fa:	e112      	b.n	800c922 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	7c1b      	ldrb	r3, [r3, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10d      	bne.n	800c720 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c70c:	f107 0208 	add.w	r2, r7, #8
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
 800c714:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3301      	adds	r3, #1
 800c71a:	2202      	movs	r2, #2
 800c71c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c71e:	e100      	b.n	800c922 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c728:	f107 0208 	add.w	r2, r7, #8
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	2202      	movs	r2, #2
 800c738:	701a      	strb	r2, [r3, #0]
      break;
 800c73a:	e0f2      	b.n	800c922 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	885b      	ldrh	r3, [r3, #2]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b05      	cmp	r3, #5
 800c744:	f200 80ac 	bhi.w	800c8a0 <USBD_GetDescriptor+0x258>
 800c748:	a201      	add	r2, pc, #4	@ (adr r2, 800c750 <USBD_GetDescriptor+0x108>)
 800c74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74e:	bf00      	nop
 800c750:	0800c769 	.word	0x0800c769
 800c754:	0800c79d 	.word	0x0800c79d
 800c758:	0800c7d1 	.word	0x0800c7d1
 800c75c:	0800c805 	.word	0x0800c805
 800c760:	0800c839 	.word	0x0800c839
 800c764:	0800c86d 	.word	0x0800c86d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00b      	beq.n	800c78c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	7c12      	ldrb	r2, [r2, #16]
 800c780:	f107 0108 	add.w	r1, r7, #8
 800c784:	4610      	mov	r0, r2
 800c786:	4798      	blx	r3
 800c788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c78a:	e091      	b.n	800c8b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 facb 	bl	800cd2a <USBD_CtlError>
            err++;
 800c794:	7afb      	ldrb	r3, [r7, #11]
 800c796:	3301      	adds	r3, #1
 800c798:	72fb      	strb	r3, [r7, #11]
          break;
 800c79a:	e089      	b.n	800c8b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	7c12      	ldrb	r2, [r2, #16]
 800c7b4:	f107 0108 	add.w	r1, r7, #8
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	4798      	blx	r3
 800c7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7be:	e077      	b.n	800c8b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fab1 	bl	800cd2a <USBD_CtlError>
            err++;
 800c7c8:	7afb      	ldrb	r3, [r7, #11]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ce:	e06f      	b.n	800c8b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00b      	beq.n	800c7f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	7c12      	ldrb	r2, [r2, #16]
 800c7e8:	f107 0108 	add.w	r1, r7, #8
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4798      	blx	r3
 800c7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7f2:	e05d      	b.n	800c8b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fa97 	bl	800cd2a <USBD_CtlError>
            err++;
 800c7fc:	7afb      	ldrb	r3, [r7, #11]
 800c7fe:	3301      	adds	r3, #1
 800c800:	72fb      	strb	r3, [r7, #11]
          break;
 800c802:	e055      	b.n	800c8b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	7c12      	ldrb	r2, [r2, #16]
 800c81c:	f107 0108 	add.w	r1, r7, #8
 800c820:	4610      	mov	r0, r2
 800c822:	4798      	blx	r3
 800c824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c826:	e043      	b.n	800c8b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fa7d 	bl	800cd2a <USBD_CtlError>
            err++;
 800c830:	7afb      	ldrb	r3, [r7, #11]
 800c832:	3301      	adds	r3, #1
 800c834:	72fb      	strb	r3, [r7, #11]
          break;
 800c836:	e03b      	b.n	800c8b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c83e:	695b      	ldr	r3, [r3, #20]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00b      	beq.n	800c85c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	7c12      	ldrb	r2, [r2, #16]
 800c850:	f107 0108 	add.w	r1, r7, #8
 800c854:	4610      	mov	r0, r2
 800c856:	4798      	blx	r3
 800c858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c85a:	e029      	b.n	800c8b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fa63 	bl	800cd2a <USBD_CtlError>
            err++;
 800c864:	7afb      	ldrb	r3, [r7, #11]
 800c866:	3301      	adds	r3, #1
 800c868:	72fb      	strb	r3, [r7, #11]
          break;
 800c86a:	e021      	b.n	800c8b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00b      	beq.n	800c890 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	7c12      	ldrb	r2, [r2, #16]
 800c884:	f107 0108 	add.w	r1, r7, #8
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
 800c88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c88e:	e00f      	b.n	800c8b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fa49 	bl	800cd2a <USBD_CtlError>
            err++;
 800c898:	7afb      	ldrb	r3, [r7, #11]
 800c89a:	3301      	adds	r3, #1
 800c89c:	72fb      	strb	r3, [r7, #11]
          break;
 800c89e:	e007      	b.n	800c8b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 fa41 	bl	800cd2a <USBD_CtlError>
          err++;
 800c8a8:	7afb      	ldrb	r3, [r7, #11]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c8ae:	bf00      	nop
      }
      break;
 800c8b0:	e037      	b.n	800c922 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	7c1b      	ldrb	r3, [r3, #16]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d109      	bne.n	800c8ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8c2:	f107 0208 	add.w	r2, r7, #8
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	4798      	blx	r3
 800c8ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8cc:	e029      	b.n	800c922 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fa2a 	bl	800cd2a <USBD_CtlError>
        err++;
 800c8d6:	7afb      	ldrb	r3, [r7, #11]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	72fb      	strb	r3, [r7, #11]
      break;
 800c8dc:	e021      	b.n	800c922 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	7c1b      	ldrb	r3, [r3, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10d      	bne.n	800c902 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ee:	f107 0208 	add.w	r2, r7, #8
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	4798      	blx	r3
 800c8f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	2207      	movs	r2, #7
 800c8fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c900:	e00f      	b.n	800c922 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fa10 	bl	800cd2a <USBD_CtlError>
        err++;
 800c90a:	7afb      	ldrb	r3, [r7, #11]
 800c90c:	3301      	adds	r3, #1
 800c90e:	72fb      	strb	r3, [r7, #11]
      break;
 800c910:	e007      	b.n	800c922 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fa08 	bl	800cd2a <USBD_CtlError>
      err++;
 800c91a:	7afb      	ldrb	r3, [r7, #11]
 800c91c:	3301      	adds	r3, #1
 800c91e:	72fb      	strb	r3, [r7, #11]
      break;
 800c920:	bf00      	nop
  }

  if (err != 0U)
 800c922:	7afb      	ldrb	r3, [r7, #11]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d11e      	bne.n	800c966 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	88db      	ldrh	r3, [r3, #6]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d016      	beq.n	800c95e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c930:	893b      	ldrh	r3, [r7, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00e      	beq.n	800c954 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	88da      	ldrh	r2, [r3, #6]
 800c93a:	893b      	ldrh	r3, [r7, #8]
 800c93c:	4293      	cmp	r3, r2
 800c93e:	bf28      	it	cs
 800c940:	4613      	movcs	r3, r2
 800c942:	b29b      	uxth	r3, r3
 800c944:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c946:	893b      	ldrh	r3, [r7, #8]
 800c948:	461a      	mov	r2, r3
 800c94a:	68f9      	ldr	r1, [r7, #12]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fa69 	bl	800ce24 <USBD_CtlSendData>
 800c952:	e009      	b.n	800c968 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f9e7 	bl	800cd2a <USBD_CtlError>
 800c95c:	e004      	b.n	800c968 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 faba 	bl	800ced8 <USBD_CtlSendStatus>
 800c964:	e000      	b.n	800c968 <USBD_GetDescriptor+0x320>
    return;
 800c966:	bf00      	nop
  }
}
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop

0800c970 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	889b      	ldrh	r3, [r3, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d131      	bne.n	800c9e6 <USBD_SetAddress+0x76>
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	88db      	ldrh	r3, [r3, #6]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d12d      	bne.n	800c9e6 <USBD_SetAddress+0x76>
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	885b      	ldrh	r3, [r3, #2]
 800c98e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c990:	d829      	bhi.n	800c9e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c99c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	d104      	bne.n	800c9b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f9bc 	bl	800cd2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9b2:	e01d      	b.n	800c9f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	7bfa      	ldrb	r2, [r7, #15]
 800c9b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 ff4d 	bl	800d860 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fa86 	bl	800ced8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9da:	e009      	b.n	800c9f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e4:	e004      	b.n	800c9f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c9e6:	6839      	ldr	r1, [r7, #0]
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 f99e 	bl	800cd2a <USBD_CtlError>
  }
}
 800c9ee:	bf00      	nop
 800c9f0:	bf00      	nop
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	885b      	ldrh	r3, [r3, #2]
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	4b4e      	ldr	r3, [pc, #312]	@ (800cb48 <USBD_SetConfig+0x150>)
 800ca0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca10:	4b4d      	ldr	r3, [pc, #308]	@ (800cb48 <USBD_SetConfig+0x150>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d905      	bls.n	800ca24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 f985 	bl	800cd2a <USBD_CtlError>
    return USBD_FAIL;
 800ca20:	2303      	movs	r3, #3
 800ca22:	e08c      	b.n	800cb3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d002      	beq.n	800ca36 <USBD_SetConfig+0x3e>
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	d029      	beq.n	800ca88 <USBD_SetConfig+0x90>
 800ca34:	e075      	b.n	800cb22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca36:	4b44      	ldr	r3, [pc, #272]	@ (800cb48 <USBD_SetConfig+0x150>)
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d020      	beq.n	800ca80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ca3e:	4b42      	ldr	r3, [pc, #264]	@ (800cb48 <USBD_SetConfig+0x150>)
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca48:	4b3f      	ldr	r3, [pc, #252]	@ (800cb48 <USBD_SetConfig+0x150>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7fe ffb9 	bl	800b9c6 <USBD_SetClassConfig>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d008      	beq.n	800ca70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f962 	bl	800cd2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2202      	movs	r2, #2
 800ca6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca6e:	e065      	b.n	800cb3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 fa31 	bl	800ced8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2203      	movs	r2, #3
 800ca7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca7e:	e05d      	b.n	800cb3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 fa29 	bl	800ced8 <USBD_CtlSendStatus>
      break;
 800ca86:	e059      	b.n	800cb3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ca88:	4b2f      	ldr	r3, [pc, #188]	@ (800cb48 <USBD_SetConfig+0x150>)
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d112      	bne.n	800cab6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2202      	movs	r2, #2
 800ca94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ca98:	4b2b      	ldr	r3, [pc, #172]	@ (800cb48 <USBD_SetConfig+0x150>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800caa2:	4b29      	ldr	r3, [pc, #164]	@ (800cb48 <USBD_SetConfig+0x150>)
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f7fe ffa8 	bl	800b9fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fa12 	bl	800ced8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cab4:	e042      	b.n	800cb3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cab6:	4b24      	ldr	r3, [pc, #144]	@ (800cb48 <USBD_SetConfig+0x150>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d02a      	beq.n	800cb1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	4619      	mov	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7fe ff96 	bl	800b9fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cad2:	4b1d      	ldr	r3, [pc, #116]	@ (800cb48 <USBD_SetConfig+0x150>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	461a      	mov	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cadc:	4b1a      	ldr	r3, [pc, #104]	@ (800cb48 <USBD_SetConfig+0x150>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7fe ff6f 	bl	800b9c6 <USBD_SetClassConfig>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00f      	beq.n	800cb12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f918 	bl	800cd2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7fe ff7b 	bl	800b9fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2202      	movs	r2, #2
 800cb0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb10:	e014      	b.n	800cb3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f9e0 	bl	800ced8 <USBD_CtlSendStatus>
      break;
 800cb18:	e010      	b.n	800cb3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f9dc 	bl	800ced8 <USBD_CtlSendStatus>
      break;
 800cb20:	e00c      	b.n	800cb3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f900 	bl	800cd2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb2a:	4b07      	ldr	r3, [pc, #28]	@ (800cb48 <USBD_SetConfig+0x150>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7fe ff64 	bl	800b9fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb36:	2303      	movs	r3, #3
 800cb38:	73fb      	strb	r3, [r7, #15]
      break;
 800cb3a:	bf00      	nop
  }

  return ret;
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	24001c58 	.word	0x24001c58

0800cb4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	88db      	ldrh	r3, [r3, #6]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d004      	beq.n	800cb68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f8e2 	bl	800cd2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb66:	e023      	b.n	800cbb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	dc02      	bgt.n	800cb7a <USBD_GetConfig+0x2e>
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	dc03      	bgt.n	800cb80 <USBD_GetConfig+0x34>
 800cb78:	e015      	b.n	800cba6 <USBD_GetConfig+0x5a>
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d00b      	beq.n	800cb96 <USBD_GetConfig+0x4a>
 800cb7e:	e012      	b.n	800cba6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3308      	adds	r3, #8
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f948 	bl	800ce24 <USBD_CtlSendData>
        break;
 800cb94:	e00c      	b.n	800cbb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f940 	bl	800ce24 <USBD_CtlSendData>
        break;
 800cba4:	e004      	b.n	800cbb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 f8be 	bl	800cd2a <USBD_CtlError>
        break;
 800cbae:	bf00      	nop
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d81e      	bhi.n	800cc0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	88db      	ldrh	r3, [r3, #6]
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d004      	beq.n	800cbe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f8a5 	bl	800cd2a <USBD_CtlError>
        break;
 800cbe0:	e01a      	b.n	800cc18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d005      	beq.n	800cbfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	f043 0202 	orr.w	r2, r3, #2
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	330c      	adds	r3, #12
 800cc02:	2202      	movs	r2, #2
 800cc04:	4619      	mov	r1, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 f90c 	bl	800ce24 <USBD_CtlSendData>
      break;
 800cc0c:	e004      	b.n	800cc18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f88a 	bl	800cd2a <USBD_CtlError>
      break;
 800cc16:	bf00      	nop
  }
}
 800cc18:	bf00      	nop
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	885b      	ldrh	r3, [r3, #2]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d107      	bne.n	800cc42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f94c 	bl	800ced8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cc40:	e013      	b.n	800cc6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	885b      	ldrh	r3, [r3, #2]
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d10b      	bne.n	800cc62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	889b      	ldrh	r3, [r3, #4]
 800cc4e:	0a1b      	lsrs	r3, r3, #8
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f93c 	bl	800ced8 <USBD_CtlSendStatus>
}
 800cc60:	e003      	b.n	800cc6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f860 	bl	800cd2a <USBD_CtlError>
}
 800cc6a:	bf00      	nop
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b082      	sub	sp, #8
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	3b01      	subs	r3, #1
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d80b      	bhi.n	800cca2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	885b      	ldrh	r3, [r3, #2]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d10c      	bne.n	800ccac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f91c 	bl	800ced8 <USBD_CtlSendStatus>
      }
      break;
 800cca0:	e004      	b.n	800ccac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f840 	bl	800cd2a <USBD_CtlError>
      break;
 800ccaa:	e000      	b.n	800ccae <USBD_ClrFeature+0x3c>
      break;
 800ccac:	bf00      	nop
  }
}
 800ccae:	bf00      	nop
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	781a      	ldrb	r2, [r3, #0]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	781a      	ldrb	r2, [r3, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f7ff fa16 	bl	800c112 <SWAPBYTE>
 800cce6:	4603      	mov	r3, r0
 800cce8:	461a      	mov	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f7ff fa09 	bl	800c112 <SWAPBYTE>
 800cd00:	4603      	mov	r3, r0
 800cd02:	461a      	mov	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3301      	adds	r3, #1
 800cd12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f7ff f9fc 	bl	800c112 <SWAPBYTE>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	80da      	strh	r2, [r3, #6]
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd34:	2180      	movs	r1, #128	@ 0x80
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fd28 	bl	800d78c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fd24 	bl	800d78c <USBD_LL_StallEP>
}
 800cd44:	bf00      	nop
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d042      	beq.n	800cde8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cd66:	6938      	ldr	r0, [r7, #16]
 800cd68:	f000 f842 	bl	800cdf0 <USBD_GetLen>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	3301      	adds	r3, #1
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd76:	d808      	bhi.n	800cd8a <USBD_GetString+0x3e>
 800cd78:	6938      	ldr	r0, [r7, #16]
 800cd7a:	f000 f839 	bl	800cdf0 <USBD_GetLen>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	3301      	adds	r3, #1
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	e001      	b.n	800cd8e <USBD_GetString+0x42>
 800cd8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	4413      	add	r3, r2
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	7812      	ldrb	r2, [r2, #0]
 800cd9c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	3301      	adds	r3, #1
 800cda2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cda4:	7dfb      	ldrb	r3, [r7, #23]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	4413      	add	r3, r2
 800cdaa:	2203      	movs	r2, #3
 800cdac:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdb4:	e013      	b.n	800cdde <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cdb6:	7dfb      	ldrb	r3, [r7, #23]
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	4413      	add	r3, r2
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	7812      	ldrb	r2, [r2, #0]
 800cdc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	613b      	str	r3, [r7, #16]
    idx++;
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
    idx++;
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	3301      	adds	r3, #1
 800cddc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1e7      	bne.n	800cdb6 <USBD_GetString+0x6a>
 800cde6:	e000      	b.n	800cdea <USBD_GetString+0x9e>
    return;
 800cde8:	bf00      	nop
  }
}
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce00:	e005      	b.n	800ce0e <USBD_GetLen+0x1e>
  {
    len++;
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	3301      	adds	r3, #1
 800ce06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1f5      	bne.n	800ce02 <USBD_GetLen+0x12>
  }

  return len;
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2202      	movs	r2, #2
 800ce34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	2100      	movs	r1, #0
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 fd27 	bl	800d89e <USBD_LL_Transmit>

  return USBD_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	60f8      	str	r0, [r7, #12]
 800ce62:	60b9      	str	r1, [r7, #8]
 800ce64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 fd16 	bl	800d89e <USBD_LL_Transmit>

  return USBD_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2203      	movs	r2, #3
 800ce8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	2100      	movs	r1, #0
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f000 fd1a 	bl	800d8e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b084      	sub	sp, #16
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	60b9      	str	r1, [r7, #8]
 800cec0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	2100      	movs	r1, #0
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f000 fd09 	bl	800d8e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2204      	movs	r2, #4
 800cee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cee8:	2300      	movs	r3, #0
 800ceea:	2200      	movs	r2, #0
 800ceec:	2100      	movs	r1, #0
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fcd5 	bl	800d89e <USBD_LL_Transmit>

  return USBD_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2205      	movs	r2, #5
 800cf0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf0e:	2300      	movs	r3, #0
 800cf10:	2200      	movs	r2, #0
 800cf12:	2100      	movs	r1, #0
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fce3 	bl	800d8e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	4913      	ldr	r1, [pc, #76]	@ (800cf78 <MX_USB_DEVICE_Init+0x54>)
 800cf2c:	4813      	ldr	r0, [pc, #76]	@ (800cf7c <MX_USB_DEVICE_Init+0x58>)
 800cf2e:	f7fe fccd 	bl	800b8cc <USBD_Init>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d001      	beq.n	800cf3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf38:	f7f4 fbde 	bl	80016f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf3c:	4910      	ldr	r1, [pc, #64]	@ (800cf80 <MX_USB_DEVICE_Init+0x5c>)
 800cf3e:	480f      	ldr	r0, [pc, #60]	@ (800cf7c <MX_USB_DEVICE_Init+0x58>)
 800cf40:	f7fe fcf4 	bl	800b92c <USBD_RegisterClass>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf4a:	f7f4 fbd5 	bl	80016f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf4e:	490d      	ldr	r1, [pc, #52]	@ (800cf84 <MX_USB_DEVICE_Init+0x60>)
 800cf50:	480a      	ldr	r0, [pc, #40]	@ (800cf7c <MX_USB_DEVICE_Init+0x58>)
 800cf52:	f7fe fbeb 	bl	800b72c <USBD_CDC_RegisterInterface>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf5c:	f7f4 fbcc 	bl	80016f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf60:	4806      	ldr	r0, [pc, #24]	@ (800cf7c <MX_USB_DEVICE_Init+0x58>)
 800cf62:	f7fe fd19 	bl	800b998 <USBD_Start>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf6c:	f7f4 fbc4 	bl	80016f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cf70:	f7f7 faa8 	bl	80044c4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf74:	bf00      	nop
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	240000b0 	.word	0x240000b0
 800cf7c:	24001c5c 	.word	0x24001c5c
 800cf80:	2400001c 	.word	0x2400001c
 800cf84:	2400009c 	.word	0x2400009c

0800cf88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	4905      	ldr	r1, [pc, #20]	@ (800cfa4 <CDC_Init_FS+0x1c>)
 800cf90:	4805      	ldr	r0, [pc, #20]	@ (800cfa8 <CDC_Init_FS+0x20>)
 800cf92:	f7fe fbe5 	bl	800b760 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf96:	4905      	ldr	r1, [pc, #20]	@ (800cfac <CDC_Init_FS+0x24>)
 800cf98:	4803      	ldr	r0, [pc, #12]	@ (800cfa8 <CDC_Init_FS+0x20>)
 800cf9a:	f7fe fc03 	bl	800b7a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	24002738 	.word	0x24002738
 800cfa8:	24001c5c 	.word	0x24001c5c
 800cfac:	24001f38 	.word	0x24001f38

0800cfb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cfb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	6039      	str	r1, [r7, #0]
 800cfca:	71fb      	strb	r3, [r7, #7]
 800cfcc:	4613      	mov	r3, r2
 800cfce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cfd0:	79fb      	ldrb	r3, [r7, #7]
 800cfd2:	2b23      	cmp	r3, #35	@ 0x23
 800cfd4:	d84a      	bhi.n	800d06c <CDC_Control_FS+0xac>
 800cfd6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfdc <CDC_Control_FS+0x1c>)
 800cfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfdc:	0800d06d 	.word	0x0800d06d
 800cfe0:	0800d06d 	.word	0x0800d06d
 800cfe4:	0800d06d 	.word	0x0800d06d
 800cfe8:	0800d06d 	.word	0x0800d06d
 800cfec:	0800d06d 	.word	0x0800d06d
 800cff0:	0800d06d 	.word	0x0800d06d
 800cff4:	0800d06d 	.word	0x0800d06d
 800cff8:	0800d06d 	.word	0x0800d06d
 800cffc:	0800d06d 	.word	0x0800d06d
 800d000:	0800d06d 	.word	0x0800d06d
 800d004:	0800d06d 	.word	0x0800d06d
 800d008:	0800d06d 	.word	0x0800d06d
 800d00c:	0800d06d 	.word	0x0800d06d
 800d010:	0800d06d 	.word	0x0800d06d
 800d014:	0800d06d 	.word	0x0800d06d
 800d018:	0800d06d 	.word	0x0800d06d
 800d01c:	0800d06d 	.word	0x0800d06d
 800d020:	0800d06d 	.word	0x0800d06d
 800d024:	0800d06d 	.word	0x0800d06d
 800d028:	0800d06d 	.word	0x0800d06d
 800d02c:	0800d06d 	.word	0x0800d06d
 800d030:	0800d06d 	.word	0x0800d06d
 800d034:	0800d06d 	.word	0x0800d06d
 800d038:	0800d06d 	.word	0x0800d06d
 800d03c:	0800d06d 	.word	0x0800d06d
 800d040:	0800d06d 	.word	0x0800d06d
 800d044:	0800d06d 	.word	0x0800d06d
 800d048:	0800d06d 	.word	0x0800d06d
 800d04c:	0800d06d 	.word	0x0800d06d
 800d050:	0800d06d 	.word	0x0800d06d
 800d054:	0800d06d 	.word	0x0800d06d
 800d058:	0800d06d 	.word	0x0800d06d
 800d05c:	0800d06d 	.word	0x0800d06d
 800d060:	0800d06d 	.word	0x0800d06d
 800d064:	0800d06d 	.word	0x0800d06d
 800d068:	0800d06d 	.word	0x0800d06d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d06c:	bf00      	nop
  }

  return (USBD_OK);
 800d06e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d070:	4618      	mov	r0, r3
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	Rec_Proc(&USART1_Protocol,Buf);
 800d086:	6879      	ldr	r1, [r7, #4]
 800d088:	4807      	ldr	r0, [pc, #28]	@ (800d0a8 <CDC_Receive_FS+0x2c>)
 800d08a:	f7f3 fd1b 	bl	8000ac4 <Rec_Proc>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d08e:	6879      	ldr	r1, [r7, #4]
 800d090:	4806      	ldr	r0, [pc, #24]	@ (800d0ac <CDC_Receive_FS+0x30>)
 800d092:	f7fe fb87 	bl	800b7a4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d096:	4805      	ldr	r0, [pc, #20]	@ (800d0ac <CDC_Receive_FS+0x30>)
 800d098:	f7fe fbe2 	bl	800b860 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800d09c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	240018d0 	.word	0x240018d0
 800d0ac:	24001c5c 	.word	0x24001c5c

0800d0b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d0c0:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f8 <CDC_Transmit_FS+0x48>)
 800d0c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d0c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e00b      	b.n	800d0ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d0d6:	887b      	ldrh	r3, [r7, #2]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	6879      	ldr	r1, [r7, #4]
 800d0dc:	4806      	ldr	r0, [pc, #24]	@ (800d0f8 <CDC_Transmit_FS+0x48>)
 800d0de:	f7fe fb3f 	bl	800b760 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d0e2:	4805      	ldr	r0, [pc, #20]	@ (800d0f8 <CDC_Transmit_FS+0x48>)
 800d0e4:	f7fe fb7c 	bl	800b7e0 <USBD_CDC_TransmitPacket>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	24001c5c 	.word	0x24001c5c

0800d0fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b087      	sub	sp, #28
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	4613      	mov	r3, r2
 800d108:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d112:	4618      	mov	r0, r3
 800d114:	371c      	adds	r7, #28
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr
	...

0800d120 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	4603      	mov	r3, r0
 800d128:	6039      	str	r1, [r7, #0]
 800d12a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2212      	movs	r2, #18
 800d130:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d132:	4b03      	ldr	r3, [pc, #12]	@ (800d140 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d134:	4618      	mov	r0, r3
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	240000d0 	.word	0x240000d0

0800d144 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	6039      	str	r1, [r7, #0]
 800d14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2204      	movs	r2, #4
 800d154:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d156:	4b03      	ldr	r3, [pc, #12]	@ (800d164 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d158:	4618      	mov	r0, r3
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr
 800d164:	240000e4 	.word	0x240000e4

0800d168 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	6039      	str	r1, [r7, #0]
 800d172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d174:	79fb      	ldrb	r3, [r7, #7]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d105      	bne.n	800d186 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	4907      	ldr	r1, [pc, #28]	@ (800d19c <USBD_FS_ProductStrDescriptor+0x34>)
 800d17e:	4808      	ldr	r0, [pc, #32]	@ (800d1a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d180:	f7ff fde4 	bl	800cd4c <USBD_GetString>
 800d184:	e004      	b.n	800d190 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	4904      	ldr	r1, [pc, #16]	@ (800d19c <USBD_FS_ProductStrDescriptor+0x34>)
 800d18a:	4805      	ldr	r0, [pc, #20]	@ (800d1a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d18c:	f7ff fdde 	bl	800cd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d190:	4b02      	ldr	r3, [pc, #8]	@ (800d19c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d192:	4618      	mov	r0, r3
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	24002f38 	.word	0x24002f38
 800d1a0:	08011974 	.word	0x08011974

0800d1a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	6039      	str	r1, [r7, #0]
 800d1ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1b0:	683a      	ldr	r2, [r7, #0]
 800d1b2:	4904      	ldr	r1, [pc, #16]	@ (800d1c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d1b4:	4804      	ldr	r0, [pc, #16]	@ (800d1c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1b6:	f7ff fdc9 	bl	800cd4c <USBD_GetString>
  return USBD_StrDesc;
 800d1ba:	4b02      	ldr	r3, [pc, #8]	@ (800d1c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	24002f38 	.word	0x24002f38
 800d1c8:	0801198c 	.word	0x0801198c

0800d1cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	6039      	str	r1, [r7, #0]
 800d1d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	221a      	movs	r2, #26
 800d1dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d1de:	f000 f843 	bl	800d268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d1e2:	4b02      	ldr	r3, [pc, #8]	@ (800d1ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	240000e8 	.word	0x240000e8

0800d1f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	6039      	str	r1, [r7, #0]
 800d1fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d1fc:	79fb      	ldrb	r3, [r7, #7]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d105      	bne.n	800d20e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	4907      	ldr	r1, [pc, #28]	@ (800d224 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d206:	4808      	ldr	r0, [pc, #32]	@ (800d228 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d208:	f7ff fda0 	bl	800cd4c <USBD_GetString>
 800d20c:	e004      	b.n	800d218 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	4904      	ldr	r1, [pc, #16]	@ (800d224 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d212:	4805      	ldr	r0, [pc, #20]	@ (800d228 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d214:	f7ff fd9a 	bl	800cd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d218:	4b02      	ldr	r3, [pc, #8]	@ (800d224 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	24002f38 	.word	0x24002f38
 800d228:	080119a0 	.word	0x080119a0

0800d22c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	4603      	mov	r3, r0
 800d234:	6039      	str	r1, [r7, #0]
 800d236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d105      	bne.n	800d24a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d23e:	683a      	ldr	r2, [r7, #0]
 800d240:	4907      	ldr	r1, [pc, #28]	@ (800d260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d242:	4808      	ldr	r0, [pc, #32]	@ (800d264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d244:	f7ff fd82 	bl	800cd4c <USBD_GetString>
 800d248:	e004      	b.n	800d254 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	4904      	ldr	r1, [pc, #16]	@ (800d260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d24e:	4805      	ldr	r0, [pc, #20]	@ (800d264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d250:	f7ff fd7c 	bl	800cd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d254:	4b02      	ldr	r3, [pc, #8]	@ (800d260 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	24002f38 	.word	0x24002f38
 800d264:	080119ac 	.word	0x080119ac

0800d268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d26e:	4b0f      	ldr	r3, [pc, #60]	@ (800d2ac <Get_SerialNum+0x44>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d274:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b0 <Get_SerialNum+0x48>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d27a:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b4 <Get_SerialNum+0x4c>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4413      	add	r3, r2
 800d286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d009      	beq.n	800d2a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d28e:	2208      	movs	r2, #8
 800d290:	4909      	ldr	r1, [pc, #36]	@ (800d2b8 <Get_SerialNum+0x50>)
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f000 f814 	bl	800d2c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d298:	2204      	movs	r2, #4
 800d29a:	4908      	ldr	r1, [pc, #32]	@ (800d2bc <Get_SerialNum+0x54>)
 800d29c:	68b8      	ldr	r0, [r7, #8]
 800d29e:	f000 f80f 	bl	800d2c0 <IntToUnicode>
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	1ff1e800 	.word	0x1ff1e800
 800d2b0:	1ff1e804 	.word	0x1ff1e804
 800d2b4:	1ff1e808 	.word	0x1ff1e808
 800d2b8:	240000ea 	.word	0x240000ea
 800d2bc:	240000fa 	.word	0x240000fa

0800d2c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b087      	sub	sp, #28
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	75fb      	strb	r3, [r7, #23]
 800d2d6:	e027      	b.n	800d328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	0f1b      	lsrs	r3, r3, #28
 800d2dc:	2b09      	cmp	r3, #9
 800d2de:	d80b      	bhi.n	800d2f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	0f1b      	lsrs	r3, r3, #28
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	440b      	add	r3, r1
 800d2f0:	3230      	adds	r2, #48	@ 0x30
 800d2f2:	b2d2      	uxtb	r2, r2
 800d2f4:	701a      	strb	r2, [r3, #0]
 800d2f6:	e00a      	b.n	800d30e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	0f1b      	lsrs	r3, r3, #28
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	7dfb      	ldrb	r3, [r7, #23]
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	4619      	mov	r1, r3
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	440b      	add	r3, r1
 800d308:	3237      	adds	r2, #55	@ 0x37
 800d30a:	b2d2      	uxtb	r2, r2
 800d30c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	011b      	lsls	r3, r3, #4
 800d312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d314:	7dfb      	ldrb	r3, [r7, #23]
 800d316:	005b      	lsls	r3, r3, #1
 800d318:	3301      	adds	r3, #1
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	4413      	add	r3, r2
 800d31e:	2200      	movs	r2, #0
 800d320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d322:	7dfb      	ldrb	r3, [r7, #23]
 800d324:	3301      	adds	r3, #1
 800d326:	75fb      	strb	r3, [r7, #23]
 800d328:	7dfa      	ldrb	r2, [r7, #23]
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d3d3      	bcc.n	800d2d8 <IntToUnicode+0x18>
  }
}
 800d330:	bf00      	nop
 800d332:	bf00      	nop
 800d334:	371c      	adds	r7, #28
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
	...

0800d340 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b0ba      	sub	sp, #232	@ 0xe8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d348:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d34c:	2200      	movs	r2, #0
 800d34e:	601a      	str	r2, [r3, #0]
 800d350:	605a      	str	r2, [r3, #4]
 800d352:	609a      	str	r2, [r3, #8]
 800d354:	60da      	str	r2, [r3, #12]
 800d356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d358:	f107 0310 	add.w	r3, r7, #16
 800d35c:	22c0      	movs	r2, #192	@ 0xc0
 800d35e:	2100      	movs	r1, #0
 800d360:	4618      	mov	r0, r3
 800d362:	f001 fffd 	bl	800f360 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a34      	ldr	r2, [pc, #208]	@ (800d43c <HAL_PCD_MspInit+0xfc>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d161      	bne.n	800d434 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d370:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d374:	f04f 0300 	mov.w	r3, #0
 800d378:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d37c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d384:	f107 0310 	add.w	r3, r7, #16
 800d388:	4618      	mov	r0, r3
 800d38a:	f7f8 f88f 	bl	80054ac <HAL_RCCEx_PeriphCLKConfig>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800d394:	f7f4 f9b0 	bl	80016f8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d398:	f7f7 f894 	bl	80044c4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d39c:	4b28      	ldr	r3, [pc, #160]	@ (800d440 <HAL_PCD_MspInit+0x100>)
 800d39e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3a2:	4a27      	ldr	r2, [pc, #156]	@ (800d440 <HAL_PCD_MspInit+0x100>)
 800d3a4:	f043 0301 	orr.w	r3, r3, #1
 800d3a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d3ac:	4b24      	ldr	r3, [pc, #144]	@ (800d440 <HAL_PCD_MspInit+0x100>)
 800d3ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	60fb      	str	r3, [r7, #12]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d3ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d3be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3c2:	2302      	movs	r3, #2
 800d3c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d3d4:	230a      	movs	r3, #10
 800d3d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d3de:	4619      	mov	r1, r3
 800d3e0:	4818      	ldr	r0, [pc, #96]	@ (800d444 <HAL_PCD_MspInit+0x104>)
 800d3e2:	f7f5 fbcb 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d3e6:	4b16      	ldr	r3, [pc, #88]	@ (800d440 <HAL_PCD_MspInit+0x100>)
 800d3e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d3ec:	4a14      	ldr	r2, [pc, #80]	@ (800d440 <HAL_PCD_MspInit+0x100>)
 800d3ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d3f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d3f6:	4b12      	ldr	r3, [pc, #72]	@ (800d440 <HAL_PCD_MspInit+0x100>)
 800d3f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d3fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d400:	60bb      	str	r3, [r7, #8]
 800d402:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800d404:	2200      	movs	r2, #0
 800d406:	2100      	movs	r1, #0
 800d408:	2062      	movs	r0, #98	@ 0x62
 800d40a:	f7f4 fda6 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800d40e:	2062      	movs	r0, #98	@ 0x62
 800d410:	f7f4 fdbd 	bl	8001f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800d414:	2200      	movs	r2, #0
 800d416:	2100      	movs	r1, #0
 800d418:	2063      	movs	r0, #99	@ 0x63
 800d41a:	f7f4 fd9e 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800d41e:	2063      	movs	r0, #99	@ 0x63
 800d420:	f7f4 fdb5 	bl	8001f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d424:	2200      	movs	r2, #0
 800d426:	2100      	movs	r1, #0
 800d428:	2065      	movs	r0, #101	@ 0x65
 800d42a:	f7f4 fd96 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d42e:	2065      	movs	r0, #101	@ 0x65
 800d430:	f7f4 fdad 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d434:	bf00      	nop
 800d436:	37e8      	adds	r7, #232	@ 0xe8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	40080000 	.word	0x40080000
 800d440:	58024400 	.word	0x58024400
 800d444:	58020000 	.word	0x58020000

0800d448 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d45c:	4619      	mov	r1, r3
 800d45e:	4610      	mov	r0, r2
 800d460:	f7fe fae7 	bl	800ba32 <USBD_LL_SetupStage>
}
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	460b      	mov	r3, r1
 800d476:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d47e:	78fa      	ldrb	r2, [r7, #3]
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	4613      	mov	r3, r2
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	4413      	add	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	440b      	add	r3, r1
 800d48c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	78fb      	ldrb	r3, [r7, #3]
 800d494:	4619      	mov	r1, r3
 800d496:	f7fe fb21 	bl	800badc <USBD_LL_DataOutStage>
}
 800d49a:	bf00      	nop
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b082      	sub	sp, #8
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d4b4:	78fa      	ldrb	r2, [r7, #3]
 800d4b6:	6879      	ldr	r1, [r7, #4]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	4413      	add	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	440b      	add	r3, r1
 800d4c2:	3320      	adds	r3, #32
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	78fb      	ldrb	r3, [r7, #3]
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	f7fe fbba 	bl	800bc42 <USBD_LL_DataInStage>
}
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b082      	sub	sp, #8
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe fcf4 	bl	800bed2 <USBD_LL_SOF>
}
 800d4ea:	bf00      	nop
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b084      	sub	sp, #16
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	79db      	ldrb	r3, [r3, #7]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d102      	bne.n	800d50c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d506:	2300      	movs	r3, #0
 800d508:	73fb      	strb	r3, [r7, #15]
 800d50a:	e008      	b.n	800d51e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	79db      	ldrb	r3, [r3, #7]
 800d510:	2b02      	cmp	r3, #2
 800d512:	d102      	bne.n	800d51a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d514:	2301      	movs	r3, #1
 800d516:	73fb      	strb	r3, [r7, #15]
 800d518:	e001      	b.n	800d51e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d51a:	f7f4 f8ed 	bl	80016f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d524:	7bfa      	ldrb	r2, [r7, #15]
 800d526:	4611      	mov	r1, r2
 800d528:	4618      	mov	r0, r3
 800d52a:	f7fe fc8e 	bl	800be4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fc36 	bl	800bda6 <USBD_LL_Reset>
}
 800d53a:	bf00      	nop
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
	...

0800d544 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fc89 	bl	800be6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	6812      	ldr	r2, [r2, #0]
 800d566:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d56a:	f043 0301 	orr.w	r3, r3, #1
 800d56e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	7adb      	ldrb	r3, [r3, #11]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d005      	beq.n	800d584 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d578:	4b04      	ldr	r3, [pc, #16]	@ (800d58c <HAL_PCD_SuspendCallback+0x48>)
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	4a03      	ldr	r2, [pc, #12]	@ (800d58c <HAL_PCD_SuspendCallback+0x48>)
 800d57e:	f043 0306 	orr.w	r3, r3, #6
 800d582:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	e000ed00 	.word	0xe000ed00

0800d590 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fe fc7f 	bl	800bea2 <USBD_LL_Resume>
}
 800d5a4:	bf00      	nop
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d5be:	78fa      	ldrb	r2, [r7, #3]
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fe fcd7 	bl	800bf76 <USBD_LL_IsoOUTIncomplete>
}
 800d5c8:	bf00      	nop
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d5e2:	78fa      	ldrb	r2, [r7, #3]
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fe fc93 	bl	800bf12 <USBD_LL_IsoINIncomplete>
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe fce9 	bl	800bfda <USBD_LL_DevConnected>
}
 800d608:	bf00      	nop
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fe fce6 	bl	800bff0 <USBD_LL_DevDisconnected>
}
 800d624:	bf00      	nop
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d13e      	bne.n	800d6ba <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d63c:	4a21      	ldr	r2, [pc, #132]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a1f      	ldr	r2, [pc, #124]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d648:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d64c:	4b1d      	ldr	r3, [pc, #116]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d64e:	4a1e      	ldr	r2, [pc, #120]	@ (800d6c8 <USBD_LL_Init+0x9c>)
 800d650:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d652:	4b1c      	ldr	r3, [pc, #112]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d654:	2209      	movs	r2, #9
 800d656:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d658:	4b1a      	ldr	r3, [pc, #104]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d65a:	2202      	movs	r2, #2
 800d65c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d65e:	4b19      	ldr	r3, [pc, #100]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d660:	2200      	movs	r2, #0
 800d662:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d664:	4b17      	ldr	r3, [pc, #92]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d666:	2202      	movs	r2, #2
 800d668:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d66a:	4b16      	ldr	r3, [pc, #88]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d66c:	2200      	movs	r2, #0
 800d66e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d670:	4b14      	ldr	r3, [pc, #80]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d672:	2200      	movs	r2, #0
 800d674:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d676:	4b13      	ldr	r3, [pc, #76]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d678:	2200      	movs	r2, #0
 800d67a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d67c:	4b11      	ldr	r3, [pc, #68]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d67e:	2200      	movs	r2, #0
 800d680:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d682:	4b10      	ldr	r3, [pc, #64]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d684:	2200      	movs	r2, #0
 800d686:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d688:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d68e:	480d      	ldr	r0, [pc, #52]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d690:	f7f5 fc3d 	bl	8002f0e <HAL_PCD_Init>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d69a:	f7f4 f82d 	bl	80016f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d69e:	2180      	movs	r1, #128	@ 0x80
 800d6a0:	4808      	ldr	r0, [pc, #32]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d6a2:	f7f6 fe94 	bl	80043ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d6a6:	2240      	movs	r2, #64	@ 0x40
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	4806      	ldr	r0, [pc, #24]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d6ac:	f7f6 fe48 	bl	8004340 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d6b0:	2280      	movs	r2, #128	@ 0x80
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	4803      	ldr	r0, [pc, #12]	@ (800d6c4 <USBD_LL_Init+0x98>)
 800d6b6:	f7f6 fe43 	bl	8004340 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	24003138 	.word	0x24003138
 800d6c8:	40080000 	.word	0x40080000

0800d6cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7f5 fd1f 	bl	8003126 <HAL_PCD_Start>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6ec:	7bfb      	ldrb	r3, [r7, #15]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 f942 	bl	800d978 <USBD_Get_USB_Status>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b084      	sub	sp, #16
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	4608      	mov	r0, r1
 800d70c:	4611      	mov	r1, r2
 800d70e:	461a      	mov	r2, r3
 800d710:	4603      	mov	r3, r0
 800d712:	70fb      	strb	r3, [r7, #3]
 800d714:	460b      	mov	r3, r1
 800d716:	70bb      	strb	r3, [r7, #2]
 800d718:	4613      	mov	r3, r2
 800d71a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d71c:	2300      	movs	r3, #0
 800d71e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d72a:	78bb      	ldrb	r3, [r7, #2]
 800d72c:	883a      	ldrh	r2, [r7, #0]
 800d72e:	78f9      	ldrb	r1, [r7, #3]
 800d730:	f7f6 fa20 	bl	8003b74 <HAL_PCD_EP_Open>
 800d734:	4603      	mov	r3, r0
 800d736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d738:	7bfb      	ldrb	r3, [r7, #15]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 f91c 	bl	800d978 <USBD_Get_USB_Status>
 800d740:	4603      	mov	r3, r0
 800d742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d744:	7bbb      	ldrb	r3, [r7, #14]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
 800d756:	460b      	mov	r3, r1
 800d758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d75e:	2300      	movs	r3, #0
 800d760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d768:	78fa      	ldrb	r2, [r7, #3]
 800d76a:	4611      	mov	r1, r2
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7f6 fa6b 	bl	8003c48 <HAL_PCD_EP_Close>
 800d772:	4603      	mov	r3, r0
 800d774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d776:	7bfb      	ldrb	r3, [r7, #15]
 800d778:	4618      	mov	r0, r3
 800d77a:	f000 f8fd 	bl	800d978 <USBD_Get_USB_Status>
 800d77e:	4603      	mov	r3, r0
 800d780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d782:	7bbb      	ldrb	r3, [r7, #14]
}
 800d784:	4618      	mov	r0, r3
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	460b      	mov	r3, r1
 800d796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7a6:	78fa      	ldrb	r2, [r7, #3]
 800d7a8:	4611      	mov	r1, r2
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7f6 fb23 	bl	8003df6 <HAL_PCD_EP_SetStall>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f000 f8de 	bl	800d978 <USBD_Get_USB_Status>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b084      	sub	sp, #16
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7e4:	78fa      	ldrb	r2, [r7, #3]
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7f6 fb67 	bl	8003ebc <HAL_PCD_EP_ClrStall>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7f2:	7bfb      	ldrb	r3, [r7, #15]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f000 f8bf 	bl	800d978 <USBD_Get_USB_Status>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d81a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d81c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d820:	2b00      	cmp	r3, #0
 800d822:	da0b      	bge.n	800d83c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d824:	78fb      	ldrb	r3, [r7, #3]
 800d826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d82a:	68f9      	ldr	r1, [r7, #12]
 800d82c:	4613      	mov	r3, r2
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	4413      	add	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	440b      	add	r3, r1
 800d836:	3316      	adds	r3, #22
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	e00b      	b.n	800d854 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d83c:	78fb      	ldrb	r3, [r7, #3]
 800d83e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d842:	68f9      	ldr	r1, [r7, #12]
 800d844:	4613      	mov	r3, r2
 800d846:	00db      	lsls	r3, r3, #3
 800d848:	4413      	add	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	440b      	add	r3, r1
 800d84e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d852:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d854:	4618      	mov	r0, r3
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d87a:	78fa      	ldrb	r2, [r7, #3]
 800d87c:	4611      	mov	r1, r2
 800d87e:	4618      	mov	r0, r3
 800d880:	f7f6 f954 	bl	8003b2c <HAL_PCD_SetAddress>
 800d884:	4603      	mov	r3, r0
 800d886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d888:	7bfb      	ldrb	r3, [r7, #15]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 f874 	bl	800d978 <USBD_Get_USB_Status>
 800d890:	4603      	mov	r3, r0
 800d892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d894:	7bbb      	ldrb	r3, [r7, #14]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b086      	sub	sp, #24
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	60f8      	str	r0, [r7, #12]
 800d8a6:	607a      	str	r2, [r7, #4]
 800d8a8:	603b      	str	r3, [r7, #0]
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8bc:	7af9      	ldrb	r1, [r7, #11]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	f7f6 fa5e 	bl	8003d82 <HAL_PCD_EP_Transmit>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8ca:	7dfb      	ldrb	r3, [r7, #23]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 f853 	bl	800d978 <USBD_Get_USB_Status>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b086      	sub	sp, #24
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	607a      	str	r2, [r7, #4]
 800d8ea:	603b      	str	r3, [r7, #0]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8fe:	7af9      	ldrb	r1, [r7, #11]
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	f7f6 f9ea 	bl	8003cdc <HAL_PCD_EP_Receive>
 800d908:	4603      	mov	r3, r0
 800d90a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d90c:	7dfb      	ldrb	r3, [r7, #23]
 800d90e:	4618      	mov	r0, r3
 800d910:	f000 f832 	bl	800d978 <USBD_Get_USB_Status>
 800d914:	4603      	mov	r3, r0
 800d916:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d918:	7dbb      	ldrb	r3, [r7, #22]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3718      	adds	r7, #24
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b082      	sub	sp, #8
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	460b      	mov	r3, r1
 800d92c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d934:	78fa      	ldrb	r2, [r7, #3]
 800d936:	4611      	mov	r1, r2
 800d938:	4618      	mov	r0, r3
 800d93a:	f7f6 fa0a 	bl	8003d52 <HAL_PCD_EP_GetRxCount>
 800d93e:	4603      	mov	r3, r0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d950:	4b03      	ldr	r3, [pc, #12]	@ (800d960 <USBD_static_malloc+0x18>)
}
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	2400361c 	.word	0x2400361c

0800d964 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d96c:	bf00      	nop
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d978:	b480      	push	{r7}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d986:	79fb      	ldrb	r3, [r7, #7]
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d817      	bhi.n	800d9bc <USBD_Get_USB_Status+0x44>
 800d98c:	a201      	add	r2, pc, #4	@ (adr r2, 800d994 <USBD_Get_USB_Status+0x1c>)
 800d98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d992:	bf00      	nop
 800d994:	0800d9a5 	.word	0x0800d9a5
 800d998:	0800d9ab 	.word	0x0800d9ab
 800d99c:	0800d9b1 	.word	0x0800d9b1
 800d9a0:	0800d9b7 	.word	0x0800d9b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9a8:	e00b      	b.n	800d9c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d9ae:	e008      	b.n	800d9c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d9b4:	e005      	b.n	800d9c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9b6:	2303      	movs	r3, #3
 800d9b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d9ba:	e002      	b.n	800d9c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d9bc:	2303      	movs	r3, #3
 800d9be:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c0:	bf00      	nop
  }
  return usb_status;
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <sulp>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	460d      	mov	r5, r1
 800d9d6:	4616      	mov	r6, r2
 800d9d8:	ec45 4b10 	vmov	d0, r4, r5
 800d9dc:	f003 fb16 	bl	801100c <__ulp>
 800d9e0:	b17e      	cbz	r6, 800da02 <sulp+0x32>
 800d9e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d9e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	dd09      	ble.n	800da02 <sulp+0x32>
 800d9ee:	051b      	lsls	r3, r3, #20
 800d9f0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d9fa:	ec41 0b17 	vmov	d7, r0, r1
 800d9fe:	ee20 0b07 	vmul.f64	d0, d0, d7
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	0000      	movs	r0, r0
	...

0800da08 <_strtod_l>:
 800da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	ed2d 8b0a 	vpush	{d8-d12}
 800da10:	b097      	sub	sp, #92	@ 0x5c
 800da12:	4688      	mov	r8, r1
 800da14:	920e      	str	r2, [sp, #56]	@ 0x38
 800da16:	2200      	movs	r2, #0
 800da18:	9212      	str	r2, [sp, #72]	@ 0x48
 800da1a:	9005      	str	r0, [sp, #20]
 800da1c:	f04f 0a00 	mov.w	sl, #0
 800da20:	f04f 0b00 	mov.w	fp, #0
 800da24:	460a      	mov	r2, r1
 800da26:	9211      	str	r2, [sp, #68]	@ 0x44
 800da28:	7811      	ldrb	r1, [r2, #0]
 800da2a:	292b      	cmp	r1, #43	@ 0x2b
 800da2c:	d04c      	beq.n	800dac8 <_strtod_l+0xc0>
 800da2e:	d839      	bhi.n	800daa4 <_strtod_l+0x9c>
 800da30:	290d      	cmp	r1, #13
 800da32:	d833      	bhi.n	800da9c <_strtod_l+0x94>
 800da34:	2908      	cmp	r1, #8
 800da36:	d833      	bhi.n	800daa0 <_strtod_l+0x98>
 800da38:	2900      	cmp	r1, #0
 800da3a:	d03c      	beq.n	800dab6 <_strtod_l+0xae>
 800da3c:	2200      	movs	r2, #0
 800da3e:	9208      	str	r2, [sp, #32]
 800da40:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800da42:	782a      	ldrb	r2, [r5, #0]
 800da44:	2a30      	cmp	r2, #48	@ 0x30
 800da46:	f040 80b7 	bne.w	800dbb8 <_strtod_l+0x1b0>
 800da4a:	786a      	ldrb	r2, [r5, #1]
 800da4c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800da50:	2a58      	cmp	r2, #88	@ 0x58
 800da52:	d170      	bne.n	800db36 <_strtod_l+0x12e>
 800da54:	9302      	str	r3, [sp, #8]
 800da56:	9b08      	ldr	r3, [sp, #32]
 800da58:	9301      	str	r3, [sp, #4]
 800da5a:	ab12      	add	r3, sp, #72	@ 0x48
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	4a90      	ldr	r2, [pc, #576]	@ (800dca0 <_strtod_l+0x298>)
 800da60:	9805      	ldr	r0, [sp, #20]
 800da62:	ab13      	add	r3, sp, #76	@ 0x4c
 800da64:	a911      	add	r1, sp, #68	@ 0x44
 800da66:	f002 fbcb 	bl	8010200 <__gethex>
 800da6a:	f010 060f 	ands.w	r6, r0, #15
 800da6e:	4604      	mov	r4, r0
 800da70:	d005      	beq.n	800da7e <_strtod_l+0x76>
 800da72:	2e06      	cmp	r6, #6
 800da74:	d12a      	bne.n	800dacc <_strtod_l+0xc4>
 800da76:	3501      	adds	r5, #1
 800da78:	2300      	movs	r3, #0
 800da7a:	9511      	str	r5, [sp, #68]	@ 0x44
 800da7c:	9308      	str	r3, [sp, #32]
 800da7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da80:	2b00      	cmp	r3, #0
 800da82:	f040 8537 	bne.w	800e4f4 <_strtod_l+0xaec>
 800da86:	9b08      	ldr	r3, [sp, #32]
 800da88:	ec4b ab10 	vmov	d0, sl, fp
 800da8c:	b1cb      	cbz	r3, 800dac2 <_strtod_l+0xba>
 800da8e:	eeb1 0b40 	vneg.f64	d0, d0
 800da92:	b017      	add	sp, #92	@ 0x5c
 800da94:	ecbd 8b0a 	vpop	{d8-d12}
 800da98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9c:	2920      	cmp	r1, #32
 800da9e:	d1cd      	bne.n	800da3c <_strtod_l+0x34>
 800daa0:	3201      	adds	r2, #1
 800daa2:	e7c0      	b.n	800da26 <_strtod_l+0x1e>
 800daa4:	292d      	cmp	r1, #45	@ 0x2d
 800daa6:	d1c9      	bne.n	800da3c <_strtod_l+0x34>
 800daa8:	2101      	movs	r1, #1
 800daaa:	9108      	str	r1, [sp, #32]
 800daac:	1c51      	adds	r1, r2, #1
 800daae:	9111      	str	r1, [sp, #68]	@ 0x44
 800dab0:	7852      	ldrb	r2, [r2, #1]
 800dab2:	2a00      	cmp	r2, #0
 800dab4:	d1c4      	bne.n	800da40 <_strtod_l+0x38>
 800dab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dab8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f040 8517 	bne.w	800e4f0 <_strtod_l+0xae8>
 800dac2:	ec4b ab10 	vmov	d0, sl, fp
 800dac6:	e7e4      	b.n	800da92 <_strtod_l+0x8a>
 800dac8:	2100      	movs	r1, #0
 800daca:	e7ee      	b.n	800daaa <_strtod_l+0xa2>
 800dacc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dace:	b13a      	cbz	r2, 800dae0 <_strtod_l+0xd8>
 800dad0:	2135      	movs	r1, #53	@ 0x35
 800dad2:	a814      	add	r0, sp, #80	@ 0x50
 800dad4:	f003 fb91 	bl	80111fa <__copybits>
 800dad8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dada:	9805      	ldr	r0, [sp, #20]
 800dadc:	f002 ff6a 	bl	80109b4 <_Bfree>
 800dae0:	1e73      	subs	r3, r6, #1
 800dae2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dae4:	2b04      	cmp	r3, #4
 800dae6:	d806      	bhi.n	800daf6 <_strtod_l+0xee>
 800dae8:	e8df f003 	tbb	[pc, r3]
 800daec:	201d0314 	.word	0x201d0314
 800daf0:	14          	.byte	0x14
 800daf1:	00          	.byte	0x00
 800daf2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800daf6:	05e3      	lsls	r3, r4, #23
 800daf8:	bf48      	it	mi
 800dafa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dafe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db02:	0d1b      	lsrs	r3, r3, #20
 800db04:	051b      	lsls	r3, r3, #20
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1b9      	bne.n	800da7e <_strtod_l+0x76>
 800db0a:	f001 fc8d 	bl	800f428 <__errno>
 800db0e:	2322      	movs	r3, #34	@ 0x22
 800db10:	6003      	str	r3, [r0, #0]
 800db12:	e7b4      	b.n	800da7e <_strtod_l+0x76>
 800db14:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800db18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800db1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800db20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db24:	e7e7      	b.n	800daf6 <_strtod_l+0xee>
 800db26:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800dca8 <_strtod_l+0x2a0>
 800db2a:	e7e4      	b.n	800daf6 <_strtod_l+0xee>
 800db2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800db30:	f04f 3aff 	mov.w	sl, #4294967295
 800db34:	e7df      	b.n	800daf6 <_strtod_l+0xee>
 800db36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db38:	1c5a      	adds	r2, r3, #1
 800db3a:	9211      	str	r2, [sp, #68]	@ 0x44
 800db3c:	785b      	ldrb	r3, [r3, #1]
 800db3e:	2b30      	cmp	r3, #48	@ 0x30
 800db40:	d0f9      	beq.n	800db36 <_strtod_l+0x12e>
 800db42:	2b00      	cmp	r3, #0
 800db44:	d09b      	beq.n	800da7e <_strtod_l+0x76>
 800db46:	2301      	movs	r3, #1
 800db48:	9307      	str	r3, [sp, #28]
 800db4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800db4e:	2300      	movs	r3, #0
 800db50:	9306      	str	r3, [sp, #24]
 800db52:	4699      	mov	r9, r3
 800db54:	461d      	mov	r5, r3
 800db56:	220a      	movs	r2, #10
 800db58:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800db5a:	7804      	ldrb	r4, [r0, #0]
 800db5c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800db60:	b2d9      	uxtb	r1, r3
 800db62:	2909      	cmp	r1, #9
 800db64:	d92a      	bls.n	800dbbc <_strtod_l+0x1b4>
 800db66:	494f      	ldr	r1, [pc, #316]	@ (800dca4 <_strtod_l+0x29c>)
 800db68:	2201      	movs	r2, #1
 800db6a:	f001 fc01 	bl	800f370 <strncmp>
 800db6e:	b398      	cbz	r0, 800dbd8 <_strtod_l+0x1d0>
 800db70:	2000      	movs	r0, #0
 800db72:	4622      	mov	r2, r4
 800db74:	462b      	mov	r3, r5
 800db76:	4607      	mov	r7, r0
 800db78:	4601      	mov	r1, r0
 800db7a:	2a65      	cmp	r2, #101	@ 0x65
 800db7c:	d001      	beq.n	800db82 <_strtod_l+0x17a>
 800db7e:	2a45      	cmp	r2, #69	@ 0x45
 800db80:	d118      	bne.n	800dbb4 <_strtod_l+0x1ac>
 800db82:	b91b      	cbnz	r3, 800db8c <_strtod_l+0x184>
 800db84:	9b07      	ldr	r3, [sp, #28]
 800db86:	4303      	orrs	r3, r0
 800db88:	d095      	beq.n	800dab6 <_strtod_l+0xae>
 800db8a:	2300      	movs	r3, #0
 800db8c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800db90:	f108 0201 	add.w	r2, r8, #1
 800db94:	9211      	str	r2, [sp, #68]	@ 0x44
 800db96:	f898 2001 	ldrb.w	r2, [r8, #1]
 800db9a:	2a2b      	cmp	r2, #43	@ 0x2b
 800db9c:	d074      	beq.n	800dc88 <_strtod_l+0x280>
 800db9e:	2a2d      	cmp	r2, #45	@ 0x2d
 800dba0:	d07a      	beq.n	800dc98 <_strtod_l+0x290>
 800dba2:	f04f 0e00 	mov.w	lr, #0
 800dba6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800dbaa:	2c09      	cmp	r4, #9
 800dbac:	f240 8082 	bls.w	800dcb4 <_strtod_l+0x2ac>
 800dbb0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800dbb4:	2400      	movs	r4, #0
 800dbb6:	e09d      	b.n	800dcf4 <_strtod_l+0x2ec>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e7c5      	b.n	800db48 <_strtod_l+0x140>
 800dbbc:	2d08      	cmp	r5, #8
 800dbbe:	bfc8      	it	gt
 800dbc0:	9906      	ldrgt	r1, [sp, #24]
 800dbc2:	f100 0001 	add.w	r0, r0, #1
 800dbc6:	bfca      	itet	gt
 800dbc8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dbcc:	fb02 3909 	mlale	r9, r2, r9, r3
 800dbd0:	9306      	strgt	r3, [sp, #24]
 800dbd2:	3501      	adds	r5, #1
 800dbd4:	9011      	str	r0, [sp, #68]	@ 0x44
 800dbd6:	e7bf      	b.n	800db58 <_strtod_l+0x150>
 800dbd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbda:	1c5a      	adds	r2, r3, #1
 800dbdc:	9211      	str	r2, [sp, #68]	@ 0x44
 800dbde:	785a      	ldrb	r2, [r3, #1]
 800dbe0:	b3bd      	cbz	r5, 800dc52 <_strtod_l+0x24a>
 800dbe2:	4607      	mov	r7, r0
 800dbe4:	462b      	mov	r3, r5
 800dbe6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dbea:	2909      	cmp	r1, #9
 800dbec:	d912      	bls.n	800dc14 <_strtod_l+0x20c>
 800dbee:	2101      	movs	r1, #1
 800dbf0:	e7c3      	b.n	800db7a <_strtod_l+0x172>
 800dbf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	9211      	str	r2, [sp, #68]	@ 0x44
 800dbf8:	785a      	ldrb	r2, [r3, #1]
 800dbfa:	3001      	adds	r0, #1
 800dbfc:	2a30      	cmp	r2, #48	@ 0x30
 800dbfe:	d0f8      	beq.n	800dbf2 <_strtod_l+0x1ea>
 800dc00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dc04:	2b08      	cmp	r3, #8
 800dc06:	f200 847a 	bhi.w	800e4fe <_strtod_l+0xaf6>
 800dc0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc0e:	4607      	mov	r7, r0
 800dc10:	2000      	movs	r0, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	3a30      	subs	r2, #48	@ 0x30
 800dc16:	f100 0101 	add.w	r1, r0, #1
 800dc1a:	d014      	beq.n	800dc46 <_strtod_l+0x23e>
 800dc1c:	440f      	add	r7, r1
 800dc1e:	469c      	mov	ip, r3
 800dc20:	f04f 0e0a 	mov.w	lr, #10
 800dc24:	f10c 0401 	add.w	r4, ip, #1
 800dc28:	1ae6      	subs	r6, r4, r3
 800dc2a:	42b1      	cmp	r1, r6
 800dc2c:	dc13      	bgt.n	800dc56 <_strtod_l+0x24e>
 800dc2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dc32:	1819      	adds	r1, r3, r0
 800dc34:	2908      	cmp	r1, #8
 800dc36:	f103 0301 	add.w	r3, r3, #1
 800dc3a:	4403      	add	r3, r0
 800dc3c:	dc19      	bgt.n	800dc72 <_strtod_l+0x26a>
 800dc3e:	210a      	movs	r1, #10
 800dc40:	fb01 2909 	mla	r9, r1, r9, r2
 800dc44:	2100      	movs	r1, #0
 800dc46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dc48:	1c50      	adds	r0, r2, #1
 800dc4a:	9011      	str	r0, [sp, #68]	@ 0x44
 800dc4c:	7852      	ldrb	r2, [r2, #1]
 800dc4e:	4608      	mov	r0, r1
 800dc50:	e7c9      	b.n	800dbe6 <_strtod_l+0x1de>
 800dc52:	4628      	mov	r0, r5
 800dc54:	e7d2      	b.n	800dbfc <_strtod_l+0x1f4>
 800dc56:	f1bc 0f08 	cmp.w	ip, #8
 800dc5a:	dc03      	bgt.n	800dc64 <_strtod_l+0x25c>
 800dc5c:	fb0e f909 	mul.w	r9, lr, r9
 800dc60:	46a4      	mov	ip, r4
 800dc62:	e7df      	b.n	800dc24 <_strtod_l+0x21c>
 800dc64:	2c10      	cmp	r4, #16
 800dc66:	bfde      	ittt	le
 800dc68:	9e06      	ldrle	r6, [sp, #24]
 800dc6a:	fb0e f606 	mulle.w	r6, lr, r6
 800dc6e:	9606      	strle	r6, [sp, #24]
 800dc70:	e7f6      	b.n	800dc60 <_strtod_l+0x258>
 800dc72:	290f      	cmp	r1, #15
 800dc74:	bfdf      	itttt	le
 800dc76:	9806      	ldrle	r0, [sp, #24]
 800dc78:	210a      	movle	r1, #10
 800dc7a:	fb01 2200 	mlale	r2, r1, r0, r2
 800dc7e:	9206      	strle	r2, [sp, #24]
 800dc80:	e7e0      	b.n	800dc44 <_strtod_l+0x23c>
 800dc82:	2700      	movs	r7, #0
 800dc84:	2101      	movs	r1, #1
 800dc86:	e77d      	b.n	800db84 <_strtod_l+0x17c>
 800dc88:	f04f 0e00 	mov.w	lr, #0
 800dc8c:	f108 0202 	add.w	r2, r8, #2
 800dc90:	9211      	str	r2, [sp, #68]	@ 0x44
 800dc92:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dc96:	e786      	b.n	800dba6 <_strtod_l+0x19e>
 800dc98:	f04f 0e01 	mov.w	lr, #1
 800dc9c:	e7f6      	b.n	800dc8c <_strtod_l+0x284>
 800dc9e:	bf00      	nop
 800dca0:	08011bdc 	.word	0x08011bdc
 800dca4:	080119f4 	.word	0x080119f4
 800dca8:	7ff00000 	.word	0x7ff00000
 800dcac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dcae:	1c54      	adds	r4, r2, #1
 800dcb0:	9411      	str	r4, [sp, #68]	@ 0x44
 800dcb2:	7852      	ldrb	r2, [r2, #1]
 800dcb4:	2a30      	cmp	r2, #48	@ 0x30
 800dcb6:	d0f9      	beq.n	800dcac <_strtod_l+0x2a4>
 800dcb8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800dcbc:	2c08      	cmp	r4, #8
 800dcbe:	f63f af79 	bhi.w	800dbb4 <_strtod_l+0x1ac>
 800dcc2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800dcc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dcc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dccc:	1c54      	adds	r4, r2, #1
 800dcce:	9411      	str	r4, [sp, #68]	@ 0x44
 800dcd0:	7852      	ldrb	r2, [r2, #1]
 800dcd2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800dcd6:	2e09      	cmp	r6, #9
 800dcd8:	d937      	bls.n	800dd4a <_strtod_l+0x342>
 800dcda:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800dcdc:	1ba4      	subs	r4, r4, r6
 800dcde:	2c08      	cmp	r4, #8
 800dce0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800dce4:	dc02      	bgt.n	800dcec <_strtod_l+0x2e4>
 800dce6:	4564      	cmp	r4, ip
 800dce8:	bfa8      	it	ge
 800dcea:	4664      	movge	r4, ip
 800dcec:	f1be 0f00 	cmp.w	lr, #0
 800dcf0:	d000      	beq.n	800dcf4 <_strtod_l+0x2ec>
 800dcf2:	4264      	negs	r4, r4
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d14d      	bne.n	800dd94 <_strtod_l+0x38c>
 800dcf8:	9b07      	ldr	r3, [sp, #28]
 800dcfa:	4318      	orrs	r0, r3
 800dcfc:	f47f aebf 	bne.w	800da7e <_strtod_l+0x76>
 800dd00:	2900      	cmp	r1, #0
 800dd02:	f47f aed8 	bne.w	800dab6 <_strtod_l+0xae>
 800dd06:	2a69      	cmp	r2, #105	@ 0x69
 800dd08:	d027      	beq.n	800dd5a <_strtod_l+0x352>
 800dd0a:	dc24      	bgt.n	800dd56 <_strtod_l+0x34e>
 800dd0c:	2a49      	cmp	r2, #73	@ 0x49
 800dd0e:	d024      	beq.n	800dd5a <_strtod_l+0x352>
 800dd10:	2a4e      	cmp	r2, #78	@ 0x4e
 800dd12:	f47f aed0 	bne.w	800dab6 <_strtod_l+0xae>
 800dd16:	4997      	ldr	r1, [pc, #604]	@ (800df74 <_strtod_l+0x56c>)
 800dd18:	a811      	add	r0, sp, #68	@ 0x44
 800dd1a:	f002 fc93 	bl	8010644 <__match>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	f43f aec9 	beq.w	800dab6 <_strtod_l+0xae>
 800dd24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b28      	cmp	r3, #40	@ 0x28
 800dd2a:	d12d      	bne.n	800dd88 <_strtod_l+0x380>
 800dd2c:	4992      	ldr	r1, [pc, #584]	@ (800df78 <_strtod_l+0x570>)
 800dd2e:	aa14      	add	r2, sp, #80	@ 0x50
 800dd30:	a811      	add	r0, sp, #68	@ 0x44
 800dd32:	f002 fc9b 	bl	801066c <__hexnan>
 800dd36:	2805      	cmp	r0, #5
 800dd38:	d126      	bne.n	800dd88 <_strtod_l+0x380>
 800dd3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dd3c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800dd40:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dd44:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dd48:	e699      	b.n	800da7e <_strtod_l+0x76>
 800dd4a:	240a      	movs	r4, #10
 800dd4c:	fb04 2c0c 	mla	ip, r4, ip, r2
 800dd50:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800dd54:	e7b9      	b.n	800dcca <_strtod_l+0x2c2>
 800dd56:	2a6e      	cmp	r2, #110	@ 0x6e
 800dd58:	e7db      	b.n	800dd12 <_strtod_l+0x30a>
 800dd5a:	4988      	ldr	r1, [pc, #544]	@ (800df7c <_strtod_l+0x574>)
 800dd5c:	a811      	add	r0, sp, #68	@ 0x44
 800dd5e:	f002 fc71 	bl	8010644 <__match>
 800dd62:	2800      	cmp	r0, #0
 800dd64:	f43f aea7 	beq.w	800dab6 <_strtod_l+0xae>
 800dd68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd6a:	4985      	ldr	r1, [pc, #532]	@ (800df80 <_strtod_l+0x578>)
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	a811      	add	r0, sp, #68	@ 0x44
 800dd70:	9311      	str	r3, [sp, #68]	@ 0x44
 800dd72:	f002 fc67 	bl	8010644 <__match>
 800dd76:	b910      	cbnz	r0, 800dd7e <_strtod_l+0x376>
 800dd78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	9311      	str	r3, [sp, #68]	@ 0x44
 800dd7e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800df94 <_strtod_l+0x58c>
 800dd82:	f04f 0a00 	mov.w	sl, #0
 800dd86:	e67a      	b.n	800da7e <_strtod_l+0x76>
 800dd88:	487e      	ldr	r0, [pc, #504]	@ (800df84 <_strtod_l+0x57c>)
 800dd8a:	f001 fb91 	bl	800f4b0 <nan>
 800dd8e:	ec5b ab10 	vmov	sl, fp, d0
 800dd92:	e674      	b.n	800da7e <_strtod_l+0x76>
 800dd94:	ee07 9a90 	vmov	s15, r9
 800dd98:	1be2      	subs	r2, r4, r7
 800dd9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dd9e:	2d00      	cmp	r5, #0
 800dda0:	bf08      	it	eq
 800dda2:	461d      	moveq	r5, r3
 800dda4:	2b10      	cmp	r3, #16
 800dda6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dda8:	461a      	mov	r2, r3
 800ddaa:	bfa8      	it	ge
 800ddac:	2210      	movge	r2, #16
 800ddae:	2b09      	cmp	r3, #9
 800ddb0:	ec5b ab17 	vmov	sl, fp, d7
 800ddb4:	dc15      	bgt.n	800dde2 <_strtod_l+0x3da>
 800ddb6:	1be1      	subs	r1, r4, r7
 800ddb8:	2900      	cmp	r1, #0
 800ddba:	f43f ae60 	beq.w	800da7e <_strtod_l+0x76>
 800ddbe:	eba4 0107 	sub.w	r1, r4, r7
 800ddc2:	dd72      	ble.n	800deaa <_strtod_l+0x4a2>
 800ddc4:	2916      	cmp	r1, #22
 800ddc6:	dc59      	bgt.n	800de7c <_strtod_l+0x474>
 800ddc8:	4b6f      	ldr	r3, [pc, #444]	@ (800df88 <_strtod_l+0x580>)
 800ddca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddd0:	ed93 7b00 	vldr	d7, [r3]
 800ddd4:	ec4b ab16 	vmov	d6, sl, fp
 800ddd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dddc:	ec5b ab17 	vmov	sl, fp, d7
 800dde0:	e64d      	b.n	800da7e <_strtod_l+0x76>
 800dde2:	4969      	ldr	r1, [pc, #420]	@ (800df88 <_strtod_l+0x580>)
 800dde4:	eddd 6a06 	vldr	s13, [sp, #24]
 800dde8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ddec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800ddf0:	2b0f      	cmp	r3, #15
 800ddf2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800ddf6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ddfa:	ec5b ab16 	vmov	sl, fp, d6
 800ddfe:	ddda      	ble.n	800ddb6 <_strtod_l+0x3ae>
 800de00:	1a9a      	subs	r2, r3, r2
 800de02:	1be1      	subs	r1, r4, r7
 800de04:	440a      	add	r2, r1
 800de06:	2a00      	cmp	r2, #0
 800de08:	f340 8094 	ble.w	800df34 <_strtod_l+0x52c>
 800de0c:	f012 000f 	ands.w	r0, r2, #15
 800de10:	d00a      	beq.n	800de28 <_strtod_l+0x420>
 800de12:	495d      	ldr	r1, [pc, #372]	@ (800df88 <_strtod_l+0x580>)
 800de14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800de18:	ed91 7b00 	vldr	d7, [r1]
 800de1c:	ec4b ab16 	vmov	d6, sl, fp
 800de20:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de24:	ec5b ab17 	vmov	sl, fp, d7
 800de28:	f032 020f 	bics.w	r2, r2, #15
 800de2c:	d073      	beq.n	800df16 <_strtod_l+0x50e>
 800de2e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800de32:	dd47      	ble.n	800dec4 <_strtod_l+0x4bc>
 800de34:	2400      	movs	r4, #0
 800de36:	4625      	mov	r5, r4
 800de38:	9407      	str	r4, [sp, #28]
 800de3a:	4626      	mov	r6, r4
 800de3c:	9a05      	ldr	r2, [sp, #20]
 800de3e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800df94 <_strtod_l+0x58c>
 800de42:	2322      	movs	r3, #34	@ 0x22
 800de44:	6013      	str	r3, [r2, #0]
 800de46:	f04f 0a00 	mov.w	sl, #0
 800de4a:	9b07      	ldr	r3, [sp, #28]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f43f ae16 	beq.w	800da7e <_strtod_l+0x76>
 800de52:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800de54:	9805      	ldr	r0, [sp, #20]
 800de56:	f002 fdad 	bl	80109b4 <_Bfree>
 800de5a:	9805      	ldr	r0, [sp, #20]
 800de5c:	4631      	mov	r1, r6
 800de5e:	f002 fda9 	bl	80109b4 <_Bfree>
 800de62:	9805      	ldr	r0, [sp, #20]
 800de64:	4629      	mov	r1, r5
 800de66:	f002 fda5 	bl	80109b4 <_Bfree>
 800de6a:	9907      	ldr	r1, [sp, #28]
 800de6c:	9805      	ldr	r0, [sp, #20]
 800de6e:	f002 fda1 	bl	80109b4 <_Bfree>
 800de72:	9805      	ldr	r0, [sp, #20]
 800de74:	4621      	mov	r1, r4
 800de76:	f002 fd9d 	bl	80109b4 <_Bfree>
 800de7a:	e600      	b.n	800da7e <_strtod_l+0x76>
 800de7c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800de80:	1be0      	subs	r0, r4, r7
 800de82:	4281      	cmp	r1, r0
 800de84:	dbbc      	blt.n	800de00 <_strtod_l+0x3f8>
 800de86:	4a40      	ldr	r2, [pc, #256]	@ (800df88 <_strtod_l+0x580>)
 800de88:	f1c3 030f 	rsb	r3, r3, #15
 800de8c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800de90:	ed91 7b00 	vldr	d7, [r1]
 800de94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de96:	ec4b ab16 	vmov	d6, sl, fp
 800de9a:	1acb      	subs	r3, r1, r3
 800de9c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800dea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dea4:	ed92 6b00 	vldr	d6, [r2]
 800dea8:	e796      	b.n	800ddd8 <_strtod_l+0x3d0>
 800deaa:	3116      	adds	r1, #22
 800deac:	dba8      	blt.n	800de00 <_strtod_l+0x3f8>
 800deae:	4b36      	ldr	r3, [pc, #216]	@ (800df88 <_strtod_l+0x580>)
 800deb0:	1b3c      	subs	r4, r7, r4
 800deb2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800deb6:	ed94 7b00 	vldr	d7, [r4]
 800deba:	ec4b ab16 	vmov	d6, sl, fp
 800debe:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dec2:	e78b      	b.n	800dddc <_strtod_l+0x3d4>
 800dec4:	2000      	movs	r0, #0
 800dec6:	ec4b ab17 	vmov	d7, sl, fp
 800deca:	4e30      	ldr	r6, [pc, #192]	@ (800df8c <_strtod_l+0x584>)
 800decc:	1112      	asrs	r2, r2, #4
 800dece:	4601      	mov	r1, r0
 800ded0:	2a01      	cmp	r2, #1
 800ded2:	dc23      	bgt.n	800df1c <_strtod_l+0x514>
 800ded4:	b108      	cbz	r0, 800deda <_strtod_l+0x4d2>
 800ded6:	ec5b ab17 	vmov	sl, fp, d7
 800deda:	4a2c      	ldr	r2, [pc, #176]	@ (800df8c <_strtod_l+0x584>)
 800dedc:	482c      	ldr	r0, [pc, #176]	@ (800df90 <_strtod_l+0x588>)
 800dede:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dee2:	ed92 7b00 	vldr	d7, [r2]
 800dee6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800deea:	ec4b ab16 	vmov	d6, sl, fp
 800deee:	4a29      	ldr	r2, [pc, #164]	@ (800df94 <_strtod_l+0x58c>)
 800def0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800def4:	ee17 1a90 	vmov	r1, s15
 800def8:	400a      	ands	r2, r1
 800defa:	4282      	cmp	r2, r0
 800defc:	ec5b ab17 	vmov	sl, fp, d7
 800df00:	d898      	bhi.n	800de34 <_strtod_l+0x42c>
 800df02:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800df06:	4282      	cmp	r2, r0
 800df08:	bf86      	itte	hi
 800df0a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800df98 <_strtod_l+0x590>
 800df0e:	f04f 3aff 	movhi.w	sl, #4294967295
 800df12:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800df16:	2200      	movs	r2, #0
 800df18:	9206      	str	r2, [sp, #24]
 800df1a:	e076      	b.n	800e00a <_strtod_l+0x602>
 800df1c:	f012 0f01 	tst.w	r2, #1
 800df20:	d004      	beq.n	800df2c <_strtod_l+0x524>
 800df22:	ed96 6b00 	vldr	d6, [r6]
 800df26:	2001      	movs	r0, #1
 800df28:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df2c:	3101      	adds	r1, #1
 800df2e:	1052      	asrs	r2, r2, #1
 800df30:	3608      	adds	r6, #8
 800df32:	e7cd      	b.n	800ded0 <_strtod_l+0x4c8>
 800df34:	d0ef      	beq.n	800df16 <_strtod_l+0x50e>
 800df36:	4252      	negs	r2, r2
 800df38:	f012 000f 	ands.w	r0, r2, #15
 800df3c:	d00a      	beq.n	800df54 <_strtod_l+0x54c>
 800df3e:	4912      	ldr	r1, [pc, #72]	@ (800df88 <_strtod_l+0x580>)
 800df40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800df44:	ed91 7b00 	vldr	d7, [r1]
 800df48:	ec4b ab16 	vmov	d6, sl, fp
 800df4c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800df50:	ec5b ab17 	vmov	sl, fp, d7
 800df54:	1112      	asrs	r2, r2, #4
 800df56:	d0de      	beq.n	800df16 <_strtod_l+0x50e>
 800df58:	2a1f      	cmp	r2, #31
 800df5a:	dd1f      	ble.n	800df9c <_strtod_l+0x594>
 800df5c:	2400      	movs	r4, #0
 800df5e:	4625      	mov	r5, r4
 800df60:	9407      	str	r4, [sp, #28]
 800df62:	4626      	mov	r6, r4
 800df64:	9a05      	ldr	r2, [sp, #20]
 800df66:	2322      	movs	r3, #34	@ 0x22
 800df68:	f04f 0a00 	mov.w	sl, #0
 800df6c:	f04f 0b00 	mov.w	fp, #0
 800df70:	6013      	str	r3, [r2, #0]
 800df72:	e76a      	b.n	800de4a <_strtod_l+0x442>
 800df74:	08011a03 	.word	0x08011a03
 800df78:	08011bc8 	.word	0x08011bc8
 800df7c:	080119fb 	.word	0x080119fb
 800df80:	08011a35 	.word	0x08011a35
 800df84:	08011bc4 	.word	0x08011bc4
 800df88:	08011d50 	.word	0x08011d50
 800df8c:	08011d28 	.word	0x08011d28
 800df90:	7ca00000 	.word	0x7ca00000
 800df94:	7ff00000 	.word	0x7ff00000
 800df98:	7fefffff 	.word	0x7fefffff
 800df9c:	f012 0110 	ands.w	r1, r2, #16
 800dfa0:	bf18      	it	ne
 800dfa2:	216a      	movne	r1, #106	@ 0x6a
 800dfa4:	9106      	str	r1, [sp, #24]
 800dfa6:	ec4b ab17 	vmov	d7, sl, fp
 800dfaa:	49af      	ldr	r1, [pc, #700]	@ (800e268 <_strtod_l+0x860>)
 800dfac:	2000      	movs	r0, #0
 800dfae:	07d6      	lsls	r6, r2, #31
 800dfb0:	d504      	bpl.n	800dfbc <_strtod_l+0x5b4>
 800dfb2:	ed91 6b00 	vldr	d6, [r1]
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dfbc:	1052      	asrs	r2, r2, #1
 800dfbe:	f101 0108 	add.w	r1, r1, #8
 800dfc2:	d1f4      	bne.n	800dfae <_strtod_l+0x5a6>
 800dfc4:	b108      	cbz	r0, 800dfca <_strtod_l+0x5c2>
 800dfc6:	ec5b ab17 	vmov	sl, fp, d7
 800dfca:	9a06      	ldr	r2, [sp, #24]
 800dfcc:	b1b2      	cbz	r2, 800dffc <_strtod_l+0x5f4>
 800dfce:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800dfd2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800dfd6:	2a00      	cmp	r2, #0
 800dfd8:	4658      	mov	r0, fp
 800dfda:	dd0f      	ble.n	800dffc <_strtod_l+0x5f4>
 800dfdc:	2a1f      	cmp	r2, #31
 800dfde:	dd55      	ble.n	800e08c <_strtod_l+0x684>
 800dfe0:	2a34      	cmp	r2, #52	@ 0x34
 800dfe2:	bfde      	ittt	le
 800dfe4:	f04f 32ff 	movle.w	r2, #4294967295
 800dfe8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800dfec:	408a      	lslle	r2, r1
 800dfee:	f04f 0a00 	mov.w	sl, #0
 800dff2:	bfcc      	ite	gt
 800dff4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dff8:	ea02 0b00 	andle.w	fp, r2, r0
 800dffc:	ec4b ab17 	vmov	d7, sl, fp
 800e000:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e008:	d0a8      	beq.n	800df5c <_strtod_l+0x554>
 800e00a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e00c:	9805      	ldr	r0, [sp, #20]
 800e00e:	f8cd 9000 	str.w	r9, [sp]
 800e012:	462a      	mov	r2, r5
 800e014:	f002 fd36 	bl	8010a84 <__s2b>
 800e018:	9007      	str	r0, [sp, #28]
 800e01a:	2800      	cmp	r0, #0
 800e01c:	f43f af0a 	beq.w	800de34 <_strtod_l+0x42c>
 800e020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e022:	1b3f      	subs	r7, r7, r4
 800e024:	2b00      	cmp	r3, #0
 800e026:	bfb4      	ite	lt
 800e028:	463b      	movlt	r3, r7
 800e02a:	2300      	movge	r3, #0
 800e02c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e030:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800e258 <_strtod_l+0x850>
 800e034:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e038:	2400      	movs	r4, #0
 800e03a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e03c:	4625      	mov	r5, r4
 800e03e:	9b07      	ldr	r3, [sp, #28]
 800e040:	9805      	ldr	r0, [sp, #20]
 800e042:	6859      	ldr	r1, [r3, #4]
 800e044:	f002 fc76 	bl	8010934 <_Balloc>
 800e048:	4606      	mov	r6, r0
 800e04a:	2800      	cmp	r0, #0
 800e04c:	f43f aef6 	beq.w	800de3c <_strtod_l+0x434>
 800e050:	9b07      	ldr	r3, [sp, #28]
 800e052:	691a      	ldr	r2, [r3, #16]
 800e054:	ec4b ab19 	vmov	d9, sl, fp
 800e058:	3202      	adds	r2, #2
 800e05a:	f103 010c 	add.w	r1, r3, #12
 800e05e:	0092      	lsls	r2, r2, #2
 800e060:	300c      	adds	r0, #12
 800e062:	f001 fa16 	bl	800f492 <memcpy>
 800e066:	eeb0 0b49 	vmov.f64	d0, d9
 800e06a:	9805      	ldr	r0, [sp, #20]
 800e06c:	aa14      	add	r2, sp, #80	@ 0x50
 800e06e:	a913      	add	r1, sp, #76	@ 0x4c
 800e070:	f003 f83c 	bl	80110ec <__d2b>
 800e074:	9012      	str	r0, [sp, #72]	@ 0x48
 800e076:	2800      	cmp	r0, #0
 800e078:	f43f aee0 	beq.w	800de3c <_strtod_l+0x434>
 800e07c:	9805      	ldr	r0, [sp, #20]
 800e07e:	2101      	movs	r1, #1
 800e080:	f002 fd96 	bl	8010bb0 <__i2b>
 800e084:	4605      	mov	r5, r0
 800e086:	b940      	cbnz	r0, 800e09a <_strtod_l+0x692>
 800e088:	2500      	movs	r5, #0
 800e08a:	e6d7      	b.n	800de3c <_strtod_l+0x434>
 800e08c:	f04f 31ff 	mov.w	r1, #4294967295
 800e090:	fa01 f202 	lsl.w	r2, r1, r2
 800e094:	ea02 0a0a 	and.w	sl, r2, sl
 800e098:	e7b0      	b.n	800dffc <_strtod_l+0x5f4>
 800e09a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e09c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e09e:	2f00      	cmp	r7, #0
 800e0a0:	bfab      	itete	ge
 800e0a2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e0a4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e0a6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e0aa:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e0ae:	bfac      	ite	ge
 800e0b0:	eb07 0903 	addge.w	r9, r7, r3
 800e0b4:	eba3 0807 	sublt.w	r8, r3, r7
 800e0b8:	9b06      	ldr	r3, [sp, #24]
 800e0ba:	1aff      	subs	r7, r7, r3
 800e0bc:	4417      	add	r7, r2
 800e0be:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e0c2:	4a6a      	ldr	r2, [pc, #424]	@ (800e26c <_strtod_l+0x864>)
 800e0c4:	3f01      	subs	r7, #1
 800e0c6:	4297      	cmp	r7, r2
 800e0c8:	da51      	bge.n	800e16e <_strtod_l+0x766>
 800e0ca:	1bd1      	subs	r1, r2, r7
 800e0cc:	291f      	cmp	r1, #31
 800e0ce:	eba3 0301 	sub.w	r3, r3, r1
 800e0d2:	f04f 0201 	mov.w	r2, #1
 800e0d6:	dc3e      	bgt.n	800e156 <_strtod_l+0x74e>
 800e0d8:	408a      	lsls	r2, r1
 800e0da:	920c      	str	r2, [sp, #48]	@ 0x30
 800e0dc:	2200      	movs	r2, #0
 800e0de:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e0e0:	eb09 0703 	add.w	r7, r9, r3
 800e0e4:	4498      	add	r8, r3
 800e0e6:	9b06      	ldr	r3, [sp, #24]
 800e0e8:	45b9      	cmp	r9, r7
 800e0ea:	4498      	add	r8, r3
 800e0ec:	464b      	mov	r3, r9
 800e0ee:	bfa8      	it	ge
 800e0f0:	463b      	movge	r3, r7
 800e0f2:	4543      	cmp	r3, r8
 800e0f4:	bfa8      	it	ge
 800e0f6:	4643      	movge	r3, r8
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	bfc2      	ittt	gt
 800e0fc:	1aff      	subgt	r7, r7, r3
 800e0fe:	eba8 0803 	subgt.w	r8, r8, r3
 800e102:	eba9 0903 	subgt.w	r9, r9, r3
 800e106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e108:	2b00      	cmp	r3, #0
 800e10a:	dd16      	ble.n	800e13a <_strtod_l+0x732>
 800e10c:	4629      	mov	r1, r5
 800e10e:	9805      	ldr	r0, [sp, #20]
 800e110:	461a      	mov	r2, r3
 800e112:	f002 fe05 	bl	8010d20 <__pow5mult>
 800e116:	4605      	mov	r5, r0
 800e118:	2800      	cmp	r0, #0
 800e11a:	d0b5      	beq.n	800e088 <_strtod_l+0x680>
 800e11c:	4601      	mov	r1, r0
 800e11e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e120:	9805      	ldr	r0, [sp, #20]
 800e122:	f002 fd5b 	bl	8010bdc <__multiply>
 800e126:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e128:	2800      	cmp	r0, #0
 800e12a:	f43f ae87 	beq.w	800de3c <_strtod_l+0x434>
 800e12e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e130:	9805      	ldr	r0, [sp, #20]
 800e132:	f002 fc3f 	bl	80109b4 <_Bfree>
 800e136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e138:	9312      	str	r3, [sp, #72]	@ 0x48
 800e13a:	2f00      	cmp	r7, #0
 800e13c:	dc1b      	bgt.n	800e176 <_strtod_l+0x76e>
 800e13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e140:	2b00      	cmp	r3, #0
 800e142:	dd21      	ble.n	800e188 <_strtod_l+0x780>
 800e144:	4631      	mov	r1, r6
 800e146:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e148:	9805      	ldr	r0, [sp, #20]
 800e14a:	f002 fde9 	bl	8010d20 <__pow5mult>
 800e14e:	4606      	mov	r6, r0
 800e150:	b9d0      	cbnz	r0, 800e188 <_strtod_l+0x780>
 800e152:	2600      	movs	r6, #0
 800e154:	e672      	b.n	800de3c <_strtod_l+0x434>
 800e156:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e15a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e15e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e162:	37e2      	adds	r7, #226	@ 0xe2
 800e164:	fa02 f107 	lsl.w	r1, r2, r7
 800e168:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e16a:	920c      	str	r2, [sp, #48]	@ 0x30
 800e16c:	e7b8      	b.n	800e0e0 <_strtod_l+0x6d8>
 800e16e:	2200      	movs	r2, #0
 800e170:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e172:	2201      	movs	r2, #1
 800e174:	e7f9      	b.n	800e16a <_strtod_l+0x762>
 800e176:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e178:	9805      	ldr	r0, [sp, #20]
 800e17a:	463a      	mov	r2, r7
 800e17c:	f002 fe2a 	bl	8010dd4 <__lshift>
 800e180:	9012      	str	r0, [sp, #72]	@ 0x48
 800e182:	2800      	cmp	r0, #0
 800e184:	d1db      	bne.n	800e13e <_strtod_l+0x736>
 800e186:	e659      	b.n	800de3c <_strtod_l+0x434>
 800e188:	f1b8 0f00 	cmp.w	r8, #0
 800e18c:	dd07      	ble.n	800e19e <_strtod_l+0x796>
 800e18e:	4631      	mov	r1, r6
 800e190:	9805      	ldr	r0, [sp, #20]
 800e192:	4642      	mov	r2, r8
 800e194:	f002 fe1e 	bl	8010dd4 <__lshift>
 800e198:	4606      	mov	r6, r0
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d0d9      	beq.n	800e152 <_strtod_l+0x74a>
 800e19e:	f1b9 0f00 	cmp.w	r9, #0
 800e1a2:	dd08      	ble.n	800e1b6 <_strtod_l+0x7ae>
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	9805      	ldr	r0, [sp, #20]
 800e1a8:	464a      	mov	r2, r9
 800e1aa:	f002 fe13 	bl	8010dd4 <__lshift>
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	f43f ae43 	beq.w	800de3c <_strtod_l+0x434>
 800e1b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e1b8:	9805      	ldr	r0, [sp, #20]
 800e1ba:	4632      	mov	r2, r6
 800e1bc:	f002 fe92 	bl	8010ee4 <__mdiff>
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	f43f ae3a 	beq.w	800de3c <_strtod_l+0x434>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e1ce:	60c3      	str	r3, [r0, #12]
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	f002 fe6b 	bl	8010eac <__mcmp>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	da4c      	bge.n	800e274 <_strtod_l+0x86c>
 800e1da:	ea58 080a 	orrs.w	r8, r8, sl
 800e1de:	d172      	bne.n	800e2c6 <_strtod_l+0x8be>
 800e1e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d16e      	bne.n	800e2c6 <_strtod_l+0x8be>
 800e1e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e1ec:	0d1b      	lsrs	r3, r3, #20
 800e1ee:	051b      	lsls	r3, r3, #20
 800e1f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e1f4:	d967      	bls.n	800e2c6 <_strtod_l+0x8be>
 800e1f6:	6963      	ldr	r3, [r4, #20]
 800e1f8:	b913      	cbnz	r3, 800e200 <_strtod_l+0x7f8>
 800e1fa:	6923      	ldr	r3, [r4, #16]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	dd62      	ble.n	800e2c6 <_strtod_l+0x8be>
 800e200:	4621      	mov	r1, r4
 800e202:	2201      	movs	r2, #1
 800e204:	9805      	ldr	r0, [sp, #20]
 800e206:	f002 fde5 	bl	8010dd4 <__lshift>
 800e20a:	4629      	mov	r1, r5
 800e20c:	4604      	mov	r4, r0
 800e20e:	f002 fe4d 	bl	8010eac <__mcmp>
 800e212:	2800      	cmp	r0, #0
 800e214:	dd57      	ble.n	800e2c6 <_strtod_l+0x8be>
 800e216:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e21a:	9a06      	ldr	r2, [sp, #24]
 800e21c:	0d1b      	lsrs	r3, r3, #20
 800e21e:	051b      	lsls	r3, r3, #20
 800e220:	2a00      	cmp	r2, #0
 800e222:	d06e      	beq.n	800e302 <_strtod_l+0x8fa>
 800e224:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e228:	d86b      	bhi.n	800e302 <_strtod_l+0x8fa>
 800e22a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e22e:	f67f ae99 	bls.w	800df64 <_strtod_l+0x55c>
 800e232:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800e260 <_strtod_l+0x858>
 800e236:	ec4b ab16 	vmov	d6, sl, fp
 800e23a:	4b0d      	ldr	r3, [pc, #52]	@ (800e270 <_strtod_l+0x868>)
 800e23c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e240:	ee17 2a90 	vmov	r2, s15
 800e244:	4013      	ands	r3, r2
 800e246:	ec5b ab17 	vmov	sl, fp, d7
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f47f ae01 	bne.w	800de52 <_strtod_l+0x44a>
 800e250:	9a05      	ldr	r2, [sp, #20]
 800e252:	2322      	movs	r3, #34	@ 0x22
 800e254:	6013      	str	r3, [r2, #0]
 800e256:	e5fc      	b.n	800de52 <_strtod_l+0x44a>
 800e258:	ffc00000 	.word	0xffc00000
 800e25c:	41dfffff 	.word	0x41dfffff
 800e260:	00000000 	.word	0x00000000
 800e264:	39500000 	.word	0x39500000
 800e268:	08011bf0 	.word	0x08011bf0
 800e26c:	fffffc02 	.word	0xfffffc02
 800e270:	7ff00000 	.word	0x7ff00000
 800e274:	46d9      	mov	r9, fp
 800e276:	d15d      	bne.n	800e334 <_strtod_l+0x92c>
 800e278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e27c:	f1b8 0f00 	cmp.w	r8, #0
 800e280:	d02a      	beq.n	800e2d8 <_strtod_l+0x8d0>
 800e282:	4aa9      	ldr	r2, [pc, #676]	@ (800e528 <_strtod_l+0xb20>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d12a      	bne.n	800e2de <_strtod_l+0x8d6>
 800e288:	9b06      	ldr	r3, [sp, #24]
 800e28a:	4652      	mov	r2, sl
 800e28c:	b1fb      	cbz	r3, 800e2ce <_strtod_l+0x8c6>
 800e28e:	4ba7      	ldr	r3, [pc, #668]	@ (800e52c <_strtod_l+0xb24>)
 800e290:	ea0b 0303 	and.w	r3, fp, r3
 800e294:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e298:	f04f 31ff 	mov.w	r1, #4294967295
 800e29c:	d81a      	bhi.n	800e2d4 <_strtod_l+0x8cc>
 800e29e:	0d1b      	lsrs	r3, r3, #20
 800e2a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d118      	bne.n	800e2de <_strtod_l+0x8d6>
 800e2ac:	4ba0      	ldr	r3, [pc, #640]	@ (800e530 <_strtod_l+0xb28>)
 800e2ae:	4599      	cmp	r9, r3
 800e2b0:	d102      	bne.n	800e2b8 <_strtod_l+0x8b0>
 800e2b2:	3201      	adds	r2, #1
 800e2b4:	f43f adc2 	beq.w	800de3c <_strtod_l+0x434>
 800e2b8:	4b9c      	ldr	r3, [pc, #624]	@ (800e52c <_strtod_l+0xb24>)
 800e2ba:	ea09 0303 	and.w	r3, r9, r3
 800e2be:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e2c2:	f04f 0a00 	mov.w	sl, #0
 800e2c6:	9b06      	ldr	r3, [sp, #24]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1b2      	bne.n	800e232 <_strtod_l+0x82a>
 800e2cc:	e5c1      	b.n	800de52 <_strtod_l+0x44a>
 800e2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d2:	e7e9      	b.n	800e2a8 <_strtod_l+0x8a0>
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	e7e7      	b.n	800e2a8 <_strtod_l+0x8a0>
 800e2d8:	ea53 030a 	orrs.w	r3, r3, sl
 800e2dc:	d09b      	beq.n	800e216 <_strtod_l+0x80e>
 800e2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2e0:	b1c3      	cbz	r3, 800e314 <_strtod_l+0x90c>
 800e2e2:	ea13 0f09 	tst.w	r3, r9
 800e2e6:	d0ee      	beq.n	800e2c6 <_strtod_l+0x8be>
 800e2e8:	9a06      	ldr	r2, [sp, #24]
 800e2ea:	4650      	mov	r0, sl
 800e2ec:	4659      	mov	r1, fp
 800e2ee:	f1b8 0f00 	cmp.w	r8, #0
 800e2f2:	d013      	beq.n	800e31c <_strtod_l+0x914>
 800e2f4:	f7ff fb6c 	bl	800d9d0 <sulp>
 800e2f8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e2fc:	ec5b ab17 	vmov	sl, fp, d7
 800e300:	e7e1      	b.n	800e2c6 <_strtod_l+0x8be>
 800e302:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e306:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e30a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e30e:	f04f 3aff 	mov.w	sl, #4294967295
 800e312:	e7d8      	b.n	800e2c6 <_strtod_l+0x8be>
 800e314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e316:	ea13 0f0a 	tst.w	r3, sl
 800e31a:	e7e4      	b.n	800e2e6 <_strtod_l+0x8de>
 800e31c:	f7ff fb58 	bl	800d9d0 <sulp>
 800e320:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e324:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32c:	ec5b ab10 	vmov	sl, fp, d0
 800e330:	d1c9      	bne.n	800e2c6 <_strtod_l+0x8be>
 800e332:	e617      	b.n	800df64 <_strtod_l+0x55c>
 800e334:	4629      	mov	r1, r5
 800e336:	4620      	mov	r0, r4
 800e338:	f002 ff30 	bl	801119c <__ratio>
 800e33c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e340:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e348:	d85d      	bhi.n	800e406 <_strtod_l+0x9fe>
 800e34a:	f1b8 0f00 	cmp.w	r8, #0
 800e34e:	d164      	bne.n	800e41a <_strtod_l+0xa12>
 800e350:	f1ba 0f00 	cmp.w	sl, #0
 800e354:	d14b      	bne.n	800e3ee <_strtod_l+0x9e6>
 800e356:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e35a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d160      	bne.n	800e424 <_strtod_l+0xa1c>
 800e362:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e366:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36e:	d401      	bmi.n	800e374 <_strtod_l+0x96c>
 800e370:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e374:	eeb1 ab48 	vneg.f64	d10, d8
 800e378:	486c      	ldr	r0, [pc, #432]	@ (800e52c <_strtod_l+0xb24>)
 800e37a:	496e      	ldr	r1, [pc, #440]	@ (800e534 <_strtod_l+0xb2c>)
 800e37c:	ea09 0700 	and.w	r7, r9, r0
 800e380:	428f      	cmp	r7, r1
 800e382:	ec53 2b1a 	vmov	r2, r3, d10
 800e386:	d17d      	bne.n	800e484 <_strtod_l+0xa7c>
 800e388:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e38c:	ec4b ab1c 	vmov	d12, sl, fp
 800e390:	eeb0 0b4c 	vmov.f64	d0, d12
 800e394:	f002 fe3a 	bl	801100c <__ulp>
 800e398:	4864      	ldr	r0, [pc, #400]	@ (800e52c <_strtod_l+0xb24>)
 800e39a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e39e:	ee1c 3a90 	vmov	r3, s25
 800e3a2:	4a65      	ldr	r2, [pc, #404]	@ (800e538 <_strtod_l+0xb30>)
 800e3a4:	ea03 0100 	and.w	r1, r3, r0
 800e3a8:	4291      	cmp	r1, r2
 800e3aa:	ec5b ab1c 	vmov	sl, fp, d12
 800e3ae:	d93c      	bls.n	800e42a <_strtod_l+0xa22>
 800e3b0:	ee19 2a90 	vmov	r2, s19
 800e3b4:	4b5e      	ldr	r3, [pc, #376]	@ (800e530 <_strtod_l+0xb28>)
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d104      	bne.n	800e3c4 <_strtod_l+0x9bc>
 800e3ba:	ee19 3a10 	vmov	r3, s18
 800e3be:	3301      	adds	r3, #1
 800e3c0:	f43f ad3c 	beq.w	800de3c <_strtod_l+0x434>
 800e3c4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800e530 <_strtod_l+0xb28>
 800e3c8:	f04f 3aff 	mov.w	sl, #4294967295
 800e3cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e3ce:	9805      	ldr	r0, [sp, #20]
 800e3d0:	f002 faf0 	bl	80109b4 <_Bfree>
 800e3d4:	9805      	ldr	r0, [sp, #20]
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	f002 faec 	bl	80109b4 <_Bfree>
 800e3dc:	9805      	ldr	r0, [sp, #20]
 800e3de:	4629      	mov	r1, r5
 800e3e0:	f002 fae8 	bl	80109b4 <_Bfree>
 800e3e4:	9805      	ldr	r0, [sp, #20]
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	f002 fae4 	bl	80109b4 <_Bfree>
 800e3ec:	e627      	b.n	800e03e <_strtod_l+0x636>
 800e3ee:	f1ba 0f01 	cmp.w	sl, #1
 800e3f2:	d103      	bne.n	800e3fc <_strtod_l+0x9f4>
 800e3f4:	f1bb 0f00 	cmp.w	fp, #0
 800e3f8:	f43f adb4 	beq.w	800df64 <_strtod_l+0x55c>
 800e3fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e400:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e404:	e7b8      	b.n	800e378 <_strtod_l+0x970>
 800e406:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e40a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e40e:	f1b8 0f00 	cmp.w	r8, #0
 800e412:	d0af      	beq.n	800e374 <_strtod_l+0x96c>
 800e414:	eeb0 ab48 	vmov.f64	d10, d8
 800e418:	e7ae      	b.n	800e378 <_strtod_l+0x970>
 800e41a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e41e:	eeb0 8b4a 	vmov.f64	d8, d10
 800e422:	e7a9      	b.n	800e378 <_strtod_l+0x970>
 800e424:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e428:	e7a6      	b.n	800e378 <_strtod_l+0x970>
 800e42a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e42e:	9b06      	ldr	r3, [sp, #24]
 800e430:	46d9      	mov	r9, fp
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1ca      	bne.n	800e3cc <_strtod_l+0x9c4>
 800e436:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e43a:	0d1b      	lsrs	r3, r3, #20
 800e43c:	051b      	lsls	r3, r3, #20
 800e43e:	429f      	cmp	r7, r3
 800e440:	d1c4      	bne.n	800e3cc <_strtod_l+0x9c4>
 800e442:	ec51 0b18 	vmov	r0, r1, d8
 800e446:	f7f2 f987 	bl	8000758 <__aeabi_d2lz>
 800e44a:	f7f2 f93f 	bl	80006cc <__aeabi_l2d>
 800e44e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e452:	ec41 0b17 	vmov	d7, r0, r1
 800e456:	ea49 090a 	orr.w	r9, r9, sl
 800e45a:	ea59 0908 	orrs.w	r9, r9, r8
 800e45e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e462:	d03c      	beq.n	800e4de <_strtod_l+0xad6>
 800e464:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e510 <_strtod_l+0xb08>
 800e468:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e470:	f53f acef 	bmi.w	800de52 <_strtod_l+0x44a>
 800e474:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800e518 <_strtod_l+0xb10>
 800e478:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e480:	dda4      	ble.n	800e3cc <_strtod_l+0x9c4>
 800e482:	e4e6      	b.n	800de52 <_strtod_l+0x44a>
 800e484:	9906      	ldr	r1, [sp, #24]
 800e486:	b1e1      	cbz	r1, 800e4c2 <_strtod_l+0xaba>
 800e488:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e48c:	d819      	bhi.n	800e4c2 <_strtod_l+0xaba>
 800e48e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e496:	d811      	bhi.n	800e4bc <_strtod_l+0xab4>
 800e498:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e49c:	ee18 3a10 	vmov	r3, s16
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	bf38      	it	cc
 800e4a4:	2301      	movcc	r3, #1
 800e4a6:	ee08 3a10 	vmov	s16, r3
 800e4aa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e4ae:	f1b8 0f00 	cmp.w	r8, #0
 800e4b2:	d111      	bne.n	800e4d8 <_strtod_l+0xad0>
 800e4b4:	eeb1 7b48 	vneg.f64	d7, d8
 800e4b8:	ec53 2b17 	vmov	r2, r3, d7
 800e4bc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e4c0:	1bcb      	subs	r3, r1, r7
 800e4c2:	eeb0 0b49 	vmov.f64	d0, d9
 800e4c6:	ec43 2b1a 	vmov	d10, r2, r3
 800e4ca:	f002 fd9f 	bl	801100c <__ulp>
 800e4ce:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e4d2:	ec5b ab19 	vmov	sl, fp, d9
 800e4d6:	e7aa      	b.n	800e42e <_strtod_l+0xa26>
 800e4d8:	eeb0 7b48 	vmov.f64	d7, d8
 800e4dc:	e7ec      	b.n	800e4b8 <_strtod_l+0xab0>
 800e4de:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e520 <_strtod_l+0xb18>
 800e4e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ea:	f57f af6f 	bpl.w	800e3cc <_strtod_l+0x9c4>
 800e4ee:	e4b0      	b.n	800de52 <_strtod_l+0x44a>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9308      	str	r3, [sp, #32]
 800e4f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	f7ff bac4 	b.w	800da86 <_strtod_l+0x7e>
 800e4fe:	2a65      	cmp	r2, #101	@ 0x65
 800e500:	f43f abbf 	beq.w	800dc82 <_strtod_l+0x27a>
 800e504:	2a45      	cmp	r2, #69	@ 0x45
 800e506:	f43f abbc 	beq.w	800dc82 <_strtod_l+0x27a>
 800e50a:	2101      	movs	r1, #1
 800e50c:	f7ff bbf4 	b.w	800dcf8 <_strtod_l+0x2f0>
 800e510:	94a03595 	.word	0x94a03595
 800e514:	3fdfffff 	.word	0x3fdfffff
 800e518:	35afe535 	.word	0x35afe535
 800e51c:	3fe00000 	.word	0x3fe00000
 800e520:	94a03595 	.word	0x94a03595
 800e524:	3fcfffff 	.word	0x3fcfffff
 800e528:	000fffff 	.word	0x000fffff
 800e52c:	7ff00000 	.word	0x7ff00000
 800e530:	7fefffff 	.word	0x7fefffff
 800e534:	7fe00000 	.word	0x7fe00000
 800e538:	7c9fffff 	.word	0x7c9fffff
 800e53c:	00000000 	.word	0x00000000

0800e540 <strtof>:
 800e540:	b510      	push	{r4, lr}
 800e542:	4c21      	ldr	r4, [pc, #132]	@ (800e5c8 <strtof+0x88>)
 800e544:	4b21      	ldr	r3, [pc, #132]	@ (800e5cc <strtof+0x8c>)
 800e546:	460a      	mov	r2, r1
 800e548:	4601      	mov	r1, r0
 800e54a:	6820      	ldr	r0, [r4, #0]
 800e54c:	f7ff fa5c 	bl	800da08 <_strtod_l>
 800e550:	eeb4 0b40 	vcmp.f64	d0, d0
 800e554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e558:	eeb0 7b40 	vmov.f64	d7, d0
 800e55c:	d70d      	bvc.n	800e57a <strtof+0x3a>
 800e55e:	ee17 3a90 	vmov	r3, s15
 800e562:	2b00      	cmp	r3, #0
 800e564:	481a      	ldr	r0, [pc, #104]	@ (800e5d0 <strtof+0x90>)
 800e566:	da04      	bge.n	800e572 <strtof+0x32>
 800e568:	f000 ffaa 	bl	800f4c0 <nanf>
 800e56c:	eeb1 0a40 	vneg.f32	s0, s0
 800e570:	bd10      	pop	{r4, pc}
 800e572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e576:	f000 bfa3 	b.w	800f4c0 <nanf>
 800e57a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e57e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800e5d4 <strtof+0x94>
 800e582:	eeb0 6ac0 	vabs.f32	s12, s0
 800e586:	eeb4 6a66 	vcmp.f32	s12, s13
 800e58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58e:	dd08      	ble.n	800e5a2 <strtof+0x62>
 800e590:	eeb0 6bc7 	vabs.f64	d6, d7
 800e594:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 800e5c0 <strtof+0x80>
 800e598:	eeb4 6b45 	vcmp.f64	d6, d5
 800e59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a0:	dd0a      	ble.n	800e5b8 <strtof+0x78>
 800e5a2:	ee10 3a10 	vmov	r3, s0
 800e5a6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e5aa:	d1e1      	bne.n	800e570 <strtof+0x30>
 800e5ac:	ee17 2a90 	vmov	r2, s15
 800e5b0:	4b09      	ldr	r3, [pc, #36]	@ (800e5d8 <strtof+0x98>)
 800e5b2:	4013      	ands	r3, r2
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d0db      	beq.n	800e570 <strtof+0x30>
 800e5b8:	6823      	ldr	r3, [r4, #0]
 800e5ba:	2222      	movs	r2, #34	@ 0x22
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	e7d7      	b.n	800e570 <strtof+0x30>
 800e5c0:	ffffffff 	.word	0xffffffff
 800e5c4:	7fefffff 	.word	0x7fefffff
 800e5c8:	2400027c 	.word	0x2400027c
 800e5cc:	24000110 	.word	0x24000110
 800e5d0:	08011bc4 	.word	0x08011bc4
 800e5d4:	7f7fffff 	.word	0x7f7fffff
 800e5d8:	7ff00000 	.word	0x7ff00000

0800e5dc <_strtol_l.isra.0>:
 800e5dc:	2b24      	cmp	r3, #36	@ 0x24
 800e5de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e2:	4686      	mov	lr, r0
 800e5e4:	4690      	mov	r8, r2
 800e5e6:	d801      	bhi.n	800e5ec <_strtol_l.isra.0+0x10>
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d106      	bne.n	800e5fa <_strtol_l.isra.0+0x1e>
 800e5ec:	f000 ff1c 	bl	800f428 <__errno>
 800e5f0:	2316      	movs	r3, #22
 800e5f2:	6003      	str	r3, [r0, #0]
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5fa:	4834      	ldr	r0, [pc, #208]	@ (800e6cc <_strtol_l.isra.0+0xf0>)
 800e5fc:	460d      	mov	r5, r1
 800e5fe:	462a      	mov	r2, r5
 800e600:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e604:	5d06      	ldrb	r6, [r0, r4]
 800e606:	f016 0608 	ands.w	r6, r6, #8
 800e60a:	d1f8      	bne.n	800e5fe <_strtol_l.isra.0+0x22>
 800e60c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e60e:	d110      	bne.n	800e632 <_strtol_l.isra.0+0x56>
 800e610:	782c      	ldrb	r4, [r5, #0]
 800e612:	2601      	movs	r6, #1
 800e614:	1c95      	adds	r5, r2, #2
 800e616:	f033 0210 	bics.w	r2, r3, #16
 800e61a:	d115      	bne.n	800e648 <_strtol_l.isra.0+0x6c>
 800e61c:	2c30      	cmp	r4, #48	@ 0x30
 800e61e:	d10d      	bne.n	800e63c <_strtol_l.isra.0+0x60>
 800e620:	782a      	ldrb	r2, [r5, #0]
 800e622:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e626:	2a58      	cmp	r2, #88	@ 0x58
 800e628:	d108      	bne.n	800e63c <_strtol_l.isra.0+0x60>
 800e62a:	786c      	ldrb	r4, [r5, #1]
 800e62c:	3502      	adds	r5, #2
 800e62e:	2310      	movs	r3, #16
 800e630:	e00a      	b.n	800e648 <_strtol_l.isra.0+0x6c>
 800e632:	2c2b      	cmp	r4, #43	@ 0x2b
 800e634:	bf04      	itt	eq
 800e636:	782c      	ldrbeq	r4, [r5, #0]
 800e638:	1c95      	addeq	r5, r2, #2
 800e63a:	e7ec      	b.n	800e616 <_strtol_l.isra.0+0x3a>
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d1f6      	bne.n	800e62e <_strtol_l.isra.0+0x52>
 800e640:	2c30      	cmp	r4, #48	@ 0x30
 800e642:	bf14      	ite	ne
 800e644:	230a      	movne	r3, #10
 800e646:	2308      	moveq	r3, #8
 800e648:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e64c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e650:	2200      	movs	r2, #0
 800e652:	fbbc f9f3 	udiv	r9, ip, r3
 800e656:	4610      	mov	r0, r2
 800e658:	fb03 ca19 	mls	sl, r3, r9, ip
 800e65c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e660:	2f09      	cmp	r7, #9
 800e662:	d80f      	bhi.n	800e684 <_strtol_l.isra.0+0xa8>
 800e664:	463c      	mov	r4, r7
 800e666:	42a3      	cmp	r3, r4
 800e668:	dd1b      	ble.n	800e6a2 <_strtol_l.isra.0+0xc6>
 800e66a:	1c57      	adds	r7, r2, #1
 800e66c:	d007      	beq.n	800e67e <_strtol_l.isra.0+0xa2>
 800e66e:	4581      	cmp	r9, r0
 800e670:	d314      	bcc.n	800e69c <_strtol_l.isra.0+0xc0>
 800e672:	d101      	bne.n	800e678 <_strtol_l.isra.0+0x9c>
 800e674:	45a2      	cmp	sl, r4
 800e676:	db11      	blt.n	800e69c <_strtol_l.isra.0+0xc0>
 800e678:	fb00 4003 	mla	r0, r0, r3, r4
 800e67c:	2201      	movs	r2, #1
 800e67e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e682:	e7eb      	b.n	800e65c <_strtol_l.isra.0+0x80>
 800e684:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e688:	2f19      	cmp	r7, #25
 800e68a:	d801      	bhi.n	800e690 <_strtol_l.isra.0+0xb4>
 800e68c:	3c37      	subs	r4, #55	@ 0x37
 800e68e:	e7ea      	b.n	800e666 <_strtol_l.isra.0+0x8a>
 800e690:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e694:	2f19      	cmp	r7, #25
 800e696:	d804      	bhi.n	800e6a2 <_strtol_l.isra.0+0xc6>
 800e698:	3c57      	subs	r4, #87	@ 0x57
 800e69a:	e7e4      	b.n	800e666 <_strtol_l.isra.0+0x8a>
 800e69c:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a0:	e7ed      	b.n	800e67e <_strtol_l.isra.0+0xa2>
 800e6a2:	1c53      	adds	r3, r2, #1
 800e6a4:	d108      	bne.n	800e6b8 <_strtol_l.isra.0+0xdc>
 800e6a6:	2322      	movs	r3, #34	@ 0x22
 800e6a8:	f8ce 3000 	str.w	r3, [lr]
 800e6ac:	4660      	mov	r0, ip
 800e6ae:	f1b8 0f00 	cmp.w	r8, #0
 800e6b2:	d0a0      	beq.n	800e5f6 <_strtol_l.isra.0+0x1a>
 800e6b4:	1e69      	subs	r1, r5, #1
 800e6b6:	e006      	b.n	800e6c6 <_strtol_l.isra.0+0xea>
 800e6b8:	b106      	cbz	r6, 800e6bc <_strtol_l.isra.0+0xe0>
 800e6ba:	4240      	negs	r0, r0
 800e6bc:	f1b8 0f00 	cmp.w	r8, #0
 800e6c0:	d099      	beq.n	800e5f6 <_strtol_l.isra.0+0x1a>
 800e6c2:	2a00      	cmp	r2, #0
 800e6c4:	d1f6      	bne.n	800e6b4 <_strtol_l.isra.0+0xd8>
 800e6c6:	f8c8 1000 	str.w	r1, [r8]
 800e6ca:	e794      	b.n	800e5f6 <_strtol_l.isra.0+0x1a>
 800e6cc:	08011c19 	.word	0x08011c19

0800e6d0 <strtol>:
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	460a      	mov	r2, r1
 800e6d4:	4601      	mov	r1, r0
 800e6d6:	4802      	ldr	r0, [pc, #8]	@ (800e6e0 <strtol+0x10>)
 800e6d8:	6800      	ldr	r0, [r0, #0]
 800e6da:	f7ff bf7f 	b.w	800e5dc <_strtol_l.isra.0>
 800e6de:	bf00      	nop
 800e6e0:	2400027c 	.word	0x2400027c

0800e6e4 <__cvt>:
 800e6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6e6:	ed2d 8b02 	vpush	{d8}
 800e6ea:	eeb0 8b40 	vmov.f64	d8, d0
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	4617      	mov	r7, r2
 800e6f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e6f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6f6:	ee18 2a90 	vmov	r2, s17
 800e6fa:	f025 0520 	bic.w	r5, r5, #32
 800e6fe:	2a00      	cmp	r2, #0
 800e700:	bfb6      	itet	lt
 800e702:	222d      	movlt	r2, #45	@ 0x2d
 800e704:	2200      	movge	r2, #0
 800e706:	eeb1 8b40 	vneglt.f64	d8, d0
 800e70a:	2d46      	cmp	r5, #70	@ 0x46
 800e70c:	460c      	mov	r4, r1
 800e70e:	701a      	strb	r2, [r3, #0]
 800e710:	d004      	beq.n	800e71c <__cvt+0x38>
 800e712:	2d45      	cmp	r5, #69	@ 0x45
 800e714:	d100      	bne.n	800e718 <__cvt+0x34>
 800e716:	3401      	adds	r4, #1
 800e718:	2102      	movs	r1, #2
 800e71a:	e000      	b.n	800e71e <__cvt+0x3a>
 800e71c:	2103      	movs	r1, #3
 800e71e:	ab03      	add	r3, sp, #12
 800e720:	9301      	str	r3, [sp, #4]
 800e722:	ab02      	add	r3, sp, #8
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	4622      	mov	r2, r4
 800e728:	4633      	mov	r3, r6
 800e72a:	eeb0 0b48 	vmov.f64	d0, d8
 800e72e:	f000 ff57 	bl	800f5e0 <_dtoa_r>
 800e732:	2d47      	cmp	r5, #71	@ 0x47
 800e734:	d114      	bne.n	800e760 <__cvt+0x7c>
 800e736:	07fb      	lsls	r3, r7, #31
 800e738:	d50a      	bpl.n	800e750 <__cvt+0x6c>
 800e73a:	1902      	adds	r2, r0, r4
 800e73c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e744:	bf08      	it	eq
 800e746:	9203      	streq	r2, [sp, #12]
 800e748:	2130      	movs	r1, #48	@ 0x30
 800e74a:	9b03      	ldr	r3, [sp, #12]
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d319      	bcc.n	800e784 <__cvt+0xa0>
 800e750:	9b03      	ldr	r3, [sp, #12]
 800e752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e754:	1a1b      	subs	r3, r3, r0
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	b005      	add	sp, #20
 800e75a:	ecbd 8b02 	vpop	{d8}
 800e75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e760:	2d46      	cmp	r5, #70	@ 0x46
 800e762:	eb00 0204 	add.w	r2, r0, r4
 800e766:	d1e9      	bne.n	800e73c <__cvt+0x58>
 800e768:	7803      	ldrb	r3, [r0, #0]
 800e76a:	2b30      	cmp	r3, #48	@ 0x30
 800e76c:	d107      	bne.n	800e77e <__cvt+0x9a>
 800e76e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e776:	bf1c      	itt	ne
 800e778:	f1c4 0401 	rsbne	r4, r4, #1
 800e77c:	6034      	strne	r4, [r6, #0]
 800e77e:	6833      	ldr	r3, [r6, #0]
 800e780:	441a      	add	r2, r3
 800e782:	e7db      	b.n	800e73c <__cvt+0x58>
 800e784:	1c5c      	adds	r4, r3, #1
 800e786:	9403      	str	r4, [sp, #12]
 800e788:	7019      	strb	r1, [r3, #0]
 800e78a:	e7de      	b.n	800e74a <__cvt+0x66>

0800e78c <__exponent>:
 800e78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e78e:	2900      	cmp	r1, #0
 800e790:	bfba      	itte	lt
 800e792:	4249      	neglt	r1, r1
 800e794:	232d      	movlt	r3, #45	@ 0x2d
 800e796:	232b      	movge	r3, #43	@ 0x2b
 800e798:	2909      	cmp	r1, #9
 800e79a:	7002      	strb	r2, [r0, #0]
 800e79c:	7043      	strb	r3, [r0, #1]
 800e79e:	dd29      	ble.n	800e7f4 <__exponent+0x68>
 800e7a0:	f10d 0307 	add.w	r3, sp, #7
 800e7a4:	461d      	mov	r5, r3
 800e7a6:	270a      	movs	r7, #10
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	fbb1 f6f7 	udiv	r6, r1, r7
 800e7ae:	fb07 1416 	mls	r4, r7, r6, r1
 800e7b2:	3430      	adds	r4, #48	@ 0x30
 800e7b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	2c63      	cmp	r4, #99	@ 0x63
 800e7bc:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	dcf1      	bgt.n	800e7a8 <__exponent+0x1c>
 800e7c4:	3130      	adds	r1, #48	@ 0x30
 800e7c6:	1e94      	subs	r4, r2, #2
 800e7c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e7cc:	1c41      	adds	r1, r0, #1
 800e7ce:	4623      	mov	r3, r4
 800e7d0:	42ab      	cmp	r3, r5
 800e7d2:	d30a      	bcc.n	800e7ea <__exponent+0x5e>
 800e7d4:	f10d 0309 	add.w	r3, sp, #9
 800e7d8:	1a9b      	subs	r3, r3, r2
 800e7da:	42ac      	cmp	r4, r5
 800e7dc:	bf88      	it	hi
 800e7de:	2300      	movhi	r3, #0
 800e7e0:	3302      	adds	r3, #2
 800e7e2:	4403      	add	r3, r0
 800e7e4:	1a18      	subs	r0, r3, r0
 800e7e6:	b003      	add	sp, #12
 800e7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e7ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e7f2:	e7ed      	b.n	800e7d0 <__exponent+0x44>
 800e7f4:	2330      	movs	r3, #48	@ 0x30
 800e7f6:	3130      	adds	r1, #48	@ 0x30
 800e7f8:	7083      	strb	r3, [r0, #2]
 800e7fa:	70c1      	strb	r1, [r0, #3]
 800e7fc:	1d03      	adds	r3, r0, #4
 800e7fe:	e7f1      	b.n	800e7e4 <__exponent+0x58>

0800e800 <_printf_float>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	b08d      	sub	sp, #52	@ 0x34
 800e806:	460c      	mov	r4, r1
 800e808:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e80c:	4616      	mov	r6, r2
 800e80e:	461f      	mov	r7, r3
 800e810:	4605      	mov	r5, r0
 800e812:	f000 fdbf 	bl	800f394 <_localeconv_r>
 800e816:	f8d0 b000 	ldr.w	fp, [r0]
 800e81a:	4658      	mov	r0, fp
 800e81c:	f7f1 fdc0 	bl	80003a0 <strlen>
 800e820:	2300      	movs	r3, #0
 800e822:	930a      	str	r3, [sp, #40]	@ 0x28
 800e824:	f8d8 3000 	ldr.w	r3, [r8]
 800e828:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e82c:	6822      	ldr	r2, [r4, #0]
 800e82e:	9005      	str	r0, [sp, #20]
 800e830:	3307      	adds	r3, #7
 800e832:	f023 0307 	bic.w	r3, r3, #7
 800e836:	f103 0108 	add.w	r1, r3, #8
 800e83a:	f8c8 1000 	str.w	r1, [r8]
 800e83e:	ed93 0b00 	vldr	d0, [r3]
 800e842:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800eaa0 <_printf_float+0x2a0>
 800e846:	eeb0 7bc0 	vabs.f64	d7, d0
 800e84a:	eeb4 7b46 	vcmp.f64	d7, d6
 800e84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e852:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e856:	dd24      	ble.n	800e8a2 <_printf_float+0xa2>
 800e858:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e860:	d502      	bpl.n	800e868 <_printf_float+0x68>
 800e862:	232d      	movs	r3, #45	@ 0x2d
 800e864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e868:	498f      	ldr	r1, [pc, #572]	@ (800eaa8 <_printf_float+0x2a8>)
 800e86a:	4b90      	ldr	r3, [pc, #576]	@ (800eaac <_printf_float+0x2ac>)
 800e86c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e870:	bf8c      	ite	hi
 800e872:	4688      	movhi	r8, r1
 800e874:	4698      	movls	r8, r3
 800e876:	f022 0204 	bic.w	r2, r2, #4
 800e87a:	2303      	movs	r3, #3
 800e87c:	6123      	str	r3, [r4, #16]
 800e87e:	6022      	str	r2, [r4, #0]
 800e880:	f04f 0a00 	mov.w	sl, #0
 800e884:	9700      	str	r7, [sp, #0]
 800e886:	4633      	mov	r3, r6
 800e888:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e88a:	4621      	mov	r1, r4
 800e88c:	4628      	mov	r0, r5
 800e88e:	f000 f9d1 	bl	800ec34 <_printf_common>
 800e892:	3001      	adds	r0, #1
 800e894:	f040 8089 	bne.w	800e9aa <_printf_float+0x1aa>
 800e898:	f04f 30ff 	mov.w	r0, #4294967295
 800e89c:	b00d      	add	sp, #52	@ 0x34
 800e89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a2:	eeb4 0b40 	vcmp.f64	d0, d0
 800e8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8aa:	d709      	bvc.n	800e8c0 <_printf_float+0xc0>
 800e8ac:	ee10 3a90 	vmov	r3, s1
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	bfbc      	itt	lt
 800e8b4:	232d      	movlt	r3, #45	@ 0x2d
 800e8b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e8ba:	497d      	ldr	r1, [pc, #500]	@ (800eab0 <_printf_float+0x2b0>)
 800e8bc:	4b7d      	ldr	r3, [pc, #500]	@ (800eab4 <_printf_float+0x2b4>)
 800e8be:	e7d5      	b.n	800e86c <_printf_float+0x6c>
 800e8c0:	6863      	ldr	r3, [r4, #4]
 800e8c2:	1c59      	adds	r1, r3, #1
 800e8c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e8c8:	d139      	bne.n	800e93e <_printf_float+0x13e>
 800e8ca:	2306      	movs	r3, #6
 800e8cc:	6063      	str	r3, [r4, #4]
 800e8ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	6022      	str	r2, [r4, #0]
 800e8d6:	9303      	str	r3, [sp, #12]
 800e8d8:	ab0a      	add	r3, sp, #40	@ 0x28
 800e8da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e8de:	ab09      	add	r3, sp, #36	@ 0x24
 800e8e0:	9300      	str	r3, [sp, #0]
 800e8e2:	6861      	ldr	r1, [r4, #4]
 800e8e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	f7ff fefb 	bl	800e6e4 <__cvt>
 800e8ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e8f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8f4:	4680      	mov	r8, r0
 800e8f6:	d129      	bne.n	800e94c <_printf_float+0x14c>
 800e8f8:	1cc8      	adds	r0, r1, #3
 800e8fa:	db02      	blt.n	800e902 <_printf_float+0x102>
 800e8fc:	6863      	ldr	r3, [r4, #4]
 800e8fe:	4299      	cmp	r1, r3
 800e900:	dd41      	ble.n	800e986 <_printf_float+0x186>
 800e902:	f1a9 0902 	sub.w	r9, r9, #2
 800e906:	fa5f f989 	uxtb.w	r9, r9
 800e90a:	3901      	subs	r1, #1
 800e90c:	464a      	mov	r2, r9
 800e90e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e912:	9109      	str	r1, [sp, #36]	@ 0x24
 800e914:	f7ff ff3a 	bl	800e78c <__exponent>
 800e918:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e91a:	1813      	adds	r3, r2, r0
 800e91c:	2a01      	cmp	r2, #1
 800e91e:	4682      	mov	sl, r0
 800e920:	6123      	str	r3, [r4, #16]
 800e922:	dc02      	bgt.n	800e92a <_printf_float+0x12a>
 800e924:	6822      	ldr	r2, [r4, #0]
 800e926:	07d2      	lsls	r2, r2, #31
 800e928:	d501      	bpl.n	800e92e <_printf_float+0x12e>
 800e92a:	3301      	adds	r3, #1
 800e92c:	6123      	str	r3, [r4, #16]
 800e92e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e932:	2b00      	cmp	r3, #0
 800e934:	d0a6      	beq.n	800e884 <_printf_float+0x84>
 800e936:	232d      	movs	r3, #45	@ 0x2d
 800e938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e93c:	e7a2      	b.n	800e884 <_printf_float+0x84>
 800e93e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e942:	d1c4      	bne.n	800e8ce <_printf_float+0xce>
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1c2      	bne.n	800e8ce <_printf_float+0xce>
 800e948:	2301      	movs	r3, #1
 800e94a:	e7bf      	b.n	800e8cc <_printf_float+0xcc>
 800e94c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e950:	d9db      	bls.n	800e90a <_printf_float+0x10a>
 800e952:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e956:	d118      	bne.n	800e98a <_printf_float+0x18a>
 800e958:	2900      	cmp	r1, #0
 800e95a:	6863      	ldr	r3, [r4, #4]
 800e95c:	dd0b      	ble.n	800e976 <_printf_float+0x176>
 800e95e:	6121      	str	r1, [r4, #16]
 800e960:	b913      	cbnz	r3, 800e968 <_printf_float+0x168>
 800e962:	6822      	ldr	r2, [r4, #0]
 800e964:	07d0      	lsls	r0, r2, #31
 800e966:	d502      	bpl.n	800e96e <_printf_float+0x16e>
 800e968:	3301      	adds	r3, #1
 800e96a:	440b      	add	r3, r1
 800e96c:	6123      	str	r3, [r4, #16]
 800e96e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e970:	f04f 0a00 	mov.w	sl, #0
 800e974:	e7db      	b.n	800e92e <_printf_float+0x12e>
 800e976:	b913      	cbnz	r3, 800e97e <_printf_float+0x17e>
 800e978:	6822      	ldr	r2, [r4, #0]
 800e97a:	07d2      	lsls	r2, r2, #31
 800e97c:	d501      	bpl.n	800e982 <_printf_float+0x182>
 800e97e:	3302      	adds	r3, #2
 800e980:	e7f4      	b.n	800e96c <_printf_float+0x16c>
 800e982:	2301      	movs	r3, #1
 800e984:	e7f2      	b.n	800e96c <_printf_float+0x16c>
 800e986:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e98a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e98c:	4299      	cmp	r1, r3
 800e98e:	db05      	blt.n	800e99c <_printf_float+0x19c>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	6121      	str	r1, [r4, #16]
 800e994:	07d8      	lsls	r0, r3, #31
 800e996:	d5ea      	bpl.n	800e96e <_printf_float+0x16e>
 800e998:	1c4b      	adds	r3, r1, #1
 800e99a:	e7e7      	b.n	800e96c <_printf_float+0x16c>
 800e99c:	2900      	cmp	r1, #0
 800e99e:	bfd4      	ite	le
 800e9a0:	f1c1 0202 	rsble	r2, r1, #2
 800e9a4:	2201      	movgt	r2, #1
 800e9a6:	4413      	add	r3, r2
 800e9a8:	e7e0      	b.n	800e96c <_printf_float+0x16c>
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	055a      	lsls	r2, r3, #21
 800e9ae:	d407      	bmi.n	800e9c0 <_printf_float+0x1c0>
 800e9b0:	6923      	ldr	r3, [r4, #16]
 800e9b2:	4642      	mov	r2, r8
 800e9b4:	4631      	mov	r1, r6
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	47b8      	blx	r7
 800e9ba:	3001      	adds	r0, #1
 800e9bc:	d12a      	bne.n	800ea14 <_printf_float+0x214>
 800e9be:	e76b      	b.n	800e898 <_printf_float+0x98>
 800e9c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e9c4:	f240 80e0 	bls.w	800eb88 <_printf_float+0x388>
 800e9c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e9cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d4:	d133      	bne.n	800ea3e <_printf_float+0x23e>
 800e9d6:	4a38      	ldr	r2, [pc, #224]	@ (800eab8 <_printf_float+0x2b8>)
 800e9d8:	2301      	movs	r3, #1
 800e9da:	4631      	mov	r1, r6
 800e9dc:	4628      	mov	r0, r5
 800e9de:	47b8      	blx	r7
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	f43f af59 	beq.w	800e898 <_printf_float+0x98>
 800e9e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e9ea:	4543      	cmp	r3, r8
 800e9ec:	db02      	blt.n	800e9f4 <_printf_float+0x1f4>
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	07d8      	lsls	r0, r3, #31
 800e9f2:	d50f      	bpl.n	800ea14 <_printf_float+0x214>
 800e9f4:	9b05      	ldr	r3, [sp, #20]
 800e9f6:	465a      	mov	r2, fp
 800e9f8:	4631      	mov	r1, r6
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	47b8      	blx	r7
 800e9fe:	3001      	adds	r0, #1
 800ea00:	f43f af4a 	beq.w	800e898 <_printf_float+0x98>
 800ea04:	f04f 0900 	mov.w	r9, #0
 800ea08:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea0c:	f104 0a1a 	add.w	sl, r4, #26
 800ea10:	45c8      	cmp	r8, r9
 800ea12:	dc09      	bgt.n	800ea28 <_printf_float+0x228>
 800ea14:	6823      	ldr	r3, [r4, #0]
 800ea16:	079b      	lsls	r3, r3, #30
 800ea18:	f100 8107 	bmi.w	800ec2a <_printf_float+0x42a>
 800ea1c:	68e0      	ldr	r0, [r4, #12]
 800ea1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea20:	4298      	cmp	r0, r3
 800ea22:	bfb8      	it	lt
 800ea24:	4618      	movlt	r0, r3
 800ea26:	e739      	b.n	800e89c <_printf_float+0x9c>
 800ea28:	2301      	movs	r3, #1
 800ea2a:	4652      	mov	r2, sl
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4628      	mov	r0, r5
 800ea30:	47b8      	blx	r7
 800ea32:	3001      	adds	r0, #1
 800ea34:	f43f af30 	beq.w	800e898 <_printf_float+0x98>
 800ea38:	f109 0901 	add.w	r9, r9, #1
 800ea3c:	e7e8      	b.n	800ea10 <_printf_float+0x210>
 800ea3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	dc3b      	bgt.n	800eabc <_printf_float+0x2bc>
 800ea44:	4a1c      	ldr	r2, [pc, #112]	@ (800eab8 <_printf_float+0x2b8>)
 800ea46:	2301      	movs	r3, #1
 800ea48:	4631      	mov	r1, r6
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	47b8      	blx	r7
 800ea4e:	3001      	adds	r0, #1
 800ea50:	f43f af22 	beq.w	800e898 <_printf_float+0x98>
 800ea54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ea58:	ea59 0303 	orrs.w	r3, r9, r3
 800ea5c:	d102      	bne.n	800ea64 <_printf_float+0x264>
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	07d9      	lsls	r1, r3, #31
 800ea62:	d5d7      	bpl.n	800ea14 <_printf_float+0x214>
 800ea64:	9b05      	ldr	r3, [sp, #20]
 800ea66:	465a      	mov	r2, fp
 800ea68:	4631      	mov	r1, r6
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	47b8      	blx	r7
 800ea6e:	3001      	adds	r0, #1
 800ea70:	f43f af12 	beq.w	800e898 <_printf_float+0x98>
 800ea74:	f04f 0a00 	mov.w	sl, #0
 800ea78:	f104 0b1a 	add.w	fp, r4, #26
 800ea7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea7e:	425b      	negs	r3, r3
 800ea80:	4553      	cmp	r3, sl
 800ea82:	dc01      	bgt.n	800ea88 <_printf_float+0x288>
 800ea84:	464b      	mov	r3, r9
 800ea86:	e794      	b.n	800e9b2 <_printf_float+0x1b2>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	465a      	mov	r2, fp
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	4628      	mov	r0, r5
 800ea90:	47b8      	blx	r7
 800ea92:	3001      	adds	r0, #1
 800ea94:	f43f af00 	beq.w	800e898 <_printf_float+0x98>
 800ea98:	f10a 0a01 	add.w	sl, sl, #1
 800ea9c:	e7ee      	b.n	800ea7c <_printf_float+0x27c>
 800ea9e:	bf00      	nop
 800eaa0:	ffffffff 	.word	0xffffffff
 800eaa4:	7fefffff 	.word	0x7fefffff
 800eaa8:	080119fa 	.word	0x080119fa
 800eaac:	080119f6 	.word	0x080119f6
 800eab0:	08011a02 	.word	0x08011a02
 800eab4:	080119fe 	.word	0x080119fe
 800eab8:	08011a06 	.word	0x08011a06
 800eabc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eabe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eac2:	4553      	cmp	r3, sl
 800eac4:	bfa8      	it	ge
 800eac6:	4653      	movge	r3, sl
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	4699      	mov	r9, r3
 800eacc:	dc37      	bgt.n	800eb3e <_printf_float+0x33e>
 800eace:	2300      	movs	r3, #0
 800ead0:	9307      	str	r3, [sp, #28]
 800ead2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ead6:	f104 021a 	add.w	r2, r4, #26
 800eada:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eadc:	9907      	ldr	r1, [sp, #28]
 800eade:	9306      	str	r3, [sp, #24]
 800eae0:	eba3 0309 	sub.w	r3, r3, r9
 800eae4:	428b      	cmp	r3, r1
 800eae6:	dc31      	bgt.n	800eb4c <_printf_float+0x34c>
 800eae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaea:	459a      	cmp	sl, r3
 800eaec:	dc3b      	bgt.n	800eb66 <_printf_float+0x366>
 800eaee:	6823      	ldr	r3, [r4, #0]
 800eaf0:	07da      	lsls	r2, r3, #31
 800eaf2:	d438      	bmi.n	800eb66 <_printf_float+0x366>
 800eaf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaf6:	ebaa 0903 	sub.w	r9, sl, r3
 800eafa:	9b06      	ldr	r3, [sp, #24]
 800eafc:	ebaa 0303 	sub.w	r3, sl, r3
 800eb00:	4599      	cmp	r9, r3
 800eb02:	bfa8      	it	ge
 800eb04:	4699      	movge	r9, r3
 800eb06:	f1b9 0f00 	cmp.w	r9, #0
 800eb0a:	dc34      	bgt.n	800eb76 <_printf_float+0x376>
 800eb0c:	f04f 0800 	mov.w	r8, #0
 800eb10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb14:	f104 0b1a 	add.w	fp, r4, #26
 800eb18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb1a:	ebaa 0303 	sub.w	r3, sl, r3
 800eb1e:	eba3 0309 	sub.w	r3, r3, r9
 800eb22:	4543      	cmp	r3, r8
 800eb24:	f77f af76 	ble.w	800ea14 <_printf_float+0x214>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	465a      	mov	r2, fp
 800eb2c:	4631      	mov	r1, r6
 800eb2e:	4628      	mov	r0, r5
 800eb30:	47b8      	blx	r7
 800eb32:	3001      	adds	r0, #1
 800eb34:	f43f aeb0 	beq.w	800e898 <_printf_float+0x98>
 800eb38:	f108 0801 	add.w	r8, r8, #1
 800eb3c:	e7ec      	b.n	800eb18 <_printf_float+0x318>
 800eb3e:	4642      	mov	r2, r8
 800eb40:	4631      	mov	r1, r6
 800eb42:	4628      	mov	r0, r5
 800eb44:	47b8      	blx	r7
 800eb46:	3001      	adds	r0, #1
 800eb48:	d1c1      	bne.n	800eace <_printf_float+0x2ce>
 800eb4a:	e6a5      	b.n	800e898 <_printf_float+0x98>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	4631      	mov	r1, r6
 800eb50:	4628      	mov	r0, r5
 800eb52:	9206      	str	r2, [sp, #24]
 800eb54:	47b8      	blx	r7
 800eb56:	3001      	adds	r0, #1
 800eb58:	f43f ae9e 	beq.w	800e898 <_printf_float+0x98>
 800eb5c:	9b07      	ldr	r3, [sp, #28]
 800eb5e:	9a06      	ldr	r2, [sp, #24]
 800eb60:	3301      	adds	r3, #1
 800eb62:	9307      	str	r3, [sp, #28]
 800eb64:	e7b9      	b.n	800eada <_printf_float+0x2da>
 800eb66:	9b05      	ldr	r3, [sp, #20]
 800eb68:	465a      	mov	r2, fp
 800eb6a:	4631      	mov	r1, r6
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	47b8      	blx	r7
 800eb70:	3001      	adds	r0, #1
 800eb72:	d1bf      	bne.n	800eaf4 <_printf_float+0x2f4>
 800eb74:	e690      	b.n	800e898 <_printf_float+0x98>
 800eb76:	9a06      	ldr	r2, [sp, #24]
 800eb78:	464b      	mov	r3, r9
 800eb7a:	4442      	add	r2, r8
 800eb7c:	4631      	mov	r1, r6
 800eb7e:	4628      	mov	r0, r5
 800eb80:	47b8      	blx	r7
 800eb82:	3001      	adds	r0, #1
 800eb84:	d1c2      	bne.n	800eb0c <_printf_float+0x30c>
 800eb86:	e687      	b.n	800e898 <_printf_float+0x98>
 800eb88:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800eb8c:	f1b9 0f01 	cmp.w	r9, #1
 800eb90:	dc01      	bgt.n	800eb96 <_printf_float+0x396>
 800eb92:	07db      	lsls	r3, r3, #31
 800eb94:	d536      	bpl.n	800ec04 <_printf_float+0x404>
 800eb96:	2301      	movs	r3, #1
 800eb98:	4642      	mov	r2, r8
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	47b8      	blx	r7
 800eba0:	3001      	adds	r0, #1
 800eba2:	f43f ae79 	beq.w	800e898 <_printf_float+0x98>
 800eba6:	9b05      	ldr	r3, [sp, #20]
 800eba8:	465a      	mov	r2, fp
 800ebaa:	4631      	mov	r1, r6
 800ebac:	4628      	mov	r0, r5
 800ebae:	47b8      	blx	r7
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	f43f ae71 	beq.w	800e898 <_printf_float+0x98>
 800ebb6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ebba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ebbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc2:	f109 39ff 	add.w	r9, r9, #4294967295
 800ebc6:	d018      	beq.n	800ebfa <_printf_float+0x3fa>
 800ebc8:	464b      	mov	r3, r9
 800ebca:	f108 0201 	add.w	r2, r8, #1
 800ebce:	4631      	mov	r1, r6
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	47b8      	blx	r7
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d10c      	bne.n	800ebf2 <_printf_float+0x3f2>
 800ebd8:	e65e      	b.n	800e898 <_printf_float+0x98>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	465a      	mov	r2, fp
 800ebde:	4631      	mov	r1, r6
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	47b8      	blx	r7
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	f43f ae57 	beq.w	800e898 <_printf_float+0x98>
 800ebea:	f108 0801 	add.w	r8, r8, #1
 800ebee:	45c8      	cmp	r8, r9
 800ebf0:	dbf3      	blt.n	800ebda <_printf_float+0x3da>
 800ebf2:	4653      	mov	r3, sl
 800ebf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ebf8:	e6dc      	b.n	800e9b4 <_printf_float+0x1b4>
 800ebfa:	f04f 0800 	mov.w	r8, #0
 800ebfe:	f104 0b1a 	add.w	fp, r4, #26
 800ec02:	e7f4      	b.n	800ebee <_printf_float+0x3ee>
 800ec04:	2301      	movs	r3, #1
 800ec06:	4642      	mov	r2, r8
 800ec08:	e7e1      	b.n	800ebce <_printf_float+0x3ce>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	464a      	mov	r2, r9
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b8      	blx	r7
 800ec14:	3001      	adds	r0, #1
 800ec16:	f43f ae3f 	beq.w	800e898 <_printf_float+0x98>
 800ec1a:	f108 0801 	add.w	r8, r8, #1
 800ec1e:	68e3      	ldr	r3, [r4, #12]
 800ec20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec22:	1a5b      	subs	r3, r3, r1
 800ec24:	4543      	cmp	r3, r8
 800ec26:	dcf0      	bgt.n	800ec0a <_printf_float+0x40a>
 800ec28:	e6f8      	b.n	800ea1c <_printf_float+0x21c>
 800ec2a:	f04f 0800 	mov.w	r8, #0
 800ec2e:	f104 0919 	add.w	r9, r4, #25
 800ec32:	e7f4      	b.n	800ec1e <_printf_float+0x41e>

0800ec34 <_printf_common>:
 800ec34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec38:	4616      	mov	r6, r2
 800ec3a:	4698      	mov	r8, r3
 800ec3c:	688a      	ldr	r2, [r1, #8]
 800ec3e:	690b      	ldr	r3, [r1, #16]
 800ec40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec44:	4293      	cmp	r3, r2
 800ec46:	bfb8      	it	lt
 800ec48:	4613      	movlt	r3, r2
 800ec4a:	6033      	str	r3, [r6, #0]
 800ec4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec50:	4607      	mov	r7, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	b10a      	cbz	r2, 800ec5a <_printf_common+0x26>
 800ec56:	3301      	adds	r3, #1
 800ec58:	6033      	str	r3, [r6, #0]
 800ec5a:	6823      	ldr	r3, [r4, #0]
 800ec5c:	0699      	lsls	r1, r3, #26
 800ec5e:	bf42      	ittt	mi
 800ec60:	6833      	ldrmi	r3, [r6, #0]
 800ec62:	3302      	addmi	r3, #2
 800ec64:	6033      	strmi	r3, [r6, #0]
 800ec66:	6825      	ldr	r5, [r4, #0]
 800ec68:	f015 0506 	ands.w	r5, r5, #6
 800ec6c:	d106      	bne.n	800ec7c <_printf_common+0x48>
 800ec6e:	f104 0a19 	add.w	sl, r4, #25
 800ec72:	68e3      	ldr	r3, [r4, #12]
 800ec74:	6832      	ldr	r2, [r6, #0]
 800ec76:	1a9b      	subs	r3, r3, r2
 800ec78:	42ab      	cmp	r3, r5
 800ec7a:	dc26      	bgt.n	800ecca <_printf_common+0x96>
 800ec7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec80:	6822      	ldr	r2, [r4, #0]
 800ec82:	3b00      	subs	r3, #0
 800ec84:	bf18      	it	ne
 800ec86:	2301      	movne	r3, #1
 800ec88:	0692      	lsls	r2, r2, #26
 800ec8a:	d42b      	bmi.n	800ece4 <_printf_common+0xb0>
 800ec8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec90:	4641      	mov	r1, r8
 800ec92:	4638      	mov	r0, r7
 800ec94:	47c8      	blx	r9
 800ec96:	3001      	adds	r0, #1
 800ec98:	d01e      	beq.n	800ecd8 <_printf_common+0xa4>
 800ec9a:	6823      	ldr	r3, [r4, #0]
 800ec9c:	6922      	ldr	r2, [r4, #16]
 800ec9e:	f003 0306 	and.w	r3, r3, #6
 800eca2:	2b04      	cmp	r3, #4
 800eca4:	bf02      	ittt	eq
 800eca6:	68e5      	ldreq	r5, [r4, #12]
 800eca8:	6833      	ldreq	r3, [r6, #0]
 800ecaa:	1aed      	subeq	r5, r5, r3
 800ecac:	68a3      	ldr	r3, [r4, #8]
 800ecae:	bf0c      	ite	eq
 800ecb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecb4:	2500      	movne	r5, #0
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	bfc4      	itt	gt
 800ecba:	1a9b      	subgt	r3, r3, r2
 800ecbc:	18ed      	addgt	r5, r5, r3
 800ecbe:	2600      	movs	r6, #0
 800ecc0:	341a      	adds	r4, #26
 800ecc2:	42b5      	cmp	r5, r6
 800ecc4:	d11a      	bne.n	800ecfc <_printf_common+0xc8>
 800ecc6:	2000      	movs	r0, #0
 800ecc8:	e008      	b.n	800ecdc <_printf_common+0xa8>
 800ecca:	2301      	movs	r3, #1
 800eccc:	4652      	mov	r2, sl
 800ecce:	4641      	mov	r1, r8
 800ecd0:	4638      	mov	r0, r7
 800ecd2:	47c8      	blx	r9
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	d103      	bne.n	800ece0 <_printf_common+0xac>
 800ecd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece0:	3501      	adds	r5, #1
 800ece2:	e7c6      	b.n	800ec72 <_printf_common+0x3e>
 800ece4:	18e1      	adds	r1, r4, r3
 800ece6:	1c5a      	adds	r2, r3, #1
 800ece8:	2030      	movs	r0, #48	@ 0x30
 800ecea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecee:	4422      	add	r2, r4
 800ecf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ecf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ecf8:	3302      	adds	r3, #2
 800ecfa:	e7c7      	b.n	800ec8c <_printf_common+0x58>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	4622      	mov	r2, r4
 800ed00:	4641      	mov	r1, r8
 800ed02:	4638      	mov	r0, r7
 800ed04:	47c8      	blx	r9
 800ed06:	3001      	adds	r0, #1
 800ed08:	d0e6      	beq.n	800ecd8 <_printf_common+0xa4>
 800ed0a:	3601      	adds	r6, #1
 800ed0c:	e7d9      	b.n	800ecc2 <_printf_common+0x8e>
	...

0800ed10 <_printf_i>:
 800ed10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed14:	7e0f      	ldrb	r7, [r1, #24]
 800ed16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed18:	2f78      	cmp	r7, #120	@ 0x78
 800ed1a:	4691      	mov	r9, r2
 800ed1c:	4680      	mov	r8, r0
 800ed1e:	460c      	mov	r4, r1
 800ed20:	469a      	mov	sl, r3
 800ed22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed26:	d807      	bhi.n	800ed38 <_printf_i+0x28>
 800ed28:	2f62      	cmp	r7, #98	@ 0x62
 800ed2a:	d80a      	bhi.n	800ed42 <_printf_i+0x32>
 800ed2c:	2f00      	cmp	r7, #0
 800ed2e:	f000 80d1 	beq.w	800eed4 <_printf_i+0x1c4>
 800ed32:	2f58      	cmp	r7, #88	@ 0x58
 800ed34:	f000 80b8 	beq.w	800eea8 <_printf_i+0x198>
 800ed38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed40:	e03a      	b.n	800edb8 <_printf_i+0xa8>
 800ed42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed46:	2b15      	cmp	r3, #21
 800ed48:	d8f6      	bhi.n	800ed38 <_printf_i+0x28>
 800ed4a:	a101      	add	r1, pc, #4	@ (adr r1, 800ed50 <_printf_i+0x40>)
 800ed4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed50:	0800eda9 	.word	0x0800eda9
 800ed54:	0800edbd 	.word	0x0800edbd
 800ed58:	0800ed39 	.word	0x0800ed39
 800ed5c:	0800ed39 	.word	0x0800ed39
 800ed60:	0800ed39 	.word	0x0800ed39
 800ed64:	0800ed39 	.word	0x0800ed39
 800ed68:	0800edbd 	.word	0x0800edbd
 800ed6c:	0800ed39 	.word	0x0800ed39
 800ed70:	0800ed39 	.word	0x0800ed39
 800ed74:	0800ed39 	.word	0x0800ed39
 800ed78:	0800ed39 	.word	0x0800ed39
 800ed7c:	0800eebb 	.word	0x0800eebb
 800ed80:	0800ede7 	.word	0x0800ede7
 800ed84:	0800ee75 	.word	0x0800ee75
 800ed88:	0800ed39 	.word	0x0800ed39
 800ed8c:	0800ed39 	.word	0x0800ed39
 800ed90:	0800eedd 	.word	0x0800eedd
 800ed94:	0800ed39 	.word	0x0800ed39
 800ed98:	0800ede7 	.word	0x0800ede7
 800ed9c:	0800ed39 	.word	0x0800ed39
 800eda0:	0800ed39 	.word	0x0800ed39
 800eda4:	0800ee7d 	.word	0x0800ee7d
 800eda8:	6833      	ldr	r3, [r6, #0]
 800edaa:	1d1a      	adds	r2, r3, #4
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	6032      	str	r2, [r6, #0]
 800edb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800edb8:	2301      	movs	r3, #1
 800edba:	e09c      	b.n	800eef6 <_printf_i+0x1e6>
 800edbc:	6833      	ldr	r3, [r6, #0]
 800edbe:	6820      	ldr	r0, [r4, #0]
 800edc0:	1d19      	adds	r1, r3, #4
 800edc2:	6031      	str	r1, [r6, #0]
 800edc4:	0606      	lsls	r6, r0, #24
 800edc6:	d501      	bpl.n	800edcc <_printf_i+0xbc>
 800edc8:	681d      	ldr	r5, [r3, #0]
 800edca:	e003      	b.n	800edd4 <_printf_i+0xc4>
 800edcc:	0645      	lsls	r5, r0, #25
 800edce:	d5fb      	bpl.n	800edc8 <_printf_i+0xb8>
 800edd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edd4:	2d00      	cmp	r5, #0
 800edd6:	da03      	bge.n	800ede0 <_printf_i+0xd0>
 800edd8:	232d      	movs	r3, #45	@ 0x2d
 800edda:	426d      	negs	r5, r5
 800eddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ede0:	4858      	ldr	r0, [pc, #352]	@ (800ef44 <_printf_i+0x234>)
 800ede2:	230a      	movs	r3, #10
 800ede4:	e011      	b.n	800ee0a <_printf_i+0xfa>
 800ede6:	6821      	ldr	r1, [r4, #0]
 800ede8:	6833      	ldr	r3, [r6, #0]
 800edea:	0608      	lsls	r0, r1, #24
 800edec:	f853 5b04 	ldr.w	r5, [r3], #4
 800edf0:	d402      	bmi.n	800edf8 <_printf_i+0xe8>
 800edf2:	0649      	lsls	r1, r1, #25
 800edf4:	bf48      	it	mi
 800edf6:	b2ad      	uxthmi	r5, r5
 800edf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800edfa:	4852      	ldr	r0, [pc, #328]	@ (800ef44 <_printf_i+0x234>)
 800edfc:	6033      	str	r3, [r6, #0]
 800edfe:	bf14      	ite	ne
 800ee00:	230a      	movne	r3, #10
 800ee02:	2308      	moveq	r3, #8
 800ee04:	2100      	movs	r1, #0
 800ee06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee0a:	6866      	ldr	r6, [r4, #4]
 800ee0c:	60a6      	str	r6, [r4, #8]
 800ee0e:	2e00      	cmp	r6, #0
 800ee10:	db05      	blt.n	800ee1e <_printf_i+0x10e>
 800ee12:	6821      	ldr	r1, [r4, #0]
 800ee14:	432e      	orrs	r6, r5
 800ee16:	f021 0104 	bic.w	r1, r1, #4
 800ee1a:	6021      	str	r1, [r4, #0]
 800ee1c:	d04b      	beq.n	800eeb6 <_printf_i+0x1a6>
 800ee1e:	4616      	mov	r6, r2
 800ee20:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee24:	fb03 5711 	mls	r7, r3, r1, r5
 800ee28:	5dc7      	ldrb	r7, [r0, r7]
 800ee2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee2e:	462f      	mov	r7, r5
 800ee30:	42bb      	cmp	r3, r7
 800ee32:	460d      	mov	r5, r1
 800ee34:	d9f4      	bls.n	800ee20 <_printf_i+0x110>
 800ee36:	2b08      	cmp	r3, #8
 800ee38:	d10b      	bne.n	800ee52 <_printf_i+0x142>
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	07df      	lsls	r7, r3, #31
 800ee3e:	d508      	bpl.n	800ee52 <_printf_i+0x142>
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	6861      	ldr	r1, [r4, #4]
 800ee44:	4299      	cmp	r1, r3
 800ee46:	bfde      	ittt	le
 800ee48:	2330      	movle	r3, #48	@ 0x30
 800ee4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee52:	1b92      	subs	r2, r2, r6
 800ee54:	6122      	str	r2, [r4, #16]
 800ee56:	f8cd a000 	str.w	sl, [sp]
 800ee5a:	464b      	mov	r3, r9
 800ee5c:	aa03      	add	r2, sp, #12
 800ee5e:	4621      	mov	r1, r4
 800ee60:	4640      	mov	r0, r8
 800ee62:	f7ff fee7 	bl	800ec34 <_printf_common>
 800ee66:	3001      	adds	r0, #1
 800ee68:	d14a      	bne.n	800ef00 <_printf_i+0x1f0>
 800ee6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee6e:	b004      	add	sp, #16
 800ee70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee74:	6823      	ldr	r3, [r4, #0]
 800ee76:	f043 0320 	orr.w	r3, r3, #32
 800ee7a:	6023      	str	r3, [r4, #0]
 800ee7c:	4832      	ldr	r0, [pc, #200]	@ (800ef48 <_printf_i+0x238>)
 800ee7e:	2778      	movs	r7, #120	@ 0x78
 800ee80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee84:	6823      	ldr	r3, [r4, #0]
 800ee86:	6831      	ldr	r1, [r6, #0]
 800ee88:	061f      	lsls	r7, r3, #24
 800ee8a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee8e:	d402      	bmi.n	800ee96 <_printf_i+0x186>
 800ee90:	065f      	lsls	r7, r3, #25
 800ee92:	bf48      	it	mi
 800ee94:	b2ad      	uxthmi	r5, r5
 800ee96:	6031      	str	r1, [r6, #0]
 800ee98:	07d9      	lsls	r1, r3, #31
 800ee9a:	bf44      	itt	mi
 800ee9c:	f043 0320 	orrmi.w	r3, r3, #32
 800eea0:	6023      	strmi	r3, [r4, #0]
 800eea2:	b11d      	cbz	r5, 800eeac <_printf_i+0x19c>
 800eea4:	2310      	movs	r3, #16
 800eea6:	e7ad      	b.n	800ee04 <_printf_i+0xf4>
 800eea8:	4826      	ldr	r0, [pc, #152]	@ (800ef44 <_printf_i+0x234>)
 800eeaa:	e7e9      	b.n	800ee80 <_printf_i+0x170>
 800eeac:	6823      	ldr	r3, [r4, #0]
 800eeae:	f023 0320 	bic.w	r3, r3, #32
 800eeb2:	6023      	str	r3, [r4, #0]
 800eeb4:	e7f6      	b.n	800eea4 <_printf_i+0x194>
 800eeb6:	4616      	mov	r6, r2
 800eeb8:	e7bd      	b.n	800ee36 <_printf_i+0x126>
 800eeba:	6833      	ldr	r3, [r6, #0]
 800eebc:	6825      	ldr	r5, [r4, #0]
 800eebe:	6961      	ldr	r1, [r4, #20]
 800eec0:	1d18      	adds	r0, r3, #4
 800eec2:	6030      	str	r0, [r6, #0]
 800eec4:	062e      	lsls	r6, r5, #24
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	d501      	bpl.n	800eece <_printf_i+0x1be>
 800eeca:	6019      	str	r1, [r3, #0]
 800eecc:	e002      	b.n	800eed4 <_printf_i+0x1c4>
 800eece:	0668      	lsls	r0, r5, #25
 800eed0:	d5fb      	bpl.n	800eeca <_printf_i+0x1ba>
 800eed2:	8019      	strh	r1, [r3, #0]
 800eed4:	2300      	movs	r3, #0
 800eed6:	6123      	str	r3, [r4, #16]
 800eed8:	4616      	mov	r6, r2
 800eeda:	e7bc      	b.n	800ee56 <_printf_i+0x146>
 800eedc:	6833      	ldr	r3, [r6, #0]
 800eede:	1d1a      	adds	r2, r3, #4
 800eee0:	6032      	str	r2, [r6, #0]
 800eee2:	681e      	ldr	r6, [r3, #0]
 800eee4:	6862      	ldr	r2, [r4, #4]
 800eee6:	2100      	movs	r1, #0
 800eee8:	4630      	mov	r0, r6
 800eeea:	f7f1 fa09 	bl	8000300 <memchr>
 800eeee:	b108      	cbz	r0, 800eef4 <_printf_i+0x1e4>
 800eef0:	1b80      	subs	r0, r0, r6
 800eef2:	6060      	str	r0, [r4, #4]
 800eef4:	6863      	ldr	r3, [r4, #4]
 800eef6:	6123      	str	r3, [r4, #16]
 800eef8:	2300      	movs	r3, #0
 800eefa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eefe:	e7aa      	b.n	800ee56 <_printf_i+0x146>
 800ef00:	6923      	ldr	r3, [r4, #16]
 800ef02:	4632      	mov	r2, r6
 800ef04:	4649      	mov	r1, r9
 800ef06:	4640      	mov	r0, r8
 800ef08:	47d0      	blx	sl
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	d0ad      	beq.n	800ee6a <_printf_i+0x15a>
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	079b      	lsls	r3, r3, #30
 800ef12:	d413      	bmi.n	800ef3c <_printf_i+0x22c>
 800ef14:	68e0      	ldr	r0, [r4, #12]
 800ef16:	9b03      	ldr	r3, [sp, #12]
 800ef18:	4298      	cmp	r0, r3
 800ef1a:	bfb8      	it	lt
 800ef1c:	4618      	movlt	r0, r3
 800ef1e:	e7a6      	b.n	800ee6e <_printf_i+0x15e>
 800ef20:	2301      	movs	r3, #1
 800ef22:	4632      	mov	r2, r6
 800ef24:	4649      	mov	r1, r9
 800ef26:	4640      	mov	r0, r8
 800ef28:	47d0      	blx	sl
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	d09d      	beq.n	800ee6a <_printf_i+0x15a>
 800ef2e:	3501      	adds	r5, #1
 800ef30:	68e3      	ldr	r3, [r4, #12]
 800ef32:	9903      	ldr	r1, [sp, #12]
 800ef34:	1a5b      	subs	r3, r3, r1
 800ef36:	42ab      	cmp	r3, r5
 800ef38:	dcf2      	bgt.n	800ef20 <_printf_i+0x210>
 800ef3a:	e7eb      	b.n	800ef14 <_printf_i+0x204>
 800ef3c:	2500      	movs	r5, #0
 800ef3e:	f104 0619 	add.w	r6, r4, #25
 800ef42:	e7f5      	b.n	800ef30 <_printf_i+0x220>
 800ef44:	08011a08 	.word	0x08011a08
 800ef48:	08011a19 	.word	0x08011a19

0800ef4c <std>:
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	b510      	push	{r4, lr}
 800ef50:	4604      	mov	r4, r0
 800ef52:	e9c0 3300 	strd	r3, r3, [r0]
 800ef56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef5a:	6083      	str	r3, [r0, #8]
 800ef5c:	8181      	strh	r1, [r0, #12]
 800ef5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ef60:	81c2      	strh	r2, [r0, #14]
 800ef62:	6183      	str	r3, [r0, #24]
 800ef64:	4619      	mov	r1, r3
 800ef66:	2208      	movs	r2, #8
 800ef68:	305c      	adds	r0, #92	@ 0x5c
 800ef6a:	f000 f9f9 	bl	800f360 <memset>
 800ef6e:	4b0d      	ldr	r3, [pc, #52]	@ (800efa4 <std+0x58>)
 800ef70:	6263      	str	r3, [r4, #36]	@ 0x24
 800ef72:	4b0d      	ldr	r3, [pc, #52]	@ (800efa8 <std+0x5c>)
 800ef74:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ef76:	4b0d      	ldr	r3, [pc, #52]	@ (800efac <std+0x60>)
 800ef78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef7a:	4b0d      	ldr	r3, [pc, #52]	@ (800efb0 <std+0x64>)
 800ef7c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef7e:	4b0d      	ldr	r3, [pc, #52]	@ (800efb4 <std+0x68>)
 800ef80:	6224      	str	r4, [r4, #32]
 800ef82:	429c      	cmp	r4, r3
 800ef84:	d006      	beq.n	800ef94 <std+0x48>
 800ef86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ef8a:	4294      	cmp	r4, r2
 800ef8c:	d002      	beq.n	800ef94 <std+0x48>
 800ef8e:	33d0      	adds	r3, #208	@ 0xd0
 800ef90:	429c      	cmp	r4, r3
 800ef92:	d105      	bne.n	800efa0 <std+0x54>
 800ef94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ef98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef9c:	f000 ba6e 	b.w	800f47c <__retarget_lock_init_recursive>
 800efa0:	bd10      	pop	{r4, pc}
 800efa2:	bf00      	nop
 800efa4:	0800f1b1 	.word	0x0800f1b1
 800efa8:	0800f1d3 	.word	0x0800f1d3
 800efac:	0800f20b 	.word	0x0800f20b
 800efb0:	0800f22f 	.word	0x0800f22f
 800efb4:	2400383c 	.word	0x2400383c

0800efb8 <stdio_exit_handler>:
 800efb8:	4a02      	ldr	r2, [pc, #8]	@ (800efc4 <stdio_exit_handler+0xc>)
 800efba:	4903      	ldr	r1, [pc, #12]	@ (800efc8 <stdio_exit_handler+0x10>)
 800efbc:	4803      	ldr	r0, [pc, #12]	@ (800efcc <stdio_exit_handler+0x14>)
 800efbe:	f000 b869 	b.w	800f094 <_fwalk_sglue>
 800efc2:	bf00      	nop
 800efc4:	24000104 	.word	0x24000104
 800efc8:	08011629 	.word	0x08011629
 800efcc:	24000280 	.word	0x24000280

0800efd0 <cleanup_stdio>:
 800efd0:	6841      	ldr	r1, [r0, #4]
 800efd2:	4b0c      	ldr	r3, [pc, #48]	@ (800f004 <cleanup_stdio+0x34>)
 800efd4:	4299      	cmp	r1, r3
 800efd6:	b510      	push	{r4, lr}
 800efd8:	4604      	mov	r4, r0
 800efda:	d001      	beq.n	800efe0 <cleanup_stdio+0x10>
 800efdc:	f002 fb24 	bl	8011628 <_fflush_r>
 800efe0:	68a1      	ldr	r1, [r4, #8]
 800efe2:	4b09      	ldr	r3, [pc, #36]	@ (800f008 <cleanup_stdio+0x38>)
 800efe4:	4299      	cmp	r1, r3
 800efe6:	d002      	beq.n	800efee <cleanup_stdio+0x1e>
 800efe8:	4620      	mov	r0, r4
 800efea:	f002 fb1d 	bl	8011628 <_fflush_r>
 800efee:	68e1      	ldr	r1, [r4, #12]
 800eff0:	4b06      	ldr	r3, [pc, #24]	@ (800f00c <cleanup_stdio+0x3c>)
 800eff2:	4299      	cmp	r1, r3
 800eff4:	d004      	beq.n	800f000 <cleanup_stdio+0x30>
 800eff6:	4620      	mov	r0, r4
 800eff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800effc:	f002 bb14 	b.w	8011628 <_fflush_r>
 800f000:	bd10      	pop	{r4, pc}
 800f002:	bf00      	nop
 800f004:	2400383c 	.word	0x2400383c
 800f008:	240038a4 	.word	0x240038a4
 800f00c:	2400390c 	.word	0x2400390c

0800f010 <global_stdio_init.part.0>:
 800f010:	b510      	push	{r4, lr}
 800f012:	4b0b      	ldr	r3, [pc, #44]	@ (800f040 <global_stdio_init.part.0+0x30>)
 800f014:	4c0b      	ldr	r4, [pc, #44]	@ (800f044 <global_stdio_init.part.0+0x34>)
 800f016:	4a0c      	ldr	r2, [pc, #48]	@ (800f048 <global_stdio_init.part.0+0x38>)
 800f018:	601a      	str	r2, [r3, #0]
 800f01a:	4620      	mov	r0, r4
 800f01c:	2200      	movs	r2, #0
 800f01e:	2104      	movs	r1, #4
 800f020:	f7ff ff94 	bl	800ef4c <std>
 800f024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f028:	2201      	movs	r2, #1
 800f02a:	2109      	movs	r1, #9
 800f02c:	f7ff ff8e 	bl	800ef4c <std>
 800f030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f034:	2202      	movs	r2, #2
 800f036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f03a:	2112      	movs	r1, #18
 800f03c:	f7ff bf86 	b.w	800ef4c <std>
 800f040:	24003974 	.word	0x24003974
 800f044:	2400383c 	.word	0x2400383c
 800f048:	0800efb9 	.word	0x0800efb9

0800f04c <__sfp_lock_acquire>:
 800f04c:	4801      	ldr	r0, [pc, #4]	@ (800f054 <__sfp_lock_acquire+0x8>)
 800f04e:	f000 ba16 	b.w	800f47e <__retarget_lock_acquire_recursive>
 800f052:	bf00      	nop
 800f054:	2400397d 	.word	0x2400397d

0800f058 <__sfp_lock_release>:
 800f058:	4801      	ldr	r0, [pc, #4]	@ (800f060 <__sfp_lock_release+0x8>)
 800f05a:	f000 ba11 	b.w	800f480 <__retarget_lock_release_recursive>
 800f05e:	bf00      	nop
 800f060:	2400397d 	.word	0x2400397d

0800f064 <__sinit>:
 800f064:	b510      	push	{r4, lr}
 800f066:	4604      	mov	r4, r0
 800f068:	f7ff fff0 	bl	800f04c <__sfp_lock_acquire>
 800f06c:	6a23      	ldr	r3, [r4, #32]
 800f06e:	b11b      	cbz	r3, 800f078 <__sinit+0x14>
 800f070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f074:	f7ff bff0 	b.w	800f058 <__sfp_lock_release>
 800f078:	4b04      	ldr	r3, [pc, #16]	@ (800f08c <__sinit+0x28>)
 800f07a:	6223      	str	r3, [r4, #32]
 800f07c:	4b04      	ldr	r3, [pc, #16]	@ (800f090 <__sinit+0x2c>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d1f5      	bne.n	800f070 <__sinit+0xc>
 800f084:	f7ff ffc4 	bl	800f010 <global_stdio_init.part.0>
 800f088:	e7f2      	b.n	800f070 <__sinit+0xc>
 800f08a:	bf00      	nop
 800f08c:	0800efd1 	.word	0x0800efd1
 800f090:	24003974 	.word	0x24003974

0800f094 <_fwalk_sglue>:
 800f094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f098:	4607      	mov	r7, r0
 800f09a:	4688      	mov	r8, r1
 800f09c:	4614      	mov	r4, r2
 800f09e:	2600      	movs	r6, #0
 800f0a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0a4:	f1b9 0901 	subs.w	r9, r9, #1
 800f0a8:	d505      	bpl.n	800f0b6 <_fwalk_sglue+0x22>
 800f0aa:	6824      	ldr	r4, [r4, #0]
 800f0ac:	2c00      	cmp	r4, #0
 800f0ae:	d1f7      	bne.n	800f0a0 <_fwalk_sglue+0xc>
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b6:	89ab      	ldrh	r3, [r5, #12]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d907      	bls.n	800f0cc <_fwalk_sglue+0x38>
 800f0bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	d003      	beq.n	800f0cc <_fwalk_sglue+0x38>
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	4638      	mov	r0, r7
 800f0c8:	47c0      	blx	r8
 800f0ca:	4306      	orrs	r6, r0
 800f0cc:	3568      	adds	r5, #104	@ 0x68
 800f0ce:	e7e9      	b.n	800f0a4 <_fwalk_sglue+0x10>

0800f0d0 <iprintf>:
 800f0d0:	b40f      	push	{r0, r1, r2, r3}
 800f0d2:	b507      	push	{r0, r1, r2, lr}
 800f0d4:	4906      	ldr	r1, [pc, #24]	@ (800f0f0 <iprintf+0x20>)
 800f0d6:	ab04      	add	r3, sp, #16
 800f0d8:	6808      	ldr	r0, [r1, #0]
 800f0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0de:	6881      	ldr	r1, [r0, #8]
 800f0e0:	9301      	str	r3, [sp, #4]
 800f0e2:	f002 f905 	bl	80112f0 <_vfiprintf_r>
 800f0e6:	b003      	add	sp, #12
 800f0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0ec:	b004      	add	sp, #16
 800f0ee:	4770      	bx	lr
 800f0f0:	2400027c 	.word	0x2400027c

0800f0f4 <_puts_r>:
 800f0f4:	6a03      	ldr	r3, [r0, #32]
 800f0f6:	b570      	push	{r4, r5, r6, lr}
 800f0f8:	6884      	ldr	r4, [r0, #8]
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	460e      	mov	r6, r1
 800f0fe:	b90b      	cbnz	r3, 800f104 <_puts_r+0x10>
 800f100:	f7ff ffb0 	bl	800f064 <__sinit>
 800f104:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f106:	07db      	lsls	r3, r3, #31
 800f108:	d405      	bmi.n	800f116 <_puts_r+0x22>
 800f10a:	89a3      	ldrh	r3, [r4, #12]
 800f10c:	0598      	lsls	r0, r3, #22
 800f10e:	d402      	bmi.n	800f116 <_puts_r+0x22>
 800f110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f112:	f000 f9b4 	bl	800f47e <__retarget_lock_acquire_recursive>
 800f116:	89a3      	ldrh	r3, [r4, #12]
 800f118:	0719      	lsls	r1, r3, #28
 800f11a:	d502      	bpl.n	800f122 <_puts_r+0x2e>
 800f11c:	6923      	ldr	r3, [r4, #16]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d135      	bne.n	800f18e <_puts_r+0x9a>
 800f122:	4621      	mov	r1, r4
 800f124:	4628      	mov	r0, r5
 800f126:	f000 f8c5 	bl	800f2b4 <__swsetup_r>
 800f12a:	b380      	cbz	r0, 800f18e <_puts_r+0x9a>
 800f12c:	f04f 35ff 	mov.w	r5, #4294967295
 800f130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f132:	07da      	lsls	r2, r3, #31
 800f134:	d405      	bmi.n	800f142 <_puts_r+0x4e>
 800f136:	89a3      	ldrh	r3, [r4, #12]
 800f138:	059b      	lsls	r3, r3, #22
 800f13a:	d402      	bmi.n	800f142 <_puts_r+0x4e>
 800f13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f13e:	f000 f99f 	bl	800f480 <__retarget_lock_release_recursive>
 800f142:	4628      	mov	r0, r5
 800f144:	bd70      	pop	{r4, r5, r6, pc}
 800f146:	2b00      	cmp	r3, #0
 800f148:	da04      	bge.n	800f154 <_puts_r+0x60>
 800f14a:	69a2      	ldr	r2, [r4, #24]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	dc17      	bgt.n	800f180 <_puts_r+0x8c>
 800f150:	290a      	cmp	r1, #10
 800f152:	d015      	beq.n	800f180 <_puts_r+0x8c>
 800f154:	6823      	ldr	r3, [r4, #0]
 800f156:	1c5a      	adds	r2, r3, #1
 800f158:	6022      	str	r2, [r4, #0]
 800f15a:	7019      	strb	r1, [r3, #0]
 800f15c:	68a3      	ldr	r3, [r4, #8]
 800f15e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f162:	3b01      	subs	r3, #1
 800f164:	60a3      	str	r3, [r4, #8]
 800f166:	2900      	cmp	r1, #0
 800f168:	d1ed      	bne.n	800f146 <_puts_r+0x52>
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	da11      	bge.n	800f192 <_puts_r+0x9e>
 800f16e:	4622      	mov	r2, r4
 800f170:	210a      	movs	r1, #10
 800f172:	4628      	mov	r0, r5
 800f174:	f000 f85f 	bl	800f236 <__swbuf_r>
 800f178:	3001      	adds	r0, #1
 800f17a:	d0d7      	beq.n	800f12c <_puts_r+0x38>
 800f17c:	250a      	movs	r5, #10
 800f17e:	e7d7      	b.n	800f130 <_puts_r+0x3c>
 800f180:	4622      	mov	r2, r4
 800f182:	4628      	mov	r0, r5
 800f184:	f000 f857 	bl	800f236 <__swbuf_r>
 800f188:	3001      	adds	r0, #1
 800f18a:	d1e7      	bne.n	800f15c <_puts_r+0x68>
 800f18c:	e7ce      	b.n	800f12c <_puts_r+0x38>
 800f18e:	3e01      	subs	r6, #1
 800f190:	e7e4      	b.n	800f15c <_puts_r+0x68>
 800f192:	6823      	ldr	r3, [r4, #0]
 800f194:	1c5a      	adds	r2, r3, #1
 800f196:	6022      	str	r2, [r4, #0]
 800f198:	220a      	movs	r2, #10
 800f19a:	701a      	strb	r2, [r3, #0]
 800f19c:	e7ee      	b.n	800f17c <_puts_r+0x88>
	...

0800f1a0 <puts>:
 800f1a0:	4b02      	ldr	r3, [pc, #8]	@ (800f1ac <puts+0xc>)
 800f1a2:	4601      	mov	r1, r0
 800f1a4:	6818      	ldr	r0, [r3, #0]
 800f1a6:	f7ff bfa5 	b.w	800f0f4 <_puts_r>
 800f1aa:	bf00      	nop
 800f1ac:	2400027c 	.word	0x2400027c

0800f1b0 <__sread>:
 800f1b0:	b510      	push	{r4, lr}
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b8:	f000 f912 	bl	800f3e0 <_read_r>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	bfab      	itete	ge
 800f1c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f1c2:	89a3      	ldrhlt	r3, [r4, #12]
 800f1c4:	181b      	addge	r3, r3, r0
 800f1c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f1ca:	bfac      	ite	ge
 800f1cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f1ce:	81a3      	strhlt	r3, [r4, #12]
 800f1d0:	bd10      	pop	{r4, pc}

0800f1d2 <__swrite>:
 800f1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d6:	461f      	mov	r7, r3
 800f1d8:	898b      	ldrh	r3, [r1, #12]
 800f1da:	05db      	lsls	r3, r3, #23
 800f1dc:	4605      	mov	r5, r0
 800f1de:	460c      	mov	r4, r1
 800f1e0:	4616      	mov	r6, r2
 800f1e2:	d505      	bpl.n	800f1f0 <__swrite+0x1e>
 800f1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	f000 f8e6 	bl	800f3bc <_lseek_r>
 800f1f0:	89a3      	ldrh	r3, [r4, #12]
 800f1f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f1fa:	81a3      	strh	r3, [r4, #12]
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	463b      	mov	r3, r7
 800f200:	4628      	mov	r0, r5
 800f202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f206:	f000 b8fd 	b.w	800f404 <_write_r>

0800f20a <__sseek>:
 800f20a:	b510      	push	{r4, lr}
 800f20c:	460c      	mov	r4, r1
 800f20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f212:	f000 f8d3 	bl	800f3bc <_lseek_r>
 800f216:	1c43      	adds	r3, r0, #1
 800f218:	89a3      	ldrh	r3, [r4, #12]
 800f21a:	bf15      	itete	ne
 800f21c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f21e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f222:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f226:	81a3      	strheq	r3, [r4, #12]
 800f228:	bf18      	it	ne
 800f22a:	81a3      	strhne	r3, [r4, #12]
 800f22c:	bd10      	pop	{r4, pc}

0800f22e <__sclose>:
 800f22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f232:	f000 b8b3 	b.w	800f39c <_close_r>

0800f236 <__swbuf_r>:
 800f236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f238:	460e      	mov	r6, r1
 800f23a:	4614      	mov	r4, r2
 800f23c:	4605      	mov	r5, r0
 800f23e:	b118      	cbz	r0, 800f248 <__swbuf_r+0x12>
 800f240:	6a03      	ldr	r3, [r0, #32]
 800f242:	b90b      	cbnz	r3, 800f248 <__swbuf_r+0x12>
 800f244:	f7ff ff0e 	bl	800f064 <__sinit>
 800f248:	69a3      	ldr	r3, [r4, #24]
 800f24a:	60a3      	str	r3, [r4, #8]
 800f24c:	89a3      	ldrh	r3, [r4, #12]
 800f24e:	071a      	lsls	r2, r3, #28
 800f250:	d501      	bpl.n	800f256 <__swbuf_r+0x20>
 800f252:	6923      	ldr	r3, [r4, #16]
 800f254:	b943      	cbnz	r3, 800f268 <__swbuf_r+0x32>
 800f256:	4621      	mov	r1, r4
 800f258:	4628      	mov	r0, r5
 800f25a:	f000 f82b 	bl	800f2b4 <__swsetup_r>
 800f25e:	b118      	cbz	r0, 800f268 <__swbuf_r+0x32>
 800f260:	f04f 37ff 	mov.w	r7, #4294967295
 800f264:	4638      	mov	r0, r7
 800f266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	6922      	ldr	r2, [r4, #16]
 800f26c:	1a98      	subs	r0, r3, r2
 800f26e:	6963      	ldr	r3, [r4, #20]
 800f270:	b2f6      	uxtb	r6, r6
 800f272:	4283      	cmp	r3, r0
 800f274:	4637      	mov	r7, r6
 800f276:	dc05      	bgt.n	800f284 <__swbuf_r+0x4e>
 800f278:	4621      	mov	r1, r4
 800f27a:	4628      	mov	r0, r5
 800f27c:	f002 f9d4 	bl	8011628 <_fflush_r>
 800f280:	2800      	cmp	r0, #0
 800f282:	d1ed      	bne.n	800f260 <__swbuf_r+0x2a>
 800f284:	68a3      	ldr	r3, [r4, #8]
 800f286:	3b01      	subs	r3, #1
 800f288:	60a3      	str	r3, [r4, #8]
 800f28a:	6823      	ldr	r3, [r4, #0]
 800f28c:	1c5a      	adds	r2, r3, #1
 800f28e:	6022      	str	r2, [r4, #0]
 800f290:	701e      	strb	r6, [r3, #0]
 800f292:	6962      	ldr	r2, [r4, #20]
 800f294:	1c43      	adds	r3, r0, #1
 800f296:	429a      	cmp	r2, r3
 800f298:	d004      	beq.n	800f2a4 <__swbuf_r+0x6e>
 800f29a:	89a3      	ldrh	r3, [r4, #12]
 800f29c:	07db      	lsls	r3, r3, #31
 800f29e:	d5e1      	bpl.n	800f264 <__swbuf_r+0x2e>
 800f2a0:	2e0a      	cmp	r6, #10
 800f2a2:	d1df      	bne.n	800f264 <__swbuf_r+0x2e>
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	f002 f9be 	bl	8011628 <_fflush_r>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d0d9      	beq.n	800f264 <__swbuf_r+0x2e>
 800f2b0:	e7d6      	b.n	800f260 <__swbuf_r+0x2a>
	...

0800f2b4 <__swsetup_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4b29      	ldr	r3, [pc, #164]	@ (800f35c <__swsetup_r+0xa8>)
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	6818      	ldr	r0, [r3, #0]
 800f2bc:	460c      	mov	r4, r1
 800f2be:	b118      	cbz	r0, 800f2c8 <__swsetup_r+0x14>
 800f2c0:	6a03      	ldr	r3, [r0, #32]
 800f2c2:	b90b      	cbnz	r3, 800f2c8 <__swsetup_r+0x14>
 800f2c4:	f7ff fece 	bl	800f064 <__sinit>
 800f2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2cc:	0719      	lsls	r1, r3, #28
 800f2ce:	d422      	bmi.n	800f316 <__swsetup_r+0x62>
 800f2d0:	06da      	lsls	r2, r3, #27
 800f2d2:	d407      	bmi.n	800f2e4 <__swsetup_r+0x30>
 800f2d4:	2209      	movs	r2, #9
 800f2d6:	602a      	str	r2, [r5, #0]
 800f2d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2dc:	81a3      	strh	r3, [r4, #12]
 800f2de:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e2:	e033      	b.n	800f34c <__swsetup_r+0x98>
 800f2e4:	0758      	lsls	r0, r3, #29
 800f2e6:	d512      	bpl.n	800f30e <__swsetup_r+0x5a>
 800f2e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2ea:	b141      	cbz	r1, 800f2fe <__swsetup_r+0x4a>
 800f2ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2f0:	4299      	cmp	r1, r3
 800f2f2:	d002      	beq.n	800f2fa <__swsetup_r+0x46>
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f000 fed1 	bl	801009c <_free_r>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f304:	81a3      	strh	r3, [r4, #12]
 800f306:	2300      	movs	r3, #0
 800f308:	6063      	str	r3, [r4, #4]
 800f30a:	6923      	ldr	r3, [r4, #16]
 800f30c:	6023      	str	r3, [r4, #0]
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	f043 0308 	orr.w	r3, r3, #8
 800f314:	81a3      	strh	r3, [r4, #12]
 800f316:	6923      	ldr	r3, [r4, #16]
 800f318:	b94b      	cbnz	r3, 800f32e <__swsetup_r+0x7a>
 800f31a:	89a3      	ldrh	r3, [r4, #12]
 800f31c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f324:	d003      	beq.n	800f32e <__swsetup_r+0x7a>
 800f326:	4621      	mov	r1, r4
 800f328:	4628      	mov	r0, r5
 800f32a:	f002 f9cb 	bl	80116c4 <__smakebuf_r>
 800f32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f332:	f013 0201 	ands.w	r2, r3, #1
 800f336:	d00a      	beq.n	800f34e <__swsetup_r+0x9a>
 800f338:	2200      	movs	r2, #0
 800f33a:	60a2      	str	r2, [r4, #8]
 800f33c:	6962      	ldr	r2, [r4, #20]
 800f33e:	4252      	negs	r2, r2
 800f340:	61a2      	str	r2, [r4, #24]
 800f342:	6922      	ldr	r2, [r4, #16]
 800f344:	b942      	cbnz	r2, 800f358 <__swsetup_r+0xa4>
 800f346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f34a:	d1c5      	bne.n	800f2d8 <__swsetup_r+0x24>
 800f34c:	bd38      	pop	{r3, r4, r5, pc}
 800f34e:	0799      	lsls	r1, r3, #30
 800f350:	bf58      	it	pl
 800f352:	6962      	ldrpl	r2, [r4, #20]
 800f354:	60a2      	str	r2, [r4, #8]
 800f356:	e7f4      	b.n	800f342 <__swsetup_r+0x8e>
 800f358:	2000      	movs	r0, #0
 800f35a:	e7f7      	b.n	800f34c <__swsetup_r+0x98>
 800f35c:	2400027c 	.word	0x2400027c

0800f360 <memset>:
 800f360:	4402      	add	r2, r0
 800f362:	4603      	mov	r3, r0
 800f364:	4293      	cmp	r3, r2
 800f366:	d100      	bne.n	800f36a <memset+0xa>
 800f368:	4770      	bx	lr
 800f36a:	f803 1b01 	strb.w	r1, [r3], #1
 800f36e:	e7f9      	b.n	800f364 <memset+0x4>

0800f370 <strncmp>:
 800f370:	b510      	push	{r4, lr}
 800f372:	b16a      	cbz	r2, 800f390 <strncmp+0x20>
 800f374:	3901      	subs	r1, #1
 800f376:	1884      	adds	r4, r0, r2
 800f378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f37c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f380:	429a      	cmp	r2, r3
 800f382:	d103      	bne.n	800f38c <strncmp+0x1c>
 800f384:	42a0      	cmp	r0, r4
 800f386:	d001      	beq.n	800f38c <strncmp+0x1c>
 800f388:	2a00      	cmp	r2, #0
 800f38a:	d1f5      	bne.n	800f378 <strncmp+0x8>
 800f38c:	1ad0      	subs	r0, r2, r3
 800f38e:	bd10      	pop	{r4, pc}
 800f390:	4610      	mov	r0, r2
 800f392:	e7fc      	b.n	800f38e <strncmp+0x1e>

0800f394 <_localeconv_r>:
 800f394:	4800      	ldr	r0, [pc, #0]	@ (800f398 <_localeconv_r+0x4>)
 800f396:	4770      	bx	lr
 800f398:	24000200 	.word	0x24000200

0800f39c <_close_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4d06      	ldr	r5, [pc, #24]	@ (800f3b8 <_close_r+0x1c>)
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	4608      	mov	r0, r1
 800f3a6:	602b      	str	r3, [r5, #0]
 800f3a8:	f7f2 faec 	bl	8001984 <_close>
 800f3ac:	1c43      	adds	r3, r0, #1
 800f3ae:	d102      	bne.n	800f3b6 <_close_r+0x1a>
 800f3b0:	682b      	ldr	r3, [r5, #0]
 800f3b2:	b103      	cbz	r3, 800f3b6 <_close_r+0x1a>
 800f3b4:	6023      	str	r3, [r4, #0]
 800f3b6:	bd38      	pop	{r3, r4, r5, pc}
 800f3b8:	24003978 	.word	0x24003978

0800f3bc <_lseek_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4d07      	ldr	r5, [pc, #28]	@ (800f3dc <_lseek_r+0x20>)
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	4608      	mov	r0, r1
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	602a      	str	r2, [r5, #0]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	f7f2 fb01 	bl	80019d2 <_lseek>
 800f3d0:	1c43      	adds	r3, r0, #1
 800f3d2:	d102      	bne.n	800f3da <_lseek_r+0x1e>
 800f3d4:	682b      	ldr	r3, [r5, #0]
 800f3d6:	b103      	cbz	r3, 800f3da <_lseek_r+0x1e>
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	bd38      	pop	{r3, r4, r5, pc}
 800f3dc:	24003978 	.word	0x24003978

0800f3e0 <_read_r>:
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	4d07      	ldr	r5, [pc, #28]	@ (800f400 <_read_r+0x20>)
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	602a      	str	r2, [r5, #0]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f7f2 fa8f 	bl	8001912 <_read>
 800f3f4:	1c43      	adds	r3, r0, #1
 800f3f6:	d102      	bne.n	800f3fe <_read_r+0x1e>
 800f3f8:	682b      	ldr	r3, [r5, #0]
 800f3fa:	b103      	cbz	r3, 800f3fe <_read_r+0x1e>
 800f3fc:	6023      	str	r3, [r4, #0]
 800f3fe:	bd38      	pop	{r3, r4, r5, pc}
 800f400:	24003978 	.word	0x24003978

0800f404 <_write_r>:
 800f404:	b538      	push	{r3, r4, r5, lr}
 800f406:	4d07      	ldr	r5, [pc, #28]	@ (800f424 <_write_r+0x20>)
 800f408:	4604      	mov	r4, r0
 800f40a:	4608      	mov	r0, r1
 800f40c:	4611      	mov	r1, r2
 800f40e:	2200      	movs	r2, #0
 800f410:	602a      	str	r2, [r5, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	f7f2 fa9a 	bl	800194c <_write>
 800f418:	1c43      	adds	r3, r0, #1
 800f41a:	d102      	bne.n	800f422 <_write_r+0x1e>
 800f41c:	682b      	ldr	r3, [r5, #0]
 800f41e:	b103      	cbz	r3, 800f422 <_write_r+0x1e>
 800f420:	6023      	str	r3, [r4, #0]
 800f422:	bd38      	pop	{r3, r4, r5, pc}
 800f424:	24003978 	.word	0x24003978

0800f428 <__errno>:
 800f428:	4b01      	ldr	r3, [pc, #4]	@ (800f430 <__errno+0x8>)
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	2400027c 	.word	0x2400027c

0800f434 <__libc_init_array>:
 800f434:	b570      	push	{r4, r5, r6, lr}
 800f436:	4d0d      	ldr	r5, [pc, #52]	@ (800f46c <__libc_init_array+0x38>)
 800f438:	4c0d      	ldr	r4, [pc, #52]	@ (800f470 <__libc_init_array+0x3c>)
 800f43a:	1b64      	subs	r4, r4, r5
 800f43c:	10a4      	asrs	r4, r4, #2
 800f43e:	2600      	movs	r6, #0
 800f440:	42a6      	cmp	r6, r4
 800f442:	d109      	bne.n	800f458 <__libc_init_array+0x24>
 800f444:	4d0b      	ldr	r5, [pc, #44]	@ (800f474 <__libc_init_array+0x40>)
 800f446:	4c0c      	ldr	r4, [pc, #48]	@ (800f478 <__libc_init_array+0x44>)
 800f448:	f002 fa3a 	bl	80118c0 <_init>
 800f44c:	1b64      	subs	r4, r4, r5
 800f44e:	10a4      	asrs	r4, r4, #2
 800f450:	2600      	movs	r6, #0
 800f452:	42a6      	cmp	r6, r4
 800f454:	d105      	bne.n	800f462 <__libc_init_array+0x2e>
 800f456:	bd70      	pop	{r4, r5, r6, pc}
 800f458:	f855 3b04 	ldr.w	r3, [r5], #4
 800f45c:	4798      	blx	r3
 800f45e:	3601      	adds	r6, #1
 800f460:	e7ee      	b.n	800f440 <__libc_init_array+0xc>
 800f462:	f855 3b04 	ldr.w	r3, [r5], #4
 800f466:	4798      	blx	r3
 800f468:	3601      	adds	r6, #1
 800f46a:	e7f2      	b.n	800f452 <__libc_init_array+0x1e>
 800f46c:	08011e20 	.word	0x08011e20
 800f470:	08011e20 	.word	0x08011e20
 800f474:	08011e20 	.word	0x08011e20
 800f478:	08011e24 	.word	0x08011e24

0800f47c <__retarget_lock_init_recursive>:
 800f47c:	4770      	bx	lr

0800f47e <__retarget_lock_acquire_recursive>:
 800f47e:	4770      	bx	lr

0800f480 <__retarget_lock_release_recursive>:
 800f480:	4770      	bx	lr

0800f482 <strcpy>:
 800f482:	4603      	mov	r3, r0
 800f484:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f488:	f803 2b01 	strb.w	r2, [r3], #1
 800f48c:	2a00      	cmp	r2, #0
 800f48e:	d1f9      	bne.n	800f484 <strcpy+0x2>
 800f490:	4770      	bx	lr

0800f492 <memcpy>:
 800f492:	440a      	add	r2, r1
 800f494:	4291      	cmp	r1, r2
 800f496:	f100 33ff 	add.w	r3, r0, #4294967295
 800f49a:	d100      	bne.n	800f49e <memcpy+0xc>
 800f49c:	4770      	bx	lr
 800f49e:	b510      	push	{r4, lr}
 800f4a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4a8:	4291      	cmp	r1, r2
 800f4aa:	d1f9      	bne.n	800f4a0 <memcpy+0xe>
 800f4ac:	bd10      	pop	{r4, pc}
	...

0800f4b0 <nan>:
 800f4b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f4b8 <nan+0x8>
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	00000000 	.word	0x00000000
 800f4bc:	7ff80000 	.word	0x7ff80000

0800f4c0 <nanf>:
 800f4c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f4c8 <nanf+0x8>
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	7fc00000 	.word	0x7fc00000

0800f4cc <quorem>:
 800f4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d0:	6903      	ldr	r3, [r0, #16]
 800f4d2:	690c      	ldr	r4, [r1, #16]
 800f4d4:	42a3      	cmp	r3, r4
 800f4d6:	4607      	mov	r7, r0
 800f4d8:	db7e      	blt.n	800f5d8 <quorem+0x10c>
 800f4da:	3c01      	subs	r4, #1
 800f4dc:	f101 0814 	add.w	r8, r1, #20
 800f4e0:	00a3      	lsls	r3, r4, #2
 800f4e2:	f100 0514 	add.w	r5, r0, #20
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4ec:	9301      	str	r3, [sp, #4]
 800f4ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800f502:	d32e      	bcc.n	800f562 <quorem+0x96>
 800f504:	f04f 0a00 	mov.w	sl, #0
 800f508:	46c4      	mov	ip, r8
 800f50a:	46ae      	mov	lr, r5
 800f50c:	46d3      	mov	fp, sl
 800f50e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f512:	b298      	uxth	r0, r3
 800f514:	fb06 a000 	mla	r0, r6, r0, sl
 800f518:	0c02      	lsrs	r2, r0, #16
 800f51a:	0c1b      	lsrs	r3, r3, #16
 800f51c:	fb06 2303 	mla	r3, r6, r3, r2
 800f520:	f8de 2000 	ldr.w	r2, [lr]
 800f524:	b280      	uxth	r0, r0
 800f526:	b292      	uxth	r2, r2
 800f528:	1a12      	subs	r2, r2, r0
 800f52a:	445a      	add	r2, fp
 800f52c:	f8de 0000 	ldr.w	r0, [lr]
 800f530:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f534:	b29b      	uxth	r3, r3
 800f536:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f53a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f53e:	b292      	uxth	r2, r2
 800f540:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f544:	45e1      	cmp	r9, ip
 800f546:	f84e 2b04 	str.w	r2, [lr], #4
 800f54a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f54e:	d2de      	bcs.n	800f50e <quorem+0x42>
 800f550:	9b00      	ldr	r3, [sp, #0]
 800f552:	58eb      	ldr	r3, [r5, r3]
 800f554:	b92b      	cbnz	r3, 800f562 <quorem+0x96>
 800f556:	9b01      	ldr	r3, [sp, #4]
 800f558:	3b04      	subs	r3, #4
 800f55a:	429d      	cmp	r5, r3
 800f55c:	461a      	mov	r2, r3
 800f55e:	d32f      	bcc.n	800f5c0 <quorem+0xf4>
 800f560:	613c      	str	r4, [r7, #16]
 800f562:	4638      	mov	r0, r7
 800f564:	f001 fca2 	bl	8010eac <__mcmp>
 800f568:	2800      	cmp	r0, #0
 800f56a:	db25      	blt.n	800f5b8 <quorem+0xec>
 800f56c:	4629      	mov	r1, r5
 800f56e:	2000      	movs	r0, #0
 800f570:	f858 2b04 	ldr.w	r2, [r8], #4
 800f574:	f8d1 c000 	ldr.w	ip, [r1]
 800f578:	fa1f fe82 	uxth.w	lr, r2
 800f57c:	fa1f f38c 	uxth.w	r3, ip
 800f580:	eba3 030e 	sub.w	r3, r3, lr
 800f584:	4403      	add	r3, r0
 800f586:	0c12      	lsrs	r2, r2, #16
 800f588:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f58c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f590:	b29b      	uxth	r3, r3
 800f592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f596:	45c1      	cmp	r9, r8
 800f598:	f841 3b04 	str.w	r3, [r1], #4
 800f59c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f5a0:	d2e6      	bcs.n	800f570 <quorem+0xa4>
 800f5a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5aa:	b922      	cbnz	r2, 800f5b6 <quorem+0xea>
 800f5ac:	3b04      	subs	r3, #4
 800f5ae:	429d      	cmp	r5, r3
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	d30b      	bcc.n	800f5cc <quorem+0x100>
 800f5b4:	613c      	str	r4, [r7, #16]
 800f5b6:	3601      	adds	r6, #1
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	b003      	add	sp, #12
 800f5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c0:	6812      	ldr	r2, [r2, #0]
 800f5c2:	3b04      	subs	r3, #4
 800f5c4:	2a00      	cmp	r2, #0
 800f5c6:	d1cb      	bne.n	800f560 <quorem+0x94>
 800f5c8:	3c01      	subs	r4, #1
 800f5ca:	e7c6      	b.n	800f55a <quorem+0x8e>
 800f5cc:	6812      	ldr	r2, [r2, #0]
 800f5ce:	3b04      	subs	r3, #4
 800f5d0:	2a00      	cmp	r2, #0
 800f5d2:	d1ef      	bne.n	800f5b4 <quorem+0xe8>
 800f5d4:	3c01      	subs	r4, #1
 800f5d6:	e7ea      	b.n	800f5ae <quorem+0xe2>
 800f5d8:	2000      	movs	r0, #0
 800f5da:	e7ee      	b.n	800f5ba <quorem+0xee>
 800f5dc:	0000      	movs	r0, r0
	...

0800f5e0 <_dtoa_r>:
 800f5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e4:	ed2d 8b02 	vpush	{d8}
 800f5e8:	69c7      	ldr	r7, [r0, #28]
 800f5ea:	b091      	sub	sp, #68	@ 0x44
 800f5ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f5f0:	ec55 4b10 	vmov	r4, r5, d0
 800f5f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f5f6:	9107      	str	r1, [sp, #28]
 800f5f8:	4681      	mov	r9, r0
 800f5fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800f5fe:	b97f      	cbnz	r7, 800f620 <_dtoa_r+0x40>
 800f600:	2010      	movs	r0, #16
 800f602:	f001 f8cf 	bl	80107a4 <malloc>
 800f606:	4602      	mov	r2, r0
 800f608:	f8c9 001c 	str.w	r0, [r9, #28]
 800f60c:	b920      	cbnz	r0, 800f618 <_dtoa_r+0x38>
 800f60e:	4ba0      	ldr	r3, [pc, #640]	@ (800f890 <_dtoa_r+0x2b0>)
 800f610:	21ef      	movs	r1, #239	@ 0xef
 800f612:	48a0      	ldr	r0, [pc, #640]	@ (800f894 <_dtoa_r+0x2b4>)
 800f614:	f002 f8c4 	bl	80117a0 <__assert_func>
 800f618:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f61c:	6007      	str	r7, [r0, #0]
 800f61e:	60c7      	str	r7, [r0, #12]
 800f620:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f624:	6819      	ldr	r1, [r3, #0]
 800f626:	b159      	cbz	r1, 800f640 <_dtoa_r+0x60>
 800f628:	685a      	ldr	r2, [r3, #4]
 800f62a:	604a      	str	r2, [r1, #4]
 800f62c:	2301      	movs	r3, #1
 800f62e:	4093      	lsls	r3, r2
 800f630:	608b      	str	r3, [r1, #8]
 800f632:	4648      	mov	r0, r9
 800f634:	f001 f9be 	bl	80109b4 <_Bfree>
 800f638:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f63c:	2200      	movs	r2, #0
 800f63e:	601a      	str	r2, [r3, #0]
 800f640:	1e2b      	subs	r3, r5, #0
 800f642:	bfbb      	ittet	lt
 800f644:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f648:	9303      	strlt	r3, [sp, #12]
 800f64a:	2300      	movge	r3, #0
 800f64c:	2201      	movlt	r2, #1
 800f64e:	bfac      	ite	ge
 800f650:	6033      	strge	r3, [r6, #0]
 800f652:	6032      	strlt	r2, [r6, #0]
 800f654:	4b90      	ldr	r3, [pc, #576]	@ (800f898 <_dtoa_r+0x2b8>)
 800f656:	9e03      	ldr	r6, [sp, #12]
 800f658:	43b3      	bics	r3, r6
 800f65a:	d110      	bne.n	800f67e <_dtoa_r+0x9e>
 800f65c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f65e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f662:	6013      	str	r3, [r2, #0]
 800f664:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f668:	4323      	orrs	r3, r4
 800f66a:	f000 84e6 	beq.w	801003a <_dtoa_r+0xa5a>
 800f66e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f670:	4f8a      	ldr	r7, [pc, #552]	@ (800f89c <_dtoa_r+0x2bc>)
 800f672:	2b00      	cmp	r3, #0
 800f674:	f000 84e8 	beq.w	8010048 <_dtoa_r+0xa68>
 800f678:	1cfb      	adds	r3, r7, #3
 800f67a:	f000 bce3 	b.w	8010044 <_dtoa_r+0xa64>
 800f67e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f682:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68a:	d10a      	bne.n	800f6a2 <_dtoa_r+0xc2>
 800f68c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f68e:	2301      	movs	r3, #1
 800f690:	6013      	str	r3, [r2, #0]
 800f692:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f694:	b113      	cbz	r3, 800f69c <_dtoa_r+0xbc>
 800f696:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f698:	4b81      	ldr	r3, [pc, #516]	@ (800f8a0 <_dtoa_r+0x2c0>)
 800f69a:	6013      	str	r3, [r2, #0]
 800f69c:	4f81      	ldr	r7, [pc, #516]	@ (800f8a4 <_dtoa_r+0x2c4>)
 800f69e:	f000 bcd3 	b.w	8010048 <_dtoa_r+0xa68>
 800f6a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800f6a4:	a90f      	add	r1, sp, #60	@ 0x3c
 800f6a6:	4648      	mov	r0, r9
 800f6a8:	eeb0 0b48 	vmov.f64	d0, d8
 800f6ac:	f001 fd1e 	bl	80110ec <__d2b>
 800f6b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f6b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6b6:	9001      	str	r0, [sp, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d045      	beq.n	800f748 <_dtoa_r+0x168>
 800f6bc:	eeb0 7b48 	vmov.f64	d7, d8
 800f6c0:	ee18 1a90 	vmov	r1, s17
 800f6c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f6c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f6cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f6d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f6d4:	2500      	movs	r5, #0
 800f6d6:	ee07 1a90 	vmov	s15, r1
 800f6da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f6de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f878 <_dtoa_r+0x298>
 800f6e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f6e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f880 <_dtoa_r+0x2a0>
 800f6ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f6ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f888 <_dtoa_r+0x2a8>
 800f6f2:	ee07 3a90 	vmov	s15, r3
 800f6f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f6fa:	eeb0 7b46 	vmov.f64	d7, d6
 800f6fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f702:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f706:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70e:	ee16 8a90 	vmov	r8, s13
 800f712:	d508      	bpl.n	800f726 <_dtoa_r+0x146>
 800f714:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f718:	eeb4 6b47 	vcmp.f64	d6, d7
 800f71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f720:	bf18      	it	ne
 800f722:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f726:	f1b8 0f16 	cmp.w	r8, #22
 800f72a:	d82b      	bhi.n	800f784 <_dtoa_r+0x1a4>
 800f72c:	495e      	ldr	r1, [pc, #376]	@ (800f8a8 <_dtoa_r+0x2c8>)
 800f72e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f732:	ed91 7b00 	vldr	d7, [r1]
 800f736:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f73e:	d501      	bpl.n	800f744 <_dtoa_r+0x164>
 800f740:	f108 38ff 	add.w	r8, r8, #4294967295
 800f744:	2100      	movs	r1, #0
 800f746:	e01e      	b.n	800f786 <_dtoa_r+0x1a6>
 800f748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f74a:	4413      	add	r3, r2
 800f74c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f750:	2920      	cmp	r1, #32
 800f752:	bfc1      	itttt	gt
 800f754:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f758:	408e      	lslgt	r6, r1
 800f75a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f75e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f762:	bfd6      	itet	le
 800f764:	f1c1 0120 	rsble	r1, r1, #32
 800f768:	4331      	orrgt	r1, r6
 800f76a:	fa04 f101 	lslle.w	r1, r4, r1
 800f76e:	ee07 1a90 	vmov	s15, r1
 800f772:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f776:	3b01      	subs	r3, #1
 800f778:	ee17 1a90 	vmov	r1, s15
 800f77c:	2501      	movs	r5, #1
 800f77e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f782:	e7a8      	b.n	800f6d6 <_dtoa_r+0xf6>
 800f784:	2101      	movs	r1, #1
 800f786:	1ad2      	subs	r2, r2, r3
 800f788:	1e53      	subs	r3, r2, #1
 800f78a:	9306      	str	r3, [sp, #24]
 800f78c:	bf45      	ittet	mi
 800f78e:	f1c2 0301 	rsbmi	r3, r2, #1
 800f792:	9304      	strmi	r3, [sp, #16]
 800f794:	2300      	movpl	r3, #0
 800f796:	2300      	movmi	r3, #0
 800f798:	bf4c      	ite	mi
 800f79a:	9306      	strmi	r3, [sp, #24]
 800f79c:	9304      	strpl	r3, [sp, #16]
 800f79e:	f1b8 0f00 	cmp.w	r8, #0
 800f7a2:	910c      	str	r1, [sp, #48]	@ 0x30
 800f7a4:	db18      	blt.n	800f7d8 <_dtoa_r+0x1f8>
 800f7a6:	9b06      	ldr	r3, [sp, #24]
 800f7a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f7ac:	4443      	add	r3, r8
 800f7ae:	9306      	str	r3, [sp, #24]
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	9a07      	ldr	r2, [sp, #28]
 800f7b4:	2a09      	cmp	r2, #9
 800f7b6:	d845      	bhi.n	800f844 <_dtoa_r+0x264>
 800f7b8:	2a05      	cmp	r2, #5
 800f7ba:	bfc4      	itt	gt
 800f7bc:	3a04      	subgt	r2, #4
 800f7be:	9207      	strgt	r2, [sp, #28]
 800f7c0:	9a07      	ldr	r2, [sp, #28]
 800f7c2:	f1a2 0202 	sub.w	r2, r2, #2
 800f7c6:	bfcc      	ite	gt
 800f7c8:	2400      	movgt	r4, #0
 800f7ca:	2401      	movle	r4, #1
 800f7cc:	2a03      	cmp	r2, #3
 800f7ce:	d844      	bhi.n	800f85a <_dtoa_r+0x27a>
 800f7d0:	e8df f002 	tbb	[pc, r2]
 800f7d4:	0b173634 	.word	0x0b173634
 800f7d8:	9b04      	ldr	r3, [sp, #16]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	eba3 0308 	sub.w	r3, r3, r8
 800f7e0:	9304      	str	r3, [sp, #16]
 800f7e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f7e4:	f1c8 0300 	rsb	r3, r8, #0
 800f7e8:	e7e3      	b.n	800f7b2 <_dtoa_r+0x1d2>
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	9208      	str	r2, [sp, #32]
 800f7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7f0:	eb08 0b02 	add.w	fp, r8, r2
 800f7f4:	f10b 0a01 	add.w	sl, fp, #1
 800f7f8:	4652      	mov	r2, sl
 800f7fa:	2a01      	cmp	r2, #1
 800f7fc:	bfb8      	it	lt
 800f7fe:	2201      	movlt	r2, #1
 800f800:	e006      	b.n	800f810 <_dtoa_r+0x230>
 800f802:	2201      	movs	r2, #1
 800f804:	9208      	str	r2, [sp, #32]
 800f806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f808:	2a00      	cmp	r2, #0
 800f80a:	dd29      	ble.n	800f860 <_dtoa_r+0x280>
 800f80c:	4693      	mov	fp, r2
 800f80e:	4692      	mov	sl, r2
 800f810:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f814:	2100      	movs	r1, #0
 800f816:	2004      	movs	r0, #4
 800f818:	f100 0614 	add.w	r6, r0, #20
 800f81c:	4296      	cmp	r6, r2
 800f81e:	d926      	bls.n	800f86e <_dtoa_r+0x28e>
 800f820:	6079      	str	r1, [r7, #4]
 800f822:	4648      	mov	r0, r9
 800f824:	9305      	str	r3, [sp, #20]
 800f826:	f001 f885 	bl	8010934 <_Balloc>
 800f82a:	9b05      	ldr	r3, [sp, #20]
 800f82c:	4607      	mov	r7, r0
 800f82e:	2800      	cmp	r0, #0
 800f830:	d13e      	bne.n	800f8b0 <_dtoa_r+0x2d0>
 800f832:	4b1e      	ldr	r3, [pc, #120]	@ (800f8ac <_dtoa_r+0x2cc>)
 800f834:	4602      	mov	r2, r0
 800f836:	f240 11af 	movw	r1, #431	@ 0x1af
 800f83a:	e6ea      	b.n	800f612 <_dtoa_r+0x32>
 800f83c:	2200      	movs	r2, #0
 800f83e:	e7e1      	b.n	800f804 <_dtoa_r+0x224>
 800f840:	2200      	movs	r2, #0
 800f842:	e7d3      	b.n	800f7ec <_dtoa_r+0x20c>
 800f844:	2401      	movs	r4, #1
 800f846:	2200      	movs	r2, #0
 800f848:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f84c:	f04f 3bff 	mov.w	fp, #4294967295
 800f850:	2100      	movs	r1, #0
 800f852:	46da      	mov	sl, fp
 800f854:	2212      	movs	r2, #18
 800f856:	9109      	str	r1, [sp, #36]	@ 0x24
 800f858:	e7da      	b.n	800f810 <_dtoa_r+0x230>
 800f85a:	2201      	movs	r2, #1
 800f85c:	9208      	str	r2, [sp, #32]
 800f85e:	e7f5      	b.n	800f84c <_dtoa_r+0x26c>
 800f860:	f04f 0b01 	mov.w	fp, #1
 800f864:	46da      	mov	sl, fp
 800f866:	465a      	mov	r2, fp
 800f868:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f86c:	e7d0      	b.n	800f810 <_dtoa_r+0x230>
 800f86e:	3101      	adds	r1, #1
 800f870:	0040      	lsls	r0, r0, #1
 800f872:	e7d1      	b.n	800f818 <_dtoa_r+0x238>
 800f874:	f3af 8000 	nop.w
 800f878:	636f4361 	.word	0x636f4361
 800f87c:	3fd287a7 	.word	0x3fd287a7
 800f880:	8b60c8b3 	.word	0x8b60c8b3
 800f884:	3fc68a28 	.word	0x3fc68a28
 800f888:	509f79fb 	.word	0x509f79fb
 800f88c:	3fd34413 	.word	0x3fd34413
 800f890:	08011a3f 	.word	0x08011a3f
 800f894:	08011a56 	.word	0x08011a56
 800f898:	7ff00000 	.word	0x7ff00000
 800f89c:	08011a3b 	.word	0x08011a3b
 800f8a0:	08011a07 	.word	0x08011a07
 800f8a4:	08011a06 	.word	0x08011a06
 800f8a8:	08011d50 	.word	0x08011d50
 800f8ac:	08011aae 	.word	0x08011aae
 800f8b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f8b4:	f1ba 0f0e 	cmp.w	sl, #14
 800f8b8:	6010      	str	r0, [r2, #0]
 800f8ba:	d86e      	bhi.n	800f99a <_dtoa_r+0x3ba>
 800f8bc:	2c00      	cmp	r4, #0
 800f8be:	d06c      	beq.n	800f99a <_dtoa_r+0x3ba>
 800f8c0:	f1b8 0f00 	cmp.w	r8, #0
 800f8c4:	f340 80b4 	ble.w	800fa30 <_dtoa_r+0x450>
 800f8c8:	4ac8      	ldr	r2, [pc, #800]	@ (800fbec <_dtoa_r+0x60c>)
 800f8ca:	f008 010f 	and.w	r1, r8, #15
 800f8ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f8d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f8d6:	ed92 7b00 	vldr	d7, [r2]
 800f8da:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f8de:	f000 809b 	beq.w	800fa18 <_dtoa_r+0x438>
 800f8e2:	4ac3      	ldr	r2, [pc, #780]	@ (800fbf0 <_dtoa_r+0x610>)
 800f8e4:	ed92 6b08 	vldr	d6, [r2, #32]
 800f8e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f8ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f8f0:	f001 010f 	and.w	r1, r1, #15
 800f8f4:	2203      	movs	r2, #3
 800f8f6:	48be      	ldr	r0, [pc, #760]	@ (800fbf0 <_dtoa_r+0x610>)
 800f8f8:	2900      	cmp	r1, #0
 800f8fa:	f040 808f 	bne.w	800fa1c <_dtoa_r+0x43c>
 800f8fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f902:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f906:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f90a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f90c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f910:	2900      	cmp	r1, #0
 800f912:	f000 80b3 	beq.w	800fa7c <_dtoa_r+0x49c>
 800f916:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f91a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	f140 80ab 	bpl.w	800fa7c <_dtoa_r+0x49c>
 800f926:	f1ba 0f00 	cmp.w	sl, #0
 800f92a:	f000 80a7 	beq.w	800fa7c <_dtoa_r+0x49c>
 800f92e:	f1bb 0f00 	cmp.w	fp, #0
 800f932:	dd30      	ble.n	800f996 <_dtoa_r+0x3b6>
 800f934:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f938:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f93c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f940:	f108 31ff 	add.w	r1, r8, #4294967295
 800f944:	9105      	str	r1, [sp, #20]
 800f946:	3201      	adds	r2, #1
 800f948:	465c      	mov	r4, fp
 800f94a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f94e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f952:	ee07 2a90 	vmov	s15, r2
 800f956:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f95a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f95e:	ee15 2a90 	vmov	r2, s11
 800f962:	ec51 0b15 	vmov	r0, r1, d5
 800f966:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f96a:	2c00      	cmp	r4, #0
 800f96c:	f040 808a 	bne.w	800fa84 <_dtoa_r+0x4a4>
 800f970:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f974:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f978:	ec41 0b17 	vmov	d7, r0, r1
 800f97c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f984:	f300 826a 	bgt.w	800fe5c <_dtoa_r+0x87c>
 800f988:	eeb1 7b47 	vneg.f64	d7, d7
 800f98c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f994:	d423      	bmi.n	800f9de <_dtoa_r+0x3fe>
 800f996:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f99a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f99c:	2a00      	cmp	r2, #0
 800f99e:	f2c0 8129 	blt.w	800fbf4 <_dtoa_r+0x614>
 800f9a2:	f1b8 0f0e 	cmp.w	r8, #14
 800f9a6:	f300 8125 	bgt.w	800fbf4 <_dtoa_r+0x614>
 800f9aa:	4b90      	ldr	r3, [pc, #576]	@ (800fbec <_dtoa_r+0x60c>)
 800f9ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f9b0:	ed93 6b00 	vldr	d6, [r3]
 800f9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f280 80c8 	bge.w	800fb4c <_dtoa_r+0x56c>
 800f9bc:	f1ba 0f00 	cmp.w	sl, #0
 800f9c0:	f300 80c4 	bgt.w	800fb4c <_dtoa_r+0x56c>
 800f9c4:	d10b      	bne.n	800f9de <_dtoa_r+0x3fe>
 800f9c6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f9ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f9ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9da:	f2c0 823c 	blt.w	800fe56 <_dtoa_r+0x876>
 800f9de:	2400      	movs	r4, #0
 800f9e0:	4625      	mov	r5, r4
 800f9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9e4:	43db      	mvns	r3, r3
 800f9e6:	9305      	str	r3, [sp, #20]
 800f9e8:	463e      	mov	r6, r7
 800f9ea:	f04f 0800 	mov.w	r8, #0
 800f9ee:	4621      	mov	r1, r4
 800f9f0:	4648      	mov	r0, r9
 800f9f2:	f000 ffdf 	bl	80109b4 <_Bfree>
 800f9f6:	2d00      	cmp	r5, #0
 800f9f8:	f000 80a2 	beq.w	800fb40 <_dtoa_r+0x560>
 800f9fc:	f1b8 0f00 	cmp.w	r8, #0
 800fa00:	d005      	beq.n	800fa0e <_dtoa_r+0x42e>
 800fa02:	45a8      	cmp	r8, r5
 800fa04:	d003      	beq.n	800fa0e <_dtoa_r+0x42e>
 800fa06:	4641      	mov	r1, r8
 800fa08:	4648      	mov	r0, r9
 800fa0a:	f000 ffd3 	bl	80109b4 <_Bfree>
 800fa0e:	4629      	mov	r1, r5
 800fa10:	4648      	mov	r0, r9
 800fa12:	f000 ffcf 	bl	80109b4 <_Bfree>
 800fa16:	e093      	b.n	800fb40 <_dtoa_r+0x560>
 800fa18:	2202      	movs	r2, #2
 800fa1a:	e76c      	b.n	800f8f6 <_dtoa_r+0x316>
 800fa1c:	07cc      	lsls	r4, r1, #31
 800fa1e:	d504      	bpl.n	800fa2a <_dtoa_r+0x44a>
 800fa20:	ed90 6b00 	vldr	d6, [r0]
 800fa24:	3201      	adds	r2, #1
 800fa26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa2a:	1049      	asrs	r1, r1, #1
 800fa2c:	3008      	adds	r0, #8
 800fa2e:	e763      	b.n	800f8f8 <_dtoa_r+0x318>
 800fa30:	d022      	beq.n	800fa78 <_dtoa_r+0x498>
 800fa32:	f1c8 0100 	rsb	r1, r8, #0
 800fa36:	4a6d      	ldr	r2, [pc, #436]	@ (800fbec <_dtoa_r+0x60c>)
 800fa38:	f001 000f 	and.w	r0, r1, #15
 800fa3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fa40:	ed92 7b00 	vldr	d7, [r2]
 800fa44:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fa48:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa4c:	4868      	ldr	r0, [pc, #416]	@ (800fbf0 <_dtoa_r+0x610>)
 800fa4e:	1109      	asrs	r1, r1, #4
 800fa50:	2400      	movs	r4, #0
 800fa52:	2202      	movs	r2, #2
 800fa54:	b929      	cbnz	r1, 800fa62 <_dtoa_r+0x482>
 800fa56:	2c00      	cmp	r4, #0
 800fa58:	f43f af57 	beq.w	800f90a <_dtoa_r+0x32a>
 800fa5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa60:	e753      	b.n	800f90a <_dtoa_r+0x32a>
 800fa62:	07ce      	lsls	r6, r1, #31
 800fa64:	d505      	bpl.n	800fa72 <_dtoa_r+0x492>
 800fa66:	ed90 6b00 	vldr	d6, [r0]
 800fa6a:	3201      	adds	r2, #1
 800fa6c:	2401      	movs	r4, #1
 800fa6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa72:	1049      	asrs	r1, r1, #1
 800fa74:	3008      	adds	r0, #8
 800fa76:	e7ed      	b.n	800fa54 <_dtoa_r+0x474>
 800fa78:	2202      	movs	r2, #2
 800fa7a:	e746      	b.n	800f90a <_dtoa_r+0x32a>
 800fa7c:	f8cd 8014 	str.w	r8, [sp, #20]
 800fa80:	4654      	mov	r4, sl
 800fa82:	e762      	b.n	800f94a <_dtoa_r+0x36a>
 800fa84:	4a59      	ldr	r2, [pc, #356]	@ (800fbec <_dtoa_r+0x60c>)
 800fa86:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800fa8a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800fa8e:	9a08      	ldr	r2, [sp, #32]
 800fa90:	ec41 0b17 	vmov	d7, r0, r1
 800fa94:	443c      	add	r4, r7
 800fa96:	b34a      	cbz	r2, 800faec <_dtoa_r+0x50c>
 800fa98:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800fa9c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800faa0:	463e      	mov	r6, r7
 800faa2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800faa6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800faaa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800faae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fab2:	ee14 2a90 	vmov	r2, s9
 800fab6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800faba:	3230      	adds	r2, #48	@ 0x30
 800fabc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fac0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac8:	f806 2b01 	strb.w	r2, [r6], #1
 800facc:	d438      	bmi.n	800fb40 <_dtoa_r+0x560>
 800face:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fad2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fada:	d46e      	bmi.n	800fbba <_dtoa_r+0x5da>
 800fadc:	42a6      	cmp	r6, r4
 800fade:	f43f af5a 	beq.w	800f996 <_dtoa_r+0x3b6>
 800fae2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fae6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800faea:	e7e0      	b.n	800faae <_dtoa_r+0x4ce>
 800faec:	4621      	mov	r1, r4
 800faee:	463e      	mov	r6, r7
 800faf0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800faf4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800faf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fafc:	ee14 2a90 	vmov	r2, s9
 800fb00:	3230      	adds	r2, #48	@ 0x30
 800fb02:	f806 2b01 	strb.w	r2, [r6], #1
 800fb06:	42a6      	cmp	r6, r4
 800fb08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fb0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fb10:	d119      	bne.n	800fb46 <_dtoa_r+0x566>
 800fb12:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800fb16:	ee37 4b05 	vadd.f64	d4, d7, d5
 800fb1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800fb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb22:	dc4a      	bgt.n	800fbba <_dtoa_r+0x5da>
 800fb24:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fb28:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800fb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb30:	f57f af31 	bpl.w	800f996 <_dtoa_r+0x3b6>
 800fb34:	460e      	mov	r6, r1
 800fb36:	3901      	subs	r1, #1
 800fb38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb3c:	2b30      	cmp	r3, #48	@ 0x30
 800fb3e:	d0f9      	beq.n	800fb34 <_dtoa_r+0x554>
 800fb40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fb44:	e027      	b.n	800fb96 <_dtoa_r+0x5b6>
 800fb46:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fb4a:	e7d5      	b.n	800faf8 <_dtoa_r+0x518>
 800fb4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb50:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800fb54:	463e      	mov	r6, r7
 800fb56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fb5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fb5e:	ee15 3a10 	vmov	r3, s10
 800fb62:	3330      	adds	r3, #48	@ 0x30
 800fb64:	f806 3b01 	strb.w	r3, [r6], #1
 800fb68:	1bf3      	subs	r3, r6, r7
 800fb6a:	459a      	cmp	sl, r3
 800fb6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fb70:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fb74:	d132      	bne.n	800fbdc <_dtoa_r+0x5fc>
 800fb76:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fb7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb82:	dc18      	bgt.n	800fbb6 <_dtoa_r+0x5d6>
 800fb84:	eeb4 7b46 	vcmp.f64	d7, d6
 800fb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8c:	d103      	bne.n	800fb96 <_dtoa_r+0x5b6>
 800fb8e:	ee15 3a10 	vmov	r3, s10
 800fb92:	07db      	lsls	r3, r3, #31
 800fb94:	d40f      	bmi.n	800fbb6 <_dtoa_r+0x5d6>
 800fb96:	9901      	ldr	r1, [sp, #4]
 800fb98:	4648      	mov	r0, r9
 800fb9a:	f000 ff0b 	bl	80109b4 <_Bfree>
 800fb9e:	2300      	movs	r3, #0
 800fba0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fba2:	7033      	strb	r3, [r6, #0]
 800fba4:	f108 0301 	add.w	r3, r8, #1
 800fba8:	6013      	str	r3, [r2, #0]
 800fbaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f000 824b 	beq.w	8010048 <_dtoa_r+0xa68>
 800fbb2:	601e      	str	r6, [r3, #0]
 800fbb4:	e248      	b.n	8010048 <_dtoa_r+0xa68>
 800fbb6:	f8cd 8014 	str.w	r8, [sp, #20]
 800fbba:	4633      	mov	r3, r6
 800fbbc:	461e      	mov	r6, r3
 800fbbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbc2:	2a39      	cmp	r2, #57	@ 0x39
 800fbc4:	d106      	bne.n	800fbd4 <_dtoa_r+0x5f4>
 800fbc6:	429f      	cmp	r7, r3
 800fbc8:	d1f8      	bne.n	800fbbc <_dtoa_r+0x5dc>
 800fbca:	9a05      	ldr	r2, [sp, #20]
 800fbcc:	3201      	adds	r2, #1
 800fbce:	9205      	str	r2, [sp, #20]
 800fbd0:	2230      	movs	r2, #48	@ 0x30
 800fbd2:	703a      	strb	r2, [r7, #0]
 800fbd4:	781a      	ldrb	r2, [r3, #0]
 800fbd6:	3201      	adds	r2, #1
 800fbd8:	701a      	strb	r2, [r3, #0]
 800fbda:	e7b1      	b.n	800fb40 <_dtoa_r+0x560>
 800fbdc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fbe0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe8:	d1b5      	bne.n	800fb56 <_dtoa_r+0x576>
 800fbea:	e7d4      	b.n	800fb96 <_dtoa_r+0x5b6>
 800fbec:	08011d50 	.word	0x08011d50
 800fbf0:	08011d28 	.word	0x08011d28
 800fbf4:	9908      	ldr	r1, [sp, #32]
 800fbf6:	2900      	cmp	r1, #0
 800fbf8:	f000 80e9 	beq.w	800fdce <_dtoa_r+0x7ee>
 800fbfc:	9907      	ldr	r1, [sp, #28]
 800fbfe:	2901      	cmp	r1, #1
 800fc00:	f300 80cb 	bgt.w	800fd9a <_dtoa_r+0x7ba>
 800fc04:	2d00      	cmp	r5, #0
 800fc06:	f000 80c4 	beq.w	800fd92 <_dtoa_r+0x7b2>
 800fc0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fc0e:	9e04      	ldr	r6, [sp, #16]
 800fc10:	461c      	mov	r4, r3
 800fc12:	9305      	str	r3, [sp, #20]
 800fc14:	9b04      	ldr	r3, [sp, #16]
 800fc16:	4413      	add	r3, r2
 800fc18:	9304      	str	r3, [sp, #16]
 800fc1a:	9b06      	ldr	r3, [sp, #24]
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	4413      	add	r3, r2
 800fc20:	4648      	mov	r0, r9
 800fc22:	9306      	str	r3, [sp, #24]
 800fc24:	f000 ffc4 	bl	8010bb0 <__i2b>
 800fc28:	9b05      	ldr	r3, [sp, #20]
 800fc2a:	4605      	mov	r5, r0
 800fc2c:	b166      	cbz	r6, 800fc48 <_dtoa_r+0x668>
 800fc2e:	9a06      	ldr	r2, [sp, #24]
 800fc30:	2a00      	cmp	r2, #0
 800fc32:	dd09      	ble.n	800fc48 <_dtoa_r+0x668>
 800fc34:	42b2      	cmp	r2, r6
 800fc36:	9904      	ldr	r1, [sp, #16]
 800fc38:	bfa8      	it	ge
 800fc3a:	4632      	movge	r2, r6
 800fc3c:	1a89      	subs	r1, r1, r2
 800fc3e:	9104      	str	r1, [sp, #16]
 800fc40:	9906      	ldr	r1, [sp, #24]
 800fc42:	1ab6      	subs	r6, r6, r2
 800fc44:	1a8a      	subs	r2, r1, r2
 800fc46:	9206      	str	r2, [sp, #24]
 800fc48:	b30b      	cbz	r3, 800fc8e <_dtoa_r+0x6ae>
 800fc4a:	9a08      	ldr	r2, [sp, #32]
 800fc4c:	2a00      	cmp	r2, #0
 800fc4e:	f000 80c5 	beq.w	800fddc <_dtoa_r+0x7fc>
 800fc52:	2c00      	cmp	r4, #0
 800fc54:	f000 80bf 	beq.w	800fdd6 <_dtoa_r+0x7f6>
 800fc58:	4629      	mov	r1, r5
 800fc5a:	4622      	mov	r2, r4
 800fc5c:	4648      	mov	r0, r9
 800fc5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc60:	f001 f85e 	bl	8010d20 <__pow5mult>
 800fc64:	9a01      	ldr	r2, [sp, #4]
 800fc66:	4601      	mov	r1, r0
 800fc68:	4605      	mov	r5, r0
 800fc6a:	4648      	mov	r0, r9
 800fc6c:	f000 ffb6 	bl	8010bdc <__multiply>
 800fc70:	9901      	ldr	r1, [sp, #4]
 800fc72:	9005      	str	r0, [sp, #20]
 800fc74:	4648      	mov	r0, r9
 800fc76:	f000 fe9d 	bl	80109b4 <_Bfree>
 800fc7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc7c:	1b1b      	subs	r3, r3, r4
 800fc7e:	f000 80b0 	beq.w	800fde2 <_dtoa_r+0x802>
 800fc82:	9905      	ldr	r1, [sp, #20]
 800fc84:	461a      	mov	r2, r3
 800fc86:	4648      	mov	r0, r9
 800fc88:	f001 f84a 	bl	8010d20 <__pow5mult>
 800fc8c:	9001      	str	r0, [sp, #4]
 800fc8e:	2101      	movs	r1, #1
 800fc90:	4648      	mov	r0, r9
 800fc92:	f000 ff8d 	bl	8010bb0 <__i2b>
 800fc96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc98:	4604      	mov	r4, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	f000 81da 	beq.w	8010054 <_dtoa_r+0xa74>
 800fca0:	461a      	mov	r2, r3
 800fca2:	4601      	mov	r1, r0
 800fca4:	4648      	mov	r0, r9
 800fca6:	f001 f83b 	bl	8010d20 <__pow5mult>
 800fcaa:	9b07      	ldr	r3, [sp, #28]
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	4604      	mov	r4, r0
 800fcb0:	f300 80a0 	bgt.w	800fdf4 <_dtoa_r+0x814>
 800fcb4:	9b02      	ldr	r3, [sp, #8]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f040 8096 	bne.w	800fde8 <_dtoa_r+0x808>
 800fcbc:	9b03      	ldr	r3, [sp, #12]
 800fcbe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fcc2:	2a00      	cmp	r2, #0
 800fcc4:	f040 8092 	bne.w	800fdec <_dtoa_r+0x80c>
 800fcc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fccc:	0d12      	lsrs	r2, r2, #20
 800fcce:	0512      	lsls	r2, r2, #20
 800fcd0:	2a00      	cmp	r2, #0
 800fcd2:	f000 808d 	beq.w	800fdf0 <_dtoa_r+0x810>
 800fcd6:	9b04      	ldr	r3, [sp, #16]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	9304      	str	r3, [sp, #16]
 800fcdc:	9b06      	ldr	r3, [sp, #24]
 800fcde:	3301      	adds	r3, #1
 800fce0:	9306      	str	r3, [sp, #24]
 800fce2:	2301      	movs	r3, #1
 800fce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fce6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f000 81b9 	beq.w	8010060 <_dtoa_r+0xa80>
 800fcee:	6922      	ldr	r2, [r4, #16]
 800fcf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fcf4:	6910      	ldr	r0, [r2, #16]
 800fcf6:	f000 ff0f 	bl	8010b18 <__hi0bits>
 800fcfa:	f1c0 0020 	rsb	r0, r0, #32
 800fcfe:	9b06      	ldr	r3, [sp, #24]
 800fd00:	4418      	add	r0, r3
 800fd02:	f010 001f 	ands.w	r0, r0, #31
 800fd06:	f000 8081 	beq.w	800fe0c <_dtoa_r+0x82c>
 800fd0a:	f1c0 0220 	rsb	r2, r0, #32
 800fd0e:	2a04      	cmp	r2, #4
 800fd10:	dd73      	ble.n	800fdfa <_dtoa_r+0x81a>
 800fd12:	9b04      	ldr	r3, [sp, #16]
 800fd14:	f1c0 001c 	rsb	r0, r0, #28
 800fd18:	4403      	add	r3, r0
 800fd1a:	9304      	str	r3, [sp, #16]
 800fd1c:	9b06      	ldr	r3, [sp, #24]
 800fd1e:	4406      	add	r6, r0
 800fd20:	4403      	add	r3, r0
 800fd22:	9306      	str	r3, [sp, #24]
 800fd24:	9b04      	ldr	r3, [sp, #16]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	dd05      	ble.n	800fd36 <_dtoa_r+0x756>
 800fd2a:	9901      	ldr	r1, [sp, #4]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	4648      	mov	r0, r9
 800fd30:	f001 f850 	bl	8010dd4 <__lshift>
 800fd34:	9001      	str	r0, [sp, #4]
 800fd36:	9b06      	ldr	r3, [sp, #24]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	dd05      	ble.n	800fd48 <_dtoa_r+0x768>
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	461a      	mov	r2, r3
 800fd40:	4648      	mov	r0, r9
 800fd42:	f001 f847 	bl	8010dd4 <__lshift>
 800fd46:	4604      	mov	r4, r0
 800fd48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d060      	beq.n	800fe10 <_dtoa_r+0x830>
 800fd4e:	9801      	ldr	r0, [sp, #4]
 800fd50:	4621      	mov	r1, r4
 800fd52:	f001 f8ab 	bl	8010eac <__mcmp>
 800fd56:	2800      	cmp	r0, #0
 800fd58:	da5a      	bge.n	800fe10 <_dtoa_r+0x830>
 800fd5a:	f108 33ff 	add.w	r3, r8, #4294967295
 800fd5e:	9305      	str	r3, [sp, #20]
 800fd60:	9901      	ldr	r1, [sp, #4]
 800fd62:	2300      	movs	r3, #0
 800fd64:	220a      	movs	r2, #10
 800fd66:	4648      	mov	r0, r9
 800fd68:	f000 fe46 	bl	80109f8 <__multadd>
 800fd6c:	9b08      	ldr	r3, [sp, #32]
 800fd6e:	9001      	str	r0, [sp, #4]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	f000 8177 	beq.w	8010064 <_dtoa_r+0xa84>
 800fd76:	4629      	mov	r1, r5
 800fd78:	2300      	movs	r3, #0
 800fd7a:	220a      	movs	r2, #10
 800fd7c:	4648      	mov	r0, r9
 800fd7e:	f000 fe3b 	bl	80109f8 <__multadd>
 800fd82:	f1bb 0f00 	cmp.w	fp, #0
 800fd86:	4605      	mov	r5, r0
 800fd88:	dc6e      	bgt.n	800fe68 <_dtoa_r+0x888>
 800fd8a:	9b07      	ldr	r3, [sp, #28]
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	dc48      	bgt.n	800fe22 <_dtoa_r+0x842>
 800fd90:	e06a      	b.n	800fe68 <_dtoa_r+0x888>
 800fd92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fd98:	e739      	b.n	800fc0e <_dtoa_r+0x62e>
 800fd9a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800fd9e:	42a3      	cmp	r3, r4
 800fda0:	db07      	blt.n	800fdb2 <_dtoa_r+0x7d2>
 800fda2:	f1ba 0f00 	cmp.w	sl, #0
 800fda6:	eba3 0404 	sub.w	r4, r3, r4
 800fdaa:	db0b      	blt.n	800fdc4 <_dtoa_r+0x7e4>
 800fdac:	9e04      	ldr	r6, [sp, #16]
 800fdae:	4652      	mov	r2, sl
 800fdb0:	e72f      	b.n	800fc12 <_dtoa_r+0x632>
 800fdb2:	1ae2      	subs	r2, r4, r3
 800fdb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdb6:	9e04      	ldr	r6, [sp, #16]
 800fdb8:	4413      	add	r3, r2
 800fdba:	930a      	str	r3, [sp, #40]	@ 0x28
 800fdbc:	4652      	mov	r2, sl
 800fdbe:	4623      	mov	r3, r4
 800fdc0:	2400      	movs	r4, #0
 800fdc2:	e726      	b.n	800fc12 <_dtoa_r+0x632>
 800fdc4:	9a04      	ldr	r2, [sp, #16]
 800fdc6:	eba2 060a 	sub.w	r6, r2, sl
 800fdca:	2200      	movs	r2, #0
 800fdcc:	e721      	b.n	800fc12 <_dtoa_r+0x632>
 800fdce:	9e04      	ldr	r6, [sp, #16]
 800fdd0:	9d08      	ldr	r5, [sp, #32]
 800fdd2:	461c      	mov	r4, r3
 800fdd4:	e72a      	b.n	800fc2c <_dtoa_r+0x64c>
 800fdd6:	9a01      	ldr	r2, [sp, #4]
 800fdd8:	9205      	str	r2, [sp, #20]
 800fdda:	e752      	b.n	800fc82 <_dtoa_r+0x6a2>
 800fddc:	9901      	ldr	r1, [sp, #4]
 800fdde:	461a      	mov	r2, r3
 800fde0:	e751      	b.n	800fc86 <_dtoa_r+0x6a6>
 800fde2:	9b05      	ldr	r3, [sp, #20]
 800fde4:	9301      	str	r3, [sp, #4]
 800fde6:	e752      	b.n	800fc8e <_dtoa_r+0x6ae>
 800fde8:	2300      	movs	r3, #0
 800fdea:	e77b      	b.n	800fce4 <_dtoa_r+0x704>
 800fdec:	9b02      	ldr	r3, [sp, #8]
 800fdee:	e779      	b.n	800fce4 <_dtoa_r+0x704>
 800fdf0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fdf2:	e778      	b.n	800fce6 <_dtoa_r+0x706>
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdf8:	e779      	b.n	800fcee <_dtoa_r+0x70e>
 800fdfa:	d093      	beq.n	800fd24 <_dtoa_r+0x744>
 800fdfc:	9b04      	ldr	r3, [sp, #16]
 800fdfe:	321c      	adds	r2, #28
 800fe00:	4413      	add	r3, r2
 800fe02:	9304      	str	r3, [sp, #16]
 800fe04:	9b06      	ldr	r3, [sp, #24]
 800fe06:	4416      	add	r6, r2
 800fe08:	4413      	add	r3, r2
 800fe0a:	e78a      	b.n	800fd22 <_dtoa_r+0x742>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	e7f5      	b.n	800fdfc <_dtoa_r+0x81c>
 800fe10:	f1ba 0f00 	cmp.w	sl, #0
 800fe14:	f8cd 8014 	str.w	r8, [sp, #20]
 800fe18:	46d3      	mov	fp, sl
 800fe1a:	dc21      	bgt.n	800fe60 <_dtoa_r+0x880>
 800fe1c:	9b07      	ldr	r3, [sp, #28]
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	dd1e      	ble.n	800fe60 <_dtoa_r+0x880>
 800fe22:	f1bb 0f00 	cmp.w	fp, #0
 800fe26:	f47f addc 	bne.w	800f9e2 <_dtoa_r+0x402>
 800fe2a:	4621      	mov	r1, r4
 800fe2c:	465b      	mov	r3, fp
 800fe2e:	2205      	movs	r2, #5
 800fe30:	4648      	mov	r0, r9
 800fe32:	f000 fde1 	bl	80109f8 <__multadd>
 800fe36:	4601      	mov	r1, r0
 800fe38:	4604      	mov	r4, r0
 800fe3a:	9801      	ldr	r0, [sp, #4]
 800fe3c:	f001 f836 	bl	8010eac <__mcmp>
 800fe40:	2800      	cmp	r0, #0
 800fe42:	f77f adce 	ble.w	800f9e2 <_dtoa_r+0x402>
 800fe46:	463e      	mov	r6, r7
 800fe48:	2331      	movs	r3, #49	@ 0x31
 800fe4a:	f806 3b01 	strb.w	r3, [r6], #1
 800fe4e:	9b05      	ldr	r3, [sp, #20]
 800fe50:	3301      	adds	r3, #1
 800fe52:	9305      	str	r3, [sp, #20]
 800fe54:	e5c9      	b.n	800f9ea <_dtoa_r+0x40a>
 800fe56:	f8cd 8014 	str.w	r8, [sp, #20]
 800fe5a:	4654      	mov	r4, sl
 800fe5c:	4625      	mov	r5, r4
 800fe5e:	e7f2      	b.n	800fe46 <_dtoa_r+0x866>
 800fe60:	9b08      	ldr	r3, [sp, #32]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 8102 	beq.w	801006c <_dtoa_r+0xa8c>
 800fe68:	2e00      	cmp	r6, #0
 800fe6a:	dd05      	ble.n	800fe78 <_dtoa_r+0x898>
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	4632      	mov	r2, r6
 800fe70:	4648      	mov	r0, r9
 800fe72:	f000 ffaf 	bl	8010dd4 <__lshift>
 800fe76:	4605      	mov	r5, r0
 800fe78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d058      	beq.n	800ff30 <_dtoa_r+0x950>
 800fe7e:	6869      	ldr	r1, [r5, #4]
 800fe80:	4648      	mov	r0, r9
 800fe82:	f000 fd57 	bl	8010934 <_Balloc>
 800fe86:	4606      	mov	r6, r0
 800fe88:	b928      	cbnz	r0, 800fe96 <_dtoa_r+0x8b6>
 800fe8a:	4b82      	ldr	r3, [pc, #520]	@ (8010094 <_dtoa_r+0xab4>)
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fe92:	f7ff bbbe 	b.w	800f612 <_dtoa_r+0x32>
 800fe96:	692a      	ldr	r2, [r5, #16]
 800fe98:	3202      	adds	r2, #2
 800fe9a:	0092      	lsls	r2, r2, #2
 800fe9c:	f105 010c 	add.w	r1, r5, #12
 800fea0:	300c      	adds	r0, #12
 800fea2:	f7ff faf6 	bl	800f492 <memcpy>
 800fea6:	2201      	movs	r2, #1
 800fea8:	4631      	mov	r1, r6
 800feaa:	4648      	mov	r0, r9
 800feac:	f000 ff92 	bl	8010dd4 <__lshift>
 800feb0:	1c7b      	adds	r3, r7, #1
 800feb2:	9304      	str	r3, [sp, #16]
 800feb4:	eb07 030b 	add.w	r3, r7, fp
 800feb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800feba:	9b02      	ldr	r3, [sp, #8]
 800febc:	f003 0301 	and.w	r3, r3, #1
 800fec0:	46a8      	mov	r8, r5
 800fec2:	9308      	str	r3, [sp, #32]
 800fec4:	4605      	mov	r5, r0
 800fec6:	9b04      	ldr	r3, [sp, #16]
 800fec8:	9801      	ldr	r0, [sp, #4]
 800feca:	4621      	mov	r1, r4
 800fecc:	f103 3bff 	add.w	fp, r3, #4294967295
 800fed0:	f7ff fafc 	bl	800f4cc <quorem>
 800fed4:	4641      	mov	r1, r8
 800fed6:	9002      	str	r0, [sp, #8]
 800fed8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fedc:	9801      	ldr	r0, [sp, #4]
 800fede:	f000 ffe5 	bl	8010eac <__mcmp>
 800fee2:	462a      	mov	r2, r5
 800fee4:	9006      	str	r0, [sp, #24]
 800fee6:	4621      	mov	r1, r4
 800fee8:	4648      	mov	r0, r9
 800feea:	f000 fffb 	bl	8010ee4 <__mdiff>
 800feee:	68c2      	ldr	r2, [r0, #12]
 800fef0:	4606      	mov	r6, r0
 800fef2:	b9fa      	cbnz	r2, 800ff34 <_dtoa_r+0x954>
 800fef4:	4601      	mov	r1, r0
 800fef6:	9801      	ldr	r0, [sp, #4]
 800fef8:	f000 ffd8 	bl	8010eac <__mcmp>
 800fefc:	4602      	mov	r2, r0
 800fefe:	4631      	mov	r1, r6
 800ff00:	4648      	mov	r0, r9
 800ff02:	920a      	str	r2, [sp, #40]	@ 0x28
 800ff04:	f000 fd56 	bl	80109b4 <_Bfree>
 800ff08:	9b07      	ldr	r3, [sp, #28]
 800ff0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff0c:	9e04      	ldr	r6, [sp, #16]
 800ff0e:	ea42 0103 	orr.w	r1, r2, r3
 800ff12:	9b08      	ldr	r3, [sp, #32]
 800ff14:	4319      	orrs	r1, r3
 800ff16:	d10f      	bne.n	800ff38 <_dtoa_r+0x958>
 800ff18:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ff1c:	d028      	beq.n	800ff70 <_dtoa_r+0x990>
 800ff1e:	9b06      	ldr	r3, [sp, #24]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	dd02      	ble.n	800ff2a <_dtoa_r+0x94a>
 800ff24:	9b02      	ldr	r3, [sp, #8]
 800ff26:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ff2a:	f88b a000 	strb.w	sl, [fp]
 800ff2e:	e55e      	b.n	800f9ee <_dtoa_r+0x40e>
 800ff30:	4628      	mov	r0, r5
 800ff32:	e7bd      	b.n	800feb0 <_dtoa_r+0x8d0>
 800ff34:	2201      	movs	r2, #1
 800ff36:	e7e2      	b.n	800fefe <_dtoa_r+0x91e>
 800ff38:	9b06      	ldr	r3, [sp, #24]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	db04      	blt.n	800ff48 <_dtoa_r+0x968>
 800ff3e:	9907      	ldr	r1, [sp, #28]
 800ff40:	430b      	orrs	r3, r1
 800ff42:	9908      	ldr	r1, [sp, #32]
 800ff44:	430b      	orrs	r3, r1
 800ff46:	d120      	bne.n	800ff8a <_dtoa_r+0x9aa>
 800ff48:	2a00      	cmp	r2, #0
 800ff4a:	ddee      	ble.n	800ff2a <_dtoa_r+0x94a>
 800ff4c:	9901      	ldr	r1, [sp, #4]
 800ff4e:	2201      	movs	r2, #1
 800ff50:	4648      	mov	r0, r9
 800ff52:	f000 ff3f 	bl	8010dd4 <__lshift>
 800ff56:	4621      	mov	r1, r4
 800ff58:	9001      	str	r0, [sp, #4]
 800ff5a:	f000 ffa7 	bl	8010eac <__mcmp>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	dc03      	bgt.n	800ff6a <_dtoa_r+0x98a>
 800ff62:	d1e2      	bne.n	800ff2a <_dtoa_r+0x94a>
 800ff64:	f01a 0f01 	tst.w	sl, #1
 800ff68:	d0df      	beq.n	800ff2a <_dtoa_r+0x94a>
 800ff6a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ff6e:	d1d9      	bne.n	800ff24 <_dtoa_r+0x944>
 800ff70:	2339      	movs	r3, #57	@ 0x39
 800ff72:	f88b 3000 	strb.w	r3, [fp]
 800ff76:	4633      	mov	r3, r6
 800ff78:	461e      	mov	r6, r3
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ff80:	2a39      	cmp	r2, #57	@ 0x39
 800ff82:	d052      	beq.n	801002a <_dtoa_r+0xa4a>
 800ff84:	3201      	adds	r2, #1
 800ff86:	701a      	strb	r2, [r3, #0]
 800ff88:	e531      	b.n	800f9ee <_dtoa_r+0x40e>
 800ff8a:	2a00      	cmp	r2, #0
 800ff8c:	dd07      	ble.n	800ff9e <_dtoa_r+0x9be>
 800ff8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ff92:	d0ed      	beq.n	800ff70 <_dtoa_r+0x990>
 800ff94:	f10a 0301 	add.w	r3, sl, #1
 800ff98:	f88b 3000 	strb.w	r3, [fp]
 800ff9c:	e527      	b.n	800f9ee <_dtoa_r+0x40e>
 800ff9e:	9b04      	ldr	r3, [sp, #16]
 800ffa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffa2:	f803 ac01 	strb.w	sl, [r3, #-1]
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d029      	beq.n	800fffe <_dtoa_r+0xa1e>
 800ffaa:	9901      	ldr	r1, [sp, #4]
 800ffac:	2300      	movs	r3, #0
 800ffae:	220a      	movs	r2, #10
 800ffb0:	4648      	mov	r0, r9
 800ffb2:	f000 fd21 	bl	80109f8 <__multadd>
 800ffb6:	45a8      	cmp	r8, r5
 800ffb8:	9001      	str	r0, [sp, #4]
 800ffba:	f04f 0300 	mov.w	r3, #0
 800ffbe:	f04f 020a 	mov.w	r2, #10
 800ffc2:	4641      	mov	r1, r8
 800ffc4:	4648      	mov	r0, r9
 800ffc6:	d107      	bne.n	800ffd8 <_dtoa_r+0x9f8>
 800ffc8:	f000 fd16 	bl	80109f8 <__multadd>
 800ffcc:	4680      	mov	r8, r0
 800ffce:	4605      	mov	r5, r0
 800ffd0:	9b04      	ldr	r3, [sp, #16]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	9304      	str	r3, [sp, #16]
 800ffd6:	e776      	b.n	800fec6 <_dtoa_r+0x8e6>
 800ffd8:	f000 fd0e 	bl	80109f8 <__multadd>
 800ffdc:	4629      	mov	r1, r5
 800ffde:	4680      	mov	r8, r0
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	220a      	movs	r2, #10
 800ffe4:	4648      	mov	r0, r9
 800ffe6:	f000 fd07 	bl	80109f8 <__multadd>
 800ffea:	4605      	mov	r5, r0
 800ffec:	e7f0      	b.n	800ffd0 <_dtoa_r+0x9f0>
 800ffee:	f1bb 0f00 	cmp.w	fp, #0
 800fff2:	bfcc      	ite	gt
 800fff4:	465e      	movgt	r6, fp
 800fff6:	2601      	movle	r6, #1
 800fff8:	443e      	add	r6, r7
 800fffa:	f04f 0800 	mov.w	r8, #0
 800fffe:	9901      	ldr	r1, [sp, #4]
 8010000:	2201      	movs	r2, #1
 8010002:	4648      	mov	r0, r9
 8010004:	f000 fee6 	bl	8010dd4 <__lshift>
 8010008:	4621      	mov	r1, r4
 801000a:	9001      	str	r0, [sp, #4]
 801000c:	f000 ff4e 	bl	8010eac <__mcmp>
 8010010:	2800      	cmp	r0, #0
 8010012:	dcb0      	bgt.n	800ff76 <_dtoa_r+0x996>
 8010014:	d102      	bne.n	801001c <_dtoa_r+0xa3c>
 8010016:	f01a 0f01 	tst.w	sl, #1
 801001a:	d1ac      	bne.n	800ff76 <_dtoa_r+0x996>
 801001c:	4633      	mov	r3, r6
 801001e:	461e      	mov	r6, r3
 8010020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010024:	2a30      	cmp	r2, #48	@ 0x30
 8010026:	d0fa      	beq.n	801001e <_dtoa_r+0xa3e>
 8010028:	e4e1      	b.n	800f9ee <_dtoa_r+0x40e>
 801002a:	429f      	cmp	r7, r3
 801002c:	d1a4      	bne.n	800ff78 <_dtoa_r+0x998>
 801002e:	9b05      	ldr	r3, [sp, #20]
 8010030:	3301      	adds	r3, #1
 8010032:	9305      	str	r3, [sp, #20]
 8010034:	2331      	movs	r3, #49	@ 0x31
 8010036:	703b      	strb	r3, [r7, #0]
 8010038:	e4d9      	b.n	800f9ee <_dtoa_r+0x40e>
 801003a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801003c:	4f16      	ldr	r7, [pc, #88]	@ (8010098 <_dtoa_r+0xab8>)
 801003e:	b11b      	cbz	r3, 8010048 <_dtoa_r+0xa68>
 8010040:	f107 0308 	add.w	r3, r7, #8
 8010044:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010046:	6013      	str	r3, [r2, #0]
 8010048:	4638      	mov	r0, r7
 801004a:	b011      	add	sp, #68	@ 0x44
 801004c:	ecbd 8b02 	vpop	{d8}
 8010050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010054:	9b07      	ldr	r3, [sp, #28]
 8010056:	2b01      	cmp	r3, #1
 8010058:	f77f ae2c 	ble.w	800fcb4 <_dtoa_r+0x6d4>
 801005c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801005e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010060:	2001      	movs	r0, #1
 8010062:	e64c      	b.n	800fcfe <_dtoa_r+0x71e>
 8010064:	f1bb 0f00 	cmp.w	fp, #0
 8010068:	f77f aed8 	ble.w	800fe1c <_dtoa_r+0x83c>
 801006c:	463e      	mov	r6, r7
 801006e:	9801      	ldr	r0, [sp, #4]
 8010070:	4621      	mov	r1, r4
 8010072:	f7ff fa2b 	bl	800f4cc <quorem>
 8010076:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801007a:	f806 ab01 	strb.w	sl, [r6], #1
 801007e:	1bf2      	subs	r2, r6, r7
 8010080:	4593      	cmp	fp, r2
 8010082:	ddb4      	ble.n	800ffee <_dtoa_r+0xa0e>
 8010084:	9901      	ldr	r1, [sp, #4]
 8010086:	2300      	movs	r3, #0
 8010088:	220a      	movs	r2, #10
 801008a:	4648      	mov	r0, r9
 801008c:	f000 fcb4 	bl	80109f8 <__multadd>
 8010090:	9001      	str	r0, [sp, #4]
 8010092:	e7ec      	b.n	801006e <_dtoa_r+0xa8e>
 8010094:	08011aae 	.word	0x08011aae
 8010098:	08011a32 	.word	0x08011a32

0801009c <_free_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4605      	mov	r5, r0
 80100a0:	2900      	cmp	r1, #0
 80100a2:	d041      	beq.n	8010128 <_free_r+0x8c>
 80100a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100a8:	1f0c      	subs	r4, r1, #4
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	bfb8      	it	lt
 80100ae:	18e4      	addlt	r4, r4, r3
 80100b0:	f000 fc34 	bl	801091c <__malloc_lock>
 80100b4:	4a1d      	ldr	r2, [pc, #116]	@ (801012c <_free_r+0x90>)
 80100b6:	6813      	ldr	r3, [r2, #0]
 80100b8:	b933      	cbnz	r3, 80100c8 <_free_r+0x2c>
 80100ba:	6063      	str	r3, [r4, #4]
 80100bc:	6014      	str	r4, [r2, #0]
 80100be:	4628      	mov	r0, r5
 80100c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100c4:	f000 bc30 	b.w	8010928 <__malloc_unlock>
 80100c8:	42a3      	cmp	r3, r4
 80100ca:	d908      	bls.n	80100de <_free_r+0x42>
 80100cc:	6820      	ldr	r0, [r4, #0]
 80100ce:	1821      	adds	r1, r4, r0
 80100d0:	428b      	cmp	r3, r1
 80100d2:	bf01      	itttt	eq
 80100d4:	6819      	ldreq	r1, [r3, #0]
 80100d6:	685b      	ldreq	r3, [r3, #4]
 80100d8:	1809      	addeq	r1, r1, r0
 80100da:	6021      	streq	r1, [r4, #0]
 80100dc:	e7ed      	b.n	80100ba <_free_r+0x1e>
 80100de:	461a      	mov	r2, r3
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	b10b      	cbz	r3, 80100e8 <_free_r+0x4c>
 80100e4:	42a3      	cmp	r3, r4
 80100e6:	d9fa      	bls.n	80100de <_free_r+0x42>
 80100e8:	6811      	ldr	r1, [r2, #0]
 80100ea:	1850      	adds	r0, r2, r1
 80100ec:	42a0      	cmp	r0, r4
 80100ee:	d10b      	bne.n	8010108 <_free_r+0x6c>
 80100f0:	6820      	ldr	r0, [r4, #0]
 80100f2:	4401      	add	r1, r0
 80100f4:	1850      	adds	r0, r2, r1
 80100f6:	4283      	cmp	r3, r0
 80100f8:	6011      	str	r1, [r2, #0]
 80100fa:	d1e0      	bne.n	80100be <_free_r+0x22>
 80100fc:	6818      	ldr	r0, [r3, #0]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	6053      	str	r3, [r2, #4]
 8010102:	4408      	add	r0, r1
 8010104:	6010      	str	r0, [r2, #0]
 8010106:	e7da      	b.n	80100be <_free_r+0x22>
 8010108:	d902      	bls.n	8010110 <_free_r+0x74>
 801010a:	230c      	movs	r3, #12
 801010c:	602b      	str	r3, [r5, #0]
 801010e:	e7d6      	b.n	80100be <_free_r+0x22>
 8010110:	6820      	ldr	r0, [r4, #0]
 8010112:	1821      	adds	r1, r4, r0
 8010114:	428b      	cmp	r3, r1
 8010116:	bf04      	itt	eq
 8010118:	6819      	ldreq	r1, [r3, #0]
 801011a:	685b      	ldreq	r3, [r3, #4]
 801011c:	6063      	str	r3, [r4, #4]
 801011e:	bf04      	itt	eq
 8010120:	1809      	addeq	r1, r1, r0
 8010122:	6021      	streq	r1, [r4, #0]
 8010124:	6054      	str	r4, [r2, #4]
 8010126:	e7ca      	b.n	80100be <_free_r+0x22>
 8010128:	bd38      	pop	{r3, r4, r5, pc}
 801012a:	bf00      	nop
 801012c:	24003984 	.word	0x24003984

08010130 <rshift>:
 8010130:	6903      	ldr	r3, [r0, #16]
 8010132:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801013a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801013e:	f100 0414 	add.w	r4, r0, #20
 8010142:	dd45      	ble.n	80101d0 <rshift+0xa0>
 8010144:	f011 011f 	ands.w	r1, r1, #31
 8010148:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801014c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010150:	d10c      	bne.n	801016c <rshift+0x3c>
 8010152:	f100 0710 	add.w	r7, r0, #16
 8010156:	4629      	mov	r1, r5
 8010158:	42b1      	cmp	r1, r6
 801015a:	d334      	bcc.n	80101c6 <rshift+0x96>
 801015c:	1a9b      	subs	r3, r3, r2
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	1eea      	subs	r2, r5, #3
 8010162:	4296      	cmp	r6, r2
 8010164:	bf38      	it	cc
 8010166:	2300      	movcc	r3, #0
 8010168:	4423      	add	r3, r4
 801016a:	e015      	b.n	8010198 <rshift+0x68>
 801016c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010170:	f1c1 0820 	rsb	r8, r1, #32
 8010174:	40cf      	lsrs	r7, r1
 8010176:	f105 0e04 	add.w	lr, r5, #4
 801017a:	46a1      	mov	r9, r4
 801017c:	4576      	cmp	r6, lr
 801017e:	46f4      	mov	ip, lr
 8010180:	d815      	bhi.n	80101ae <rshift+0x7e>
 8010182:	1a9a      	subs	r2, r3, r2
 8010184:	0092      	lsls	r2, r2, #2
 8010186:	3a04      	subs	r2, #4
 8010188:	3501      	adds	r5, #1
 801018a:	42ae      	cmp	r6, r5
 801018c:	bf38      	it	cc
 801018e:	2200      	movcc	r2, #0
 8010190:	18a3      	adds	r3, r4, r2
 8010192:	50a7      	str	r7, [r4, r2]
 8010194:	b107      	cbz	r7, 8010198 <rshift+0x68>
 8010196:	3304      	adds	r3, #4
 8010198:	1b1a      	subs	r2, r3, r4
 801019a:	42a3      	cmp	r3, r4
 801019c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80101a0:	bf08      	it	eq
 80101a2:	2300      	moveq	r3, #0
 80101a4:	6102      	str	r2, [r0, #16]
 80101a6:	bf08      	it	eq
 80101a8:	6143      	streq	r3, [r0, #20]
 80101aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101ae:	f8dc c000 	ldr.w	ip, [ip]
 80101b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80101b6:	ea4c 0707 	orr.w	r7, ip, r7
 80101ba:	f849 7b04 	str.w	r7, [r9], #4
 80101be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80101c2:	40cf      	lsrs	r7, r1
 80101c4:	e7da      	b.n	801017c <rshift+0x4c>
 80101c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80101ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80101ce:	e7c3      	b.n	8010158 <rshift+0x28>
 80101d0:	4623      	mov	r3, r4
 80101d2:	e7e1      	b.n	8010198 <rshift+0x68>

080101d4 <__hexdig_fun>:
 80101d4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80101d8:	2b09      	cmp	r3, #9
 80101da:	d802      	bhi.n	80101e2 <__hexdig_fun+0xe>
 80101dc:	3820      	subs	r0, #32
 80101de:	b2c0      	uxtb	r0, r0
 80101e0:	4770      	bx	lr
 80101e2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80101e6:	2b05      	cmp	r3, #5
 80101e8:	d801      	bhi.n	80101ee <__hexdig_fun+0x1a>
 80101ea:	3847      	subs	r0, #71	@ 0x47
 80101ec:	e7f7      	b.n	80101de <__hexdig_fun+0xa>
 80101ee:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80101f2:	2b05      	cmp	r3, #5
 80101f4:	d801      	bhi.n	80101fa <__hexdig_fun+0x26>
 80101f6:	3827      	subs	r0, #39	@ 0x27
 80101f8:	e7f1      	b.n	80101de <__hexdig_fun+0xa>
 80101fa:	2000      	movs	r0, #0
 80101fc:	4770      	bx	lr
	...

08010200 <__gethex>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	b085      	sub	sp, #20
 8010206:	468a      	mov	sl, r1
 8010208:	9302      	str	r3, [sp, #8]
 801020a:	680b      	ldr	r3, [r1, #0]
 801020c:	9001      	str	r0, [sp, #4]
 801020e:	4690      	mov	r8, r2
 8010210:	1c9c      	adds	r4, r3, #2
 8010212:	46a1      	mov	r9, r4
 8010214:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010218:	2830      	cmp	r0, #48	@ 0x30
 801021a:	d0fa      	beq.n	8010212 <__gethex+0x12>
 801021c:	eba9 0303 	sub.w	r3, r9, r3
 8010220:	f1a3 0b02 	sub.w	fp, r3, #2
 8010224:	f7ff ffd6 	bl	80101d4 <__hexdig_fun>
 8010228:	4605      	mov	r5, r0
 801022a:	2800      	cmp	r0, #0
 801022c:	d168      	bne.n	8010300 <__gethex+0x100>
 801022e:	49a0      	ldr	r1, [pc, #640]	@ (80104b0 <__gethex+0x2b0>)
 8010230:	2201      	movs	r2, #1
 8010232:	4648      	mov	r0, r9
 8010234:	f7ff f89c 	bl	800f370 <strncmp>
 8010238:	4607      	mov	r7, r0
 801023a:	2800      	cmp	r0, #0
 801023c:	d167      	bne.n	801030e <__gethex+0x10e>
 801023e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010242:	4626      	mov	r6, r4
 8010244:	f7ff ffc6 	bl	80101d4 <__hexdig_fun>
 8010248:	2800      	cmp	r0, #0
 801024a:	d062      	beq.n	8010312 <__gethex+0x112>
 801024c:	4623      	mov	r3, r4
 801024e:	7818      	ldrb	r0, [r3, #0]
 8010250:	2830      	cmp	r0, #48	@ 0x30
 8010252:	4699      	mov	r9, r3
 8010254:	f103 0301 	add.w	r3, r3, #1
 8010258:	d0f9      	beq.n	801024e <__gethex+0x4e>
 801025a:	f7ff ffbb 	bl	80101d4 <__hexdig_fun>
 801025e:	fab0 f580 	clz	r5, r0
 8010262:	096d      	lsrs	r5, r5, #5
 8010264:	f04f 0b01 	mov.w	fp, #1
 8010268:	464a      	mov	r2, r9
 801026a:	4616      	mov	r6, r2
 801026c:	3201      	adds	r2, #1
 801026e:	7830      	ldrb	r0, [r6, #0]
 8010270:	f7ff ffb0 	bl	80101d4 <__hexdig_fun>
 8010274:	2800      	cmp	r0, #0
 8010276:	d1f8      	bne.n	801026a <__gethex+0x6a>
 8010278:	498d      	ldr	r1, [pc, #564]	@ (80104b0 <__gethex+0x2b0>)
 801027a:	2201      	movs	r2, #1
 801027c:	4630      	mov	r0, r6
 801027e:	f7ff f877 	bl	800f370 <strncmp>
 8010282:	2800      	cmp	r0, #0
 8010284:	d13f      	bne.n	8010306 <__gethex+0x106>
 8010286:	b944      	cbnz	r4, 801029a <__gethex+0x9a>
 8010288:	1c74      	adds	r4, r6, #1
 801028a:	4622      	mov	r2, r4
 801028c:	4616      	mov	r6, r2
 801028e:	3201      	adds	r2, #1
 8010290:	7830      	ldrb	r0, [r6, #0]
 8010292:	f7ff ff9f 	bl	80101d4 <__hexdig_fun>
 8010296:	2800      	cmp	r0, #0
 8010298:	d1f8      	bne.n	801028c <__gethex+0x8c>
 801029a:	1ba4      	subs	r4, r4, r6
 801029c:	00a7      	lsls	r7, r4, #2
 801029e:	7833      	ldrb	r3, [r6, #0]
 80102a0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80102a4:	2b50      	cmp	r3, #80	@ 0x50
 80102a6:	d13e      	bne.n	8010326 <__gethex+0x126>
 80102a8:	7873      	ldrb	r3, [r6, #1]
 80102aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80102ac:	d033      	beq.n	8010316 <__gethex+0x116>
 80102ae:	2b2d      	cmp	r3, #45	@ 0x2d
 80102b0:	d034      	beq.n	801031c <__gethex+0x11c>
 80102b2:	1c71      	adds	r1, r6, #1
 80102b4:	2400      	movs	r4, #0
 80102b6:	7808      	ldrb	r0, [r1, #0]
 80102b8:	f7ff ff8c 	bl	80101d4 <__hexdig_fun>
 80102bc:	1e43      	subs	r3, r0, #1
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	2b18      	cmp	r3, #24
 80102c2:	d830      	bhi.n	8010326 <__gethex+0x126>
 80102c4:	f1a0 0210 	sub.w	r2, r0, #16
 80102c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80102cc:	f7ff ff82 	bl	80101d4 <__hexdig_fun>
 80102d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80102d4:	fa5f fc8c 	uxtb.w	ip, ip
 80102d8:	f1bc 0f18 	cmp.w	ip, #24
 80102dc:	f04f 030a 	mov.w	r3, #10
 80102e0:	d91e      	bls.n	8010320 <__gethex+0x120>
 80102e2:	b104      	cbz	r4, 80102e6 <__gethex+0xe6>
 80102e4:	4252      	negs	r2, r2
 80102e6:	4417      	add	r7, r2
 80102e8:	f8ca 1000 	str.w	r1, [sl]
 80102ec:	b1ed      	cbz	r5, 801032a <__gethex+0x12a>
 80102ee:	f1bb 0f00 	cmp.w	fp, #0
 80102f2:	bf0c      	ite	eq
 80102f4:	2506      	moveq	r5, #6
 80102f6:	2500      	movne	r5, #0
 80102f8:	4628      	mov	r0, r5
 80102fa:	b005      	add	sp, #20
 80102fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010300:	2500      	movs	r5, #0
 8010302:	462c      	mov	r4, r5
 8010304:	e7b0      	b.n	8010268 <__gethex+0x68>
 8010306:	2c00      	cmp	r4, #0
 8010308:	d1c7      	bne.n	801029a <__gethex+0x9a>
 801030a:	4627      	mov	r7, r4
 801030c:	e7c7      	b.n	801029e <__gethex+0x9e>
 801030e:	464e      	mov	r6, r9
 8010310:	462f      	mov	r7, r5
 8010312:	2501      	movs	r5, #1
 8010314:	e7c3      	b.n	801029e <__gethex+0x9e>
 8010316:	2400      	movs	r4, #0
 8010318:	1cb1      	adds	r1, r6, #2
 801031a:	e7cc      	b.n	80102b6 <__gethex+0xb6>
 801031c:	2401      	movs	r4, #1
 801031e:	e7fb      	b.n	8010318 <__gethex+0x118>
 8010320:	fb03 0002 	mla	r0, r3, r2, r0
 8010324:	e7ce      	b.n	80102c4 <__gethex+0xc4>
 8010326:	4631      	mov	r1, r6
 8010328:	e7de      	b.n	80102e8 <__gethex+0xe8>
 801032a:	eba6 0309 	sub.w	r3, r6, r9
 801032e:	3b01      	subs	r3, #1
 8010330:	4629      	mov	r1, r5
 8010332:	2b07      	cmp	r3, #7
 8010334:	dc0a      	bgt.n	801034c <__gethex+0x14c>
 8010336:	9801      	ldr	r0, [sp, #4]
 8010338:	f000 fafc 	bl	8010934 <_Balloc>
 801033c:	4604      	mov	r4, r0
 801033e:	b940      	cbnz	r0, 8010352 <__gethex+0x152>
 8010340:	4b5c      	ldr	r3, [pc, #368]	@ (80104b4 <__gethex+0x2b4>)
 8010342:	4602      	mov	r2, r0
 8010344:	21e4      	movs	r1, #228	@ 0xe4
 8010346:	485c      	ldr	r0, [pc, #368]	@ (80104b8 <__gethex+0x2b8>)
 8010348:	f001 fa2a 	bl	80117a0 <__assert_func>
 801034c:	3101      	adds	r1, #1
 801034e:	105b      	asrs	r3, r3, #1
 8010350:	e7ef      	b.n	8010332 <__gethex+0x132>
 8010352:	f100 0a14 	add.w	sl, r0, #20
 8010356:	2300      	movs	r3, #0
 8010358:	4655      	mov	r5, sl
 801035a:	469b      	mov	fp, r3
 801035c:	45b1      	cmp	r9, r6
 801035e:	d337      	bcc.n	80103d0 <__gethex+0x1d0>
 8010360:	f845 bb04 	str.w	fp, [r5], #4
 8010364:	eba5 050a 	sub.w	r5, r5, sl
 8010368:	10ad      	asrs	r5, r5, #2
 801036a:	6125      	str	r5, [r4, #16]
 801036c:	4658      	mov	r0, fp
 801036e:	f000 fbd3 	bl	8010b18 <__hi0bits>
 8010372:	016d      	lsls	r5, r5, #5
 8010374:	f8d8 6000 	ldr.w	r6, [r8]
 8010378:	1a2d      	subs	r5, r5, r0
 801037a:	42b5      	cmp	r5, r6
 801037c:	dd54      	ble.n	8010428 <__gethex+0x228>
 801037e:	1bad      	subs	r5, r5, r6
 8010380:	4629      	mov	r1, r5
 8010382:	4620      	mov	r0, r4
 8010384:	f000 ff5c 	bl	8011240 <__any_on>
 8010388:	4681      	mov	r9, r0
 801038a:	b178      	cbz	r0, 80103ac <__gethex+0x1ac>
 801038c:	1e6b      	subs	r3, r5, #1
 801038e:	1159      	asrs	r1, r3, #5
 8010390:	f003 021f 	and.w	r2, r3, #31
 8010394:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010398:	f04f 0901 	mov.w	r9, #1
 801039c:	fa09 f202 	lsl.w	r2, r9, r2
 80103a0:	420a      	tst	r2, r1
 80103a2:	d003      	beq.n	80103ac <__gethex+0x1ac>
 80103a4:	454b      	cmp	r3, r9
 80103a6:	dc36      	bgt.n	8010416 <__gethex+0x216>
 80103a8:	f04f 0902 	mov.w	r9, #2
 80103ac:	4629      	mov	r1, r5
 80103ae:	4620      	mov	r0, r4
 80103b0:	f7ff febe 	bl	8010130 <rshift>
 80103b4:	442f      	add	r7, r5
 80103b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103ba:	42bb      	cmp	r3, r7
 80103bc:	da42      	bge.n	8010444 <__gethex+0x244>
 80103be:	9801      	ldr	r0, [sp, #4]
 80103c0:	4621      	mov	r1, r4
 80103c2:	f000 faf7 	bl	80109b4 <_Bfree>
 80103c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103c8:	2300      	movs	r3, #0
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	25a3      	movs	r5, #163	@ 0xa3
 80103ce:	e793      	b.n	80102f8 <__gethex+0xf8>
 80103d0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80103d4:	2a2e      	cmp	r2, #46	@ 0x2e
 80103d6:	d012      	beq.n	80103fe <__gethex+0x1fe>
 80103d8:	2b20      	cmp	r3, #32
 80103da:	d104      	bne.n	80103e6 <__gethex+0x1e6>
 80103dc:	f845 bb04 	str.w	fp, [r5], #4
 80103e0:	f04f 0b00 	mov.w	fp, #0
 80103e4:	465b      	mov	r3, fp
 80103e6:	7830      	ldrb	r0, [r6, #0]
 80103e8:	9303      	str	r3, [sp, #12]
 80103ea:	f7ff fef3 	bl	80101d4 <__hexdig_fun>
 80103ee:	9b03      	ldr	r3, [sp, #12]
 80103f0:	f000 000f 	and.w	r0, r0, #15
 80103f4:	4098      	lsls	r0, r3
 80103f6:	ea4b 0b00 	orr.w	fp, fp, r0
 80103fa:	3304      	adds	r3, #4
 80103fc:	e7ae      	b.n	801035c <__gethex+0x15c>
 80103fe:	45b1      	cmp	r9, r6
 8010400:	d8ea      	bhi.n	80103d8 <__gethex+0x1d8>
 8010402:	492b      	ldr	r1, [pc, #172]	@ (80104b0 <__gethex+0x2b0>)
 8010404:	9303      	str	r3, [sp, #12]
 8010406:	2201      	movs	r2, #1
 8010408:	4630      	mov	r0, r6
 801040a:	f7fe ffb1 	bl	800f370 <strncmp>
 801040e:	9b03      	ldr	r3, [sp, #12]
 8010410:	2800      	cmp	r0, #0
 8010412:	d1e1      	bne.n	80103d8 <__gethex+0x1d8>
 8010414:	e7a2      	b.n	801035c <__gethex+0x15c>
 8010416:	1ea9      	subs	r1, r5, #2
 8010418:	4620      	mov	r0, r4
 801041a:	f000 ff11 	bl	8011240 <__any_on>
 801041e:	2800      	cmp	r0, #0
 8010420:	d0c2      	beq.n	80103a8 <__gethex+0x1a8>
 8010422:	f04f 0903 	mov.w	r9, #3
 8010426:	e7c1      	b.n	80103ac <__gethex+0x1ac>
 8010428:	da09      	bge.n	801043e <__gethex+0x23e>
 801042a:	1b75      	subs	r5, r6, r5
 801042c:	4621      	mov	r1, r4
 801042e:	9801      	ldr	r0, [sp, #4]
 8010430:	462a      	mov	r2, r5
 8010432:	f000 fccf 	bl	8010dd4 <__lshift>
 8010436:	1b7f      	subs	r7, r7, r5
 8010438:	4604      	mov	r4, r0
 801043a:	f100 0a14 	add.w	sl, r0, #20
 801043e:	f04f 0900 	mov.w	r9, #0
 8010442:	e7b8      	b.n	80103b6 <__gethex+0x1b6>
 8010444:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010448:	42bd      	cmp	r5, r7
 801044a:	dd6f      	ble.n	801052c <__gethex+0x32c>
 801044c:	1bed      	subs	r5, r5, r7
 801044e:	42ae      	cmp	r6, r5
 8010450:	dc34      	bgt.n	80104bc <__gethex+0x2bc>
 8010452:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010456:	2b02      	cmp	r3, #2
 8010458:	d022      	beq.n	80104a0 <__gethex+0x2a0>
 801045a:	2b03      	cmp	r3, #3
 801045c:	d024      	beq.n	80104a8 <__gethex+0x2a8>
 801045e:	2b01      	cmp	r3, #1
 8010460:	d115      	bne.n	801048e <__gethex+0x28e>
 8010462:	42ae      	cmp	r6, r5
 8010464:	d113      	bne.n	801048e <__gethex+0x28e>
 8010466:	2e01      	cmp	r6, #1
 8010468:	d10b      	bne.n	8010482 <__gethex+0x282>
 801046a:	9a02      	ldr	r2, [sp, #8]
 801046c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010470:	6013      	str	r3, [r2, #0]
 8010472:	2301      	movs	r3, #1
 8010474:	6123      	str	r3, [r4, #16]
 8010476:	f8ca 3000 	str.w	r3, [sl]
 801047a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801047c:	2562      	movs	r5, #98	@ 0x62
 801047e:	601c      	str	r4, [r3, #0]
 8010480:	e73a      	b.n	80102f8 <__gethex+0xf8>
 8010482:	1e71      	subs	r1, r6, #1
 8010484:	4620      	mov	r0, r4
 8010486:	f000 fedb 	bl	8011240 <__any_on>
 801048a:	2800      	cmp	r0, #0
 801048c:	d1ed      	bne.n	801046a <__gethex+0x26a>
 801048e:	9801      	ldr	r0, [sp, #4]
 8010490:	4621      	mov	r1, r4
 8010492:	f000 fa8f 	bl	80109b4 <_Bfree>
 8010496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010498:	2300      	movs	r3, #0
 801049a:	6013      	str	r3, [r2, #0]
 801049c:	2550      	movs	r5, #80	@ 0x50
 801049e:	e72b      	b.n	80102f8 <__gethex+0xf8>
 80104a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1f3      	bne.n	801048e <__gethex+0x28e>
 80104a6:	e7e0      	b.n	801046a <__gethex+0x26a>
 80104a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d1dd      	bne.n	801046a <__gethex+0x26a>
 80104ae:	e7ee      	b.n	801048e <__gethex+0x28e>
 80104b0:	080119f4 	.word	0x080119f4
 80104b4:	08011aae 	.word	0x08011aae
 80104b8:	08011abf 	.word	0x08011abf
 80104bc:	1e6f      	subs	r7, r5, #1
 80104be:	f1b9 0f00 	cmp.w	r9, #0
 80104c2:	d130      	bne.n	8010526 <__gethex+0x326>
 80104c4:	b127      	cbz	r7, 80104d0 <__gethex+0x2d0>
 80104c6:	4639      	mov	r1, r7
 80104c8:	4620      	mov	r0, r4
 80104ca:	f000 feb9 	bl	8011240 <__any_on>
 80104ce:	4681      	mov	r9, r0
 80104d0:	117a      	asrs	r2, r7, #5
 80104d2:	2301      	movs	r3, #1
 80104d4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80104d8:	f007 071f 	and.w	r7, r7, #31
 80104dc:	40bb      	lsls	r3, r7
 80104de:	4213      	tst	r3, r2
 80104e0:	4629      	mov	r1, r5
 80104e2:	4620      	mov	r0, r4
 80104e4:	bf18      	it	ne
 80104e6:	f049 0902 	orrne.w	r9, r9, #2
 80104ea:	f7ff fe21 	bl	8010130 <rshift>
 80104ee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80104f2:	1b76      	subs	r6, r6, r5
 80104f4:	2502      	movs	r5, #2
 80104f6:	f1b9 0f00 	cmp.w	r9, #0
 80104fa:	d047      	beq.n	801058c <__gethex+0x38c>
 80104fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d015      	beq.n	8010530 <__gethex+0x330>
 8010504:	2b03      	cmp	r3, #3
 8010506:	d017      	beq.n	8010538 <__gethex+0x338>
 8010508:	2b01      	cmp	r3, #1
 801050a:	d109      	bne.n	8010520 <__gethex+0x320>
 801050c:	f019 0f02 	tst.w	r9, #2
 8010510:	d006      	beq.n	8010520 <__gethex+0x320>
 8010512:	f8da 3000 	ldr.w	r3, [sl]
 8010516:	ea49 0903 	orr.w	r9, r9, r3
 801051a:	f019 0f01 	tst.w	r9, #1
 801051e:	d10e      	bne.n	801053e <__gethex+0x33e>
 8010520:	f045 0510 	orr.w	r5, r5, #16
 8010524:	e032      	b.n	801058c <__gethex+0x38c>
 8010526:	f04f 0901 	mov.w	r9, #1
 801052a:	e7d1      	b.n	80104d0 <__gethex+0x2d0>
 801052c:	2501      	movs	r5, #1
 801052e:	e7e2      	b.n	80104f6 <__gethex+0x2f6>
 8010530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010532:	f1c3 0301 	rsb	r3, r3, #1
 8010536:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801053a:	2b00      	cmp	r3, #0
 801053c:	d0f0      	beq.n	8010520 <__gethex+0x320>
 801053e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010542:	f104 0314 	add.w	r3, r4, #20
 8010546:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801054a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801054e:	f04f 0c00 	mov.w	ip, #0
 8010552:	4618      	mov	r0, r3
 8010554:	f853 2b04 	ldr.w	r2, [r3], #4
 8010558:	f1b2 3fff 	cmp.w	r2, #4294967295
 801055c:	d01b      	beq.n	8010596 <__gethex+0x396>
 801055e:	3201      	adds	r2, #1
 8010560:	6002      	str	r2, [r0, #0]
 8010562:	2d02      	cmp	r5, #2
 8010564:	f104 0314 	add.w	r3, r4, #20
 8010568:	d13c      	bne.n	80105e4 <__gethex+0x3e4>
 801056a:	f8d8 2000 	ldr.w	r2, [r8]
 801056e:	3a01      	subs	r2, #1
 8010570:	42b2      	cmp	r2, r6
 8010572:	d109      	bne.n	8010588 <__gethex+0x388>
 8010574:	1171      	asrs	r1, r6, #5
 8010576:	2201      	movs	r2, #1
 8010578:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801057c:	f006 061f 	and.w	r6, r6, #31
 8010580:	fa02 f606 	lsl.w	r6, r2, r6
 8010584:	421e      	tst	r6, r3
 8010586:	d13a      	bne.n	80105fe <__gethex+0x3fe>
 8010588:	f045 0520 	orr.w	r5, r5, #32
 801058c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801058e:	601c      	str	r4, [r3, #0]
 8010590:	9b02      	ldr	r3, [sp, #8]
 8010592:	601f      	str	r7, [r3, #0]
 8010594:	e6b0      	b.n	80102f8 <__gethex+0xf8>
 8010596:	4299      	cmp	r1, r3
 8010598:	f843 cc04 	str.w	ip, [r3, #-4]
 801059c:	d8d9      	bhi.n	8010552 <__gethex+0x352>
 801059e:	68a3      	ldr	r3, [r4, #8]
 80105a0:	459b      	cmp	fp, r3
 80105a2:	db17      	blt.n	80105d4 <__gethex+0x3d4>
 80105a4:	6861      	ldr	r1, [r4, #4]
 80105a6:	9801      	ldr	r0, [sp, #4]
 80105a8:	3101      	adds	r1, #1
 80105aa:	f000 f9c3 	bl	8010934 <_Balloc>
 80105ae:	4681      	mov	r9, r0
 80105b0:	b918      	cbnz	r0, 80105ba <__gethex+0x3ba>
 80105b2:	4b1a      	ldr	r3, [pc, #104]	@ (801061c <__gethex+0x41c>)
 80105b4:	4602      	mov	r2, r0
 80105b6:	2184      	movs	r1, #132	@ 0x84
 80105b8:	e6c5      	b.n	8010346 <__gethex+0x146>
 80105ba:	6922      	ldr	r2, [r4, #16]
 80105bc:	3202      	adds	r2, #2
 80105be:	f104 010c 	add.w	r1, r4, #12
 80105c2:	0092      	lsls	r2, r2, #2
 80105c4:	300c      	adds	r0, #12
 80105c6:	f7fe ff64 	bl	800f492 <memcpy>
 80105ca:	4621      	mov	r1, r4
 80105cc:	9801      	ldr	r0, [sp, #4]
 80105ce:	f000 f9f1 	bl	80109b4 <_Bfree>
 80105d2:	464c      	mov	r4, r9
 80105d4:	6923      	ldr	r3, [r4, #16]
 80105d6:	1c5a      	adds	r2, r3, #1
 80105d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105dc:	6122      	str	r2, [r4, #16]
 80105de:	2201      	movs	r2, #1
 80105e0:	615a      	str	r2, [r3, #20]
 80105e2:	e7be      	b.n	8010562 <__gethex+0x362>
 80105e4:	6922      	ldr	r2, [r4, #16]
 80105e6:	455a      	cmp	r2, fp
 80105e8:	dd0b      	ble.n	8010602 <__gethex+0x402>
 80105ea:	2101      	movs	r1, #1
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7ff fd9f 	bl	8010130 <rshift>
 80105f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80105f6:	3701      	adds	r7, #1
 80105f8:	42bb      	cmp	r3, r7
 80105fa:	f6ff aee0 	blt.w	80103be <__gethex+0x1be>
 80105fe:	2501      	movs	r5, #1
 8010600:	e7c2      	b.n	8010588 <__gethex+0x388>
 8010602:	f016 061f 	ands.w	r6, r6, #31
 8010606:	d0fa      	beq.n	80105fe <__gethex+0x3fe>
 8010608:	4453      	add	r3, sl
 801060a:	f1c6 0620 	rsb	r6, r6, #32
 801060e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010612:	f000 fa81 	bl	8010b18 <__hi0bits>
 8010616:	42b0      	cmp	r0, r6
 8010618:	dbe7      	blt.n	80105ea <__gethex+0x3ea>
 801061a:	e7f0      	b.n	80105fe <__gethex+0x3fe>
 801061c:	08011aae 	.word	0x08011aae

08010620 <L_shift>:
 8010620:	f1c2 0208 	rsb	r2, r2, #8
 8010624:	0092      	lsls	r2, r2, #2
 8010626:	b570      	push	{r4, r5, r6, lr}
 8010628:	f1c2 0620 	rsb	r6, r2, #32
 801062c:	6843      	ldr	r3, [r0, #4]
 801062e:	6804      	ldr	r4, [r0, #0]
 8010630:	fa03 f506 	lsl.w	r5, r3, r6
 8010634:	432c      	orrs	r4, r5
 8010636:	40d3      	lsrs	r3, r2
 8010638:	6004      	str	r4, [r0, #0]
 801063a:	f840 3f04 	str.w	r3, [r0, #4]!
 801063e:	4288      	cmp	r0, r1
 8010640:	d3f4      	bcc.n	801062c <L_shift+0xc>
 8010642:	bd70      	pop	{r4, r5, r6, pc}

08010644 <__match>:
 8010644:	b530      	push	{r4, r5, lr}
 8010646:	6803      	ldr	r3, [r0, #0]
 8010648:	3301      	adds	r3, #1
 801064a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801064e:	b914      	cbnz	r4, 8010656 <__match+0x12>
 8010650:	6003      	str	r3, [r0, #0]
 8010652:	2001      	movs	r0, #1
 8010654:	bd30      	pop	{r4, r5, pc}
 8010656:	f813 2b01 	ldrb.w	r2, [r3], #1
 801065a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801065e:	2d19      	cmp	r5, #25
 8010660:	bf98      	it	ls
 8010662:	3220      	addls	r2, #32
 8010664:	42a2      	cmp	r2, r4
 8010666:	d0f0      	beq.n	801064a <__match+0x6>
 8010668:	2000      	movs	r0, #0
 801066a:	e7f3      	b.n	8010654 <__match+0x10>

0801066c <__hexnan>:
 801066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010670:	680b      	ldr	r3, [r1, #0]
 8010672:	6801      	ldr	r1, [r0, #0]
 8010674:	115e      	asrs	r6, r3, #5
 8010676:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801067a:	f013 031f 	ands.w	r3, r3, #31
 801067e:	b087      	sub	sp, #28
 8010680:	bf18      	it	ne
 8010682:	3604      	addne	r6, #4
 8010684:	2500      	movs	r5, #0
 8010686:	1f37      	subs	r7, r6, #4
 8010688:	4682      	mov	sl, r0
 801068a:	4690      	mov	r8, r2
 801068c:	9301      	str	r3, [sp, #4]
 801068e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010692:	46b9      	mov	r9, r7
 8010694:	463c      	mov	r4, r7
 8010696:	9502      	str	r5, [sp, #8]
 8010698:	46ab      	mov	fp, r5
 801069a:	784a      	ldrb	r2, [r1, #1]
 801069c:	1c4b      	adds	r3, r1, #1
 801069e:	9303      	str	r3, [sp, #12]
 80106a0:	b342      	cbz	r2, 80106f4 <__hexnan+0x88>
 80106a2:	4610      	mov	r0, r2
 80106a4:	9105      	str	r1, [sp, #20]
 80106a6:	9204      	str	r2, [sp, #16]
 80106a8:	f7ff fd94 	bl	80101d4 <__hexdig_fun>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	d151      	bne.n	8010754 <__hexnan+0xe8>
 80106b0:	9a04      	ldr	r2, [sp, #16]
 80106b2:	9905      	ldr	r1, [sp, #20]
 80106b4:	2a20      	cmp	r2, #32
 80106b6:	d818      	bhi.n	80106ea <__hexnan+0x7e>
 80106b8:	9b02      	ldr	r3, [sp, #8]
 80106ba:	459b      	cmp	fp, r3
 80106bc:	dd13      	ble.n	80106e6 <__hexnan+0x7a>
 80106be:	454c      	cmp	r4, r9
 80106c0:	d206      	bcs.n	80106d0 <__hexnan+0x64>
 80106c2:	2d07      	cmp	r5, #7
 80106c4:	dc04      	bgt.n	80106d0 <__hexnan+0x64>
 80106c6:	462a      	mov	r2, r5
 80106c8:	4649      	mov	r1, r9
 80106ca:	4620      	mov	r0, r4
 80106cc:	f7ff ffa8 	bl	8010620 <L_shift>
 80106d0:	4544      	cmp	r4, r8
 80106d2:	d952      	bls.n	801077a <__hexnan+0x10e>
 80106d4:	2300      	movs	r3, #0
 80106d6:	f1a4 0904 	sub.w	r9, r4, #4
 80106da:	f844 3c04 	str.w	r3, [r4, #-4]
 80106de:	f8cd b008 	str.w	fp, [sp, #8]
 80106e2:	464c      	mov	r4, r9
 80106e4:	461d      	mov	r5, r3
 80106e6:	9903      	ldr	r1, [sp, #12]
 80106e8:	e7d7      	b.n	801069a <__hexnan+0x2e>
 80106ea:	2a29      	cmp	r2, #41	@ 0x29
 80106ec:	d157      	bne.n	801079e <__hexnan+0x132>
 80106ee:	3102      	adds	r1, #2
 80106f0:	f8ca 1000 	str.w	r1, [sl]
 80106f4:	f1bb 0f00 	cmp.w	fp, #0
 80106f8:	d051      	beq.n	801079e <__hexnan+0x132>
 80106fa:	454c      	cmp	r4, r9
 80106fc:	d206      	bcs.n	801070c <__hexnan+0xa0>
 80106fe:	2d07      	cmp	r5, #7
 8010700:	dc04      	bgt.n	801070c <__hexnan+0xa0>
 8010702:	462a      	mov	r2, r5
 8010704:	4649      	mov	r1, r9
 8010706:	4620      	mov	r0, r4
 8010708:	f7ff ff8a 	bl	8010620 <L_shift>
 801070c:	4544      	cmp	r4, r8
 801070e:	d936      	bls.n	801077e <__hexnan+0x112>
 8010710:	f1a8 0204 	sub.w	r2, r8, #4
 8010714:	4623      	mov	r3, r4
 8010716:	f853 1b04 	ldr.w	r1, [r3], #4
 801071a:	f842 1f04 	str.w	r1, [r2, #4]!
 801071e:	429f      	cmp	r7, r3
 8010720:	d2f9      	bcs.n	8010716 <__hexnan+0xaa>
 8010722:	1b3b      	subs	r3, r7, r4
 8010724:	f023 0303 	bic.w	r3, r3, #3
 8010728:	3304      	adds	r3, #4
 801072a:	3401      	adds	r4, #1
 801072c:	3e03      	subs	r6, #3
 801072e:	42b4      	cmp	r4, r6
 8010730:	bf88      	it	hi
 8010732:	2304      	movhi	r3, #4
 8010734:	4443      	add	r3, r8
 8010736:	2200      	movs	r2, #0
 8010738:	f843 2b04 	str.w	r2, [r3], #4
 801073c:	429f      	cmp	r7, r3
 801073e:	d2fb      	bcs.n	8010738 <__hexnan+0xcc>
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	b91b      	cbnz	r3, 801074c <__hexnan+0xe0>
 8010744:	4547      	cmp	r7, r8
 8010746:	d128      	bne.n	801079a <__hexnan+0x12e>
 8010748:	2301      	movs	r3, #1
 801074a:	603b      	str	r3, [r7, #0]
 801074c:	2005      	movs	r0, #5
 801074e:	b007      	add	sp, #28
 8010750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010754:	3501      	adds	r5, #1
 8010756:	2d08      	cmp	r5, #8
 8010758:	f10b 0b01 	add.w	fp, fp, #1
 801075c:	dd06      	ble.n	801076c <__hexnan+0x100>
 801075e:	4544      	cmp	r4, r8
 8010760:	d9c1      	bls.n	80106e6 <__hexnan+0x7a>
 8010762:	2300      	movs	r3, #0
 8010764:	f844 3c04 	str.w	r3, [r4, #-4]
 8010768:	2501      	movs	r5, #1
 801076a:	3c04      	subs	r4, #4
 801076c:	6822      	ldr	r2, [r4, #0]
 801076e:	f000 000f 	and.w	r0, r0, #15
 8010772:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010776:	6020      	str	r0, [r4, #0]
 8010778:	e7b5      	b.n	80106e6 <__hexnan+0x7a>
 801077a:	2508      	movs	r5, #8
 801077c:	e7b3      	b.n	80106e6 <__hexnan+0x7a>
 801077e:	9b01      	ldr	r3, [sp, #4]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d0dd      	beq.n	8010740 <__hexnan+0xd4>
 8010784:	f1c3 0320 	rsb	r3, r3, #32
 8010788:	f04f 32ff 	mov.w	r2, #4294967295
 801078c:	40da      	lsrs	r2, r3
 801078e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010792:	4013      	ands	r3, r2
 8010794:	f846 3c04 	str.w	r3, [r6, #-4]
 8010798:	e7d2      	b.n	8010740 <__hexnan+0xd4>
 801079a:	3f04      	subs	r7, #4
 801079c:	e7d0      	b.n	8010740 <__hexnan+0xd4>
 801079e:	2004      	movs	r0, #4
 80107a0:	e7d5      	b.n	801074e <__hexnan+0xe2>
	...

080107a4 <malloc>:
 80107a4:	4b02      	ldr	r3, [pc, #8]	@ (80107b0 <malloc+0xc>)
 80107a6:	4601      	mov	r1, r0
 80107a8:	6818      	ldr	r0, [r3, #0]
 80107aa:	f000 b825 	b.w	80107f8 <_malloc_r>
 80107ae:	bf00      	nop
 80107b0:	2400027c 	.word	0x2400027c

080107b4 <sbrk_aligned>:
 80107b4:	b570      	push	{r4, r5, r6, lr}
 80107b6:	4e0f      	ldr	r6, [pc, #60]	@ (80107f4 <sbrk_aligned+0x40>)
 80107b8:	460c      	mov	r4, r1
 80107ba:	6831      	ldr	r1, [r6, #0]
 80107bc:	4605      	mov	r5, r0
 80107be:	b911      	cbnz	r1, 80107c6 <sbrk_aligned+0x12>
 80107c0:	f000 ffde 	bl	8011780 <_sbrk_r>
 80107c4:	6030      	str	r0, [r6, #0]
 80107c6:	4621      	mov	r1, r4
 80107c8:	4628      	mov	r0, r5
 80107ca:	f000 ffd9 	bl	8011780 <_sbrk_r>
 80107ce:	1c43      	adds	r3, r0, #1
 80107d0:	d103      	bne.n	80107da <sbrk_aligned+0x26>
 80107d2:	f04f 34ff 	mov.w	r4, #4294967295
 80107d6:	4620      	mov	r0, r4
 80107d8:	bd70      	pop	{r4, r5, r6, pc}
 80107da:	1cc4      	adds	r4, r0, #3
 80107dc:	f024 0403 	bic.w	r4, r4, #3
 80107e0:	42a0      	cmp	r0, r4
 80107e2:	d0f8      	beq.n	80107d6 <sbrk_aligned+0x22>
 80107e4:	1a21      	subs	r1, r4, r0
 80107e6:	4628      	mov	r0, r5
 80107e8:	f000 ffca 	bl	8011780 <_sbrk_r>
 80107ec:	3001      	adds	r0, #1
 80107ee:	d1f2      	bne.n	80107d6 <sbrk_aligned+0x22>
 80107f0:	e7ef      	b.n	80107d2 <sbrk_aligned+0x1e>
 80107f2:	bf00      	nop
 80107f4:	24003980 	.word	0x24003980

080107f8 <_malloc_r>:
 80107f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107fc:	1ccd      	adds	r5, r1, #3
 80107fe:	f025 0503 	bic.w	r5, r5, #3
 8010802:	3508      	adds	r5, #8
 8010804:	2d0c      	cmp	r5, #12
 8010806:	bf38      	it	cc
 8010808:	250c      	movcc	r5, #12
 801080a:	2d00      	cmp	r5, #0
 801080c:	4606      	mov	r6, r0
 801080e:	db01      	blt.n	8010814 <_malloc_r+0x1c>
 8010810:	42a9      	cmp	r1, r5
 8010812:	d904      	bls.n	801081e <_malloc_r+0x26>
 8010814:	230c      	movs	r3, #12
 8010816:	6033      	str	r3, [r6, #0]
 8010818:	2000      	movs	r0, #0
 801081a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801081e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80108f4 <_malloc_r+0xfc>
 8010822:	f000 f87b 	bl	801091c <__malloc_lock>
 8010826:	f8d8 3000 	ldr.w	r3, [r8]
 801082a:	461c      	mov	r4, r3
 801082c:	bb44      	cbnz	r4, 8010880 <_malloc_r+0x88>
 801082e:	4629      	mov	r1, r5
 8010830:	4630      	mov	r0, r6
 8010832:	f7ff ffbf 	bl	80107b4 <sbrk_aligned>
 8010836:	1c43      	adds	r3, r0, #1
 8010838:	4604      	mov	r4, r0
 801083a:	d158      	bne.n	80108ee <_malloc_r+0xf6>
 801083c:	f8d8 4000 	ldr.w	r4, [r8]
 8010840:	4627      	mov	r7, r4
 8010842:	2f00      	cmp	r7, #0
 8010844:	d143      	bne.n	80108ce <_malloc_r+0xd6>
 8010846:	2c00      	cmp	r4, #0
 8010848:	d04b      	beq.n	80108e2 <_malloc_r+0xea>
 801084a:	6823      	ldr	r3, [r4, #0]
 801084c:	4639      	mov	r1, r7
 801084e:	4630      	mov	r0, r6
 8010850:	eb04 0903 	add.w	r9, r4, r3
 8010854:	f000 ff94 	bl	8011780 <_sbrk_r>
 8010858:	4581      	cmp	r9, r0
 801085a:	d142      	bne.n	80108e2 <_malloc_r+0xea>
 801085c:	6821      	ldr	r1, [r4, #0]
 801085e:	1a6d      	subs	r5, r5, r1
 8010860:	4629      	mov	r1, r5
 8010862:	4630      	mov	r0, r6
 8010864:	f7ff ffa6 	bl	80107b4 <sbrk_aligned>
 8010868:	3001      	adds	r0, #1
 801086a:	d03a      	beq.n	80108e2 <_malloc_r+0xea>
 801086c:	6823      	ldr	r3, [r4, #0]
 801086e:	442b      	add	r3, r5
 8010870:	6023      	str	r3, [r4, #0]
 8010872:	f8d8 3000 	ldr.w	r3, [r8]
 8010876:	685a      	ldr	r2, [r3, #4]
 8010878:	bb62      	cbnz	r2, 80108d4 <_malloc_r+0xdc>
 801087a:	f8c8 7000 	str.w	r7, [r8]
 801087e:	e00f      	b.n	80108a0 <_malloc_r+0xa8>
 8010880:	6822      	ldr	r2, [r4, #0]
 8010882:	1b52      	subs	r2, r2, r5
 8010884:	d420      	bmi.n	80108c8 <_malloc_r+0xd0>
 8010886:	2a0b      	cmp	r2, #11
 8010888:	d917      	bls.n	80108ba <_malloc_r+0xc2>
 801088a:	1961      	adds	r1, r4, r5
 801088c:	42a3      	cmp	r3, r4
 801088e:	6025      	str	r5, [r4, #0]
 8010890:	bf18      	it	ne
 8010892:	6059      	strne	r1, [r3, #4]
 8010894:	6863      	ldr	r3, [r4, #4]
 8010896:	bf08      	it	eq
 8010898:	f8c8 1000 	streq.w	r1, [r8]
 801089c:	5162      	str	r2, [r4, r5]
 801089e:	604b      	str	r3, [r1, #4]
 80108a0:	4630      	mov	r0, r6
 80108a2:	f000 f841 	bl	8010928 <__malloc_unlock>
 80108a6:	f104 000b 	add.w	r0, r4, #11
 80108aa:	1d23      	adds	r3, r4, #4
 80108ac:	f020 0007 	bic.w	r0, r0, #7
 80108b0:	1ac2      	subs	r2, r0, r3
 80108b2:	bf1c      	itt	ne
 80108b4:	1a1b      	subne	r3, r3, r0
 80108b6:	50a3      	strne	r3, [r4, r2]
 80108b8:	e7af      	b.n	801081a <_malloc_r+0x22>
 80108ba:	6862      	ldr	r2, [r4, #4]
 80108bc:	42a3      	cmp	r3, r4
 80108be:	bf0c      	ite	eq
 80108c0:	f8c8 2000 	streq.w	r2, [r8]
 80108c4:	605a      	strne	r2, [r3, #4]
 80108c6:	e7eb      	b.n	80108a0 <_malloc_r+0xa8>
 80108c8:	4623      	mov	r3, r4
 80108ca:	6864      	ldr	r4, [r4, #4]
 80108cc:	e7ae      	b.n	801082c <_malloc_r+0x34>
 80108ce:	463c      	mov	r4, r7
 80108d0:	687f      	ldr	r7, [r7, #4]
 80108d2:	e7b6      	b.n	8010842 <_malloc_r+0x4a>
 80108d4:	461a      	mov	r2, r3
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	42a3      	cmp	r3, r4
 80108da:	d1fb      	bne.n	80108d4 <_malloc_r+0xdc>
 80108dc:	2300      	movs	r3, #0
 80108de:	6053      	str	r3, [r2, #4]
 80108e0:	e7de      	b.n	80108a0 <_malloc_r+0xa8>
 80108e2:	230c      	movs	r3, #12
 80108e4:	6033      	str	r3, [r6, #0]
 80108e6:	4630      	mov	r0, r6
 80108e8:	f000 f81e 	bl	8010928 <__malloc_unlock>
 80108ec:	e794      	b.n	8010818 <_malloc_r+0x20>
 80108ee:	6005      	str	r5, [r0, #0]
 80108f0:	e7d6      	b.n	80108a0 <_malloc_r+0xa8>
 80108f2:	bf00      	nop
 80108f4:	24003984 	.word	0x24003984

080108f8 <__ascii_mbtowc>:
 80108f8:	b082      	sub	sp, #8
 80108fa:	b901      	cbnz	r1, 80108fe <__ascii_mbtowc+0x6>
 80108fc:	a901      	add	r1, sp, #4
 80108fe:	b142      	cbz	r2, 8010912 <__ascii_mbtowc+0x1a>
 8010900:	b14b      	cbz	r3, 8010916 <__ascii_mbtowc+0x1e>
 8010902:	7813      	ldrb	r3, [r2, #0]
 8010904:	600b      	str	r3, [r1, #0]
 8010906:	7812      	ldrb	r2, [r2, #0]
 8010908:	1e10      	subs	r0, r2, #0
 801090a:	bf18      	it	ne
 801090c:	2001      	movne	r0, #1
 801090e:	b002      	add	sp, #8
 8010910:	4770      	bx	lr
 8010912:	4610      	mov	r0, r2
 8010914:	e7fb      	b.n	801090e <__ascii_mbtowc+0x16>
 8010916:	f06f 0001 	mvn.w	r0, #1
 801091a:	e7f8      	b.n	801090e <__ascii_mbtowc+0x16>

0801091c <__malloc_lock>:
 801091c:	4801      	ldr	r0, [pc, #4]	@ (8010924 <__malloc_lock+0x8>)
 801091e:	f7fe bdae 	b.w	800f47e <__retarget_lock_acquire_recursive>
 8010922:	bf00      	nop
 8010924:	2400397c 	.word	0x2400397c

08010928 <__malloc_unlock>:
 8010928:	4801      	ldr	r0, [pc, #4]	@ (8010930 <__malloc_unlock+0x8>)
 801092a:	f7fe bda9 	b.w	800f480 <__retarget_lock_release_recursive>
 801092e:	bf00      	nop
 8010930:	2400397c 	.word	0x2400397c

08010934 <_Balloc>:
 8010934:	b570      	push	{r4, r5, r6, lr}
 8010936:	69c6      	ldr	r6, [r0, #28]
 8010938:	4604      	mov	r4, r0
 801093a:	460d      	mov	r5, r1
 801093c:	b976      	cbnz	r6, 801095c <_Balloc+0x28>
 801093e:	2010      	movs	r0, #16
 8010940:	f7ff ff30 	bl	80107a4 <malloc>
 8010944:	4602      	mov	r2, r0
 8010946:	61e0      	str	r0, [r4, #28]
 8010948:	b920      	cbnz	r0, 8010954 <_Balloc+0x20>
 801094a:	4b18      	ldr	r3, [pc, #96]	@ (80109ac <_Balloc+0x78>)
 801094c:	4818      	ldr	r0, [pc, #96]	@ (80109b0 <_Balloc+0x7c>)
 801094e:	216b      	movs	r1, #107	@ 0x6b
 8010950:	f000 ff26 	bl	80117a0 <__assert_func>
 8010954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010958:	6006      	str	r6, [r0, #0]
 801095a:	60c6      	str	r6, [r0, #12]
 801095c:	69e6      	ldr	r6, [r4, #28]
 801095e:	68f3      	ldr	r3, [r6, #12]
 8010960:	b183      	cbz	r3, 8010984 <_Balloc+0x50>
 8010962:	69e3      	ldr	r3, [r4, #28]
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801096a:	b9b8      	cbnz	r0, 801099c <_Balloc+0x68>
 801096c:	2101      	movs	r1, #1
 801096e:	fa01 f605 	lsl.w	r6, r1, r5
 8010972:	1d72      	adds	r2, r6, #5
 8010974:	0092      	lsls	r2, r2, #2
 8010976:	4620      	mov	r0, r4
 8010978:	f000 ff30 	bl	80117dc <_calloc_r>
 801097c:	b160      	cbz	r0, 8010998 <_Balloc+0x64>
 801097e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010982:	e00e      	b.n	80109a2 <_Balloc+0x6e>
 8010984:	2221      	movs	r2, #33	@ 0x21
 8010986:	2104      	movs	r1, #4
 8010988:	4620      	mov	r0, r4
 801098a:	f000 ff27 	bl	80117dc <_calloc_r>
 801098e:	69e3      	ldr	r3, [r4, #28]
 8010990:	60f0      	str	r0, [r6, #12]
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d1e4      	bne.n	8010962 <_Balloc+0x2e>
 8010998:	2000      	movs	r0, #0
 801099a:	bd70      	pop	{r4, r5, r6, pc}
 801099c:	6802      	ldr	r2, [r0, #0]
 801099e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109a2:	2300      	movs	r3, #0
 80109a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109a8:	e7f7      	b.n	801099a <_Balloc+0x66>
 80109aa:	bf00      	nop
 80109ac:	08011a3f 	.word	0x08011a3f
 80109b0:	08011b1f 	.word	0x08011b1f

080109b4 <_Bfree>:
 80109b4:	b570      	push	{r4, r5, r6, lr}
 80109b6:	69c6      	ldr	r6, [r0, #28]
 80109b8:	4605      	mov	r5, r0
 80109ba:	460c      	mov	r4, r1
 80109bc:	b976      	cbnz	r6, 80109dc <_Bfree+0x28>
 80109be:	2010      	movs	r0, #16
 80109c0:	f7ff fef0 	bl	80107a4 <malloc>
 80109c4:	4602      	mov	r2, r0
 80109c6:	61e8      	str	r0, [r5, #28]
 80109c8:	b920      	cbnz	r0, 80109d4 <_Bfree+0x20>
 80109ca:	4b09      	ldr	r3, [pc, #36]	@ (80109f0 <_Bfree+0x3c>)
 80109cc:	4809      	ldr	r0, [pc, #36]	@ (80109f4 <_Bfree+0x40>)
 80109ce:	218f      	movs	r1, #143	@ 0x8f
 80109d0:	f000 fee6 	bl	80117a0 <__assert_func>
 80109d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109d8:	6006      	str	r6, [r0, #0]
 80109da:	60c6      	str	r6, [r0, #12]
 80109dc:	b13c      	cbz	r4, 80109ee <_Bfree+0x3a>
 80109de:	69eb      	ldr	r3, [r5, #28]
 80109e0:	6862      	ldr	r2, [r4, #4]
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80109e8:	6021      	str	r1, [r4, #0]
 80109ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80109ee:	bd70      	pop	{r4, r5, r6, pc}
 80109f0:	08011a3f 	.word	0x08011a3f
 80109f4:	08011b1f 	.word	0x08011b1f

080109f8 <__multadd>:
 80109f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109fc:	690d      	ldr	r5, [r1, #16]
 80109fe:	4607      	mov	r7, r0
 8010a00:	460c      	mov	r4, r1
 8010a02:	461e      	mov	r6, r3
 8010a04:	f101 0c14 	add.w	ip, r1, #20
 8010a08:	2000      	movs	r0, #0
 8010a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8010a0e:	b299      	uxth	r1, r3
 8010a10:	fb02 6101 	mla	r1, r2, r1, r6
 8010a14:	0c1e      	lsrs	r6, r3, #16
 8010a16:	0c0b      	lsrs	r3, r1, #16
 8010a18:	fb02 3306 	mla	r3, r2, r6, r3
 8010a1c:	b289      	uxth	r1, r1
 8010a1e:	3001      	adds	r0, #1
 8010a20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a24:	4285      	cmp	r5, r0
 8010a26:	f84c 1b04 	str.w	r1, [ip], #4
 8010a2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a2e:	dcec      	bgt.n	8010a0a <__multadd+0x12>
 8010a30:	b30e      	cbz	r6, 8010a76 <__multadd+0x7e>
 8010a32:	68a3      	ldr	r3, [r4, #8]
 8010a34:	42ab      	cmp	r3, r5
 8010a36:	dc19      	bgt.n	8010a6c <__multadd+0x74>
 8010a38:	6861      	ldr	r1, [r4, #4]
 8010a3a:	4638      	mov	r0, r7
 8010a3c:	3101      	adds	r1, #1
 8010a3e:	f7ff ff79 	bl	8010934 <_Balloc>
 8010a42:	4680      	mov	r8, r0
 8010a44:	b928      	cbnz	r0, 8010a52 <__multadd+0x5a>
 8010a46:	4602      	mov	r2, r0
 8010a48:	4b0c      	ldr	r3, [pc, #48]	@ (8010a7c <__multadd+0x84>)
 8010a4a:	480d      	ldr	r0, [pc, #52]	@ (8010a80 <__multadd+0x88>)
 8010a4c:	21ba      	movs	r1, #186	@ 0xba
 8010a4e:	f000 fea7 	bl	80117a0 <__assert_func>
 8010a52:	6922      	ldr	r2, [r4, #16]
 8010a54:	3202      	adds	r2, #2
 8010a56:	f104 010c 	add.w	r1, r4, #12
 8010a5a:	0092      	lsls	r2, r2, #2
 8010a5c:	300c      	adds	r0, #12
 8010a5e:	f7fe fd18 	bl	800f492 <memcpy>
 8010a62:	4621      	mov	r1, r4
 8010a64:	4638      	mov	r0, r7
 8010a66:	f7ff ffa5 	bl	80109b4 <_Bfree>
 8010a6a:	4644      	mov	r4, r8
 8010a6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a70:	3501      	adds	r5, #1
 8010a72:	615e      	str	r6, [r3, #20]
 8010a74:	6125      	str	r5, [r4, #16]
 8010a76:	4620      	mov	r0, r4
 8010a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a7c:	08011aae 	.word	0x08011aae
 8010a80:	08011b1f 	.word	0x08011b1f

08010a84 <__s2b>:
 8010a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a88:	460c      	mov	r4, r1
 8010a8a:	4615      	mov	r5, r2
 8010a8c:	461f      	mov	r7, r3
 8010a8e:	2209      	movs	r2, #9
 8010a90:	3308      	adds	r3, #8
 8010a92:	4606      	mov	r6, r0
 8010a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a98:	2100      	movs	r1, #0
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	db09      	blt.n	8010ab4 <__s2b+0x30>
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7ff ff47 	bl	8010934 <_Balloc>
 8010aa6:	b940      	cbnz	r0, 8010aba <__s2b+0x36>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	4b19      	ldr	r3, [pc, #100]	@ (8010b10 <__s2b+0x8c>)
 8010aac:	4819      	ldr	r0, [pc, #100]	@ (8010b14 <__s2b+0x90>)
 8010aae:	21d3      	movs	r1, #211	@ 0xd3
 8010ab0:	f000 fe76 	bl	80117a0 <__assert_func>
 8010ab4:	0052      	lsls	r2, r2, #1
 8010ab6:	3101      	adds	r1, #1
 8010ab8:	e7f0      	b.n	8010a9c <__s2b+0x18>
 8010aba:	9b08      	ldr	r3, [sp, #32]
 8010abc:	6143      	str	r3, [r0, #20]
 8010abe:	2d09      	cmp	r5, #9
 8010ac0:	f04f 0301 	mov.w	r3, #1
 8010ac4:	6103      	str	r3, [r0, #16]
 8010ac6:	dd16      	ble.n	8010af6 <__s2b+0x72>
 8010ac8:	f104 0909 	add.w	r9, r4, #9
 8010acc:	46c8      	mov	r8, r9
 8010ace:	442c      	add	r4, r5
 8010ad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010ad4:	4601      	mov	r1, r0
 8010ad6:	3b30      	subs	r3, #48	@ 0x30
 8010ad8:	220a      	movs	r2, #10
 8010ada:	4630      	mov	r0, r6
 8010adc:	f7ff ff8c 	bl	80109f8 <__multadd>
 8010ae0:	45a0      	cmp	r8, r4
 8010ae2:	d1f5      	bne.n	8010ad0 <__s2b+0x4c>
 8010ae4:	f1a5 0408 	sub.w	r4, r5, #8
 8010ae8:	444c      	add	r4, r9
 8010aea:	1b2d      	subs	r5, r5, r4
 8010aec:	1963      	adds	r3, r4, r5
 8010aee:	42bb      	cmp	r3, r7
 8010af0:	db04      	blt.n	8010afc <__s2b+0x78>
 8010af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010af6:	340a      	adds	r4, #10
 8010af8:	2509      	movs	r5, #9
 8010afa:	e7f6      	b.n	8010aea <__s2b+0x66>
 8010afc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010b00:	4601      	mov	r1, r0
 8010b02:	3b30      	subs	r3, #48	@ 0x30
 8010b04:	220a      	movs	r2, #10
 8010b06:	4630      	mov	r0, r6
 8010b08:	f7ff ff76 	bl	80109f8 <__multadd>
 8010b0c:	e7ee      	b.n	8010aec <__s2b+0x68>
 8010b0e:	bf00      	nop
 8010b10:	08011aae 	.word	0x08011aae
 8010b14:	08011b1f 	.word	0x08011b1f

08010b18 <__hi0bits>:
 8010b18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	bf36      	itet	cc
 8010b20:	0403      	lslcc	r3, r0, #16
 8010b22:	2000      	movcs	r0, #0
 8010b24:	2010      	movcc	r0, #16
 8010b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010b2a:	bf3c      	itt	cc
 8010b2c:	021b      	lslcc	r3, r3, #8
 8010b2e:	3008      	addcc	r0, #8
 8010b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010b34:	bf3c      	itt	cc
 8010b36:	011b      	lslcc	r3, r3, #4
 8010b38:	3004      	addcc	r0, #4
 8010b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b3e:	bf3c      	itt	cc
 8010b40:	009b      	lslcc	r3, r3, #2
 8010b42:	3002      	addcc	r0, #2
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	db05      	blt.n	8010b54 <__hi0bits+0x3c>
 8010b48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010b4c:	f100 0001 	add.w	r0, r0, #1
 8010b50:	bf08      	it	eq
 8010b52:	2020      	moveq	r0, #32
 8010b54:	4770      	bx	lr

08010b56 <__lo0bits>:
 8010b56:	6803      	ldr	r3, [r0, #0]
 8010b58:	4602      	mov	r2, r0
 8010b5a:	f013 0007 	ands.w	r0, r3, #7
 8010b5e:	d00b      	beq.n	8010b78 <__lo0bits+0x22>
 8010b60:	07d9      	lsls	r1, r3, #31
 8010b62:	d421      	bmi.n	8010ba8 <__lo0bits+0x52>
 8010b64:	0798      	lsls	r0, r3, #30
 8010b66:	bf49      	itett	mi
 8010b68:	085b      	lsrmi	r3, r3, #1
 8010b6a:	089b      	lsrpl	r3, r3, #2
 8010b6c:	2001      	movmi	r0, #1
 8010b6e:	6013      	strmi	r3, [r2, #0]
 8010b70:	bf5c      	itt	pl
 8010b72:	6013      	strpl	r3, [r2, #0]
 8010b74:	2002      	movpl	r0, #2
 8010b76:	4770      	bx	lr
 8010b78:	b299      	uxth	r1, r3
 8010b7a:	b909      	cbnz	r1, 8010b80 <__lo0bits+0x2a>
 8010b7c:	0c1b      	lsrs	r3, r3, #16
 8010b7e:	2010      	movs	r0, #16
 8010b80:	b2d9      	uxtb	r1, r3
 8010b82:	b909      	cbnz	r1, 8010b88 <__lo0bits+0x32>
 8010b84:	3008      	adds	r0, #8
 8010b86:	0a1b      	lsrs	r3, r3, #8
 8010b88:	0719      	lsls	r1, r3, #28
 8010b8a:	bf04      	itt	eq
 8010b8c:	091b      	lsreq	r3, r3, #4
 8010b8e:	3004      	addeq	r0, #4
 8010b90:	0799      	lsls	r1, r3, #30
 8010b92:	bf04      	itt	eq
 8010b94:	089b      	lsreq	r3, r3, #2
 8010b96:	3002      	addeq	r0, #2
 8010b98:	07d9      	lsls	r1, r3, #31
 8010b9a:	d403      	bmi.n	8010ba4 <__lo0bits+0x4e>
 8010b9c:	085b      	lsrs	r3, r3, #1
 8010b9e:	f100 0001 	add.w	r0, r0, #1
 8010ba2:	d003      	beq.n	8010bac <__lo0bits+0x56>
 8010ba4:	6013      	str	r3, [r2, #0]
 8010ba6:	4770      	bx	lr
 8010ba8:	2000      	movs	r0, #0
 8010baa:	4770      	bx	lr
 8010bac:	2020      	movs	r0, #32
 8010bae:	4770      	bx	lr

08010bb0 <__i2b>:
 8010bb0:	b510      	push	{r4, lr}
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	2101      	movs	r1, #1
 8010bb6:	f7ff febd 	bl	8010934 <_Balloc>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	b928      	cbnz	r0, 8010bca <__i2b+0x1a>
 8010bbe:	4b05      	ldr	r3, [pc, #20]	@ (8010bd4 <__i2b+0x24>)
 8010bc0:	4805      	ldr	r0, [pc, #20]	@ (8010bd8 <__i2b+0x28>)
 8010bc2:	f240 1145 	movw	r1, #325	@ 0x145
 8010bc6:	f000 fdeb 	bl	80117a0 <__assert_func>
 8010bca:	2301      	movs	r3, #1
 8010bcc:	6144      	str	r4, [r0, #20]
 8010bce:	6103      	str	r3, [r0, #16]
 8010bd0:	bd10      	pop	{r4, pc}
 8010bd2:	bf00      	nop
 8010bd4:	08011aae 	.word	0x08011aae
 8010bd8:	08011b1f 	.word	0x08011b1f

08010bdc <__multiply>:
 8010bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be0:	4617      	mov	r7, r2
 8010be2:	690a      	ldr	r2, [r1, #16]
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	bfa8      	it	ge
 8010bea:	463b      	movge	r3, r7
 8010bec:	4689      	mov	r9, r1
 8010bee:	bfa4      	itt	ge
 8010bf0:	460f      	movge	r7, r1
 8010bf2:	4699      	movge	r9, r3
 8010bf4:	693d      	ldr	r5, [r7, #16]
 8010bf6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	6879      	ldr	r1, [r7, #4]
 8010bfe:	eb05 060a 	add.w	r6, r5, sl
 8010c02:	42b3      	cmp	r3, r6
 8010c04:	b085      	sub	sp, #20
 8010c06:	bfb8      	it	lt
 8010c08:	3101      	addlt	r1, #1
 8010c0a:	f7ff fe93 	bl	8010934 <_Balloc>
 8010c0e:	b930      	cbnz	r0, 8010c1e <__multiply+0x42>
 8010c10:	4602      	mov	r2, r0
 8010c12:	4b41      	ldr	r3, [pc, #260]	@ (8010d18 <__multiply+0x13c>)
 8010c14:	4841      	ldr	r0, [pc, #260]	@ (8010d1c <__multiply+0x140>)
 8010c16:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010c1a:	f000 fdc1 	bl	80117a0 <__assert_func>
 8010c1e:	f100 0414 	add.w	r4, r0, #20
 8010c22:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010c26:	4623      	mov	r3, r4
 8010c28:	2200      	movs	r2, #0
 8010c2a:	4573      	cmp	r3, lr
 8010c2c:	d320      	bcc.n	8010c70 <__multiply+0x94>
 8010c2e:	f107 0814 	add.w	r8, r7, #20
 8010c32:	f109 0114 	add.w	r1, r9, #20
 8010c36:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010c3a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010c3e:	9302      	str	r3, [sp, #8]
 8010c40:	1beb      	subs	r3, r5, r7
 8010c42:	3b15      	subs	r3, #21
 8010c44:	f023 0303 	bic.w	r3, r3, #3
 8010c48:	3304      	adds	r3, #4
 8010c4a:	3715      	adds	r7, #21
 8010c4c:	42bd      	cmp	r5, r7
 8010c4e:	bf38      	it	cc
 8010c50:	2304      	movcc	r3, #4
 8010c52:	9301      	str	r3, [sp, #4]
 8010c54:	9b02      	ldr	r3, [sp, #8]
 8010c56:	9103      	str	r1, [sp, #12]
 8010c58:	428b      	cmp	r3, r1
 8010c5a:	d80c      	bhi.n	8010c76 <__multiply+0x9a>
 8010c5c:	2e00      	cmp	r6, #0
 8010c5e:	dd03      	ble.n	8010c68 <__multiply+0x8c>
 8010c60:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d055      	beq.n	8010d14 <__multiply+0x138>
 8010c68:	6106      	str	r6, [r0, #16]
 8010c6a:	b005      	add	sp, #20
 8010c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c70:	f843 2b04 	str.w	r2, [r3], #4
 8010c74:	e7d9      	b.n	8010c2a <__multiply+0x4e>
 8010c76:	f8b1 a000 	ldrh.w	sl, [r1]
 8010c7a:	f1ba 0f00 	cmp.w	sl, #0
 8010c7e:	d01f      	beq.n	8010cc0 <__multiply+0xe4>
 8010c80:	46c4      	mov	ip, r8
 8010c82:	46a1      	mov	r9, r4
 8010c84:	2700      	movs	r7, #0
 8010c86:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010c8a:	f8d9 3000 	ldr.w	r3, [r9]
 8010c8e:	fa1f fb82 	uxth.w	fp, r2
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	fb0a 330b 	mla	r3, sl, fp, r3
 8010c98:	443b      	add	r3, r7
 8010c9a:	f8d9 7000 	ldr.w	r7, [r9]
 8010c9e:	0c12      	lsrs	r2, r2, #16
 8010ca0:	0c3f      	lsrs	r7, r7, #16
 8010ca2:	fb0a 7202 	mla	r2, sl, r2, r7
 8010ca6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cb0:	4565      	cmp	r5, ip
 8010cb2:	f849 3b04 	str.w	r3, [r9], #4
 8010cb6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010cba:	d8e4      	bhi.n	8010c86 <__multiply+0xaa>
 8010cbc:	9b01      	ldr	r3, [sp, #4]
 8010cbe:	50e7      	str	r7, [r4, r3]
 8010cc0:	9b03      	ldr	r3, [sp, #12]
 8010cc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010cc6:	3104      	adds	r1, #4
 8010cc8:	f1b9 0f00 	cmp.w	r9, #0
 8010ccc:	d020      	beq.n	8010d10 <__multiply+0x134>
 8010cce:	6823      	ldr	r3, [r4, #0]
 8010cd0:	4647      	mov	r7, r8
 8010cd2:	46a4      	mov	ip, r4
 8010cd4:	f04f 0a00 	mov.w	sl, #0
 8010cd8:	f8b7 b000 	ldrh.w	fp, [r7]
 8010cdc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010ce0:	fb09 220b 	mla	r2, r9, fp, r2
 8010ce4:	4452      	add	r2, sl
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cec:	f84c 3b04 	str.w	r3, [ip], #4
 8010cf0:	f857 3b04 	ldr.w	r3, [r7], #4
 8010cf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010cf8:	f8bc 3000 	ldrh.w	r3, [ip]
 8010cfc:	fb09 330a 	mla	r3, r9, sl, r3
 8010d00:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010d04:	42bd      	cmp	r5, r7
 8010d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d0a:	d8e5      	bhi.n	8010cd8 <__multiply+0xfc>
 8010d0c:	9a01      	ldr	r2, [sp, #4]
 8010d0e:	50a3      	str	r3, [r4, r2]
 8010d10:	3404      	adds	r4, #4
 8010d12:	e79f      	b.n	8010c54 <__multiply+0x78>
 8010d14:	3e01      	subs	r6, #1
 8010d16:	e7a1      	b.n	8010c5c <__multiply+0x80>
 8010d18:	08011aae 	.word	0x08011aae
 8010d1c:	08011b1f 	.word	0x08011b1f

08010d20 <__pow5mult>:
 8010d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d24:	4615      	mov	r5, r2
 8010d26:	f012 0203 	ands.w	r2, r2, #3
 8010d2a:	4607      	mov	r7, r0
 8010d2c:	460e      	mov	r6, r1
 8010d2e:	d007      	beq.n	8010d40 <__pow5mult+0x20>
 8010d30:	4c25      	ldr	r4, [pc, #148]	@ (8010dc8 <__pow5mult+0xa8>)
 8010d32:	3a01      	subs	r2, #1
 8010d34:	2300      	movs	r3, #0
 8010d36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d3a:	f7ff fe5d 	bl	80109f8 <__multadd>
 8010d3e:	4606      	mov	r6, r0
 8010d40:	10ad      	asrs	r5, r5, #2
 8010d42:	d03d      	beq.n	8010dc0 <__pow5mult+0xa0>
 8010d44:	69fc      	ldr	r4, [r7, #28]
 8010d46:	b97c      	cbnz	r4, 8010d68 <__pow5mult+0x48>
 8010d48:	2010      	movs	r0, #16
 8010d4a:	f7ff fd2b 	bl	80107a4 <malloc>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	61f8      	str	r0, [r7, #28]
 8010d52:	b928      	cbnz	r0, 8010d60 <__pow5mult+0x40>
 8010d54:	4b1d      	ldr	r3, [pc, #116]	@ (8010dcc <__pow5mult+0xac>)
 8010d56:	481e      	ldr	r0, [pc, #120]	@ (8010dd0 <__pow5mult+0xb0>)
 8010d58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010d5c:	f000 fd20 	bl	80117a0 <__assert_func>
 8010d60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d64:	6004      	str	r4, [r0, #0]
 8010d66:	60c4      	str	r4, [r0, #12]
 8010d68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010d6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d70:	b94c      	cbnz	r4, 8010d86 <__pow5mult+0x66>
 8010d72:	f240 2171 	movw	r1, #625	@ 0x271
 8010d76:	4638      	mov	r0, r7
 8010d78:	f7ff ff1a 	bl	8010bb0 <__i2b>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d82:	4604      	mov	r4, r0
 8010d84:	6003      	str	r3, [r0, #0]
 8010d86:	f04f 0900 	mov.w	r9, #0
 8010d8a:	07eb      	lsls	r3, r5, #31
 8010d8c:	d50a      	bpl.n	8010da4 <__pow5mult+0x84>
 8010d8e:	4631      	mov	r1, r6
 8010d90:	4622      	mov	r2, r4
 8010d92:	4638      	mov	r0, r7
 8010d94:	f7ff ff22 	bl	8010bdc <__multiply>
 8010d98:	4631      	mov	r1, r6
 8010d9a:	4680      	mov	r8, r0
 8010d9c:	4638      	mov	r0, r7
 8010d9e:	f7ff fe09 	bl	80109b4 <_Bfree>
 8010da2:	4646      	mov	r6, r8
 8010da4:	106d      	asrs	r5, r5, #1
 8010da6:	d00b      	beq.n	8010dc0 <__pow5mult+0xa0>
 8010da8:	6820      	ldr	r0, [r4, #0]
 8010daa:	b938      	cbnz	r0, 8010dbc <__pow5mult+0x9c>
 8010dac:	4622      	mov	r2, r4
 8010dae:	4621      	mov	r1, r4
 8010db0:	4638      	mov	r0, r7
 8010db2:	f7ff ff13 	bl	8010bdc <__multiply>
 8010db6:	6020      	str	r0, [r4, #0]
 8010db8:	f8c0 9000 	str.w	r9, [r0]
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	e7e4      	b.n	8010d8a <__pow5mult+0x6a>
 8010dc0:	4630      	mov	r0, r6
 8010dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dc6:	bf00      	nop
 8010dc8:	08011d1c 	.word	0x08011d1c
 8010dcc:	08011a3f 	.word	0x08011a3f
 8010dd0:	08011b1f 	.word	0x08011b1f

08010dd4 <__lshift>:
 8010dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd8:	460c      	mov	r4, r1
 8010dda:	6849      	ldr	r1, [r1, #4]
 8010ddc:	6923      	ldr	r3, [r4, #16]
 8010dde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010de2:	68a3      	ldr	r3, [r4, #8]
 8010de4:	4607      	mov	r7, r0
 8010de6:	4691      	mov	r9, r2
 8010de8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010dec:	f108 0601 	add.w	r6, r8, #1
 8010df0:	42b3      	cmp	r3, r6
 8010df2:	db0b      	blt.n	8010e0c <__lshift+0x38>
 8010df4:	4638      	mov	r0, r7
 8010df6:	f7ff fd9d 	bl	8010934 <_Balloc>
 8010dfa:	4605      	mov	r5, r0
 8010dfc:	b948      	cbnz	r0, 8010e12 <__lshift+0x3e>
 8010dfe:	4602      	mov	r2, r0
 8010e00:	4b28      	ldr	r3, [pc, #160]	@ (8010ea4 <__lshift+0xd0>)
 8010e02:	4829      	ldr	r0, [pc, #164]	@ (8010ea8 <__lshift+0xd4>)
 8010e04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010e08:	f000 fcca 	bl	80117a0 <__assert_func>
 8010e0c:	3101      	adds	r1, #1
 8010e0e:	005b      	lsls	r3, r3, #1
 8010e10:	e7ee      	b.n	8010df0 <__lshift+0x1c>
 8010e12:	2300      	movs	r3, #0
 8010e14:	f100 0114 	add.w	r1, r0, #20
 8010e18:	f100 0210 	add.w	r2, r0, #16
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	4553      	cmp	r3, sl
 8010e20:	db33      	blt.n	8010e8a <__lshift+0xb6>
 8010e22:	6920      	ldr	r0, [r4, #16]
 8010e24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e28:	f104 0314 	add.w	r3, r4, #20
 8010e2c:	f019 091f 	ands.w	r9, r9, #31
 8010e30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010e38:	d02b      	beq.n	8010e92 <__lshift+0xbe>
 8010e3a:	f1c9 0e20 	rsb	lr, r9, #32
 8010e3e:	468a      	mov	sl, r1
 8010e40:	2200      	movs	r2, #0
 8010e42:	6818      	ldr	r0, [r3, #0]
 8010e44:	fa00 f009 	lsl.w	r0, r0, r9
 8010e48:	4310      	orrs	r0, r2
 8010e4a:	f84a 0b04 	str.w	r0, [sl], #4
 8010e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e52:	459c      	cmp	ip, r3
 8010e54:	fa22 f20e 	lsr.w	r2, r2, lr
 8010e58:	d8f3      	bhi.n	8010e42 <__lshift+0x6e>
 8010e5a:	ebac 0304 	sub.w	r3, ip, r4
 8010e5e:	3b15      	subs	r3, #21
 8010e60:	f023 0303 	bic.w	r3, r3, #3
 8010e64:	3304      	adds	r3, #4
 8010e66:	f104 0015 	add.w	r0, r4, #21
 8010e6a:	4560      	cmp	r0, ip
 8010e6c:	bf88      	it	hi
 8010e6e:	2304      	movhi	r3, #4
 8010e70:	50ca      	str	r2, [r1, r3]
 8010e72:	b10a      	cbz	r2, 8010e78 <__lshift+0xa4>
 8010e74:	f108 0602 	add.w	r6, r8, #2
 8010e78:	3e01      	subs	r6, #1
 8010e7a:	4638      	mov	r0, r7
 8010e7c:	612e      	str	r6, [r5, #16]
 8010e7e:	4621      	mov	r1, r4
 8010e80:	f7ff fd98 	bl	80109b4 <_Bfree>
 8010e84:	4628      	mov	r0, r5
 8010e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e8e:	3301      	adds	r3, #1
 8010e90:	e7c5      	b.n	8010e1e <__lshift+0x4a>
 8010e92:	3904      	subs	r1, #4
 8010e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e98:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e9c:	459c      	cmp	ip, r3
 8010e9e:	d8f9      	bhi.n	8010e94 <__lshift+0xc0>
 8010ea0:	e7ea      	b.n	8010e78 <__lshift+0xa4>
 8010ea2:	bf00      	nop
 8010ea4:	08011aae 	.word	0x08011aae
 8010ea8:	08011b1f 	.word	0x08011b1f

08010eac <__mcmp>:
 8010eac:	690a      	ldr	r2, [r1, #16]
 8010eae:	4603      	mov	r3, r0
 8010eb0:	6900      	ldr	r0, [r0, #16]
 8010eb2:	1a80      	subs	r0, r0, r2
 8010eb4:	b530      	push	{r4, r5, lr}
 8010eb6:	d10e      	bne.n	8010ed6 <__mcmp+0x2a>
 8010eb8:	3314      	adds	r3, #20
 8010eba:	3114      	adds	r1, #20
 8010ebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010ec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010ec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010ecc:	4295      	cmp	r5, r2
 8010ece:	d003      	beq.n	8010ed8 <__mcmp+0x2c>
 8010ed0:	d205      	bcs.n	8010ede <__mcmp+0x32>
 8010ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed6:	bd30      	pop	{r4, r5, pc}
 8010ed8:	42a3      	cmp	r3, r4
 8010eda:	d3f3      	bcc.n	8010ec4 <__mcmp+0x18>
 8010edc:	e7fb      	b.n	8010ed6 <__mcmp+0x2a>
 8010ede:	2001      	movs	r0, #1
 8010ee0:	e7f9      	b.n	8010ed6 <__mcmp+0x2a>
	...

08010ee4 <__mdiff>:
 8010ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee8:	4689      	mov	r9, r1
 8010eea:	4606      	mov	r6, r0
 8010eec:	4611      	mov	r1, r2
 8010eee:	4648      	mov	r0, r9
 8010ef0:	4614      	mov	r4, r2
 8010ef2:	f7ff ffdb 	bl	8010eac <__mcmp>
 8010ef6:	1e05      	subs	r5, r0, #0
 8010ef8:	d112      	bne.n	8010f20 <__mdiff+0x3c>
 8010efa:	4629      	mov	r1, r5
 8010efc:	4630      	mov	r0, r6
 8010efe:	f7ff fd19 	bl	8010934 <_Balloc>
 8010f02:	4602      	mov	r2, r0
 8010f04:	b928      	cbnz	r0, 8010f12 <__mdiff+0x2e>
 8010f06:	4b3f      	ldr	r3, [pc, #252]	@ (8011004 <__mdiff+0x120>)
 8010f08:	f240 2137 	movw	r1, #567	@ 0x237
 8010f0c:	483e      	ldr	r0, [pc, #248]	@ (8011008 <__mdiff+0x124>)
 8010f0e:	f000 fc47 	bl	80117a0 <__assert_func>
 8010f12:	2301      	movs	r3, #1
 8010f14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f18:	4610      	mov	r0, r2
 8010f1a:	b003      	add	sp, #12
 8010f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f20:	bfbc      	itt	lt
 8010f22:	464b      	movlt	r3, r9
 8010f24:	46a1      	movlt	r9, r4
 8010f26:	4630      	mov	r0, r6
 8010f28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010f2c:	bfba      	itte	lt
 8010f2e:	461c      	movlt	r4, r3
 8010f30:	2501      	movlt	r5, #1
 8010f32:	2500      	movge	r5, #0
 8010f34:	f7ff fcfe 	bl	8010934 <_Balloc>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	b918      	cbnz	r0, 8010f44 <__mdiff+0x60>
 8010f3c:	4b31      	ldr	r3, [pc, #196]	@ (8011004 <__mdiff+0x120>)
 8010f3e:	f240 2145 	movw	r1, #581	@ 0x245
 8010f42:	e7e3      	b.n	8010f0c <__mdiff+0x28>
 8010f44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010f48:	6926      	ldr	r6, [r4, #16]
 8010f4a:	60c5      	str	r5, [r0, #12]
 8010f4c:	f109 0310 	add.w	r3, r9, #16
 8010f50:	f109 0514 	add.w	r5, r9, #20
 8010f54:	f104 0e14 	add.w	lr, r4, #20
 8010f58:	f100 0b14 	add.w	fp, r0, #20
 8010f5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010f60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010f64:	9301      	str	r3, [sp, #4]
 8010f66:	46d9      	mov	r9, fp
 8010f68:	f04f 0c00 	mov.w	ip, #0
 8010f6c:	9b01      	ldr	r3, [sp, #4]
 8010f6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010f72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010f76:	9301      	str	r3, [sp, #4]
 8010f78:	fa1f f38a 	uxth.w	r3, sl
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	b283      	uxth	r3, r0
 8010f80:	1acb      	subs	r3, r1, r3
 8010f82:	0c00      	lsrs	r0, r0, #16
 8010f84:	4463      	add	r3, ip
 8010f86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010f8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010f94:	4576      	cmp	r6, lr
 8010f96:	f849 3b04 	str.w	r3, [r9], #4
 8010f9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010f9e:	d8e5      	bhi.n	8010f6c <__mdiff+0x88>
 8010fa0:	1b33      	subs	r3, r6, r4
 8010fa2:	3b15      	subs	r3, #21
 8010fa4:	f023 0303 	bic.w	r3, r3, #3
 8010fa8:	3415      	adds	r4, #21
 8010faa:	3304      	adds	r3, #4
 8010fac:	42a6      	cmp	r6, r4
 8010fae:	bf38      	it	cc
 8010fb0:	2304      	movcc	r3, #4
 8010fb2:	441d      	add	r5, r3
 8010fb4:	445b      	add	r3, fp
 8010fb6:	461e      	mov	r6, r3
 8010fb8:	462c      	mov	r4, r5
 8010fba:	4544      	cmp	r4, r8
 8010fbc:	d30e      	bcc.n	8010fdc <__mdiff+0xf8>
 8010fbe:	f108 0103 	add.w	r1, r8, #3
 8010fc2:	1b49      	subs	r1, r1, r5
 8010fc4:	f021 0103 	bic.w	r1, r1, #3
 8010fc8:	3d03      	subs	r5, #3
 8010fca:	45a8      	cmp	r8, r5
 8010fcc:	bf38      	it	cc
 8010fce:	2100      	movcc	r1, #0
 8010fd0:	440b      	add	r3, r1
 8010fd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010fd6:	b191      	cbz	r1, 8010ffe <__mdiff+0x11a>
 8010fd8:	6117      	str	r7, [r2, #16]
 8010fda:	e79d      	b.n	8010f18 <__mdiff+0x34>
 8010fdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8010fe0:	46e6      	mov	lr, ip
 8010fe2:	0c08      	lsrs	r0, r1, #16
 8010fe4:	fa1c fc81 	uxtah	ip, ip, r1
 8010fe8:	4471      	add	r1, lr
 8010fea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010fee:	b289      	uxth	r1, r1
 8010ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010ff4:	f846 1b04 	str.w	r1, [r6], #4
 8010ff8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ffc:	e7dd      	b.n	8010fba <__mdiff+0xd6>
 8010ffe:	3f01      	subs	r7, #1
 8011000:	e7e7      	b.n	8010fd2 <__mdiff+0xee>
 8011002:	bf00      	nop
 8011004:	08011aae 	.word	0x08011aae
 8011008:	08011b1f 	.word	0x08011b1f

0801100c <__ulp>:
 801100c:	b082      	sub	sp, #8
 801100e:	ed8d 0b00 	vstr	d0, [sp]
 8011012:	9a01      	ldr	r2, [sp, #4]
 8011014:	4b0f      	ldr	r3, [pc, #60]	@ (8011054 <__ulp+0x48>)
 8011016:	4013      	ands	r3, r2
 8011018:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801101c:	2b00      	cmp	r3, #0
 801101e:	dc08      	bgt.n	8011032 <__ulp+0x26>
 8011020:	425b      	negs	r3, r3
 8011022:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011026:	ea4f 5223 	mov.w	r2, r3, asr #20
 801102a:	da04      	bge.n	8011036 <__ulp+0x2a>
 801102c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011030:	4113      	asrs	r3, r2
 8011032:	2200      	movs	r2, #0
 8011034:	e008      	b.n	8011048 <__ulp+0x3c>
 8011036:	f1a2 0314 	sub.w	r3, r2, #20
 801103a:	2b1e      	cmp	r3, #30
 801103c:	bfda      	itte	le
 801103e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011042:	40da      	lsrle	r2, r3
 8011044:	2201      	movgt	r2, #1
 8011046:	2300      	movs	r3, #0
 8011048:	4619      	mov	r1, r3
 801104a:	4610      	mov	r0, r2
 801104c:	ec41 0b10 	vmov	d0, r0, r1
 8011050:	b002      	add	sp, #8
 8011052:	4770      	bx	lr
 8011054:	7ff00000 	.word	0x7ff00000

08011058 <__b2d>:
 8011058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801105c:	6906      	ldr	r6, [r0, #16]
 801105e:	f100 0814 	add.w	r8, r0, #20
 8011062:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011066:	1f37      	subs	r7, r6, #4
 8011068:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801106c:	4610      	mov	r0, r2
 801106e:	f7ff fd53 	bl	8010b18 <__hi0bits>
 8011072:	f1c0 0320 	rsb	r3, r0, #32
 8011076:	280a      	cmp	r0, #10
 8011078:	600b      	str	r3, [r1, #0]
 801107a:	491b      	ldr	r1, [pc, #108]	@ (80110e8 <__b2d+0x90>)
 801107c:	dc15      	bgt.n	80110aa <__b2d+0x52>
 801107e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011082:	fa22 f30c 	lsr.w	r3, r2, ip
 8011086:	45b8      	cmp	r8, r7
 8011088:	ea43 0501 	orr.w	r5, r3, r1
 801108c:	bf34      	ite	cc
 801108e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011092:	2300      	movcs	r3, #0
 8011094:	3015      	adds	r0, #21
 8011096:	fa02 f000 	lsl.w	r0, r2, r0
 801109a:	fa23 f30c 	lsr.w	r3, r3, ip
 801109e:	4303      	orrs	r3, r0
 80110a0:	461c      	mov	r4, r3
 80110a2:	ec45 4b10 	vmov	d0, r4, r5
 80110a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110aa:	45b8      	cmp	r8, r7
 80110ac:	bf3a      	itte	cc
 80110ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80110b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80110b6:	2300      	movcs	r3, #0
 80110b8:	380b      	subs	r0, #11
 80110ba:	d012      	beq.n	80110e2 <__b2d+0x8a>
 80110bc:	f1c0 0120 	rsb	r1, r0, #32
 80110c0:	fa23 f401 	lsr.w	r4, r3, r1
 80110c4:	4082      	lsls	r2, r0
 80110c6:	4322      	orrs	r2, r4
 80110c8:	4547      	cmp	r7, r8
 80110ca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80110ce:	bf8c      	ite	hi
 80110d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80110d4:	2200      	movls	r2, #0
 80110d6:	4083      	lsls	r3, r0
 80110d8:	40ca      	lsrs	r2, r1
 80110da:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80110de:	4313      	orrs	r3, r2
 80110e0:	e7de      	b.n	80110a0 <__b2d+0x48>
 80110e2:	ea42 0501 	orr.w	r5, r2, r1
 80110e6:	e7db      	b.n	80110a0 <__b2d+0x48>
 80110e8:	3ff00000 	.word	0x3ff00000

080110ec <__d2b>:
 80110ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110f0:	460f      	mov	r7, r1
 80110f2:	2101      	movs	r1, #1
 80110f4:	ec59 8b10 	vmov	r8, r9, d0
 80110f8:	4616      	mov	r6, r2
 80110fa:	f7ff fc1b 	bl	8010934 <_Balloc>
 80110fe:	4604      	mov	r4, r0
 8011100:	b930      	cbnz	r0, 8011110 <__d2b+0x24>
 8011102:	4602      	mov	r2, r0
 8011104:	4b23      	ldr	r3, [pc, #140]	@ (8011194 <__d2b+0xa8>)
 8011106:	4824      	ldr	r0, [pc, #144]	@ (8011198 <__d2b+0xac>)
 8011108:	f240 310f 	movw	r1, #783	@ 0x30f
 801110c:	f000 fb48 	bl	80117a0 <__assert_func>
 8011110:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011118:	b10d      	cbz	r5, 801111e <__d2b+0x32>
 801111a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801111e:	9301      	str	r3, [sp, #4]
 8011120:	f1b8 0300 	subs.w	r3, r8, #0
 8011124:	d023      	beq.n	801116e <__d2b+0x82>
 8011126:	4668      	mov	r0, sp
 8011128:	9300      	str	r3, [sp, #0]
 801112a:	f7ff fd14 	bl	8010b56 <__lo0bits>
 801112e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011132:	b1d0      	cbz	r0, 801116a <__d2b+0x7e>
 8011134:	f1c0 0320 	rsb	r3, r0, #32
 8011138:	fa02 f303 	lsl.w	r3, r2, r3
 801113c:	430b      	orrs	r3, r1
 801113e:	40c2      	lsrs	r2, r0
 8011140:	6163      	str	r3, [r4, #20]
 8011142:	9201      	str	r2, [sp, #4]
 8011144:	9b01      	ldr	r3, [sp, #4]
 8011146:	61a3      	str	r3, [r4, #24]
 8011148:	2b00      	cmp	r3, #0
 801114a:	bf0c      	ite	eq
 801114c:	2201      	moveq	r2, #1
 801114e:	2202      	movne	r2, #2
 8011150:	6122      	str	r2, [r4, #16]
 8011152:	b1a5      	cbz	r5, 801117e <__d2b+0x92>
 8011154:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011158:	4405      	add	r5, r0
 801115a:	603d      	str	r5, [r7, #0]
 801115c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011160:	6030      	str	r0, [r6, #0]
 8011162:	4620      	mov	r0, r4
 8011164:	b003      	add	sp, #12
 8011166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801116a:	6161      	str	r1, [r4, #20]
 801116c:	e7ea      	b.n	8011144 <__d2b+0x58>
 801116e:	a801      	add	r0, sp, #4
 8011170:	f7ff fcf1 	bl	8010b56 <__lo0bits>
 8011174:	9b01      	ldr	r3, [sp, #4]
 8011176:	6163      	str	r3, [r4, #20]
 8011178:	3020      	adds	r0, #32
 801117a:	2201      	movs	r2, #1
 801117c:	e7e8      	b.n	8011150 <__d2b+0x64>
 801117e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011182:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011186:	6038      	str	r0, [r7, #0]
 8011188:	6918      	ldr	r0, [r3, #16]
 801118a:	f7ff fcc5 	bl	8010b18 <__hi0bits>
 801118e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011192:	e7e5      	b.n	8011160 <__d2b+0x74>
 8011194:	08011aae 	.word	0x08011aae
 8011198:	08011b1f 	.word	0x08011b1f

0801119c <__ratio>:
 801119c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a0:	4688      	mov	r8, r1
 80111a2:	4669      	mov	r1, sp
 80111a4:	4681      	mov	r9, r0
 80111a6:	f7ff ff57 	bl	8011058 <__b2d>
 80111aa:	a901      	add	r1, sp, #4
 80111ac:	4640      	mov	r0, r8
 80111ae:	ec55 4b10 	vmov	r4, r5, d0
 80111b2:	f7ff ff51 	bl	8011058 <__b2d>
 80111b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80111ba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80111be:	1ad2      	subs	r2, r2, r3
 80111c0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80111c4:	1a5b      	subs	r3, r3, r1
 80111c6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80111ca:	ec57 6b10 	vmov	r6, r7, d0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	bfd6      	itet	le
 80111d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80111d6:	462a      	movgt	r2, r5
 80111d8:	463a      	movle	r2, r7
 80111da:	46ab      	mov	fp, r5
 80111dc:	46a2      	mov	sl, r4
 80111de:	bfce      	itee	gt
 80111e0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80111e4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80111e8:	ee00 3a90 	vmovle	s1, r3
 80111ec:	ec4b ab17 	vmov	d7, sl, fp
 80111f0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80111f4:	b003      	add	sp, #12
 80111f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111fa <__copybits>:
 80111fa:	3901      	subs	r1, #1
 80111fc:	b570      	push	{r4, r5, r6, lr}
 80111fe:	1149      	asrs	r1, r1, #5
 8011200:	6914      	ldr	r4, [r2, #16]
 8011202:	3101      	adds	r1, #1
 8011204:	f102 0314 	add.w	r3, r2, #20
 8011208:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801120c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011210:	1f05      	subs	r5, r0, #4
 8011212:	42a3      	cmp	r3, r4
 8011214:	d30c      	bcc.n	8011230 <__copybits+0x36>
 8011216:	1aa3      	subs	r3, r4, r2
 8011218:	3b11      	subs	r3, #17
 801121a:	f023 0303 	bic.w	r3, r3, #3
 801121e:	3211      	adds	r2, #17
 8011220:	42a2      	cmp	r2, r4
 8011222:	bf88      	it	hi
 8011224:	2300      	movhi	r3, #0
 8011226:	4418      	add	r0, r3
 8011228:	2300      	movs	r3, #0
 801122a:	4288      	cmp	r0, r1
 801122c:	d305      	bcc.n	801123a <__copybits+0x40>
 801122e:	bd70      	pop	{r4, r5, r6, pc}
 8011230:	f853 6b04 	ldr.w	r6, [r3], #4
 8011234:	f845 6f04 	str.w	r6, [r5, #4]!
 8011238:	e7eb      	b.n	8011212 <__copybits+0x18>
 801123a:	f840 3b04 	str.w	r3, [r0], #4
 801123e:	e7f4      	b.n	801122a <__copybits+0x30>

08011240 <__any_on>:
 8011240:	f100 0214 	add.w	r2, r0, #20
 8011244:	6900      	ldr	r0, [r0, #16]
 8011246:	114b      	asrs	r3, r1, #5
 8011248:	4298      	cmp	r0, r3
 801124a:	b510      	push	{r4, lr}
 801124c:	db11      	blt.n	8011272 <__any_on+0x32>
 801124e:	dd0a      	ble.n	8011266 <__any_on+0x26>
 8011250:	f011 011f 	ands.w	r1, r1, #31
 8011254:	d007      	beq.n	8011266 <__any_on+0x26>
 8011256:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801125a:	fa24 f001 	lsr.w	r0, r4, r1
 801125e:	fa00 f101 	lsl.w	r1, r0, r1
 8011262:	428c      	cmp	r4, r1
 8011264:	d10b      	bne.n	801127e <__any_on+0x3e>
 8011266:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801126a:	4293      	cmp	r3, r2
 801126c:	d803      	bhi.n	8011276 <__any_on+0x36>
 801126e:	2000      	movs	r0, #0
 8011270:	bd10      	pop	{r4, pc}
 8011272:	4603      	mov	r3, r0
 8011274:	e7f7      	b.n	8011266 <__any_on+0x26>
 8011276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801127a:	2900      	cmp	r1, #0
 801127c:	d0f5      	beq.n	801126a <__any_on+0x2a>
 801127e:	2001      	movs	r0, #1
 8011280:	e7f6      	b.n	8011270 <__any_on+0x30>

08011282 <__ascii_wctomb>:
 8011282:	4603      	mov	r3, r0
 8011284:	4608      	mov	r0, r1
 8011286:	b141      	cbz	r1, 801129a <__ascii_wctomb+0x18>
 8011288:	2aff      	cmp	r2, #255	@ 0xff
 801128a:	d904      	bls.n	8011296 <__ascii_wctomb+0x14>
 801128c:	228a      	movs	r2, #138	@ 0x8a
 801128e:	601a      	str	r2, [r3, #0]
 8011290:	f04f 30ff 	mov.w	r0, #4294967295
 8011294:	4770      	bx	lr
 8011296:	700a      	strb	r2, [r1, #0]
 8011298:	2001      	movs	r0, #1
 801129a:	4770      	bx	lr

0801129c <__sfputc_r>:
 801129c:	6893      	ldr	r3, [r2, #8]
 801129e:	3b01      	subs	r3, #1
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	b410      	push	{r4}
 80112a4:	6093      	str	r3, [r2, #8]
 80112a6:	da08      	bge.n	80112ba <__sfputc_r+0x1e>
 80112a8:	6994      	ldr	r4, [r2, #24]
 80112aa:	42a3      	cmp	r3, r4
 80112ac:	db01      	blt.n	80112b2 <__sfputc_r+0x16>
 80112ae:	290a      	cmp	r1, #10
 80112b0:	d103      	bne.n	80112ba <__sfputc_r+0x1e>
 80112b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112b6:	f7fd bfbe 	b.w	800f236 <__swbuf_r>
 80112ba:	6813      	ldr	r3, [r2, #0]
 80112bc:	1c58      	adds	r0, r3, #1
 80112be:	6010      	str	r0, [r2, #0]
 80112c0:	7019      	strb	r1, [r3, #0]
 80112c2:	4608      	mov	r0, r1
 80112c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112c8:	4770      	bx	lr

080112ca <__sfputs_r>:
 80112ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112cc:	4606      	mov	r6, r0
 80112ce:	460f      	mov	r7, r1
 80112d0:	4614      	mov	r4, r2
 80112d2:	18d5      	adds	r5, r2, r3
 80112d4:	42ac      	cmp	r4, r5
 80112d6:	d101      	bne.n	80112dc <__sfputs_r+0x12>
 80112d8:	2000      	movs	r0, #0
 80112da:	e007      	b.n	80112ec <__sfputs_r+0x22>
 80112dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112e0:	463a      	mov	r2, r7
 80112e2:	4630      	mov	r0, r6
 80112e4:	f7ff ffda 	bl	801129c <__sfputc_r>
 80112e8:	1c43      	adds	r3, r0, #1
 80112ea:	d1f3      	bne.n	80112d4 <__sfputs_r+0xa>
 80112ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112f0 <_vfiprintf_r>:
 80112f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f4:	460d      	mov	r5, r1
 80112f6:	b09d      	sub	sp, #116	@ 0x74
 80112f8:	4614      	mov	r4, r2
 80112fa:	4698      	mov	r8, r3
 80112fc:	4606      	mov	r6, r0
 80112fe:	b118      	cbz	r0, 8011308 <_vfiprintf_r+0x18>
 8011300:	6a03      	ldr	r3, [r0, #32]
 8011302:	b90b      	cbnz	r3, 8011308 <_vfiprintf_r+0x18>
 8011304:	f7fd feae 	bl	800f064 <__sinit>
 8011308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801130a:	07d9      	lsls	r1, r3, #31
 801130c:	d405      	bmi.n	801131a <_vfiprintf_r+0x2a>
 801130e:	89ab      	ldrh	r3, [r5, #12]
 8011310:	059a      	lsls	r2, r3, #22
 8011312:	d402      	bmi.n	801131a <_vfiprintf_r+0x2a>
 8011314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011316:	f7fe f8b2 	bl	800f47e <__retarget_lock_acquire_recursive>
 801131a:	89ab      	ldrh	r3, [r5, #12]
 801131c:	071b      	lsls	r3, r3, #28
 801131e:	d501      	bpl.n	8011324 <_vfiprintf_r+0x34>
 8011320:	692b      	ldr	r3, [r5, #16]
 8011322:	b99b      	cbnz	r3, 801134c <_vfiprintf_r+0x5c>
 8011324:	4629      	mov	r1, r5
 8011326:	4630      	mov	r0, r6
 8011328:	f7fd ffc4 	bl	800f2b4 <__swsetup_r>
 801132c:	b170      	cbz	r0, 801134c <_vfiprintf_r+0x5c>
 801132e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011330:	07dc      	lsls	r4, r3, #31
 8011332:	d504      	bpl.n	801133e <_vfiprintf_r+0x4e>
 8011334:	f04f 30ff 	mov.w	r0, #4294967295
 8011338:	b01d      	add	sp, #116	@ 0x74
 801133a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801133e:	89ab      	ldrh	r3, [r5, #12]
 8011340:	0598      	lsls	r0, r3, #22
 8011342:	d4f7      	bmi.n	8011334 <_vfiprintf_r+0x44>
 8011344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011346:	f7fe f89b 	bl	800f480 <__retarget_lock_release_recursive>
 801134a:	e7f3      	b.n	8011334 <_vfiprintf_r+0x44>
 801134c:	2300      	movs	r3, #0
 801134e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011350:	2320      	movs	r3, #32
 8011352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011356:	f8cd 800c 	str.w	r8, [sp, #12]
 801135a:	2330      	movs	r3, #48	@ 0x30
 801135c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801150c <_vfiprintf_r+0x21c>
 8011360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011364:	f04f 0901 	mov.w	r9, #1
 8011368:	4623      	mov	r3, r4
 801136a:	469a      	mov	sl, r3
 801136c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011370:	b10a      	cbz	r2, 8011376 <_vfiprintf_r+0x86>
 8011372:	2a25      	cmp	r2, #37	@ 0x25
 8011374:	d1f9      	bne.n	801136a <_vfiprintf_r+0x7a>
 8011376:	ebba 0b04 	subs.w	fp, sl, r4
 801137a:	d00b      	beq.n	8011394 <_vfiprintf_r+0xa4>
 801137c:	465b      	mov	r3, fp
 801137e:	4622      	mov	r2, r4
 8011380:	4629      	mov	r1, r5
 8011382:	4630      	mov	r0, r6
 8011384:	f7ff ffa1 	bl	80112ca <__sfputs_r>
 8011388:	3001      	adds	r0, #1
 801138a:	f000 80a7 	beq.w	80114dc <_vfiprintf_r+0x1ec>
 801138e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011390:	445a      	add	r2, fp
 8011392:	9209      	str	r2, [sp, #36]	@ 0x24
 8011394:	f89a 3000 	ldrb.w	r3, [sl]
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 809f 	beq.w	80114dc <_vfiprintf_r+0x1ec>
 801139e:	2300      	movs	r3, #0
 80113a0:	f04f 32ff 	mov.w	r2, #4294967295
 80113a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113a8:	f10a 0a01 	add.w	sl, sl, #1
 80113ac:	9304      	str	r3, [sp, #16]
 80113ae:	9307      	str	r3, [sp, #28]
 80113b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80113b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80113b6:	4654      	mov	r4, sl
 80113b8:	2205      	movs	r2, #5
 80113ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113be:	4853      	ldr	r0, [pc, #332]	@ (801150c <_vfiprintf_r+0x21c>)
 80113c0:	f7ee ff9e 	bl	8000300 <memchr>
 80113c4:	9a04      	ldr	r2, [sp, #16]
 80113c6:	b9d8      	cbnz	r0, 8011400 <_vfiprintf_r+0x110>
 80113c8:	06d1      	lsls	r1, r2, #27
 80113ca:	bf44      	itt	mi
 80113cc:	2320      	movmi	r3, #32
 80113ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113d2:	0713      	lsls	r3, r2, #28
 80113d4:	bf44      	itt	mi
 80113d6:	232b      	movmi	r3, #43	@ 0x2b
 80113d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113dc:	f89a 3000 	ldrb.w	r3, [sl]
 80113e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80113e2:	d015      	beq.n	8011410 <_vfiprintf_r+0x120>
 80113e4:	9a07      	ldr	r2, [sp, #28]
 80113e6:	4654      	mov	r4, sl
 80113e8:	2000      	movs	r0, #0
 80113ea:	f04f 0c0a 	mov.w	ip, #10
 80113ee:	4621      	mov	r1, r4
 80113f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113f4:	3b30      	subs	r3, #48	@ 0x30
 80113f6:	2b09      	cmp	r3, #9
 80113f8:	d94b      	bls.n	8011492 <_vfiprintf_r+0x1a2>
 80113fa:	b1b0      	cbz	r0, 801142a <_vfiprintf_r+0x13a>
 80113fc:	9207      	str	r2, [sp, #28]
 80113fe:	e014      	b.n	801142a <_vfiprintf_r+0x13a>
 8011400:	eba0 0308 	sub.w	r3, r0, r8
 8011404:	fa09 f303 	lsl.w	r3, r9, r3
 8011408:	4313      	orrs	r3, r2
 801140a:	9304      	str	r3, [sp, #16]
 801140c:	46a2      	mov	sl, r4
 801140e:	e7d2      	b.n	80113b6 <_vfiprintf_r+0xc6>
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	1d19      	adds	r1, r3, #4
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	9103      	str	r1, [sp, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	bfbb      	ittet	lt
 801141c:	425b      	neglt	r3, r3
 801141e:	f042 0202 	orrlt.w	r2, r2, #2
 8011422:	9307      	strge	r3, [sp, #28]
 8011424:	9307      	strlt	r3, [sp, #28]
 8011426:	bfb8      	it	lt
 8011428:	9204      	strlt	r2, [sp, #16]
 801142a:	7823      	ldrb	r3, [r4, #0]
 801142c:	2b2e      	cmp	r3, #46	@ 0x2e
 801142e:	d10a      	bne.n	8011446 <_vfiprintf_r+0x156>
 8011430:	7863      	ldrb	r3, [r4, #1]
 8011432:	2b2a      	cmp	r3, #42	@ 0x2a
 8011434:	d132      	bne.n	801149c <_vfiprintf_r+0x1ac>
 8011436:	9b03      	ldr	r3, [sp, #12]
 8011438:	1d1a      	adds	r2, r3, #4
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	9203      	str	r2, [sp, #12]
 801143e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011442:	3402      	adds	r4, #2
 8011444:	9305      	str	r3, [sp, #20]
 8011446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801151c <_vfiprintf_r+0x22c>
 801144a:	7821      	ldrb	r1, [r4, #0]
 801144c:	2203      	movs	r2, #3
 801144e:	4650      	mov	r0, sl
 8011450:	f7ee ff56 	bl	8000300 <memchr>
 8011454:	b138      	cbz	r0, 8011466 <_vfiprintf_r+0x176>
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	eba0 000a 	sub.w	r0, r0, sl
 801145c:	2240      	movs	r2, #64	@ 0x40
 801145e:	4082      	lsls	r2, r0
 8011460:	4313      	orrs	r3, r2
 8011462:	3401      	adds	r4, #1
 8011464:	9304      	str	r3, [sp, #16]
 8011466:	f814 1b01 	ldrb.w	r1, [r4], #1
 801146a:	4829      	ldr	r0, [pc, #164]	@ (8011510 <_vfiprintf_r+0x220>)
 801146c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011470:	2206      	movs	r2, #6
 8011472:	f7ee ff45 	bl	8000300 <memchr>
 8011476:	2800      	cmp	r0, #0
 8011478:	d03f      	beq.n	80114fa <_vfiprintf_r+0x20a>
 801147a:	4b26      	ldr	r3, [pc, #152]	@ (8011514 <_vfiprintf_r+0x224>)
 801147c:	bb1b      	cbnz	r3, 80114c6 <_vfiprintf_r+0x1d6>
 801147e:	9b03      	ldr	r3, [sp, #12]
 8011480:	3307      	adds	r3, #7
 8011482:	f023 0307 	bic.w	r3, r3, #7
 8011486:	3308      	adds	r3, #8
 8011488:	9303      	str	r3, [sp, #12]
 801148a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801148c:	443b      	add	r3, r7
 801148e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011490:	e76a      	b.n	8011368 <_vfiprintf_r+0x78>
 8011492:	fb0c 3202 	mla	r2, ip, r2, r3
 8011496:	460c      	mov	r4, r1
 8011498:	2001      	movs	r0, #1
 801149a:	e7a8      	b.n	80113ee <_vfiprintf_r+0xfe>
 801149c:	2300      	movs	r3, #0
 801149e:	3401      	adds	r4, #1
 80114a0:	9305      	str	r3, [sp, #20]
 80114a2:	4619      	mov	r1, r3
 80114a4:	f04f 0c0a 	mov.w	ip, #10
 80114a8:	4620      	mov	r0, r4
 80114aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114ae:	3a30      	subs	r2, #48	@ 0x30
 80114b0:	2a09      	cmp	r2, #9
 80114b2:	d903      	bls.n	80114bc <_vfiprintf_r+0x1cc>
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d0c6      	beq.n	8011446 <_vfiprintf_r+0x156>
 80114b8:	9105      	str	r1, [sp, #20]
 80114ba:	e7c4      	b.n	8011446 <_vfiprintf_r+0x156>
 80114bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80114c0:	4604      	mov	r4, r0
 80114c2:	2301      	movs	r3, #1
 80114c4:	e7f0      	b.n	80114a8 <_vfiprintf_r+0x1b8>
 80114c6:	ab03      	add	r3, sp, #12
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	462a      	mov	r2, r5
 80114cc:	4b12      	ldr	r3, [pc, #72]	@ (8011518 <_vfiprintf_r+0x228>)
 80114ce:	a904      	add	r1, sp, #16
 80114d0:	4630      	mov	r0, r6
 80114d2:	f7fd f995 	bl	800e800 <_printf_float>
 80114d6:	4607      	mov	r7, r0
 80114d8:	1c78      	adds	r0, r7, #1
 80114da:	d1d6      	bne.n	801148a <_vfiprintf_r+0x19a>
 80114dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114de:	07d9      	lsls	r1, r3, #31
 80114e0:	d405      	bmi.n	80114ee <_vfiprintf_r+0x1fe>
 80114e2:	89ab      	ldrh	r3, [r5, #12]
 80114e4:	059a      	lsls	r2, r3, #22
 80114e6:	d402      	bmi.n	80114ee <_vfiprintf_r+0x1fe>
 80114e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80114ea:	f7fd ffc9 	bl	800f480 <__retarget_lock_release_recursive>
 80114ee:	89ab      	ldrh	r3, [r5, #12]
 80114f0:	065b      	lsls	r3, r3, #25
 80114f2:	f53f af1f 	bmi.w	8011334 <_vfiprintf_r+0x44>
 80114f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114f8:	e71e      	b.n	8011338 <_vfiprintf_r+0x48>
 80114fa:	ab03      	add	r3, sp, #12
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	462a      	mov	r2, r5
 8011500:	4b05      	ldr	r3, [pc, #20]	@ (8011518 <_vfiprintf_r+0x228>)
 8011502:	a904      	add	r1, sp, #16
 8011504:	4630      	mov	r0, r6
 8011506:	f7fd fc03 	bl	800ed10 <_printf_i>
 801150a:	e7e4      	b.n	80114d6 <_vfiprintf_r+0x1e6>
 801150c:	08011b78 	.word	0x08011b78
 8011510:	08011b82 	.word	0x08011b82
 8011514:	0800e801 	.word	0x0800e801
 8011518:	080112cb 	.word	0x080112cb
 801151c:	08011b7e 	.word	0x08011b7e

08011520 <__sflush_r>:
 8011520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011528:	0716      	lsls	r6, r2, #28
 801152a:	4605      	mov	r5, r0
 801152c:	460c      	mov	r4, r1
 801152e:	d454      	bmi.n	80115da <__sflush_r+0xba>
 8011530:	684b      	ldr	r3, [r1, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	dc02      	bgt.n	801153c <__sflush_r+0x1c>
 8011536:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011538:	2b00      	cmp	r3, #0
 801153a:	dd48      	ble.n	80115ce <__sflush_r+0xae>
 801153c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801153e:	2e00      	cmp	r6, #0
 8011540:	d045      	beq.n	80115ce <__sflush_r+0xae>
 8011542:	2300      	movs	r3, #0
 8011544:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011548:	682f      	ldr	r7, [r5, #0]
 801154a:	6a21      	ldr	r1, [r4, #32]
 801154c:	602b      	str	r3, [r5, #0]
 801154e:	d030      	beq.n	80115b2 <__sflush_r+0x92>
 8011550:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011552:	89a3      	ldrh	r3, [r4, #12]
 8011554:	0759      	lsls	r1, r3, #29
 8011556:	d505      	bpl.n	8011564 <__sflush_r+0x44>
 8011558:	6863      	ldr	r3, [r4, #4]
 801155a:	1ad2      	subs	r2, r2, r3
 801155c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801155e:	b10b      	cbz	r3, 8011564 <__sflush_r+0x44>
 8011560:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011562:	1ad2      	subs	r2, r2, r3
 8011564:	2300      	movs	r3, #0
 8011566:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011568:	6a21      	ldr	r1, [r4, #32]
 801156a:	4628      	mov	r0, r5
 801156c:	47b0      	blx	r6
 801156e:	1c43      	adds	r3, r0, #1
 8011570:	89a3      	ldrh	r3, [r4, #12]
 8011572:	d106      	bne.n	8011582 <__sflush_r+0x62>
 8011574:	6829      	ldr	r1, [r5, #0]
 8011576:	291d      	cmp	r1, #29
 8011578:	d82b      	bhi.n	80115d2 <__sflush_r+0xb2>
 801157a:	4a2a      	ldr	r2, [pc, #168]	@ (8011624 <__sflush_r+0x104>)
 801157c:	40ca      	lsrs	r2, r1
 801157e:	07d6      	lsls	r6, r2, #31
 8011580:	d527      	bpl.n	80115d2 <__sflush_r+0xb2>
 8011582:	2200      	movs	r2, #0
 8011584:	6062      	str	r2, [r4, #4]
 8011586:	04d9      	lsls	r1, r3, #19
 8011588:	6922      	ldr	r2, [r4, #16]
 801158a:	6022      	str	r2, [r4, #0]
 801158c:	d504      	bpl.n	8011598 <__sflush_r+0x78>
 801158e:	1c42      	adds	r2, r0, #1
 8011590:	d101      	bne.n	8011596 <__sflush_r+0x76>
 8011592:	682b      	ldr	r3, [r5, #0]
 8011594:	b903      	cbnz	r3, 8011598 <__sflush_r+0x78>
 8011596:	6560      	str	r0, [r4, #84]	@ 0x54
 8011598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801159a:	602f      	str	r7, [r5, #0]
 801159c:	b1b9      	cbz	r1, 80115ce <__sflush_r+0xae>
 801159e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80115a2:	4299      	cmp	r1, r3
 80115a4:	d002      	beq.n	80115ac <__sflush_r+0x8c>
 80115a6:	4628      	mov	r0, r5
 80115a8:	f7fe fd78 	bl	801009c <_free_r>
 80115ac:	2300      	movs	r3, #0
 80115ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80115b0:	e00d      	b.n	80115ce <__sflush_r+0xae>
 80115b2:	2301      	movs	r3, #1
 80115b4:	4628      	mov	r0, r5
 80115b6:	47b0      	blx	r6
 80115b8:	4602      	mov	r2, r0
 80115ba:	1c50      	adds	r0, r2, #1
 80115bc:	d1c9      	bne.n	8011552 <__sflush_r+0x32>
 80115be:	682b      	ldr	r3, [r5, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d0c6      	beq.n	8011552 <__sflush_r+0x32>
 80115c4:	2b1d      	cmp	r3, #29
 80115c6:	d001      	beq.n	80115cc <__sflush_r+0xac>
 80115c8:	2b16      	cmp	r3, #22
 80115ca:	d11e      	bne.n	801160a <__sflush_r+0xea>
 80115cc:	602f      	str	r7, [r5, #0]
 80115ce:	2000      	movs	r0, #0
 80115d0:	e022      	b.n	8011618 <__sflush_r+0xf8>
 80115d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115d6:	b21b      	sxth	r3, r3
 80115d8:	e01b      	b.n	8011612 <__sflush_r+0xf2>
 80115da:	690f      	ldr	r7, [r1, #16]
 80115dc:	2f00      	cmp	r7, #0
 80115de:	d0f6      	beq.n	80115ce <__sflush_r+0xae>
 80115e0:	0793      	lsls	r3, r2, #30
 80115e2:	680e      	ldr	r6, [r1, #0]
 80115e4:	bf08      	it	eq
 80115e6:	694b      	ldreq	r3, [r1, #20]
 80115e8:	600f      	str	r7, [r1, #0]
 80115ea:	bf18      	it	ne
 80115ec:	2300      	movne	r3, #0
 80115ee:	eba6 0807 	sub.w	r8, r6, r7
 80115f2:	608b      	str	r3, [r1, #8]
 80115f4:	f1b8 0f00 	cmp.w	r8, #0
 80115f8:	dde9      	ble.n	80115ce <__sflush_r+0xae>
 80115fa:	6a21      	ldr	r1, [r4, #32]
 80115fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80115fe:	4643      	mov	r3, r8
 8011600:	463a      	mov	r2, r7
 8011602:	4628      	mov	r0, r5
 8011604:	47b0      	blx	r6
 8011606:	2800      	cmp	r0, #0
 8011608:	dc08      	bgt.n	801161c <__sflush_r+0xfc>
 801160a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801160e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011612:	81a3      	strh	r3, [r4, #12]
 8011614:	f04f 30ff 	mov.w	r0, #4294967295
 8011618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801161c:	4407      	add	r7, r0
 801161e:	eba8 0800 	sub.w	r8, r8, r0
 8011622:	e7e7      	b.n	80115f4 <__sflush_r+0xd4>
 8011624:	20400001 	.word	0x20400001

08011628 <_fflush_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	690b      	ldr	r3, [r1, #16]
 801162c:	4605      	mov	r5, r0
 801162e:	460c      	mov	r4, r1
 8011630:	b913      	cbnz	r3, 8011638 <_fflush_r+0x10>
 8011632:	2500      	movs	r5, #0
 8011634:	4628      	mov	r0, r5
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	b118      	cbz	r0, 8011642 <_fflush_r+0x1a>
 801163a:	6a03      	ldr	r3, [r0, #32]
 801163c:	b90b      	cbnz	r3, 8011642 <_fflush_r+0x1a>
 801163e:	f7fd fd11 	bl	800f064 <__sinit>
 8011642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d0f3      	beq.n	8011632 <_fflush_r+0xa>
 801164a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801164c:	07d0      	lsls	r0, r2, #31
 801164e:	d404      	bmi.n	801165a <_fflush_r+0x32>
 8011650:	0599      	lsls	r1, r3, #22
 8011652:	d402      	bmi.n	801165a <_fflush_r+0x32>
 8011654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011656:	f7fd ff12 	bl	800f47e <__retarget_lock_acquire_recursive>
 801165a:	4628      	mov	r0, r5
 801165c:	4621      	mov	r1, r4
 801165e:	f7ff ff5f 	bl	8011520 <__sflush_r>
 8011662:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011664:	07da      	lsls	r2, r3, #31
 8011666:	4605      	mov	r5, r0
 8011668:	d4e4      	bmi.n	8011634 <_fflush_r+0xc>
 801166a:	89a3      	ldrh	r3, [r4, #12]
 801166c:	059b      	lsls	r3, r3, #22
 801166e:	d4e1      	bmi.n	8011634 <_fflush_r+0xc>
 8011670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011672:	f7fd ff05 	bl	800f480 <__retarget_lock_release_recursive>
 8011676:	e7dd      	b.n	8011634 <_fflush_r+0xc>

08011678 <__swhatbuf_r>:
 8011678:	b570      	push	{r4, r5, r6, lr}
 801167a:	460c      	mov	r4, r1
 801167c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011680:	2900      	cmp	r1, #0
 8011682:	b096      	sub	sp, #88	@ 0x58
 8011684:	4615      	mov	r5, r2
 8011686:	461e      	mov	r6, r3
 8011688:	da0d      	bge.n	80116a6 <__swhatbuf_r+0x2e>
 801168a:	89a3      	ldrh	r3, [r4, #12]
 801168c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011690:	f04f 0100 	mov.w	r1, #0
 8011694:	bf14      	ite	ne
 8011696:	2340      	movne	r3, #64	@ 0x40
 8011698:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801169c:	2000      	movs	r0, #0
 801169e:	6031      	str	r1, [r6, #0]
 80116a0:	602b      	str	r3, [r5, #0]
 80116a2:	b016      	add	sp, #88	@ 0x58
 80116a4:	bd70      	pop	{r4, r5, r6, pc}
 80116a6:	466a      	mov	r2, sp
 80116a8:	f000 f848 	bl	801173c <_fstat_r>
 80116ac:	2800      	cmp	r0, #0
 80116ae:	dbec      	blt.n	801168a <__swhatbuf_r+0x12>
 80116b0:	9901      	ldr	r1, [sp, #4]
 80116b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80116b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80116ba:	4259      	negs	r1, r3
 80116bc:	4159      	adcs	r1, r3
 80116be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80116c2:	e7eb      	b.n	801169c <__swhatbuf_r+0x24>

080116c4 <__smakebuf_r>:
 80116c4:	898b      	ldrh	r3, [r1, #12]
 80116c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116c8:	079d      	lsls	r5, r3, #30
 80116ca:	4606      	mov	r6, r0
 80116cc:	460c      	mov	r4, r1
 80116ce:	d507      	bpl.n	80116e0 <__smakebuf_r+0x1c>
 80116d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80116d4:	6023      	str	r3, [r4, #0]
 80116d6:	6123      	str	r3, [r4, #16]
 80116d8:	2301      	movs	r3, #1
 80116da:	6163      	str	r3, [r4, #20]
 80116dc:	b003      	add	sp, #12
 80116de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116e0:	ab01      	add	r3, sp, #4
 80116e2:	466a      	mov	r2, sp
 80116e4:	f7ff ffc8 	bl	8011678 <__swhatbuf_r>
 80116e8:	9f00      	ldr	r7, [sp, #0]
 80116ea:	4605      	mov	r5, r0
 80116ec:	4639      	mov	r1, r7
 80116ee:	4630      	mov	r0, r6
 80116f0:	f7ff f882 	bl	80107f8 <_malloc_r>
 80116f4:	b948      	cbnz	r0, 801170a <__smakebuf_r+0x46>
 80116f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116fa:	059a      	lsls	r2, r3, #22
 80116fc:	d4ee      	bmi.n	80116dc <__smakebuf_r+0x18>
 80116fe:	f023 0303 	bic.w	r3, r3, #3
 8011702:	f043 0302 	orr.w	r3, r3, #2
 8011706:	81a3      	strh	r3, [r4, #12]
 8011708:	e7e2      	b.n	80116d0 <__smakebuf_r+0xc>
 801170a:	89a3      	ldrh	r3, [r4, #12]
 801170c:	6020      	str	r0, [r4, #0]
 801170e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011712:	81a3      	strh	r3, [r4, #12]
 8011714:	9b01      	ldr	r3, [sp, #4]
 8011716:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801171a:	b15b      	cbz	r3, 8011734 <__smakebuf_r+0x70>
 801171c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011720:	4630      	mov	r0, r6
 8011722:	f000 f81d 	bl	8011760 <_isatty_r>
 8011726:	b128      	cbz	r0, 8011734 <__smakebuf_r+0x70>
 8011728:	89a3      	ldrh	r3, [r4, #12]
 801172a:	f023 0303 	bic.w	r3, r3, #3
 801172e:	f043 0301 	orr.w	r3, r3, #1
 8011732:	81a3      	strh	r3, [r4, #12]
 8011734:	89a3      	ldrh	r3, [r4, #12]
 8011736:	431d      	orrs	r5, r3
 8011738:	81a5      	strh	r5, [r4, #12]
 801173a:	e7cf      	b.n	80116dc <__smakebuf_r+0x18>

0801173c <_fstat_r>:
 801173c:	b538      	push	{r3, r4, r5, lr}
 801173e:	4d07      	ldr	r5, [pc, #28]	@ (801175c <_fstat_r+0x20>)
 8011740:	2300      	movs	r3, #0
 8011742:	4604      	mov	r4, r0
 8011744:	4608      	mov	r0, r1
 8011746:	4611      	mov	r1, r2
 8011748:	602b      	str	r3, [r5, #0]
 801174a:	f7f0 f927 	bl	800199c <_fstat>
 801174e:	1c43      	adds	r3, r0, #1
 8011750:	d102      	bne.n	8011758 <_fstat_r+0x1c>
 8011752:	682b      	ldr	r3, [r5, #0]
 8011754:	b103      	cbz	r3, 8011758 <_fstat_r+0x1c>
 8011756:	6023      	str	r3, [r4, #0]
 8011758:	bd38      	pop	{r3, r4, r5, pc}
 801175a:	bf00      	nop
 801175c:	24003978 	.word	0x24003978

08011760 <_isatty_r>:
 8011760:	b538      	push	{r3, r4, r5, lr}
 8011762:	4d06      	ldr	r5, [pc, #24]	@ (801177c <_isatty_r+0x1c>)
 8011764:	2300      	movs	r3, #0
 8011766:	4604      	mov	r4, r0
 8011768:	4608      	mov	r0, r1
 801176a:	602b      	str	r3, [r5, #0]
 801176c:	f7f0 f926 	bl	80019bc <_isatty>
 8011770:	1c43      	adds	r3, r0, #1
 8011772:	d102      	bne.n	801177a <_isatty_r+0x1a>
 8011774:	682b      	ldr	r3, [r5, #0]
 8011776:	b103      	cbz	r3, 801177a <_isatty_r+0x1a>
 8011778:	6023      	str	r3, [r4, #0]
 801177a:	bd38      	pop	{r3, r4, r5, pc}
 801177c:	24003978 	.word	0x24003978

08011780 <_sbrk_r>:
 8011780:	b538      	push	{r3, r4, r5, lr}
 8011782:	4d06      	ldr	r5, [pc, #24]	@ (801179c <_sbrk_r+0x1c>)
 8011784:	2300      	movs	r3, #0
 8011786:	4604      	mov	r4, r0
 8011788:	4608      	mov	r0, r1
 801178a:	602b      	str	r3, [r5, #0]
 801178c:	f7f0 f92e 	bl	80019ec <_sbrk>
 8011790:	1c43      	adds	r3, r0, #1
 8011792:	d102      	bne.n	801179a <_sbrk_r+0x1a>
 8011794:	682b      	ldr	r3, [r5, #0]
 8011796:	b103      	cbz	r3, 801179a <_sbrk_r+0x1a>
 8011798:	6023      	str	r3, [r4, #0]
 801179a:	bd38      	pop	{r3, r4, r5, pc}
 801179c:	24003978 	.word	0x24003978

080117a0 <__assert_func>:
 80117a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117a2:	4614      	mov	r4, r2
 80117a4:	461a      	mov	r2, r3
 80117a6:	4b09      	ldr	r3, [pc, #36]	@ (80117cc <__assert_func+0x2c>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4605      	mov	r5, r0
 80117ac:	68d8      	ldr	r0, [r3, #12]
 80117ae:	b14c      	cbz	r4, 80117c4 <__assert_func+0x24>
 80117b0:	4b07      	ldr	r3, [pc, #28]	@ (80117d0 <__assert_func+0x30>)
 80117b2:	9100      	str	r1, [sp, #0]
 80117b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80117b8:	4906      	ldr	r1, [pc, #24]	@ (80117d4 <__assert_func+0x34>)
 80117ba:	462b      	mov	r3, r5
 80117bc:	f000 f822 	bl	8011804 <fiprintf>
 80117c0:	f000 f832 	bl	8011828 <abort>
 80117c4:	4b04      	ldr	r3, [pc, #16]	@ (80117d8 <__assert_func+0x38>)
 80117c6:	461c      	mov	r4, r3
 80117c8:	e7f3      	b.n	80117b2 <__assert_func+0x12>
 80117ca:	bf00      	nop
 80117cc:	2400027c 	.word	0x2400027c
 80117d0:	08011b89 	.word	0x08011b89
 80117d4:	08011b96 	.word	0x08011b96
 80117d8:	08011bc4 	.word	0x08011bc4

080117dc <_calloc_r>:
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	fba1 5402 	umull	r5, r4, r1, r2
 80117e2:	b934      	cbnz	r4, 80117f2 <_calloc_r+0x16>
 80117e4:	4629      	mov	r1, r5
 80117e6:	f7ff f807 	bl	80107f8 <_malloc_r>
 80117ea:	4606      	mov	r6, r0
 80117ec:	b928      	cbnz	r0, 80117fa <_calloc_r+0x1e>
 80117ee:	4630      	mov	r0, r6
 80117f0:	bd70      	pop	{r4, r5, r6, pc}
 80117f2:	220c      	movs	r2, #12
 80117f4:	6002      	str	r2, [r0, #0]
 80117f6:	2600      	movs	r6, #0
 80117f8:	e7f9      	b.n	80117ee <_calloc_r+0x12>
 80117fa:	462a      	mov	r2, r5
 80117fc:	4621      	mov	r1, r4
 80117fe:	f7fd fdaf 	bl	800f360 <memset>
 8011802:	e7f4      	b.n	80117ee <_calloc_r+0x12>

08011804 <fiprintf>:
 8011804:	b40e      	push	{r1, r2, r3}
 8011806:	b503      	push	{r0, r1, lr}
 8011808:	4601      	mov	r1, r0
 801180a:	ab03      	add	r3, sp, #12
 801180c:	4805      	ldr	r0, [pc, #20]	@ (8011824 <fiprintf+0x20>)
 801180e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011812:	6800      	ldr	r0, [r0, #0]
 8011814:	9301      	str	r3, [sp, #4]
 8011816:	f7ff fd6b 	bl	80112f0 <_vfiprintf_r>
 801181a:	b002      	add	sp, #8
 801181c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011820:	b003      	add	sp, #12
 8011822:	4770      	bx	lr
 8011824:	2400027c 	.word	0x2400027c

08011828 <abort>:
 8011828:	b508      	push	{r3, lr}
 801182a:	2006      	movs	r0, #6
 801182c:	f000 f82c 	bl	8011888 <raise>
 8011830:	2001      	movs	r0, #1
 8011832:	f7f0 f863 	bl	80018fc <_exit>

08011836 <_raise_r>:
 8011836:	291f      	cmp	r1, #31
 8011838:	b538      	push	{r3, r4, r5, lr}
 801183a:	4605      	mov	r5, r0
 801183c:	460c      	mov	r4, r1
 801183e:	d904      	bls.n	801184a <_raise_r+0x14>
 8011840:	2316      	movs	r3, #22
 8011842:	6003      	str	r3, [r0, #0]
 8011844:	f04f 30ff 	mov.w	r0, #4294967295
 8011848:	bd38      	pop	{r3, r4, r5, pc}
 801184a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801184c:	b112      	cbz	r2, 8011854 <_raise_r+0x1e>
 801184e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011852:	b94b      	cbnz	r3, 8011868 <_raise_r+0x32>
 8011854:	4628      	mov	r0, r5
 8011856:	f000 f831 	bl	80118bc <_getpid_r>
 801185a:	4622      	mov	r2, r4
 801185c:	4601      	mov	r1, r0
 801185e:	4628      	mov	r0, r5
 8011860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011864:	f000 b818 	b.w	8011898 <_kill_r>
 8011868:	2b01      	cmp	r3, #1
 801186a:	d00a      	beq.n	8011882 <_raise_r+0x4c>
 801186c:	1c59      	adds	r1, r3, #1
 801186e:	d103      	bne.n	8011878 <_raise_r+0x42>
 8011870:	2316      	movs	r3, #22
 8011872:	6003      	str	r3, [r0, #0]
 8011874:	2001      	movs	r0, #1
 8011876:	e7e7      	b.n	8011848 <_raise_r+0x12>
 8011878:	2100      	movs	r1, #0
 801187a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801187e:	4620      	mov	r0, r4
 8011880:	4798      	blx	r3
 8011882:	2000      	movs	r0, #0
 8011884:	e7e0      	b.n	8011848 <_raise_r+0x12>
	...

08011888 <raise>:
 8011888:	4b02      	ldr	r3, [pc, #8]	@ (8011894 <raise+0xc>)
 801188a:	4601      	mov	r1, r0
 801188c:	6818      	ldr	r0, [r3, #0]
 801188e:	f7ff bfd2 	b.w	8011836 <_raise_r>
 8011892:	bf00      	nop
 8011894:	2400027c 	.word	0x2400027c

08011898 <_kill_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4d07      	ldr	r5, [pc, #28]	@ (80118b8 <_kill_r+0x20>)
 801189c:	2300      	movs	r3, #0
 801189e:	4604      	mov	r4, r0
 80118a0:	4608      	mov	r0, r1
 80118a2:	4611      	mov	r1, r2
 80118a4:	602b      	str	r3, [r5, #0]
 80118a6:	f7f0 f819 	bl	80018dc <_kill>
 80118aa:	1c43      	adds	r3, r0, #1
 80118ac:	d102      	bne.n	80118b4 <_kill_r+0x1c>
 80118ae:	682b      	ldr	r3, [r5, #0]
 80118b0:	b103      	cbz	r3, 80118b4 <_kill_r+0x1c>
 80118b2:	6023      	str	r3, [r4, #0]
 80118b4:	bd38      	pop	{r3, r4, r5, pc}
 80118b6:	bf00      	nop
 80118b8:	24003978 	.word	0x24003978

080118bc <_getpid_r>:
 80118bc:	f7f0 b806 	b.w	80018cc <_getpid>

080118c0 <_init>:
 80118c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c2:	bf00      	nop
 80118c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118c6:	bc08      	pop	{r3}
 80118c8:	469e      	mov	lr, r3
 80118ca:	4770      	bx	lr

080118cc <_fini>:
 80118cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ce:	bf00      	nop
 80118d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118d2:	bc08      	pop	{r3}
 80118d4:	469e      	mov	lr, r3
 80118d6:	4770      	bx	lr
