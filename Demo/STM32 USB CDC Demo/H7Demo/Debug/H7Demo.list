
H7Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011390  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08011630  08011630  00012630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011b24  08011b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011b2c  08011b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011b30  08011b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08011b34  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000036bc  240002cc  08011e00  000132cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003988  08011e00  00013988  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000132cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cf57  00000000  00000000  000132fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042dd  00000000  00000000  00030251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001378  00000000  00000000  00034530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ec0  00000000  00000000  000358a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003aa56  00000000  00000000  00036768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e685  00000000  00000000  000711be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d8f7  00000000  00000000  0008f843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ed13a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006194  00000000  00000000  001ed180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001f3314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011618 	.word	0x08011618

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	08011618 	.word	0x08011618

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9c0 	b.w	8000ac0 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	468e      	mov	lr, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d962      	bls.n	80008a4 <__udivmoddi4+0xdc>
 80007de:	fab2 f682 	clz	r6, r2
 80007e2:	b14e      	cbz	r6, 80007f8 <__udivmoddi4+0x30>
 80007e4:	f1c6 0320 	rsb	r3, r6, #32
 80007e8:	fa01 f806 	lsl.w	r8, r1, r6
 80007ec:	fa20 f303 	lsr.w	r3, r0, r3
 80007f0:	40b7      	lsls	r7, r6
 80007f2:	ea43 0808 	orr.w	r8, r3, r8
 80007f6:	40b4      	lsls	r4, r6
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	fa1f fc87 	uxth.w	ip, r7
 8000800:	fbb8 f1fe 	udiv	r1, r8, lr
 8000804:	0c23      	lsrs	r3, r4, #16
 8000806:	fb0e 8811 	mls	r8, lr, r1, r8
 800080a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800080e:	fb01 f20c 	mul.w	r2, r1, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d909      	bls.n	800082a <__udivmoddi4+0x62>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f101 30ff 	add.w	r0, r1, #4294967295
 800081c:	f080 80ea 	bcs.w	80009f4 <__udivmoddi4+0x22c>
 8000820:	429a      	cmp	r2, r3
 8000822:	f240 80e7 	bls.w	80009f4 <__udivmoddi4+0x22c>
 8000826:	3902      	subs	r1, #2
 8000828:	443b      	add	r3, r7
 800082a:	1a9a      	subs	r2, r3, r2
 800082c:	b2a3      	uxth	r3, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083a:	fb00 fc0c 	mul.w	ip, r0, ip
 800083e:	459c      	cmp	ip, r3
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x8e>
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	f100 32ff 	add.w	r2, r0, #4294967295
 8000848:	f080 80d6 	bcs.w	80009f8 <__udivmoddi4+0x230>
 800084c:	459c      	cmp	ip, r3
 800084e:	f240 80d3 	bls.w	80009f8 <__udivmoddi4+0x230>
 8000852:	443b      	add	r3, r7
 8000854:	3802      	subs	r0, #2
 8000856:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085a:	eba3 030c 	sub.w	r3, r3, ip
 800085e:	2100      	movs	r1, #0
 8000860:	b11d      	cbz	r5, 800086a <__udivmoddi4+0xa2>
 8000862:	40f3      	lsrs	r3, r6
 8000864:	2200      	movs	r2, #0
 8000866:	e9c5 3200 	strd	r3, r2, [r5]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d905      	bls.n	800087e <__udivmoddi4+0xb6>
 8000872:	b10d      	cbz	r5, 8000878 <__udivmoddi4+0xb0>
 8000874:	e9c5 0100 	strd	r0, r1, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	4608      	mov	r0, r1
 800087c:	e7f5      	b.n	800086a <__udivmoddi4+0xa2>
 800087e:	fab3 f183 	clz	r1, r3
 8000882:	2900      	cmp	r1, #0
 8000884:	d146      	bne.n	8000914 <__udivmoddi4+0x14c>
 8000886:	4573      	cmp	r3, lr
 8000888:	d302      	bcc.n	8000890 <__udivmoddi4+0xc8>
 800088a:	4282      	cmp	r2, r0
 800088c:	f200 8105 	bhi.w	8000a9a <__udivmoddi4+0x2d2>
 8000890:	1a84      	subs	r4, r0, r2
 8000892:	eb6e 0203 	sbc.w	r2, lr, r3
 8000896:	2001      	movs	r0, #1
 8000898:	4690      	mov	r8, r2
 800089a:	2d00      	cmp	r5, #0
 800089c:	d0e5      	beq.n	800086a <__udivmoddi4+0xa2>
 800089e:	e9c5 4800 	strd	r4, r8, [r5]
 80008a2:	e7e2      	b.n	800086a <__udivmoddi4+0xa2>
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	f000 8090 	beq.w	80009ca <__udivmoddi4+0x202>
 80008aa:	fab2 f682 	clz	r6, r2
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	f040 80a4 	bne.w	80009fc <__udivmoddi4+0x234>
 80008b4:	1a8a      	subs	r2, r1, r2
 80008b6:	0c03      	lsrs	r3, r0, #16
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	b280      	uxth	r0, r0
 80008be:	b2bc      	uxth	r4, r7
 80008c0:	2101      	movs	r1, #1
 80008c2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008c6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ce:	fb04 f20c 	mul.w	r2, r4, ip
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x11e>
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008dc:	d202      	bcs.n	80008e4 <__udivmoddi4+0x11c>
 80008de:	429a      	cmp	r2, r3
 80008e0:	f200 80e0 	bhi.w	8000aa4 <__udivmoddi4+0x2dc>
 80008e4:	46c4      	mov	ip, r8
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008ec:	fb0e 3312 	mls	r3, lr, r2, r3
 80008f0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008f4:	fb02 f404 	mul.w	r4, r2, r4
 80008f8:	429c      	cmp	r4, r3
 80008fa:	d907      	bls.n	800090c <__udivmoddi4+0x144>
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x142>
 8000904:	429c      	cmp	r4, r3
 8000906:	f200 80ca 	bhi.w	8000a9e <__udivmoddi4+0x2d6>
 800090a:	4602      	mov	r2, r0
 800090c:	1b1b      	subs	r3, r3, r4
 800090e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000912:	e7a5      	b.n	8000860 <__udivmoddi4+0x98>
 8000914:	f1c1 0620 	rsb	r6, r1, #32
 8000918:	408b      	lsls	r3, r1
 800091a:	fa22 f706 	lsr.w	r7, r2, r6
 800091e:	431f      	orrs	r7, r3
 8000920:	fa0e f401 	lsl.w	r4, lr, r1
 8000924:	fa20 f306 	lsr.w	r3, r0, r6
 8000928:	fa2e fe06 	lsr.w	lr, lr, r6
 800092c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000930:	4323      	orrs	r3, r4
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	fa1f fc87 	uxth.w	ip, r7
 800093a:	fbbe f0f9 	udiv	r0, lr, r9
 800093e:	0c1c      	lsrs	r4, r3, #16
 8000940:	fb09 ee10 	mls	lr, r9, r0, lr
 8000944:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000948:	fb00 fe0c 	mul.w	lr, r0, ip
 800094c:	45a6      	cmp	lr, r4
 800094e:	fa02 f201 	lsl.w	r2, r2, r1
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x1a0>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 3aff 	add.w	sl, r0, #4294967295
 800095a:	f080 809c 	bcs.w	8000a96 <__udivmoddi4+0x2ce>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8099 	bls.w	8000a96 <__udivmoddi4+0x2ce>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	eba4 040e 	sub.w	r4, r4, lr
 800096c:	fa1f fe83 	uxth.w	lr, r3
 8000970:	fbb4 f3f9 	udiv	r3, r4, r9
 8000974:	fb09 4413 	mls	r4, r9, r3, r4
 8000978:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800097c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000980:	45a4      	cmp	ip, r4
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x1ce>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f103 3eff 	add.w	lr, r3, #4294967295
 800098a:	f080 8082 	bcs.w	8000a92 <__udivmoddi4+0x2ca>
 800098e:	45a4      	cmp	ip, r4
 8000990:	d97f      	bls.n	8000a92 <__udivmoddi4+0x2ca>
 8000992:	3b02      	subs	r3, #2
 8000994:	443c      	add	r4, r7
 8000996:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800099a:	eba4 040c 	sub.w	r4, r4, ip
 800099e:	fba0 ec02 	umull	lr, ip, r0, r2
 80009a2:	4564      	cmp	r4, ip
 80009a4:	4673      	mov	r3, lr
 80009a6:	46e1      	mov	r9, ip
 80009a8:	d362      	bcc.n	8000a70 <__udivmoddi4+0x2a8>
 80009aa:	d05f      	beq.n	8000a6c <__udivmoddi4+0x2a4>
 80009ac:	b15d      	cbz	r5, 80009c6 <__udivmoddi4+0x1fe>
 80009ae:	ebb8 0203 	subs.w	r2, r8, r3
 80009b2:	eb64 0409 	sbc.w	r4, r4, r9
 80009b6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ba:	fa22 f301 	lsr.w	r3, r2, r1
 80009be:	431e      	orrs	r6, r3
 80009c0:	40cc      	lsrs	r4, r1
 80009c2:	e9c5 6400 	strd	r6, r4, [r5]
 80009c6:	2100      	movs	r1, #0
 80009c8:	e74f      	b.n	800086a <__udivmoddi4+0xa2>
 80009ca:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ce:	0c01      	lsrs	r1, r0, #16
 80009d0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009d4:	b280      	uxth	r0, r0
 80009d6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009da:	463b      	mov	r3, r7
 80009dc:	4638      	mov	r0, r7
 80009de:	463c      	mov	r4, r7
 80009e0:	46b8      	mov	r8, r7
 80009e2:	46be      	mov	lr, r7
 80009e4:	2620      	movs	r6, #32
 80009e6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ea:	eba2 0208 	sub.w	r2, r2, r8
 80009ee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009f2:	e766      	b.n	80008c2 <__udivmoddi4+0xfa>
 80009f4:	4601      	mov	r1, r0
 80009f6:	e718      	b.n	800082a <__udivmoddi4+0x62>
 80009f8:	4610      	mov	r0, r2
 80009fa:	e72c      	b.n	8000856 <__udivmoddi4+0x8e>
 80009fc:	f1c6 0220 	rsb	r2, r6, #32
 8000a00:	fa2e f302 	lsr.w	r3, lr, r2
 8000a04:	40b7      	lsls	r7, r6
 8000a06:	40b1      	lsls	r1, r6
 8000a08:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a10:	430a      	orrs	r2, r1
 8000a12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a16:	b2bc      	uxth	r4, r7
 8000a18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a1c:	0c11      	lsrs	r1, r2, #16
 8000a1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a22:	fb08 f904 	mul.w	r9, r8, r4
 8000a26:	40b0      	lsls	r0, r6
 8000a28:	4589      	cmp	r9, r1
 8000a2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a2e:	b280      	uxth	r0, r0
 8000a30:	d93e      	bls.n	8000ab0 <__udivmoddi4+0x2e8>
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a38:	d201      	bcs.n	8000a3e <__udivmoddi4+0x276>
 8000a3a:	4589      	cmp	r9, r1
 8000a3c:	d81f      	bhi.n	8000a7e <__udivmoddi4+0x2b6>
 8000a3e:	eba1 0109 	sub.w	r1, r1, r9
 8000a42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a46:	fb09 f804 	mul.w	r8, r9, r4
 8000a4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a54:	4542      	cmp	r2, r8
 8000a56:	d229      	bcs.n	8000aac <__udivmoddi4+0x2e4>
 8000a58:	18ba      	adds	r2, r7, r2
 8000a5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a5e:	d2c4      	bcs.n	80009ea <__udivmoddi4+0x222>
 8000a60:	4542      	cmp	r2, r8
 8000a62:	d2c2      	bcs.n	80009ea <__udivmoddi4+0x222>
 8000a64:	f1a9 0102 	sub.w	r1, r9, #2
 8000a68:	443a      	add	r2, r7
 8000a6a:	e7be      	b.n	80009ea <__udivmoddi4+0x222>
 8000a6c:	45f0      	cmp	r8, lr
 8000a6e:	d29d      	bcs.n	80009ac <__udivmoddi4+0x1e4>
 8000a70:	ebbe 0302 	subs.w	r3, lr, r2
 8000a74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a78:	3801      	subs	r0, #1
 8000a7a:	46e1      	mov	r9, ip
 8000a7c:	e796      	b.n	80009ac <__udivmoddi4+0x1e4>
 8000a7e:	eba7 0909 	sub.w	r9, r7, r9
 8000a82:	4449      	add	r1, r9
 8000a84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a8c:	fb09 f804 	mul.w	r8, r9, r4
 8000a90:	e7db      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a92:	4673      	mov	r3, lr
 8000a94:	e77f      	b.n	8000996 <__udivmoddi4+0x1ce>
 8000a96:	4650      	mov	r0, sl
 8000a98:	e766      	b.n	8000968 <__udivmoddi4+0x1a0>
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e6fd      	b.n	800089a <__udivmoddi4+0xd2>
 8000a9e:	443b      	add	r3, r7
 8000aa0:	3a02      	subs	r2, #2
 8000aa2:	e733      	b.n	800090c <__udivmoddi4+0x144>
 8000aa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000aa8:	443b      	add	r3, r7
 8000aaa:	e71c      	b.n	80008e6 <__udivmoddi4+0x11e>
 8000aac:	4649      	mov	r1, r9
 8000aae:	e79c      	b.n	80009ea <__udivmoddi4+0x222>
 8000ab0:	eba1 0109 	sub.w	r1, r1, r9
 8000ab4:	46c4      	mov	ip, r8
 8000ab6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aba:	fb09 f804 	mul.w	r8, r9, r4
 8000abe:	e7c4      	b.n	8000a4a <__udivmoddi4+0x282>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <Rec_Proc>:
// 返回参数     void
// 使用示例     Rec_Proc(USART1_Protocol, Rec_Data);
// 备注信息     本函数需要在串口接收中断中调用
//-------------------------------------------------------------------------------------------------------------------
void Rec_Proc(Protocol_t* x, uint8_t* Data)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
    // 获取字符串长度
    size_t data_len = strlen((char*)Data);
 8000ace:	6838      	ldr	r0, [r7, #0]
 8000ad0:	f7ff fc66 	bl	80003a0 <strlen>
 8000ad4:	6178      	str	r0, [r7, #20]

    // 计算缓冲区剩余空间
    size_t buffer_size = sizeof(x->Buffer.Protocol_Buffer);
 8000ad6:	2364      	movs	r3, #100	@ 0x64
 8000ad8:	613b      	str	r3, [r7, #16]
    size_t available_space = buffer_size - (x->Buffer.Stroage_Ptr - x->Buffer.Protocol_Buffer);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

    // 确保不会溢出缓冲区
    if (data_len > available_space) {
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d901      	bls.n	8000af8 <Rec_Proc+0x34>
        data_len = available_space; // 截断到可用空间大小
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	617b      	str	r3, [r7, #20]
    }

    // 快速复制字符串到缓冲区
    memcpy(x->Buffer.Stroage_Ptr, Data, data_len);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	6839      	ldr	r1, [r7, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f00e fb72 	bl	800f1ea <memcpy>

    // 更新存储指针
    x->Buffer.Stroage_Ptr += data_len;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	66da      	str	r2, [r3, #108]	@ 0x6c

    // 边界检查，防止指针越界
    if (x->Buffer.Stroage_Ptr > x->Buffer.Protocol_Buffer + buffer_size - 1 ||
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	1d19      	adds	r1, r3, #4
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	440b      	add	r3, r1
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d805      	bhi.n	8000b30 <Rec_Proc+0x6c>
        x->Buffer.Stroage_Ptr < x->Buffer.Protocol_Buffer) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3304      	adds	r3, #4
    if (x->Buffer.Stroage_Ptr > x->Buffer.Protocol_Buffer + buffer_size - 1 ||
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d203      	bcs.n	8000b38 <Rec_Proc+0x74>
        x->Buffer.Stroage_Ptr = x->Buffer.Protocol_Buffer; // 重置指针
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	1d1a      	adds	r2, r3, #4
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Protocol_Reset>:

void Protocol_Reset(Protocol_t* x)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	x->Status = STATE_HEAD; 		/* 进入类型处理模式 */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	x->Val_Name_Ptr = x->Val_Name;	/* 重置变量名获取指针 */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f103 0273 	add.w	r2, r3, #115	@ 0x73
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	x->Val_Data_Ptr = x->Val_Data;	/* 重置变量获取指针 */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	x->Data_Type = 0;				/* 重置数据类型参数 */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	x->Machine_Addr = 0;			/* 重置机器地址参数 */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	*x->Buffer.Main_Ptr = 0;		/* 接收的内容设置为空 */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
	x->Buffer.Main_Ptr = x->Buffer.Protocol_Buffer;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1d1a      	adds	r2, r3, #4
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	669a      	str	r2, [r3, #104]	@ 0x68
	x->Buffer.Stroage_Ptr = x->Buffer.Protocol_Buffer;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	1d1a      	adds	r2, r3, #4
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <Protocol>:
// 返回参数     void
// 使用示例     Protocol(USART1_Protocol, SLOW_TYPE);
// 备注信息     本函数需要While循环中调用，不要在中断中调用！
//-------------------------------------------------------------------------------------------------------------------
void Protocol(Protocol_t* x,uint8_t Mode)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08d      	sub	sp, #52	@ 0x34
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
	/* 检测当前指针位置是否异常 */
	if(
			x->Buffer.Main_Ptr > x->Buffer.Protocol_Buffer + sizeof(x->Buffer.Protocol_Buffer)-1  	/* 检测越界 */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3304      	adds	r3, #4
 8000bb0:	3363      	adds	r3, #99	@ 0x63
	if(
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d805      	bhi.n	8000bc2 <Protocol+0x26>
			|| x->Buffer.Main_Ptr < x->Buffer.Protocol_Buffer)										/* 检测错误地址 */
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d203      	bcs.n	8000bca <Protocol+0x2e>
	{
		x->Buffer.Main_Ptr = x->Buffer.Protocol_Buffer;												/* 重置指针位置为协议缓冲区的头部 */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1d1a      	adds	r2, r3, #4
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	669a      	str	r2, [r3, #104]	@ 0x68
	}
	if(*x->Buffer.Main_Ptr == 0)return;																/* 遇到0x00直接退出，防止损耗CPU性能 */
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 82a6 	beq.w	8001122 <Protocol+0x586>
	switch (Mode)
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f000 8218 	beq.w	800100e <Protocol+0x472>
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	f040 82a2 	bne.w	8001128 <Protocol+0x58c>
	{
		/* 慢模式的参数调节 */
		case SLOW_TYPE:
			switch (x->Status)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8000bea:	2b05      	cmp	r3, #5
 8000bec:	f200 829b 	bhi.w	8001126 <Protocol+0x58a>
 8000bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf8 <Protocol+0x5c>)
 8000bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000c11 	.word	0x08000c11
 8000bfc:	08001127 	.word	0x08001127
 8000c00:	08001127 	.word	0x08001127
 8000c04:	08000ceb 	.word	0x08000ceb
 8000c08:	08000dcb 	.word	0x08000dcb
 8000c0c:	08000e75 	.word	0x08000e75
			{
			/* 头部接收模式 */
			case STATE_HEAD:
				if(*x->Buffer.Main_Ptr == '@')
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b40      	cmp	r3, #64	@ 0x40
 8000c18:	f040 81f3 	bne.w	8001002 <Protocol+0x466>
				{
					x->Status = STATE_TYPE; 		/* 进入类型处理模式 */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					x->Val_Name_Ptr = x->Val_Name;	/* 重置变量名获取指针 */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f103 0273 	add.w	r2, r3, #115	@ 0x73
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					x->Val_Data_Ptr = x->Val_Data;	/* 重置变量获取指针 */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
					x->Data_Type = 0;				/* 重置数据类型参数 */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
					x->Machine_Addr = 0;			/* 重置机器地址参数 */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
					*x->Buffer.Main_Ptr = 0;		/* 接收的内容设置为空 */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;			/* 推进接收缓冲区 */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	669a      	str	r2, [r3, #104]	@ 0x68

					/* ======== For DeBug ======== */
					/*printf("Get Head\r\n");*/
					/* ======== For DeBug ======== */

					x->Data_Type = *x->Buffer.Main_Ptr;			/* 存储数据类型 */
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
					*x->Buffer.Main_Ptr = 0;					/* 清空当前数据 */
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;						/* 推进数据指针 */
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	669a      	str	r2, [r3, #104]	@ 0x68
					x->Status = STATE_MACHINE;					/* 更新标志位  */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2202      	movs	r2, #2
 8000c80:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					/* ======== For DeBug ======== */
					/* ======== 判断数据类型 ======== */
					if(x->Data_Type == CMD_TYPE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d102      	bne.n	8000c94 <Protocol+0xf8>
					{
						/* ======== For DeBug ======== */
						printf("IS CMD\r\n");
 8000c8e:	489d      	ldr	r0, [pc, #628]	@ (8000f04 <Protocol+0x368>)
 8000c90:	f00e f932 	bl	800eef8 <puts>
						/* ======== For DeBug ======== */
					}
					if(x->Data_Type == VAR_TYPE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d102      	bne.n	8000ca4 <Protocol+0x108>
					{
						/* ======== For DeBug ======== */
						printf("IS VAR\r\n");
 8000c9e:	489a      	ldr	r0, [pc, #616]	@ (8000f08 <Protocol+0x36c>)
 8000ca0:	f00e f92a 	bl	800eef8 <puts>
						/* ======== For DeBug ======== */
					}
					/* ======== For DeBug ======== */

					/* 接收机器地址 */
					x->Machine_Addr = *x->Buffer.Main_Ptr;	/* 存储机器地址 */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
					*x->Buffer.Main_Ptr = 0;				/* 清空当前数据 */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;					/* 推进数据指针 */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	669a      	str	r2, [r3, #104]	@ 0x68
					x->Status = STATE_NAME;					/* 更新标志位  */
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

					/* 判断是否控制当前设备 */
					if(x->Machine_Addr == MACHINE_ADDR)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8000cd0:	2b20      	cmp	r3, #32
 8000cd2:	d103      	bne.n	8000cdc <Protocol+0x140>
					{
						printf("ACK\r\n");
 8000cd4:	488d      	ldr	r0, [pc, #564]	@ (8000f0c <Protocol+0x370>)
 8000cd6:	f00e f90f 	bl	800eef8 <puts>
						/* 重置整个协议 */
						printf("NO ACK\r\n");
						Protocol_Reset(x);
					}
				}
			break;
 8000cda:	e192      	b.n	8001002 <Protocol+0x466>
						printf("NO ACK\r\n");
 8000cdc:	488c      	ldr	r0, [pc, #560]	@ (8000f10 <Protocol+0x374>)
 8000cde:	f00e f90b 	bl	800eef8 <puts>
						Protocol_Reset(x);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ff2c 	bl	8000b40 <Protocol_Reset>
			break;
 8000ce8:	e18b      	b.n	8001002 <Protocol+0x466>
			case STATE_NAME:
				/* 接收变量名/指令名	*/
				if(x->Block == BLOCK)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d11d      	bne.n	8000d30 <Protocol+0x194>
				{
					while(*x->Buffer.Main_Ptr != ':')
 8000cf4:	e016      	b.n	8000d24 <Protocol+0x188>
					{
						*(x->Val_Name_Ptr) = *(x->Buffer.Main_Ptr);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	701a      	strb	r2, [r3, #0]
						x->Val_Name_Ptr++;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
						/* 推进指针 */
						*x->Buffer.Main_Ptr = 0;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
						*x->Buffer.Main_Ptr++;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	669a      	str	r2, [r3, #104]	@ 0x68
					while(*x->Buffer.Main_Ptr != ':')
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d2c:	d1e3      	bne.n	8000cf6 <Protocol+0x15a>
 8000d2e:	e01b      	b.n	8000d68 <Protocol+0x1cc>

					}
				}
				else
				{
					if(*x->Buffer.Main_Ptr != ':')
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d38:	d016      	beq.n	8000d68 <Protocol+0x1cc>
					{
						*(x->Val_Name_Ptr) = *(x->Buffer.Main_Ptr);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	701a      	strb	r2, [r3, #0]
						x->Val_Name_Ptr++;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
						/* 推进指针 */
						*x->Buffer.Main_Ptr = 0;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
						*x->Buffer.Main_Ptr++;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	669a      	str	r2, [r3, #104]	@ 0x68

					}
				}

				/* 结束条件 */
				if(*x->Buffer.Main_Ptr == BUFFER_END_SIGN && x->Data_Type == CMD_TYPE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b0d      	cmp	r3, #13
 8000d70:	d111      	bne.n	8000d96 <Protocol+0x1fa>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d10c      	bne.n	8000d96 <Protocol+0x1fa>
				{
					x->Status = STATE_IDLE; 	/* 进入数据处理模式 */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2205      	movs	r2, #5
 8000d80:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					/* 推进指针 */
					*x->Buffer.Main_Ptr = 0;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	669a      	str	r2, [r3, #104]	@ 0x68
				}
				/* 结束条件*/
				if(*x->Buffer.Main_Ptr == ':' && x->Data_Type == VAR_TYPE)//接收到名字帧尾，退出名字接收模式
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d9e:	f040 8132 	bne.w	8001006 <Protocol+0x46a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	f040 812c 	bne.w	8001006 <Protocol+0x46a>
				{
					x->Status = STATE_DATA;		/* 进入数据接收模式 */
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2204      	movs	r2, #4
 8000db2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					/* 推进指针 */
					*x->Buffer.Main_Ptr = 0;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	669a      	str	r2, [r3, #104]	@ 0x68
				}
			break;
 8000dc8:	e11d      	b.n	8001006 <Protocol+0x46a>
			case STATE_DATA:
				if(*x->Buffer.Main_Ptr == BUFFER_END_SIGN)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b0d      	cmp	r3, #13
 8000dd2:	d10d      	bne.n	8000df0 <Protocol+0x254>
				{
					x->Status = STATE_IDLE; 	/* 进入数据处理模式 */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					/* 推进指针 */
					*x->Buffer.Main_Ptr = 0;	/* 清空当前数据*/
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
					x->Buffer.Main_Ptr++;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	669a      	str	r2, [r3, #104]	@ 0x68
						x->Buffer.Main_Ptr++;
					}


				}
				break;
 8000dee:	e10d      	b.n	800100c <Protocol+0x470>
					if(x->Block == BLOCK)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d122      	bne.n	8000e40 <Protocol+0x2a4>
						while(*x->Buffer.Main_Ptr != BUFFER_END_SIGN)
 8000dfa:	e01b      	b.n	8000e34 <Protocol+0x298>
							*(x->Val_Data_Ptr) = *(x->Buffer.Main_Ptr);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	701a      	strb	r2, [r3, #0]
							x->Val_Data_Ptr++;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
							*x->Buffer.Main_Ptr = 0;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
							x->Buffer.Main_Ptr++;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	669a      	str	r2, [r3, #104]	@ 0x68
							if(*x->Buffer.Main_Ptr == BUFFER_END_SIGN)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b0d      	cmp	r3, #13
 8000e32:	d01d      	beq.n	8000e70 <Protocol+0x2d4>
						while(*x->Buffer.Main_Ptr != BUFFER_END_SIGN)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b0d      	cmp	r3, #13
 8000e3c:	d1de      	bne.n	8000dfc <Protocol+0x260>
				break;
 8000e3e:	e0e5      	b.n	800100c <Protocol+0x470>
						*(x->Val_Data_Ptr) = *(x->Buffer.Main_Ptr);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	701a      	strb	r2, [r3, #0]
						x->Val_Data_Ptr++;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
						*x->Buffer.Main_Ptr = 0;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
						x->Buffer.Main_Ptr++;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	669a      	str	r2, [r3, #104]	@ 0x68
				break;
 8000e6e:	e0cd      	b.n	800100c <Protocol+0x470>
								break;
 8000e70:	bf00      	nop
				break;
 8000e72:	e0cb      	b.n	800100c <Protocol+0x470>
			case STATE_IDLE:
				//接收到结束码并且数据为参数
				if(x->Data_Type == VAR_TYPE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d16c      	bne.n	8000f58 <Protocol+0x3bc>
				{
					Protocol_Reset(x);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fe5e 	bl	8000b40 <Protocol_Reset>
					int Val_Name_Len = strlen((char*)x->Val_Name);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3373      	adds	r3, #115	@ 0x73
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fa89 	bl	80003a0 <strlen>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	613b      	str	r3, [r7, #16]
					int Val_Data_Len = strlen((char*)x->Val_Data);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	33ac      	adds	r3, #172	@ 0xac
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fa82 	bl	80003a0 <strlen>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60fb      	str	r3, [r7, #12]
					for(int i = 0; i < Val_Num;i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ea4:	e025      	b.n	8000ef2 <Protocol+0x356>
					{
							if(!strcmp((char*)x->Val_Name,(char*)Val[i].Name))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f103 0073 	add.w	r0, r3, #115	@ 0x73
 8000eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000eae:	4613      	mov	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <Protocol+0x378>)
 8000eb8:	4413      	add	r3, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fa10 	bl	80002e0 <strcmp>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d112      	bne.n	8000eec <Protocol+0x350>
							{

									*Val[i].Data.f_Data = strtof((char*)x->Val_Data,NULL);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 8000ecc:	4911      	ldr	r1, [pc, #68]	@ (8000f14 <Protocol+0x378>)
 8000ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	1a9b      	subs	r3, r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	3334      	adds	r3, #52	@ 0x34
 8000edc:	681c      	ldr	r4, [r3, #0]
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f00d fa5e 	bl	800e3a0 <strtof>
 8000ee4:	eef0 7a40 	vmov.f32	s15, s0
 8000ee8:	edc4 7a00 	vstr	s15, [r4]
					for(int i = 0; i < Val_Num;i++)
 8000eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eee:	3301      	adds	r3, #1
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <Protocol+0x37c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbd4      	blt.n	8000ea6 <Protocol+0x30a>
							 }
					}
							for(int i = 0 ; i < Val_Name_Len;i++)x->Val_Name[i] = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f00:	e015      	b.n	8000f2e <Protocol+0x392>
 8000f02:	bf00      	nop
 8000f04:	08011630 	.word	0x08011630
 8000f08:	08011638 	.word	0x08011638
 8000f0c:	08011640 	.word	0x08011640
 8000f10:	08011648 	.word	0x08011648
 8000f14:	240002e8 	.word	0x240002e8
 8000f18:	24000dd8 	.word	0x24000dd8
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f20:	4413      	add	r3, r2
 8000f22:	3373      	adds	r3, #115	@ 0x73
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	dbf2      	blt.n	8000f1c <Protocol+0x380>
							for(int i = 0 ; i < Val_Data_Len;i++)x->Val_Data[i] = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f3a:	e008      	b.n	8000f4e <Protocol+0x3b2>
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	4413      	add	r3, r2
 8000f42:	33ac      	adds	r3, #172	@ 0xac
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dbf2      	blt.n	8000f3c <Protocol+0x3a0>
					return;
 8000f56:	e0e7      	b.n	8001128 <Protocol+0x58c>
				}
				//接收到结束码并且数据为指令
				if(x->Data_Type == CMD_TYPE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d153      	bne.n	800100a <Protocol+0x46e>
				{
						Protocol_Reset(x);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fdec 	bl	8000b40 <Protocol_Reset>
						int Val_Name_Len = strlen((char*)x->Val_Name);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3373      	adds	r3, #115	@ 0x73
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fa17 	bl	80003a0 <strlen>
 8000f72:	4603      	mov	r3, r0
 8000f74:	617b      	str	r3, [r7, #20]
						for(int i = 0; i < CMD_Num;i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	e02c      	b.n	8000fd6 <Protocol+0x43a>
						{
								if(!strcmp((char*)x->Val_Name,(char*)CMD_Arry[i].Name))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f103 0073 	add.w	r0, r3, #115	@ 0x73
 8000f82:	6a3a      	ldr	r2, [r7, #32]
 8000f84:	4613      	mov	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4a68      	ldr	r2, [pc, #416]	@ (8001130 <Protocol+0x594>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff f9a5 	bl	80002e0 <strcmp>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d119      	bne.n	8000fd0 <Protocol+0x434>
								{
										for(int i = 0 ; i < Val_Name_Len;i++)x->Val_Name[i] = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <Protocol+0x418>
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3373      	adds	r3, #115	@ 0x73
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbf2      	blt.n	8000fa2 <Protocol+0x406>
										CMD_Arry[i].func();
 8000fbc:	495c      	ldr	r1, [pc, #368]	@ (8001130 <Protocol+0x594>)
 8000fbe:	6a3a      	ldr	r2, [r7, #32]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3334      	adds	r3, #52	@ 0x34
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4798      	blx	r3
						for(int i = 0; i < CMD_Num;i++)
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
 8000fd6:	4b57      	ldr	r3, [pc, #348]	@ (8001134 <Protocol+0x598>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a3a      	ldr	r2, [r7, #32]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbcd      	blt.n	8000f7c <Protocol+0x3e0>
								}
						}
						for(int i = 0 ; i < Val_Name_Len;i++)x->Val_Name[i] = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	e008      	b.n	8000ff8 <Protocol+0x45c>
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	4413      	add	r3, r2
 8000fec:	3373      	adds	r3, #115	@ 0x73
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf2      	blt.n	8000fe6 <Protocol+0x44a>
						return;
 8001000:	e092      	b.n	8001128 <Protocol+0x58c>
			break;
 8001002:	bf00      	nop
 8001004:	e08f      	b.n	8001126 <Protocol+0x58a>
			break;
 8001006:	bf00      	nop
 8001008:	e08d      	b.n	8001126 <Protocol+0x58a>
				}
			break;
 800100a:	bf00      	nop
			}


		break;
 800100c:	e08b      	b.n	8001126 <Protocol+0x58a>
		
		case FAST_TYPE:
			if(*x->Buffer.Main_Ptr == '@' && x->Status == 0)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b40      	cmp	r3, #64	@ 0x40
 8001016:	d117      	bne.n	8001048 <Protocol+0x4ac>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800101e:	2b00      	cmp	r3, #0
 8001020:	d112      	bne.n	8001048 <Protocol+0x4ac>
			{
				Data_Arry_Index = 0;
 8001022:	4b45      	ldr	r3, [pc, #276]	@ (8001138 <Protocol+0x59c>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
				Data_Index = 0;
 8001028:	4b44      	ldr	r3, [pc, #272]	@ (800113c <Protocol+0x5a0>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
				x->Status = 1;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
				//缓冲区 清空
				*x->Buffer.Main_Ptr = 0;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
				//指针后移
				x->Buffer.Main_Ptr++;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	669a      	str	r2, [r3, #104]	@ 0x68
				//Data_Main_Ptr = Data_Arry;
				//Data_Ptr = Data_Arry[Data_Arry_Index];
			}
			if(x->Status == 1 && *x->Buffer.Main_Ptr != ',')
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800104e:	2b01      	cmp	r3, #1
 8001050:	d11c      	bne.n	800108c <Protocol+0x4f0>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b2c      	cmp	r3, #44	@ 0x2c
 800105a:	d017      	beq.n	800108c <Protocol+0x4f0>
			{
				Data_Arry[Data_Arry_Index][Data_Index] = *x->Buffer.Main_Ptr;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001060:	4a35      	ldr	r2, [pc, #212]	@ (8001138 <Protocol+0x59c>)
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	4611      	mov	r1, r2
 8001066:	4a35      	ldr	r2, [pc, #212]	@ (800113c <Protocol+0x5a0>)
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	4614      	mov	r4, r2
 800106c:	7818      	ldrb	r0, [r3, #0]
 800106e:	4a34      	ldr	r2, [pc, #208]	@ (8001140 <Protocol+0x5a4>)
 8001070:	460b      	mov	r3, r1
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	4423      	add	r3, r4
 800107c:	4602      	mov	r2, r0
 800107e:	701a      	strb	r2, [r3, #0]
				Data_Index++;
 8001080:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <Protocol+0x5a0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <Protocol+0x5a0>)
 800108a:	701a      	strb	r2, [r3, #0]
			}
			if(x->Status == 1 && *x->Buffer.Main_Ptr == ',')
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001092:	2b01      	cmp	r3, #1
 8001094:	d123      	bne.n	80010de <Protocol+0x542>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b2c      	cmp	r3, #44	@ 0x2c
 800109e:	d11e      	bne.n	80010de <Protocol+0x542>
			{
				x->Status = 2;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
				//缓冲区清空
				*x->Buffer.Main_Ptr = 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
				//指针后移
				x->Buffer.Main_Ptr++;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	669a      	str	r2, [r3, #104]	@ 0x68
				//数据存储缓冲区后移
				Data_Index = 0;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <Protocol+0x5a0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
				Data_Arry_Index++;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <Protocol+0x59c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <Protocol+0x59c>)
 80010ca:	701a      	strb	r2, [r3, #0]
				//还有数据
				if(*x->Buffer.Main_Ptr != '\r')
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b0d      	cmp	r3, #13
 80010d4:	d003      	beq.n	80010de <Protocol+0x542>
				{
					x->Status = 1;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
				}
			}
			if(x->Status == 2 && *x->Buffer.Main_Ptr == '\r')
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d112      	bne.n	800110e <Protocol+0x572>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b0d      	cmp	r3, #13
 80010f0:	d10d      	bne.n	800110e <Protocol+0x572>
			{
				x->Status = 0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
				*x->Buffer.Main_Ptr = 0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			//	x->Buffer.Main_Ptr = x->Buffer.Protocol_Buffer;
			

				Data_Arry_Index = 0;
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <Protocol+0x59c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
				Data_Index = 0;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <Protocol+0x5a0>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]

			}
			//缓冲区清空
			*x->Buffer.Main_Ptr = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
			//指针后移
			x->Buffer.Main_Ptr++;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 8001120:	e002      	b.n	8001128 <Protocol+0x58c>
	if(*x->Buffer.Main_Ptr == 0)return;																/* 遇到0x00直接退出，防止损耗CPU性能 */
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <Protocol+0x58c>
		break;
 8001126:	bf00      	nop
	}
		
}
 8001128:	3734      	adds	r7, #52	@ 0x34
 800112a:	46bd      	mov	sp, r7
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	bf00      	nop
 8001130:	24000ddc 	.word	0x24000ddc
 8001134:	240018cc 	.word	0x240018cc
 8001138:	24001ac4 	.word	0x24001ac4
 800113c:	24001ac5 	.word	0x24001ac5
 8001140:	240018d0 	.word	0x240018d0

08001144 <Val_Create>:
// 返回参数     void
// 使用示例     Val_Create(“Speed”, &Speed);
// 备注信息     本函数需要初始化的过程中调用来
//-------------------------------------------------------------------------------------------------------------------
void Val_Create(char* Name,void*Var)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    strcpy((char*)Val[Val_Num].Name,(char*)Name);
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <Val_Create+0x4c>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <Val_Create+0x50>)
 800115c:	4413      	add	r3, r2
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	f00e f83a 	bl	800f1da <strcpy>
    Val[Val_Num].Data.Data_Addr = Var;
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <Val_Create+0x4c>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	490a      	ldr	r1, [pc, #40]	@ (8001194 <Val_Create+0x50>)
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	3334      	adds	r3, #52	@ 0x34
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	601a      	str	r2, [r3, #0]
    Val_Num++;
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <Val_Create+0x4c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a03      	ldr	r2, [pc, #12]	@ (8001190 <Val_Create+0x4c>)
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	24000dd8 	.word	0x24000dd8
 8001194:	240002e8 	.word	0x240002e8

08001198 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	uint8_t data = (uint8_t)ch;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	73fb      	strb	r3, [r7, #15]
	while (CDC_Transmit_FS(&data, 1) == USBD_BUSY) {
 80011a6:	e002      	b.n	80011ae <__io_putchar+0x16>
		HAL_Delay(1); // 等待 USB 空闲
 80011a8:	2001      	movs	r0, #1
 80011aa:	f000 fcf5 	bl	8001b98 <HAL_Delay>
	while (CDC_Transmit_FS(&data, 1) == USBD_BUSY) {
 80011ae:	f107 030f 	add.w	r3, r7, #15
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00b feab 	bl	800cf10 <CDC_Transmit_FS>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d0f3      	beq.n	80011a8 <__io_putchar+0x10>
	}
	return ch;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a09      	ldr	r2, [pc, #36]	@ (8001200 <HAL_UART_RxCpltCallback+0x34>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10b      	bne.n	80011f6 <HAL_UART_RxCpltCallback+0x2a>
    {
        rx_flag = 1; // 设置接收标志
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_UART_RxCpltCallback+0x38>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, sizeof(rx_data)); // 重新启动接收中断
 80011e4:	2201      	movs	r2, #1
 80011e6:	4908      	ldr	r1, [pc, #32]	@ (8001208 <HAL_UART_RxCpltCallback+0x3c>)
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <HAL_UART_RxCpltCallback+0x40>)
 80011ea:	f005 ff05 	bl	8006ff8 <HAL_UART_Receive_IT>

        Rec_Proc(&USART1_Protocol,rx_data);
 80011ee:	4906      	ldr	r1, [pc, #24]	@ (8001208 <HAL_UART_RxCpltCallback+0x3c>)
 80011f0:	4807      	ldr	r0, [pc, #28]	@ (8001210 <HAL_UART_RxCpltCallback+0x44>)
 80011f2:	f7ff fc67 	bl	8000ac4 <Rec_Proc>

    }
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40011000 	.word	0x40011000
 8001204:	24001bb1 	.word	0x24001bb1
 8001208:	24001bb0 	.word	0x24001bb0
 800120c:	24001bbc 	.word	0x24001bbc
 8001210:	24001ac8 	.word	0x24001ac8

08001214 <User_Main>:

void User_Main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2108      	movs	r1, #8
 800121c:	4814      	ldr	r0, [pc, #80]	@ (8001270 <User_Main+0x5c>)
 800121e:	f001 fd87 	bl	8002d30 <HAL_GPIO_WritePin>
    HAL_UART_Receive_IT(&huart1, rx_data, 1);
 8001222:	2201      	movs	r2, #1
 8001224:	4913      	ldr	r1, [pc, #76]	@ (8001274 <User_Main+0x60>)
 8001226:	4814      	ldr	r0, [pc, #80]	@ (8001278 <User_Main+0x64>)
 8001228:	f005 fee6 	bl	8006ff8 <HAL_UART_Receive_IT>
    /* Debugging parameter initialization */
    Val_Create("Para_A",&Parament_A);
 800122c:	4913      	ldr	r1, [pc, #76]	@ (800127c <User_Main+0x68>)
 800122e:	4814      	ldr	r0, [pc, #80]	@ (8001280 <User_Main+0x6c>)
 8001230:	f7ff ff88 	bl	8001144 <Val_Create>
    Val_Create("Para_B",&Parament_B);
 8001234:	4913      	ldr	r1, [pc, #76]	@ (8001284 <User_Main+0x70>)
 8001236:	4814      	ldr	r0, [pc, #80]	@ (8001288 <User_Main+0x74>)
 8001238:	f7ff ff84 	bl	8001144 <Val_Create>
    printf("System Online!\r\n");
 800123c:	4813      	ldr	r0, [pc, #76]	@ (800128c <User_Main+0x78>)
 800123e:	f00d fe5b 	bl	800eef8 <puts>
    HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001246:	f000 fca7 	bl	8001b98 <HAL_Delay>
    while (1)
    {
    	//printf("%s\r\n",USART1_Protocol.Buffer.Protocol_Buffer);

    	printf("%d,%f\r\n",Parament_A,Parament_B);
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <User_Main+0x68>)
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <User_Main+0x70>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001258:	ec53 2b17 	vmov	r2, r3, d7
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <User_Main+0x7c>)
 800125e:	f00d fde3 	bl	800ee28 <iprintf>


    	Protocol(&USART1_Protocol,SLOW_TYPE);
 8001262:	2102      	movs	r1, #2
 8001264:	480b      	ldr	r0, [pc, #44]	@ (8001294 <User_Main+0x80>)
 8001266:	f7ff fc99 	bl	8000b9c <Protocol>
    	printf("%d,%f\r\n",Parament_A,Parament_B);
 800126a:	bf00      	nop
 800126c:	e7ed      	b.n	800124a <User_Main+0x36>
 800126e:	bf00      	nop
 8001270:	58021000 	.word	0x58021000
 8001274:	24001bb0 	.word	0x24001bb0
 8001278:	24001bbc 	.word	0x24001bbc
 800127c:	24001bb4 	.word	0x24001bb4
 8001280:	08011650 	.word	0x08011650
 8001284:	24001bb8 	.word	0x24001bb8
 8001288:	08011658 	.word	0x08011658
 800128c:	08011660 	.word	0x08011660
 8001290:	08011670 	.word	0x08011670
 8001294:	24001ac8 	.word	0x24001ac8

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800129c:	f000 f92a 	bl	80014f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a0:	f000 fbe8 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a4:	f000 f80a 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a8:	f000 f8d0 	bl	800144c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012ac:	f000 f882 	bl	80013b4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80012b0:	f00b fd62 	bl	800cd78 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  User_Main();
 80012b4:	f7ff ffae 	bl	8001214 <User_Main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <main+0x20>

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b09c      	sub	sp, #112	@ 0x70
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	224c      	movs	r2, #76	@ 0x4c
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00d fef4 	bl	800f0b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2220      	movs	r2, #32
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00d feee 	bl	800f0b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012dc:	2002      	movs	r0, #2
 80012de:	f002 ffe1 	bl	80042a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <SystemClock_Config+0xf0>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a30      	ldr	r2, [pc, #192]	@ (80013ac <SystemClock_Config+0xf0>)
 80012ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b2e      	ldr	r3, [pc, #184]	@ (80013ac <SystemClock_Config+0xf0>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <SystemClock_Config+0xf4>)
 80012fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001300:	4a2b      	ldr	r2, [pc, #172]	@ (80013b0 <SystemClock_Config+0xf4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001308:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <SystemClock_Config+0xf4>)
 800130a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001314:	bf00      	nop
 8001316:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <SystemClock_Config+0xf0>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001322:	d1f8      	bne.n	8001316 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001324:	2301      	movs	r3, #1
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	2302      	movs	r3, #2
 8001330:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001332:	2302      	movs	r3, #2
 8001334:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001336:	2303      	movs	r3, #3
 8001338:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 87;
 800133a:	2357      	movs	r3, #87	@ 0x57
 800133c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800133e:	2302      	movs	r3, #2
 8001340:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001342:	230f      	movs	r3, #15
 8001344:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001346:	2302      	movs	r3, #2
 8001348:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800134a:	230c      	movs	r3, #12
 800134c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800134e:	2300      	movs	r3, #0
 8001350:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 7296;
 8001352:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 8001356:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135c:	4618      	mov	r0, r3
 800135e:	f002 ffeb 	bl	8004338 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001368:	f000 f8f0 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136c:	233f      	movs	r3, #63	@ 0x3f
 800136e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001370:	2303      	movs	r3, #3
 8001372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001378:	2308      	movs	r3, #8
 800137a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800137c:	2340      	movs	r3, #64	@ 0x40
 800137e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001380:	2340      	movs	r3, #64	@ 0x40
 8001382:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001388:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800138a:	2340      	movs	r3, #64	@ 0x40
 800138c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2104      	movs	r1, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fc2a 	bl	8004bec <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800139e:	f000 f8d5 	bl	800154c <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3770      	adds	r7, #112	@ 0x70
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	58024800 	.word	0x58024800
 80013b0:	58000400 	.word	0x58000400

080013b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b8:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	@ (8001448 <MX_USART1_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 80013fe:	f005 fdab 	bl	8006f58 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 f8a0 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 8001410:	f008 f893 	bl	800953a <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 f897 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 8001422:	f008 f8c8 	bl	80095b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 f88e 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_USART1_UART_Init+0x90>)
 8001432:	f008 f849 	bl	80094c8 <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 f886 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	24001bbc 	.word	0x24001bbc
 8001448:	40011000 	.word	0x40011000

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <MX_GPIO_Init+0xa0>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001468:	4a20      	ldr	r2, [pc, #128]	@ (80014ec <MX_GPIO_Init+0xa0>)
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001472:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <MX_GPIO_Init+0xa0>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <MX_GPIO_Init+0xa0>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001486:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <MX_GPIO_Init+0xa0>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800148c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001490:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_GPIO_Init+0xa0>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_GPIO_Init+0xa0>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a4:	4a11      	ldr	r2, [pc, #68]	@ (80014ec <MX_GPIO_Init+0xa0>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_GPIO_Init+0xa0>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2108      	movs	r1, #8
 80014c0:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <MX_GPIO_Init+0xa4>)
 80014c2:	f001 fc35 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014c6:	2308      	movs	r3, #8
 80014c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_GPIO_Init+0xa4>)
 80014de:	f001 fa77 	bl	80029d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58021000 	.word	0x58021000

080014f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001506:	f000 fc87 	bl	8001e18 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800150a:	2301      	movs	r3, #1
 800150c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800150e:	2300      	movs	r3, #0
 8001510:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001516:	231f      	movs	r3, #31
 8001518:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800151a:	2387      	movs	r3, #135	@ 0x87
 800151c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800151e:	2300      	movs	r3, #0
 8001520:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001522:	2300      	movs	r3, #0
 8001524:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001526:	2301      	movs	r3, #1
 8001528:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800152a:	2301      	movs	r3, #1
 800152c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001536:	463b      	mov	r3, r7
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fca5 	bl	8001e88 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800153e:	2004      	movs	r0, #4
 8001540:	f000 fc82 	bl	8001e48 <HAL_MPU_Enable>

}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_MspInit+0x30>)
 8001560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001564:	4a08      	ldr	r2, [pc, #32]	@ (8001588 <HAL_MspInit+0x30>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_MspInit+0x30>)
 8001570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	58024400 	.word	0x58024400

0800158c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0ba      	sub	sp, #232	@ 0xe8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	22c0      	movs	r2, #192	@ 0xc0
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00d fd83 	bl	800f0b8 <memset>
  if(huart->Instance==USART1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001664 <HAL_UART_MspInit+0xd8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d14e      	bne.n	800165a <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015bc:	f04f 0201 	mov.w	r2, #1
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 fe94 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015de:	f7ff ffb5 	bl	800154c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <HAL_UART_MspInit+0xdc>)
 80015e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <HAL_UART_MspInit+0xdc>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_UART_MspInit+0xdc>)
 80015f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <HAL_UART_MspInit+0xdc>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001606:	4a18      	ldr	r2, [pc, #96]	@ (8001668 <HAL_UART_MspInit+0xdc>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_UART_MspInit+0xdc>)
 8001612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800161e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001638:	2307      	movs	r3, #7
 800163a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001642:	4619      	mov	r1, r3
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <HAL_UART_MspInit+0xe0>)
 8001646:	f001 f9c3 	bl	80029d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2101      	movs	r1, #1
 800164e:	2025      	movs	r0, #37	@ 0x25
 8001650:	f000 fbad 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001654:	2025      	movs	r0, #37	@ 0x25
 8001656:	f000 fbc4 	bl	8001de2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800165a:	bf00      	nop
 800165c:	37e8      	adds	r7, #232	@ 0xe8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40011000 	.word	0x40011000
 8001668:	58024400 	.word	0x58024400
 800166c:	58020000 	.word	0x58020000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <NMI_Handler+0x4>

08001678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <MemManage_Handler+0x4>

08001688 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <UsageFault_Handler+0x4>

08001698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c6:	f000 fa47 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <USART1_IRQHandler+0x10>)
 80016d6:	f005 fcdb 	bl	8007090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	24001bbc 	.word	0x24001bbc

080016e4 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 80016ea:	f001 fc7b 	bl	8002fe4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24003138 	.word	0x24003138

080016f8 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 80016fe:	f001 fc71 	bl	8002fe4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	24003138 	.word	0x24003138

0800170c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <OTG_FS_IRQHandler+0x10>)
 8001712:	f001 fc67 	bl	8002fe4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	24003138 	.word	0x24003138

08001720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_kill>:

int _kill(int pid, int sig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800173a:	f00d fd21 	bl	800f180 <__errno>
 800173e:	4603      	mov	r3, r0
 8001740:	2216      	movs	r2, #22
 8001742:	601a      	str	r2, [r3, #0]
  return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffe7 	bl	8001730 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001762:	bf00      	nop
 8001764:	e7fd      	b.n	8001762 <_exit+0x12>

08001766 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e00a      	b.n	800178e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001778:	f3af 8000 	nop.w
 800177c:	4601      	mov	r1, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	dbf0      	blt.n	8001778 <_read+0x12>
  }

  return len;
 8001796:	687b      	ldr	r3, [r7, #4]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e009      	b.n	80017c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fcec 	bl	8001198 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbf1      	blt.n	80017b2 <_write+0x12>
  }
  return len;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_close>:

int _close(int file)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001800:	605a      	str	r2, [r3, #4]
  return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	@ (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f00d fc86 	bl	800f180 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	24080000 	.word	0x24080000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	24001c50 	.word	0x24001c50
 80018a8:	24003988 	.word	0x24003988

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018b0:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <SystemInit+0x114>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b6:	4a42      	ldr	r2, [pc, #264]	@ (80019c0 <SystemInit+0x114>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018c0:	4b40      	ldr	r3, [pc, #256]	@ (80019c4 <SystemInit+0x118>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d807      	bhi.n	80018dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018cc:	4b3d      	ldr	r3, [pc, #244]	@ (80019c4 <SystemInit+0x118>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 030f 	bic.w	r3, r3, #15
 80018d4:	4a3b      	ldr	r2, [pc, #236]	@ (80019c4 <SystemInit+0x118>)
 80018d6:	f043 0307 	orr.w	r3, r3, #7
 80018da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018dc:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <SystemInit+0x11c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a39      	ldr	r2, [pc, #228]	@ (80019c8 <SystemInit+0x11c>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018e8:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <SystemInit+0x11c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ee:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <SystemInit+0x11c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4935      	ldr	r1, [pc, #212]	@ (80019c8 <SystemInit+0x11c>)
 80018f4:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <SystemInit+0x120>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018fa:	4b32      	ldr	r3, [pc, #200]	@ (80019c4 <SystemInit+0x118>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001906:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <SystemInit+0x118>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 030f 	bic.w	r3, r3, #15
 800190e:	4a2d      	ldr	r2, [pc, #180]	@ (80019c4 <SystemInit+0x118>)
 8001910:	f043 0307 	orr.w	r3, r3, #7
 8001914:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001916:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <SystemInit+0x11c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <SystemInit+0x11c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <SystemInit+0x11c>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <SystemInit+0x11c>)
 800192a:	4a29      	ldr	r2, [pc, #164]	@ (80019d0 <SystemInit+0x124>)
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800192e:	4b26      	ldr	r3, [pc, #152]	@ (80019c8 <SystemInit+0x11c>)
 8001930:	4a28      	ldr	r2, [pc, #160]	@ (80019d4 <SystemInit+0x128>)
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001934:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <SystemInit+0x11c>)
 8001936:	4a28      	ldr	r2, [pc, #160]	@ (80019d8 <SystemInit+0x12c>)
 8001938:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800193a:	4b23      	ldr	r3, [pc, #140]	@ (80019c8 <SystemInit+0x11c>)
 800193c:	2200      	movs	r2, #0
 800193e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001940:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <SystemInit+0x11c>)
 8001942:	4a25      	ldr	r2, [pc, #148]	@ (80019d8 <SystemInit+0x12c>)
 8001944:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001946:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <SystemInit+0x11c>)
 8001948:	2200      	movs	r2, #0
 800194a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800194c:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <SystemInit+0x11c>)
 800194e:	4a22      	ldr	r2, [pc, #136]	@ (80019d8 <SystemInit+0x12c>)
 8001950:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001952:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <SystemInit+0x11c>)
 8001954:	2200      	movs	r2, #0
 8001956:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001958:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <SystemInit+0x11c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1a      	ldr	r2, [pc, #104]	@ (80019c8 <SystemInit+0x11c>)
 800195e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001962:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001964:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <SystemInit+0x11c>)
 8001966:	2200      	movs	r2, #0
 8001968:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <SystemInit+0x130>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <SystemInit+0x134>)
 8001970:	4013      	ands	r3, r2
 8001972:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001976:	d202      	bcs.n	800197e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001978:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <SystemInit+0x138>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <SystemInit+0x11c>)
 8001980:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d113      	bne.n	80019b4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800198c:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <SystemInit+0x11c>)
 800198e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001992:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <SystemInit+0x11c>)
 8001994:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001998:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <SystemInit+0x13c>)
 800199e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019a2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <SystemInit+0x11c>)
 80019a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019aa:	4a07      	ldr	r2, [pc, #28]	@ (80019c8 <SystemInit+0x11c>)
 80019ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00
 80019c4:	52002000 	.word	0x52002000
 80019c8:	58024400 	.word	0x58024400
 80019cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80019d0:	02020200 	.word	0x02020200
 80019d4:	01ff0000 	.word	0x01ff0000
 80019d8:	01010280 	.word	0x01010280
 80019dc:	5c001000 	.word	0x5c001000
 80019e0:	ffff0000 	.word	0xffff0000
 80019e4:	51008108 	.word	0x51008108
 80019e8:	52004000 	.word	0x52004000

080019ec <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <ExitRun0Mode+0x2c>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <ExitRun0Mode+0x2c>)
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80019fc:	bf00      	nop
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <ExitRun0Mode+0x2c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f9      	beq.n	80019fe <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	58024800 	.word	0x58024800

08001a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
                                   ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a58 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a20:	f7ff ffe4 	bl	80019ec <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a24:	f7ff ff42 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a2a:	490d      	ldr	r1, [pc, #52]	@ (8001a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a40:	4c0a      	ldr	r4, [pc, #40]	@ (8001a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f00d fb9d 	bl	800f18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fc21 	bl	8001298 <main>
  bx  lr
 8001a56:	4770      	bx	lr
                                   ldr   sp, =_estack      /* set stack pointer */
 8001a58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a60:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8001a64:	08011b34 	.word	0x08011b34
  ldr r2, =_sbss
 8001a68:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8001a6c:	24003988 	.word	0x24003988

08001a70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC3_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f000 f98c 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a80:	f003 fa6a 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_Init+0x68>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	4913      	ldr	r1, [pc, #76]	@ (8001ae0 <HAL_Init+0x6c>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_Init+0x68>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <HAL_Init+0x6c>)
 8001aa8:	5cd3      	ldrb	r3, [r2, r3]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae4 <HAL_Init+0x70>)
 8001ab6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <HAL_Init+0x74>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f000 f814 	bl	8001aec <HAL_InitTick>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e002      	b.n	8001ad4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ace:	f7ff fd43 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	080116c0 	.word	0x080116c0
 8001ae4:	24000004 	.word	0x24000004
 8001ae8:	24000000 	.word	0x24000000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_InitTick+0x60>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e021      	b.n	8001b44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <HAL_InitTick+0x64>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_InitTick+0x60>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f971 	bl	8001dfe <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 f93b 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <HAL_InitTick+0x68>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2400000c 	.word	0x2400000c
 8001b50:	24000000 	.word	0x24000000
 8001b54:	24000008 	.word	0x24000008

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2400000c 	.word	0x2400000c
 8001b7c:	24001c54 	.word	0x24001c54

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	24001c54 	.word	0x24001c54

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff ffee 	bl	8001b80 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2400000c 	.word	0x2400000c

08001be0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_GetREVID+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0c1b      	lsrs	r3, r3, #16
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	5c001000 	.word	0x5c001000

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <__NVIC_SetPriorityGrouping+0x40>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <__NVIC_SetPriorityGrouping+0x40>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00
 8001c3c:	05fa0000 	.word	0x05fa0000

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	@ (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	@ (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	@ (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	@ 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff40 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff90 	bl	8001cec <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5f 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff33 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffa4 	bl	8001d54 <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e1c:	f3bf 8f5f 	dmb	sy
}
 8001e20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_MPU_Disable+0x28>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <HAL_MPU_Disable+0x28>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e2c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_MPU_Disable+0x2c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	605a      	str	r2, [r3, #4]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	e000ed90 	.word	0xe000ed90

08001e48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e50:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <HAL_MPU_Enable+0x38>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_MPU_Enable+0x3c>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <HAL_MPU_Enable+0x3c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e66:	f3bf 8f4f 	dsb	sy
}
 8001e6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e6c:	f3bf 8f6f 	isb	sy
}
 8001e70:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed90 	.word	0xe000ed90
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	785a      	ldrb	r2, [r3, #1]
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
 8001e96:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ea4:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7b1b      	ldrb	r3, [r3, #12]
 8001eb0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7adb      	ldrb	r3, [r3, #11]
 8001eb6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7a9b      	ldrb	r3, [r3, #10]
 8001ebe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7b5b      	ldrb	r3, [r3, #13]
 8001ec6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7b9b      	ldrb	r3, [r3, #14]
 8001ece:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7bdb      	ldrb	r3, [r3, #15]
 8001ed6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7a5b      	ldrb	r3, [r3, #9]
 8001ede:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7a1b      	ldrb	r3, [r3, #8]
 8001ee6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ee8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ef2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef4:	6113      	str	r3, [r2, #16]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed90 	.word	0xe000ed90

08001f08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff fe36 	bl	8001b80 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e2dc      	b.n	80024da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2280      	movs	r2, #128	@ 0x80
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e2cd      	b.n	80024da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a76      	ldr	r2, [pc, #472]	@ (800211c <HAL_DMA_Abort+0x214>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d04a      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a74      	ldr	r2, [pc, #464]	@ (8002120 <HAL_DMA_Abort+0x218>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d045      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a73      	ldr	r2, [pc, #460]	@ (8002124 <HAL_DMA_Abort+0x21c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d040      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a71      	ldr	r2, [pc, #452]	@ (8002128 <HAL_DMA_Abort+0x220>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d03b      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a70      	ldr	r2, [pc, #448]	@ (800212c <HAL_DMA_Abort+0x224>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d036      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6e      	ldr	r2, [pc, #440]	@ (8002130 <HAL_DMA_Abort+0x228>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d031      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6d      	ldr	r2, [pc, #436]	@ (8002134 <HAL_DMA_Abort+0x22c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d02c      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6b      	ldr	r2, [pc, #428]	@ (8002138 <HAL_DMA_Abort+0x230>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d027      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6a      	ldr	r2, [pc, #424]	@ (800213c <HAL_DMA_Abort+0x234>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a68      	ldr	r2, [pc, #416]	@ (8002140 <HAL_DMA_Abort+0x238>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01d      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a67      	ldr	r2, [pc, #412]	@ (8002144 <HAL_DMA_Abort+0x23c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d018      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a65      	ldr	r2, [pc, #404]	@ (8002148 <HAL_DMA_Abort+0x240>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a64      	ldr	r2, [pc, #400]	@ (800214c <HAL_DMA_Abort+0x244>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00e      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a62      	ldr	r2, [pc, #392]	@ (8002150 <HAL_DMA_Abort+0x248>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a61      	ldr	r2, [pc, #388]	@ (8002154 <HAL_DMA_Abort+0x24c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d004      	beq.n	8001fde <HAL_DMA_Abort+0xd6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a5f      	ldr	r2, [pc, #380]	@ (8002158 <HAL_DMA_Abort+0x250>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Abort+0xda>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_DMA_Abort+0xdc>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 021e 	bic.w	r2, r2, #30
 8001ff6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002006:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e00a      	b.n	8002026 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020e 	bic.w	r2, r2, #14
 800201e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3c      	ldr	r2, [pc, #240]	@ (800211c <HAL_DMA_Abort+0x214>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d072      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3a      	ldr	r2, [pc, #232]	@ (8002120 <HAL_DMA_Abort+0x218>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d06d      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a39      	ldr	r2, [pc, #228]	@ (8002124 <HAL_DMA_Abort+0x21c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d068      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a37      	ldr	r2, [pc, #220]	@ (8002128 <HAL_DMA_Abort+0x220>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d063      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a36      	ldr	r2, [pc, #216]	@ (800212c <HAL_DMA_Abort+0x224>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d05e      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a34      	ldr	r2, [pc, #208]	@ (8002130 <HAL_DMA_Abort+0x228>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d059      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a33      	ldr	r2, [pc, #204]	@ (8002134 <HAL_DMA_Abort+0x22c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d054      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a31      	ldr	r2, [pc, #196]	@ (8002138 <HAL_DMA_Abort+0x230>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d04f      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a30      	ldr	r2, [pc, #192]	@ (800213c <HAL_DMA_Abort+0x234>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d04a      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2e      	ldr	r2, [pc, #184]	@ (8002140 <HAL_DMA_Abort+0x238>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d045      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <HAL_DMA_Abort+0x23c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d040      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <HAL_DMA_Abort+0x240>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d03b      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2a      	ldr	r2, [pc, #168]	@ (800214c <HAL_DMA_Abort+0x244>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d036      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a28      	ldr	r2, [pc, #160]	@ (8002150 <HAL_DMA_Abort+0x248>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d031      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a27      	ldr	r2, [pc, #156]	@ (8002154 <HAL_DMA_Abort+0x24c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d02c      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a25      	ldr	r2, [pc, #148]	@ (8002158 <HAL_DMA_Abort+0x250>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d027      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a24      	ldr	r2, [pc, #144]	@ (800215c <HAL_DMA_Abort+0x254>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d022      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a22      	ldr	r2, [pc, #136]	@ (8002160 <HAL_DMA_Abort+0x258>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a21      	ldr	r2, [pc, #132]	@ (8002164 <HAL_DMA_Abort+0x25c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d018      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <HAL_DMA_Abort+0x260>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1e      	ldr	r2, [pc, #120]	@ (800216c <HAL_DMA_Abort+0x264>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00e      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002170 <HAL_DMA_Abort+0x268>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_DMA_Abort+0x26c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort+0x20e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <HAL_DMA_Abort+0x270>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d132      	bne.n	800217c <HAL_DMA_Abort+0x274>
 8002116:	2301      	movs	r3, #1
 8002118:	e031      	b.n	800217e <HAL_DMA_Abort+0x276>
 800211a:	bf00      	nop
 800211c:	40020010 	.word	0x40020010
 8002120:	40020028 	.word	0x40020028
 8002124:	40020040 	.word	0x40020040
 8002128:	40020058 	.word	0x40020058
 800212c:	40020070 	.word	0x40020070
 8002130:	40020088 	.word	0x40020088
 8002134:	400200a0 	.word	0x400200a0
 8002138:	400200b8 	.word	0x400200b8
 800213c:	40020410 	.word	0x40020410
 8002140:	40020428 	.word	0x40020428
 8002144:	40020440 	.word	0x40020440
 8002148:	40020458 	.word	0x40020458
 800214c:	40020470 	.word	0x40020470
 8002150:	40020488 	.word	0x40020488
 8002154:	400204a0 	.word	0x400204a0
 8002158:	400204b8 	.word	0x400204b8
 800215c:	58025408 	.word	0x58025408
 8002160:	5802541c 	.word	0x5802541c
 8002164:	58025430 	.word	0x58025430
 8002168:	58025444 	.word	0x58025444
 800216c:	58025458 	.word	0x58025458
 8002170:	5802546c 	.word	0x5802546c
 8002174:	58025480 	.word	0x58025480
 8002178:	58025494 	.word	0x58025494
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002190:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6d      	ldr	r2, [pc, #436]	@ (800234c <HAL_DMA_Abort+0x444>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d04a      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002350 <HAL_DMA_Abort+0x448>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d045      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002354 <HAL_DMA_Abort+0x44c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d040      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a68      	ldr	r2, [pc, #416]	@ (8002358 <HAL_DMA_Abort+0x450>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d03b      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a67      	ldr	r2, [pc, #412]	@ (800235c <HAL_DMA_Abort+0x454>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d036      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a65      	ldr	r2, [pc, #404]	@ (8002360 <HAL_DMA_Abort+0x458>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d031      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a64      	ldr	r2, [pc, #400]	@ (8002364 <HAL_DMA_Abort+0x45c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d02c      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a62      	ldr	r2, [pc, #392]	@ (8002368 <HAL_DMA_Abort+0x460>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d027      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a61      	ldr	r2, [pc, #388]	@ (800236c <HAL_DMA_Abort+0x464>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d022      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002370 <HAL_DMA_Abort+0x468>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002374 <HAL_DMA_Abort+0x46c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d018      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5c      	ldr	r2, [pc, #368]	@ (8002378 <HAL_DMA_Abort+0x470>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a5b      	ldr	r2, [pc, #364]	@ (800237c <HAL_DMA_Abort+0x474>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00e      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a59      	ldr	r2, [pc, #356]	@ (8002380 <HAL_DMA_Abort+0x478>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a58      	ldr	r2, [pc, #352]	@ (8002384 <HAL_DMA_Abort+0x47c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_DMA_Abort+0x32a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a56      	ldr	r2, [pc, #344]	@ (8002388 <HAL_DMA_Abort+0x480>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <HAL_DMA_Abort+0x33c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e007      	b.n	8002254 <HAL_DMA_Abort+0x34c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002254:	e013      	b.n	800227e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002256:	f7ff fc93 	bl	8001b80 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b05      	cmp	r3, #5
 8002262:	d90c      	bls.n	800227e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e12d      	b.n	80024da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e5      	bne.n	8002256 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2f      	ldr	r2, [pc, #188]	@ (800234c <HAL_DMA_Abort+0x444>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d04a      	beq.n	800232a <HAL_DMA_Abort+0x422>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <HAL_DMA_Abort+0x448>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d045      	beq.n	800232a <HAL_DMA_Abort+0x422>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002354 <HAL_DMA_Abort+0x44c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d040      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002358 <HAL_DMA_Abort+0x450>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d03b      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a29      	ldr	r2, [pc, #164]	@ (800235c <HAL_DMA_Abort+0x454>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d036      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a27      	ldr	r2, [pc, #156]	@ (8002360 <HAL_DMA_Abort+0x458>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d031      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a26      	ldr	r2, [pc, #152]	@ (8002364 <HAL_DMA_Abort+0x45c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d02c      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a24      	ldr	r2, [pc, #144]	@ (8002368 <HAL_DMA_Abort+0x460>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d027      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a23      	ldr	r2, [pc, #140]	@ (800236c <HAL_DMA_Abort+0x464>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d022      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a21      	ldr	r2, [pc, #132]	@ (8002370 <HAL_DMA_Abort+0x468>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01d      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a20      	ldr	r2, [pc, #128]	@ (8002374 <HAL_DMA_Abort+0x46c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d018      	beq.n	800232a <HAL_DMA_Abort+0x422>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002378 <HAL_DMA_Abort+0x470>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_DMA_Abort+0x422>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <HAL_DMA_Abort+0x474>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d00e      	beq.n	800232a <HAL_DMA_Abort+0x422>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1b      	ldr	r2, [pc, #108]	@ (8002380 <HAL_DMA_Abort+0x478>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_DMA_Abort+0x422>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1a      	ldr	r2, [pc, #104]	@ (8002384 <HAL_DMA_Abort+0x47c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d004      	beq.n	800232a <HAL_DMA_Abort+0x422>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a18      	ldr	r2, [pc, #96]	@ (8002388 <HAL_DMA_Abort+0x480>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d101      	bne.n	800232e <HAL_DMA_Abort+0x426>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_DMA_Abort+0x428>
 800232e:	2300      	movs	r3, #0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d02b      	beq.n	800238c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	223f      	movs	r2, #63	@ 0x3f
 8002344:	409a      	lsls	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	e02a      	b.n	80023a2 <HAL_DMA_Abort+0x49a>
 800234c:	40020010 	.word	0x40020010
 8002350:	40020028 	.word	0x40020028
 8002354:	40020040 	.word	0x40020040
 8002358:	40020058 	.word	0x40020058
 800235c:	40020070 	.word	0x40020070
 8002360:	40020088 	.word	0x40020088
 8002364:	400200a0 	.word	0x400200a0
 8002368:	400200b8 	.word	0x400200b8
 800236c:	40020410 	.word	0x40020410
 8002370:	40020428 	.word	0x40020428
 8002374:	40020440 	.word	0x40020440
 8002378:	40020458 	.word	0x40020458
 800237c:	40020470 	.word	0x40020470
 8002380:	40020488 	.word	0x40020488
 8002384:	400204a0 	.word	0x400204a0
 8002388:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2201      	movs	r2, #1
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a4f      	ldr	r2, [pc, #316]	@ (80024e4 <HAL_DMA_Abort+0x5dc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d072      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a4d      	ldr	r2, [pc, #308]	@ (80024e8 <HAL_DMA_Abort+0x5e0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d06d      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a4c      	ldr	r2, [pc, #304]	@ (80024ec <HAL_DMA_Abort+0x5e4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d068      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a4a      	ldr	r2, [pc, #296]	@ (80024f0 <HAL_DMA_Abort+0x5e8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d063      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a49      	ldr	r2, [pc, #292]	@ (80024f4 <HAL_DMA_Abort+0x5ec>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d05e      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a47      	ldr	r2, [pc, #284]	@ (80024f8 <HAL_DMA_Abort+0x5f0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d059      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a46      	ldr	r2, [pc, #280]	@ (80024fc <HAL_DMA_Abort+0x5f4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d054      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a44      	ldr	r2, [pc, #272]	@ (8002500 <HAL_DMA_Abort+0x5f8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d04f      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a43      	ldr	r2, [pc, #268]	@ (8002504 <HAL_DMA_Abort+0x5fc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d04a      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a41      	ldr	r2, [pc, #260]	@ (8002508 <HAL_DMA_Abort+0x600>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d045      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a40      	ldr	r2, [pc, #256]	@ (800250c <HAL_DMA_Abort+0x604>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d040      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3e      	ldr	r2, [pc, #248]	@ (8002510 <HAL_DMA_Abort+0x608>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d03b      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a3d      	ldr	r2, [pc, #244]	@ (8002514 <HAL_DMA_Abort+0x60c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d036      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a3b      	ldr	r2, [pc, #236]	@ (8002518 <HAL_DMA_Abort+0x610>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d031      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a3a      	ldr	r2, [pc, #232]	@ (800251c <HAL_DMA_Abort+0x614>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d02c      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a38      	ldr	r2, [pc, #224]	@ (8002520 <HAL_DMA_Abort+0x618>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d027      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a37      	ldr	r2, [pc, #220]	@ (8002524 <HAL_DMA_Abort+0x61c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a35      	ldr	r2, [pc, #212]	@ (8002528 <HAL_DMA_Abort+0x620>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01d      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a34      	ldr	r2, [pc, #208]	@ (800252c <HAL_DMA_Abort+0x624>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d018      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a32      	ldr	r2, [pc, #200]	@ (8002530 <HAL_DMA_Abort+0x628>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a31      	ldr	r2, [pc, #196]	@ (8002534 <HAL_DMA_Abort+0x62c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00e      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2f      	ldr	r2, [pc, #188]	@ (8002538 <HAL_DMA_Abort+0x630>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2e      	ldr	r2, [pc, #184]	@ (800253c <HAL_DMA_Abort+0x634>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_DMA_Abort+0x58a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2c      	ldr	r2, [pc, #176]	@ (8002540 <HAL_DMA_Abort+0x638>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_DMA_Abort+0x58e>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_DMA_Abort+0x590>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d015      	beq.n	80024c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40020010 	.word	0x40020010
 80024e8:	40020028 	.word	0x40020028
 80024ec:	40020040 	.word	0x40020040
 80024f0:	40020058 	.word	0x40020058
 80024f4:	40020070 	.word	0x40020070
 80024f8:	40020088 	.word	0x40020088
 80024fc:	400200a0 	.word	0x400200a0
 8002500:	400200b8 	.word	0x400200b8
 8002504:	40020410 	.word	0x40020410
 8002508:	40020428 	.word	0x40020428
 800250c:	40020440 	.word	0x40020440
 8002510:	40020458 	.word	0x40020458
 8002514:	40020470 	.word	0x40020470
 8002518:	40020488 	.word	0x40020488
 800251c:	400204a0 	.word	0x400204a0
 8002520:	400204b8 	.word	0x400204b8
 8002524:	58025408 	.word	0x58025408
 8002528:	5802541c 	.word	0x5802541c
 800252c:	58025430 	.word	0x58025430
 8002530:	58025444 	.word	0x58025444
 8002534:	58025458 	.word	0x58025458
 8002538:	5802546c 	.word	0x5802546c
 800253c:	58025480 	.word	0x58025480
 8002540:	58025494 	.word	0x58025494

08002544 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e237      	b.n	80029c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d004      	beq.n	800256c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2280      	movs	r2, #128	@ 0x80
 8002566:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e22c      	b.n	80029c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5c      	ldr	r2, [pc, #368]	@ (80026e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d04a      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a5b      	ldr	r2, [pc, #364]	@ (80026e8 <HAL_DMA_Abort_IT+0x1a4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d045      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a59      	ldr	r2, [pc, #356]	@ (80026ec <HAL_DMA_Abort_IT+0x1a8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d040      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a58      	ldr	r2, [pc, #352]	@ (80026f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d03b      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a56      	ldr	r2, [pc, #344]	@ (80026f4 <HAL_DMA_Abort_IT+0x1b0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d036      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a55      	ldr	r2, [pc, #340]	@ (80026f8 <HAL_DMA_Abort_IT+0x1b4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d031      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a53      	ldr	r2, [pc, #332]	@ (80026fc <HAL_DMA_Abort_IT+0x1b8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02c      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_DMA_Abort_IT+0x1bc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d027      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a50      	ldr	r2, [pc, #320]	@ (8002704 <HAL_DMA_Abort_IT+0x1c0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d022      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002708 <HAL_DMA_Abort_IT+0x1c4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d01d      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a4d      	ldr	r2, [pc, #308]	@ (800270c <HAL_DMA_Abort_IT+0x1c8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d018      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4c      	ldr	r2, [pc, #304]	@ (8002710 <HAL_DMA_Abort_IT+0x1cc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d013      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002714 <HAL_DMA_Abort_IT+0x1d0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00e      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a49      	ldr	r2, [pc, #292]	@ (8002718 <HAL_DMA_Abort_IT+0x1d4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a47      	ldr	r2, [pc, #284]	@ (800271c <HAL_DMA_Abort_IT+0x1d8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <HAL_DMA_Abort_IT+0xc8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a46      	ldr	r2, [pc, #280]	@ (8002720 <HAL_DMA_Abort_IT+0x1dc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_DMA_Abort_IT+0xcc>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <HAL_DMA_Abort_IT+0xce>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8086 	beq.w	8002724 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2204      	movs	r2, #4
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2f      	ldr	r2, [pc, #188]	@ (80026e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d04a      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2e      	ldr	r2, [pc, #184]	@ (80026e8 <HAL_DMA_Abort_IT+0x1a4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d045      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2c      	ldr	r2, [pc, #176]	@ (80026ec <HAL_DMA_Abort_IT+0x1a8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d040      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2b      	ldr	r2, [pc, #172]	@ (80026f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d03b      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a29      	ldr	r2, [pc, #164]	@ (80026f4 <HAL_DMA_Abort_IT+0x1b0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d036      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a28      	ldr	r2, [pc, #160]	@ (80026f8 <HAL_DMA_Abort_IT+0x1b4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d031      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a26      	ldr	r2, [pc, #152]	@ (80026fc <HAL_DMA_Abort_IT+0x1b8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d02c      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a25      	ldr	r2, [pc, #148]	@ (8002700 <HAL_DMA_Abort_IT+0x1bc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d027      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <HAL_DMA_Abort_IT+0x1c0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d022      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a22      	ldr	r2, [pc, #136]	@ (8002708 <HAL_DMA_Abort_IT+0x1c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d01d      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a20      	ldr	r2, [pc, #128]	@ (800270c <HAL_DMA_Abort_IT+0x1c8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d018      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <HAL_DMA_Abort_IT+0x1cc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_DMA_Abort_IT+0x1d0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00e      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002718 <HAL_DMA_Abort_IT+0x1d4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1a      	ldr	r2, [pc, #104]	@ (800271c <HAL_DMA_Abort_IT+0x1d8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x17c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <HAL_DMA_Abort_IT+0x1dc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d108      	bne.n	80026d2 <HAL_DMA_Abort_IT+0x18e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e178      	b.n	80029c4 <HAL_DMA_Abort_IT+0x480>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e16f      	b.n	80029c4 <HAL_DMA_Abort_IT+0x480>
 80026e4:	40020010 	.word	0x40020010
 80026e8:	40020028 	.word	0x40020028
 80026ec:	40020040 	.word	0x40020040
 80026f0:	40020058 	.word	0x40020058
 80026f4:	40020070 	.word	0x40020070
 80026f8:	40020088 	.word	0x40020088
 80026fc:	400200a0 	.word	0x400200a0
 8002700:	400200b8 	.word	0x400200b8
 8002704:	40020410 	.word	0x40020410
 8002708:	40020428 	.word	0x40020428
 800270c:	40020440 	.word	0x40020440
 8002710:	40020458 	.word	0x40020458
 8002714:	40020470 	.word	0x40020470
 8002718:	40020488 	.word	0x40020488
 800271c:	400204a0 	.word	0x400204a0
 8002720:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 020e 	bic.w	r2, r2, #14
 8002732:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6c      	ldr	r2, [pc, #432]	@ (80028ec <HAL_DMA_Abort_IT+0x3a8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d04a      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6b      	ldr	r2, [pc, #428]	@ (80028f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d045      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a69      	ldr	r2, [pc, #420]	@ (80028f4 <HAL_DMA_Abort_IT+0x3b0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d040      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a68      	ldr	r2, [pc, #416]	@ (80028f8 <HAL_DMA_Abort_IT+0x3b4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d03b      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a66      	ldr	r2, [pc, #408]	@ (80028fc <HAL_DMA_Abort_IT+0x3b8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d036      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a65      	ldr	r2, [pc, #404]	@ (8002900 <HAL_DMA_Abort_IT+0x3bc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d031      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a63      	ldr	r2, [pc, #396]	@ (8002904 <HAL_DMA_Abort_IT+0x3c0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02c      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a62      	ldr	r2, [pc, #392]	@ (8002908 <HAL_DMA_Abort_IT+0x3c4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d027      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a60      	ldr	r2, [pc, #384]	@ (800290c <HAL_DMA_Abort_IT+0x3c8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d022      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5f      	ldr	r2, [pc, #380]	@ (8002910 <HAL_DMA_Abort_IT+0x3cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d01d      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a5d      	ldr	r2, [pc, #372]	@ (8002914 <HAL_DMA_Abort_IT+0x3d0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d018      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002918 <HAL_DMA_Abort_IT+0x3d4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a5a      	ldr	r2, [pc, #360]	@ (800291c <HAL_DMA_Abort_IT+0x3d8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00e      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a59      	ldr	r2, [pc, #356]	@ (8002920 <HAL_DMA_Abort_IT+0x3dc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a57      	ldr	r2, [pc, #348]	@ (8002924 <HAL_DMA_Abort_IT+0x3e0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x290>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a56      	ldr	r2, [pc, #344]	@ (8002928 <HAL_DMA_Abort_IT+0x3e4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <HAL_DMA_Abort_IT+0x2a2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e007      	b.n	80027f6 <HAL_DMA_Abort_IT+0x2b2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3c      	ldr	r2, [pc, #240]	@ (80028ec <HAL_DMA_Abort_IT+0x3a8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d072      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3a      	ldr	r2, [pc, #232]	@ (80028f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d06d      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a39      	ldr	r2, [pc, #228]	@ (80028f4 <HAL_DMA_Abort_IT+0x3b0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d068      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a37      	ldr	r2, [pc, #220]	@ (80028f8 <HAL_DMA_Abort_IT+0x3b4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d063      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a36      	ldr	r2, [pc, #216]	@ (80028fc <HAL_DMA_Abort_IT+0x3b8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d05e      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a34      	ldr	r2, [pc, #208]	@ (8002900 <HAL_DMA_Abort_IT+0x3bc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d059      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a33      	ldr	r2, [pc, #204]	@ (8002904 <HAL_DMA_Abort_IT+0x3c0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d054      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a31      	ldr	r2, [pc, #196]	@ (8002908 <HAL_DMA_Abort_IT+0x3c4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d04f      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a30      	ldr	r2, [pc, #192]	@ (800290c <HAL_DMA_Abort_IT+0x3c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d04a      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2e      	ldr	r2, [pc, #184]	@ (8002910 <HAL_DMA_Abort_IT+0x3cc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d045      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2d      	ldr	r2, [pc, #180]	@ (8002914 <HAL_DMA_Abort_IT+0x3d0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d040      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2b      	ldr	r2, [pc, #172]	@ (8002918 <HAL_DMA_Abort_IT+0x3d4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d03b      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2a      	ldr	r2, [pc, #168]	@ (800291c <HAL_DMA_Abort_IT+0x3d8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d036      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a28      	ldr	r2, [pc, #160]	@ (8002920 <HAL_DMA_Abort_IT+0x3dc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d031      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a27      	ldr	r2, [pc, #156]	@ (8002924 <HAL_DMA_Abort_IT+0x3e0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d02c      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a25      	ldr	r2, [pc, #148]	@ (8002928 <HAL_DMA_Abort_IT+0x3e4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d027      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a24      	ldr	r2, [pc, #144]	@ (800292c <HAL_DMA_Abort_IT+0x3e8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d022      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a22      	ldr	r2, [pc, #136]	@ (8002930 <HAL_DMA_Abort_IT+0x3ec>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01d      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <HAL_DMA_Abort_IT+0x3f0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d018      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002938 <HAL_DMA_Abort_IT+0x3f4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1e      	ldr	r2, [pc, #120]	@ (800293c <HAL_DMA_Abort_IT+0x3f8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002940 <HAL_DMA_Abort_IT+0x3fc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002944 <HAL_DMA_Abort_IT+0x400>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x3a2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a19      	ldr	r2, [pc, #100]	@ (8002948 <HAL_DMA_Abort_IT+0x404>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d132      	bne.n	800294c <HAL_DMA_Abort_IT+0x408>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e031      	b.n	800294e <HAL_DMA_Abort_IT+0x40a>
 80028ea:	bf00      	nop
 80028ec:	40020010 	.word	0x40020010
 80028f0:	40020028 	.word	0x40020028
 80028f4:	40020040 	.word	0x40020040
 80028f8:	40020058 	.word	0x40020058
 80028fc:	40020070 	.word	0x40020070
 8002900:	40020088 	.word	0x40020088
 8002904:	400200a0 	.word	0x400200a0
 8002908:	400200b8 	.word	0x400200b8
 800290c:	40020410 	.word	0x40020410
 8002910:	40020428 	.word	0x40020428
 8002914:	40020440 	.word	0x40020440
 8002918:	40020458 	.word	0x40020458
 800291c:	40020470 	.word	0x40020470
 8002920:	40020488 	.word	0x40020488
 8002924:	400204a0 	.word	0x400204a0
 8002928:	400204b8 	.word	0x400204b8
 800292c:	58025408 	.word	0x58025408
 8002930:	5802541c 	.word	0x5802541c
 8002934:	58025430 	.word	0x58025430
 8002938:	58025444 	.word	0x58025444
 800293c:	58025458 	.word	0x58025458
 8002940:	5802546c 	.word	0x5802546c
 8002944:	58025480 	.word	0x58025480
 8002948:	58025494 	.word	0x58025494
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d028      	beq.n	80029a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002960:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2201      	movs	r2, #1
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002980:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00c      	beq.n	80029a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002998:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	@ 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029de:	4b89      	ldr	r3, [pc, #548]	@ (8002c04 <HAL_GPIO_Init+0x234>)
 80029e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029e2:	e194      	b.n	8002d0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2101      	movs	r1, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8186 	beq.w	8002d08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d005      	beq.n	8002a14 <HAL_GPIO_Init+0x44>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d130      	bne.n	8002a76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	2203      	movs	r2, #3
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f003 0201 	and.w	r2, r3, #1
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d017      	beq.n	8002ab2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d123      	bne.n	8002b06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	08da      	lsrs	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3208      	adds	r2, #8
 8002ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	08da      	lsrs	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3208      	adds	r2, #8
 8002b00:	69b9      	ldr	r1, [r7, #24]
 8002b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	2203      	movs	r2, #3
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0203 	and.w	r2, r3, #3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80e0 	beq.w	8002d08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b48:	4b2f      	ldr	r3, [pc, #188]	@ (8002c08 <HAL_GPIO_Init+0x238>)
 8002b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002c08 <HAL_GPIO_Init+0x238>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b58:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <HAL_GPIO_Init+0x238>)
 8002b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b66:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_GPIO_Init+0x23c>)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a20      	ldr	r2, [pc, #128]	@ (8002c10 <HAL_GPIO_Init+0x240>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d052      	beq.n	8002c38 <HAL_GPIO_Init+0x268>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1f      	ldr	r2, [pc, #124]	@ (8002c14 <HAL_GPIO_Init+0x244>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d031      	beq.n	8002bfe <HAL_GPIO_Init+0x22e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c18 <HAL_GPIO_Init+0x248>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02b      	beq.n	8002bfa <HAL_GPIO_Init+0x22a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c1c <HAL_GPIO_Init+0x24c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d025      	beq.n	8002bf6 <HAL_GPIO_Init+0x226>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1c      	ldr	r2, [pc, #112]	@ (8002c20 <HAL_GPIO_Init+0x250>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01f      	beq.n	8002bf2 <HAL_GPIO_Init+0x222>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_GPIO_Init+0x254>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d019      	beq.n	8002bee <HAL_GPIO_Init+0x21e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c28 <HAL_GPIO_Init+0x258>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0x21a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	@ (8002c2c <HAL_GPIO_Init+0x25c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_GPIO_Init+0x216>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <HAL_GPIO_Init+0x260>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x212>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a17      	ldr	r2, [pc, #92]	@ (8002c34 <HAL_GPIO_Init+0x264>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x20e>
 8002bda:	2309      	movs	r3, #9
 8002bdc:	e02d      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002bde:	230a      	movs	r3, #10
 8002be0:	e02b      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002be2:	2308      	movs	r3, #8
 8002be4:	e029      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e027      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002bea:	2306      	movs	r3, #6
 8002bec:	e025      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002bee:	2305      	movs	r3, #5
 8002bf0:	e023      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	e021      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e01f      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e01d      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e01b      	b.n	8002c3a <HAL_GPIO_Init+0x26a>
 8002c02:	bf00      	nop
 8002c04:	58000080 	.word	0x58000080
 8002c08:	58024400 	.word	0x58024400
 8002c0c:	58000400 	.word	0x58000400
 8002c10:	58020000 	.word	0x58020000
 8002c14:	58020400 	.word	0x58020400
 8002c18:	58020800 	.word	0x58020800
 8002c1c:	58020c00 	.word	0x58020c00
 8002c20:	58021000 	.word	0x58021000
 8002c24:	58021400 	.word	0x58021400
 8002c28:	58021800 	.word	0x58021800
 8002c2c:	58021c00 	.word	0x58021c00
 8002c30:	58022000 	.word	0x58022000
 8002c34:	58022400 	.word	0x58022400
 8002c38:	2300      	movs	r3, #0
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	f002 0203 	and.w	r2, r2, #3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4093      	lsls	r3, r2
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c4a:	4938      	ldr	r1, [pc, #224]	@ (8002d2c <HAL_GPIO_Init+0x35c>)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f47f ae63 	bne.w	80029e4 <HAL_GPIO_Init+0x14>
  }
}
 8002d1e:	bf00      	nop
 8002d20:	bf00      	nop
 8002d22:	3724      	adds	r7, #36	@ 0x24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	58000400 	.word	0x58000400

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	619a      	str	r2, [r3, #24]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af02      	add	r7, sp, #8
 8002d68:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0fe      	b.n	8002f72 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f00a fa09 	bl	800d1a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2203      	movs	r2, #3
 8002d92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f006 fdbd 	bl	800991a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7c1a      	ldrb	r2, [r3, #16]
 8002da8:	f88d 2000 	strb.w	r2, [sp]
 8002dac:	3304      	adds	r3, #4
 8002dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db0:	f006 fc8e 	bl	80096d0 <USB_CoreInit>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0d5      	b.n	8002f72 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f006 fdb5 	bl	800993c <USB_SetCurrentMode>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0c6      	b.n	8002f72 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	e04a      	b.n	8002e80 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3315      	adds	r3, #21
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	b298      	uxth	r0, r3
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	332e      	adds	r3, #46	@ 0x2e
 8002e26:	4602      	mov	r2, r0
 8002e28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e2a:	7bfa      	ldrb	r2, [r7, #15]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3318      	adds	r3, #24
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	331c      	adds	r3, #28
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3320      	adds	r3, #32
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3324      	adds	r3, #36	@ 0x24
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3af      	bcc.n	8002dea <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e044      	b.n	8002f1a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	3301      	adds	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	791b      	ldrb	r3, [r3, #4]
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d3b5      	bcc.n	8002e90 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7c1a      	ldrb	r2, [r3, #16]
 8002f2c:	f88d 2000 	strb.w	r2, [sp]
 8002f30:	3304      	adds	r3, #4
 8002f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f34:	f006 fd4e 	bl	80099d4 <USB_DevInit>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e013      	b.n	8002f72 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7b1b      	ldrb	r3, [r3, #12]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f001 f96f 	bl	8004244 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f007 fd91 	bl	800aa92 <USB_DevDisconnect>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_PCD_Start+0x1c>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e022      	b.n	8002fdc <HAL_PCD_Start+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f006 fc98 	bl	80098f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f007 fd3f 	bl	800aa50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b08d      	sub	sp, #52	@ 0x34
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f007 fdfd 	bl	800abfa <USB_GetMode>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 84b9 	bne.w	800397a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f007 fd61 	bl	800aad4 <USB_ReadInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 84af 	beq.w	8003978 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f007 fd4e 	bl	800aad4 <USB_ReadInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d107      	bne.n	8003052 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f002 0202 	and.w	r2, r2, #2
 8003050:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f007 fd3c 	bl	800aad4 <USB_ReadInterrupts>
 800305c:	4603      	mov	r3, r0
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b10      	cmp	r3, #16
 8003064:	d161      	bne.n	800312a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0210 	bic.w	r2, r2, #16
 8003074:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 020f 	and.w	r2, r3, #15
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	3304      	adds	r3, #4
 8003094:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800309c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030a0:	d124      	bne.n	80030ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d035      	beq.n	800311a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030bc:	b29b      	uxth	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	6a38      	ldr	r0, [r7, #32]
 80030c2:	f007 fb73 	bl	800a7ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030d2:	441a      	add	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030e4:	441a      	add	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	615a      	str	r2, [r3, #20]
 80030ea:	e016      	b.n	800311a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80030f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030f6:	d110      	bne.n	800311a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030fe:	2208      	movs	r2, #8
 8003100:	4619      	mov	r1, r3
 8003102:	6a38      	ldr	r0, [r7, #32]
 8003104:	f007 fb52 	bl	800a7ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003114:	441a      	add	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0210 	orr.w	r2, r2, #16
 8003128:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f007 fcd0 	bl	800aad4 <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800313a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800313e:	f040 80a7 	bne.w	8003290 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f007 fcd5 	bl	800aafa <USB_ReadDevAllOutEpInterrupt>
 8003150:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003152:	e099      	b.n	8003288 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 808e 	beq.w	800327c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f007 fcf9 	bl	800ab62 <USB_ReadDevOutEPInterrupt>
 8003170:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003188:	461a      	mov	r2, r3
 800318a:	2301      	movs	r3, #1
 800318c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800318e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fed1 	bl	8003f38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00c      	beq.n	80031ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ac:	461a      	mov	r2, r3
 80031ae:	2308      	movs	r3, #8
 80031b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 ffa7 	bl	8004108 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	2310      	movs	r3, #16
 80031d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d030      	beq.n	8003242 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e8:	2b80      	cmp	r3, #128	@ 0x80
 80031ea:	d109      	bne.n	8003200 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	78db      	ldrb	r3, [r3, #3]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2200      	movs	r2, #0
 8003222:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f00a f8ee 	bl	800d40c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800323c:	461a      	mov	r2, r3
 800323e:	2302      	movs	r3, #2
 8003240:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003258:	461a      	mov	r2, r3
 800325a:	2320      	movs	r3, #32
 800325c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800327a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	3301      	adds	r3, #1
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	f47f af62 	bne.w	8003154 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f007 fc1d 	bl	800aad4 <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032a4:	f040 80db 	bne.w	800345e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f007 fc3e 	bl	800ab2e <USB_ReadDevAllInEpInterrupt>
 80032b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80032b8:	e0cd      	b.n	8003456 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80c2 	beq.w	800344a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f007 fc64 	bl	800ab9e <USB_ReadDevInEPInterrupt>
 80032d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d057      	beq.n	8003392 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	2201      	movs	r2, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69f9      	ldr	r1, [r7, #28]
 80032fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003302:	4013      	ands	r3, r2
 8003304:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003312:	461a      	mov	r2, r3
 8003314:	2301      	movs	r3, #1
 8003316:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	799b      	ldrb	r3, [r3, #6]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d132      	bne.n	8003386 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3320      	adds	r3, #32
 8003330:	6819      	ldr	r1, [r3, #0]
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4403      	add	r3, r0
 8003340:	331c      	adds	r3, #28
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4419      	add	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4403      	add	r3, r0
 8003354:	3320      	adds	r3, #32
 8003356:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d113      	bne.n	8003386 <HAL_PCD_IRQHandler+0x3a2>
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3324      	adds	r3, #36	@ 0x24
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d108      	bne.n	8003386 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800337e:	461a      	mov	r2, r3
 8003380:	2101      	movs	r1, #1
 8003382:	f007 fc6d 	bl	800ac60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f009 ffb8 	bl	800d302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a8:	461a      	mov	r2, r3
 80033aa:	2308      	movs	r3, #8
 80033ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033c4:	461a      	mov	r2, r3
 80033c6:	2310      	movs	r3, #16
 80033c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033e0:	461a      	mov	r2, r3
 80033e2:	2340      	movs	r3, #64	@ 0x40
 80033e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d023      	beq.n	8003438 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033f2:	6a38      	ldr	r0, [r7, #32]
 80033f4:	f006 fc4c 	bl	8009c90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3310      	adds	r3, #16
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	78db      	ldrb	r3, [r3, #3]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d108      	bne.n	8003426 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2200      	movs	r2, #0
 8003418:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f00a f805 	bl	800d430 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003432:	461a      	mov	r2, r3
 8003434:	2302      	movs	r3, #2
 8003436:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fcea 	bl	8003e1e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	3301      	adds	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	f47f af2e 	bne.w	80032ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f007 fb36 	bl	800aad4 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800346e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003472:	d122      	bne.n	80034ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800348e:	2b01      	cmp	r3, #1
 8003490:	d108      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800349a:	2100      	movs	r1, #0
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fef5 	bl	800428c <HAL_PCDEx_LPM_Callback>
 80034a2:	e002      	b.n	80034aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f009 ffa3 	bl	800d3f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80034b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f007 fb08 	bl	800aad4 <USB_ReadInterrupts>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ce:	d112      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f009 ff5f 	bl	800d3a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80034f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f007 faea 	bl	800aad4 <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800350a:	d121      	bne.n	8003550 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800351a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003522:	2b00      	cmp	r3, #0
 8003524:	d111      	bne.n	800354a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003540:	2101      	movs	r1, #1
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fea2 	bl	800428c <HAL_PCDEx_LPM_Callback>
 8003548:	e002      	b.n	8003550 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f009 ff2a 	bl	800d3a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f007 fabd 	bl	800aad4 <USB_ReadInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003564:	f040 80b7 	bne.w	80036d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2110      	movs	r1, #16
 8003582:	4618      	mov	r0, r3
 8003584:	f006 fb84 	bl	8009c90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003588:	2300      	movs	r3, #0
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800358c:	e046      	b.n	800361c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359a:	461a      	mov	r2, r3
 800359c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035b2:	0151      	lsls	r1, r2, #5
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	440a      	add	r2, r1
 80035b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ce:	461a      	mov	r2, r3
 80035d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035e6:	0151      	lsls	r1, r2, #5
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	440a      	add	r2, r1
 80035ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	440a      	add	r2, r1
 800360c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003610:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003614:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003618:	3301      	adds	r3, #1
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	791b      	ldrb	r3, [r3, #4]
 8003620:	461a      	mov	r2, r3
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	4293      	cmp	r3, r2
 8003626:	d3b2      	bcc.n	800358e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003636:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800363a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7bdb      	ldrb	r3, [r3, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003654:	f043 030b 	orr.w	r3, r3, #11
 8003658:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800366a:	f043 030b 	orr.w	r3, r3, #11
 800366e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003670:	e015      	b.n	800369e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003680:	4619      	mov	r1, r3
 8003682:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003686:	4313      	orrs	r3, r2
 8003688:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003698:	f043 030b 	orr.w	r3, r3, #11
 800369c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80036b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036c0:	461a      	mov	r2, r3
 80036c2:	f007 facd 	bl	800ac60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80036d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f007 f9fa 	bl	800aad4 <USB_ReadInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ea:	d123      	bne.n	8003734 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f007 fa91 	bl	800ac18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f006 fb41 	bl	8009d82 <USB_GetDevSpeed>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681c      	ldr	r4, [r3, #0]
 800370c:	f001 fd9c 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8003710:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003716:	461a      	mov	r2, r3
 8003718:	4620      	mov	r0, r4
 800371a:	f006 f84b 	bl	80097b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f009 fe17 	bl	800d352 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003732:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f007 f9cb 	bl	800aad4 <USB_ReadInterrupts>
 800373e:	4603      	mov	r3, r0
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b08      	cmp	r3, #8
 8003746:	d10a      	bne.n	800375e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f009 fdf4 	bl	800d336 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 0208 	and.w	r2, r2, #8
 800375c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f007 f9b6 	bl	800aad4 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376e:	2b80      	cmp	r3, #128	@ 0x80
 8003770:	d123      	bne.n	80037ba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800377e:	2301      	movs	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
 8003782:	e014      	b.n	80037ae <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d105      	bne.n	80037a8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fb0a 	bl	8003dbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	3301      	adds	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	791b      	ldrb	r3, [r3, #4]
 80037b2:	461a      	mov	r2, r3
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d3e4      	bcc.n	8003784 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f007 f988 	bl	800aad4 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ce:	d13c      	bne.n	800384a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d0:	2301      	movs	r3, #1
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d4:	e02b      	b.n	800382e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	3318      	adds	r3, #24
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d115      	bne.n	8003828 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da12      	bge.n	8003828 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3317      	adds	r3, #23
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800381e:	b2db      	uxtb	r3, r3
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 faca 	bl	8003dbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	3301      	adds	r3, #1
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	791b      	ldrb	r3, [r3, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	4293      	cmp	r3, r2
 8003838:	d3cd      	bcc.n	80037d6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f007 f940 	bl	800aad4 <USB_ReadInterrupts>
 8003854:	4603      	mov	r3, r0
 8003856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800385a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800385e:	d156      	bne.n	800390e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003860:	2301      	movs	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
 8003864:	e045      	b.n	80038f2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d12e      	bne.n	80038ec <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800388e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	da2b      	bge.n	80038ec <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	0c1a      	lsrs	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800389e:	4053      	eors	r3, r2
 80038a0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d121      	bne.n	80038ec <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038e8:	6053      	str	r3, [r2, #4]
            break;
 80038ea:	e008      	b.n	80038fe <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	3301      	adds	r3, #1
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	791b      	ldrb	r3, [r3, #4]
 80038f6:	461a      	mov	r2, r3
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d3b3      	bcc.n	8003866 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800390c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f007 f8de 	bl	800aad4 <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003922:	d10a      	bne.n	800393a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f009 fd95 	bl	800d454 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f007 f8c8 	bl	800aad4 <USB_ReadInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d115      	bne.n	800397a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f009 fd85 	bl	800d470 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	e000      	b.n	800397a <HAL_PCD_IRQHandler+0x996>
      return;
 8003978:	bf00      	nop
    }
  }
}
 800397a:	3734      	adds	r7, #52	@ 0x34
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_PCD_SetAddress+0x1a>
 8003996:	2302      	movs	r3, #2
 8003998:	e012      	b.n	80039c0 <HAL_PCD_SetAddress+0x40>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f007 f827 	bl	800aa04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	4608      	mov	r0, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	461a      	mov	r2, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	70fb      	strb	r3, [r7, #3]
 80039da:	460b      	mov	r3, r1
 80039dc:	803b      	strh	r3, [r7, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da0f      	bge.n	8003a0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	3310      	adds	r3, #16
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	705a      	strb	r2, [r3, #1]
 8003a0c:	e00f      	b.n	8003a2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a3a:	883b      	ldrh	r3, [r7, #0]
 8003a3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	78ba      	ldrb	r2, [r7, #2]
 8003a48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a5c:	78bb      	ldrb	r3, [r7, #2]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d102      	bne.n	8003a68 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_PCD_EP_Open+0xae>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e00e      	b.n	8003a94 <HAL_PCD_EP_Open+0xcc>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f006 f9a1 	bl	8009dcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a92:	7afb      	ldrb	r3, [r7, #11]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	da0f      	bge.n	8003ad0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 020f 	and.w	r2, r3, #15
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	3310      	adds	r3, #16
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	705a      	strb	r2, [r3, #1]
 8003ace:	e00f      	b.n	8003af0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 020f 	and.w	r2, r3, #15
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_PCD_EP_Close+0x6e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e00e      	b.n	8003b28 <HAL_PCD_EP_Close+0x8c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68f9      	ldr	r1, [r7, #12]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f006 f9df 	bl	8009edc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b40:	7afb      	ldrb	r3, [r7, #11]
 8003b42:	f003 020f 	and.w	r2, r3, #15
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	3304      	adds	r3, #4
 8003b58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b72:	7afb      	ldrb	r3, [r7, #11]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	799b      	ldrb	r3, [r3, #6]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d102      	bne.n	8003b8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	799b      	ldrb	r3, [r3, #6]
 8003b94:	461a      	mov	r2, r3
 8003b96:	6979      	ldr	r1, [r7, #20]
 8003b98:	f006 fa7c 	bl	800a094 <USB_EPStartXfer>

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 020f 	and.w	r2, r3, #15
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003bc8:	681b      	ldr	r3, [r3, #0]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	460b      	mov	r3, r1
 8003be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	3310      	adds	r3, #16
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2201      	movs	r2, #1
 8003c14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c16:	7afb      	ldrb	r3, [r7, #11]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	799b      	ldrb	r3, [r3, #6]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	799b      	ldrb	r3, [r3, #6]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6979      	ldr	r1, [r7, #20]
 8003c3c:	f006 fa2a 	bl	800a094 <USB_EPStartXfer>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	7912      	ldrb	r2, [r2, #4]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e04f      	b.n	8003d08 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da0f      	bge.n	8003c90 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	3310      	adds	r3, #16
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	3304      	adds	r3, #4
 8003c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	705a      	strb	r2, [r3, #1]
 8003c8e:	e00d      	b.n	8003cac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_PCD_EP_SetStall+0x82>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e01d      	b.n	8003d08 <HAL_PCD_EP_SetStall+0xbe>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68f9      	ldr	r1, [r7, #12]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f006 fdbe 	bl	800a85c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7999      	ldrb	r1, [r3, #6]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f006 ffb1 	bl	800ac60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	7912      	ldrb	r2, [r2, #4]
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e042      	b.n	8003db4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da0f      	bge.n	8003d56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 020f 	and.w	r2, r3, #15
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	3310      	adds	r3, #16
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	705a      	strb	r2, [r3, #1]
 8003d54:	e00f      	b.n	8003d76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 020f 	and.w	r2, r3, #15
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_PCD_EP_ClrStall+0x86>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e00e      	b.n	8003db4 <HAL_PCD_EP_ClrStall+0xa4>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f006 fdc7 	bl	800a938 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	da0c      	bge.n	8003dea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 020f 	and.w	r2, r3, #15
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	3310      	adds	r3, #16
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4413      	add	r3, r2
 8003de4:	3304      	adds	r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e00c      	b.n	8003e04 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 020f 	and.w	r2, r3, #15
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f006 fbe6 	bl	800a5dc <USB_EPStopXfer>
 8003e10:	4603      	mov	r3, r0
 8003e12:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e14:	7afb      	ldrb	r3, [r7, #11]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08a      	sub	sp, #40	@ 0x28
 8003e22:	af02      	add	r7, sp, #8
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	3310      	adds	r3, #16
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	3304      	adds	r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d901      	bls.n	8003e56 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06b      	b.n	8003f2e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d902      	bls.n	8003e72 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3303      	adds	r3, #3
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e7a:	e02a      	b.n	8003ed2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d902      	bls.n	8003e98 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3303      	adds	r3, #3
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68d9      	ldr	r1, [r3, #12]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6978      	ldr	r0, [r7, #20]
 8003eb6:	f006 fc3b 	bl	800a730 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	441a      	add	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	441a      	add	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d809      	bhi.n	8003efc <PCD_WriteEmptyTxFifo+0xde>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d203      	bcs.n	8003efc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1bf      	bne.n	8003e7c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d811      	bhi.n	8003f2c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	2201      	movs	r2, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	6939      	ldr	r1, [r7, #16]
 8003f24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f28:	4013      	ands	r3, r2
 8003f2a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	333c      	adds	r3, #60	@ 0x3c
 8003f50:	3304      	adds	r3, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	799b      	ldrb	r3, [r3, #6]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d17b      	bne.n	8004066 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	4a61      	ldr	r2, [pc, #388]	@ (8004100 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	f240 80b9 	bls.w	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80b3 	beq.w	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa0:	6093      	str	r3, [r2, #8]
 8003fa2:	e0a7      	b.n	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	6093      	str	r3, [r2, #8]
 8003fc0:	e098      	b.n	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 8093 	bne.w	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8004100 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d90f      	bls.n	8003ff6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff2:	6093      	str	r3, [r2, #8]
 8003ff4:	e07e      	b.n	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4413      	add	r3, r2
 8004008:	3304      	adds	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	0159      	lsls	r1, r3, #5
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	440b      	add	r3, r1
 8004018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004022:	1ad2      	subs	r2, r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d114      	bne.n	8004058 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004040:	461a      	mov	r2, r3
 8004042:	2101      	movs	r1, #1
 8004044:	f006 fe0c 	bl	800ac60 <USB_EP0_OutStart>
 8004048:	e006      	b.n	8004058 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f009 f934 	bl	800d2cc <HAL_PCD_DataOutStageCallback>
 8004064:	e046      	b.n	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	4a26      	ldr	r2, [pc, #152]	@ (8004104 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d124      	bne.n	80040b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004084:	461a      	mov	r2, r3
 8004086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800408a:	6093      	str	r3, [r2, #8]
 800408c:	e032      	b.n	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a4:	461a      	mov	r2, r3
 80040a6:	2320      	movs	r3, #32
 80040a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f009 f90b 	bl	800d2cc <HAL_PCD_DataOutStageCallback>
 80040b6:	e01d      	b.n	80040f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d114      	bne.n	80040e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d108      	bne.n	80040e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040e0:	461a      	mov	r2, r3
 80040e2:	2100      	movs	r1, #0
 80040e4:	f006 fdbc 	bl	800ac60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f009 f8ec 	bl	800d2cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	4f54300a 	.word	0x4f54300a
 8004104:	4f54310a 	.word	0x4f54310a

08004108 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	333c      	adds	r3, #60	@ 0x3c
 8004120:	3304      	adds	r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a15      	ldr	r2, [pc, #84]	@ (8004190 <PCD_EP_OutSetupPacket_int+0x88>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d90e      	bls.n	800415c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f009 f8a3 	bl	800d2a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a0a      	ldr	r2, [pc, #40]	@ (8004190 <PCD_EP_OutSetupPacket_int+0x88>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d90c      	bls.n	8004184 <PCD_EP_OutSetupPacket_int+0x7c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	799b      	ldrb	r3, [r3, #6]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d108      	bne.n	8004184 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800417c:	461a      	mov	r2, r3
 800417e:	2101      	movs	r1, #1
 8004180:	f006 fd6e 	bl	800ac60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	4f54300a 	.word	0x4f54300a

08004194 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
 80041a0:	4613      	mov	r3, r2
 80041a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d107      	bne.n	80041c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041b2:	883b      	ldrh	r3, [r7, #0]
 80041b4:	0419      	lsls	r1, r3, #16
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	430a      	orrs	r2, r1
 80041be:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c0:	e028      	b.n	8004214 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	4413      	add	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	e00d      	b.n	80041f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	3340      	adds	r3, #64	@ 0x40
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	3301      	adds	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	7bfa      	ldrb	r2, [r7, #15]
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d3ec      	bcc.n	80041d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041fc:	883b      	ldrh	r3, [r7, #0]
 80041fe:	0418      	lsls	r0, r3, #16
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	3b01      	subs	r3, #1
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	4302      	orrs	r2, r0
 800420c:	3340      	adds	r3, #64	@ 0x40
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <HAL_PCDEx_ActivateLPM+0x44>)
 8004274:	4313      	orrs	r3, r2
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	10000003 	.word	0x10000003

0800428c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042ac:	4b19      	ldr	r3, [pc, #100]	@ (8004314 <HAL_PWREx_ConfigSupply+0x70>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d00a      	beq.n	80042ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042b8:	4b16      	ldr	r3, [pc, #88]	@ (8004314 <HAL_PWREx_ConfigSupply+0x70>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d001      	beq.n	80042ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e01f      	b.n	800430a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e01d      	b.n	800430a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042ce:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <HAL_PWREx_ConfigSupply+0x70>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f023 0207 	bic.w	r2, r3, #7
 80042d6:	490f      	ldr	r1, [pc, #60]	@ (8004314 <HAL_PWREx_ConfigSupply+0x70>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042de:	f7fd fc4f 	bl	8001b80 <HAL_GetTick>
 80042e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042e4:	e009      	b.n	80042fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042e6:	f7fd fc4b 	bl	8001b80 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042f4:	d901      	bls.n	80042fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e007      	b.n	800430a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_PWREx_ConfigSupply+0x70>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004306:	d1ee      	bne.n	80042e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	58024800 	.word	0x58024800

08004318 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800431c:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a04      	ldr	r2, [pc, #16]	@ (8004334 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004326:	60d3      	str	r3, [r2, #12]
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	58024800 	.word	0x58024800

08004338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08c      	sub	sp, #48	@ 0x30
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f000 bc48 	b.w	8004bdc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8088 	beq.w	800446a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435a:	4b99      	ldr	r3, [pc, #612]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004364:	4b96      	ldr	r3, [pc, #600]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800436a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436c:	2b10      	cmp	r3, #16
 800436e:	d007      	beq.n	8004380 <HAL_RCC_OscConfig+0x48>
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	2b18      	cmp	r3, #24
 8004374:	d111      	bne.n	800439a <HAL_RCC_OscConfig+0x62>
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d10c      	bne.n	800439a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	4b8f      	ldr	r3, [pc, #572]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d06d      	beq.n	8004468 <HAL_RCC_OscConfig+0x130>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d169      	bne.n	8004468 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f000 bc21 	b.w	8004bdc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x7a>
 80043a4:	4b86      	ldr	r3, [pc, #536]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a85      	ldr	r2, [pc, #532]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	e02e      	b.n	8004410 <HAL_RCC_OscConfig+0xd8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x9c>
 80043ba:	4b81      	ldr	r3, [pc, #516]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a80      	ldr	r2, [pc, #512]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b7e      	ldr	r3, [pc, #504]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a7d      	ldr	r2, [pc, #500]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e01d      	b.n	8004410 <HAL_RCC_OscConfig+0xd8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0xc0>
 80043de:	4b78      	ldr	r3, [pc, #480]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a77      	ldr	r2, [pc, #476]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b75      	ldr	r3, [pc, #468]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a74      	ldr	r2, [pc, #464]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e00b      	b.n	8004410 <HAL_RCC_OscConfig+0xd8>
 80043f8:	4b71      	ldr	r3, [pc, #452]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a70      	ldr	r2, [pc, #448]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80043fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b6e      	ldr	r3, [pc, #440]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a6d      	ldr	r2, [pc, #436]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800440a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800440e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd fbb2 	bl	8001b80 <HAL_GetTick>
 800441c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004420:	f7fd fbae 	bl	8001b80 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	@ 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e3d4      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004432:	4b63      	ldr	r3, [pc, #396]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0xe8>
 800443e:	e014      	b.n	800446a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd fb9e 	bl	8001b80 <HAL_GetTick>
 8004444:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004448:	f7fd fb9a 	bl	8001b80 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	@ 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e3c0      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800445a:	4b59      	ldr	r3, [pc, #356]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x110>
 8004466:	e000      	b.n	800446a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80ca 	beq.w	800460c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004478:	4b51      	ldr	r3, [pc, #324]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004480:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004482:	4b4f      	ldr	r3, [pc, #316]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <HAL_RCC_OscConfig+0x166>
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	2b18      	cmp	r3, #24
 8004492:	d156      	bne.n	8004542 <HAL_RCC_OscConfig+0x20a>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d151      	bne.n	8004542 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800449e:	4b48      	ldr	r3, [pc, #288]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_RCC_OscConfig+0x17e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e392      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044b6:	4b42      	ldr	r3, [pc, #264]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 0219 	bic.w	r2, r3, #25
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	493f      	ldr	r1, [pc, #252]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fd fb5a 	bl	8001b80 <HAL_GetTick>
 80044cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d0:	f7fd fb56 	bl	8001b80 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e37c      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e2:	4b37      	ldr	r3, [pc, #220]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	f7fd fb77 	bl	8001be0 <HAL_GetREVID>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d817      	bhi.n	800452c <HAL_RCC_OscConfig+0x1f4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	d108      	bne.n	8004516 <HAL_RCC_OscConfig+0x1de>
 8004504:	4b2e      	ldr	r3, [pc, #184]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800450c:	4a2c      	ldr	r2, [pc, #176]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004512:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004514:	e07a      	b.n	800460c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004516:	4b2a      	ldr	r3, [pc, #168]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	031b      	lsls	r3, r3, #12
 8004524:	4926      	ldr	r1, [pc, #152]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800452a:	e06f      	b.n	800460c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452c:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	4921      	ldr	r1, [pc, #132]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004540:	e064      	b.n	800460c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d047      	beq.n	80045da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800454a:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 0219 	bic.w	r2, r3, #25
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	491a      	ldr	r1, [pc, #104]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fb10 	bl	8001b80 <HAL_GetTick>
 8004560:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004564:	f7fd fb0c 	bl	8001b80 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e332      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	f7fd fb2d 	bl	8001be0 <HAL_GetREVID>
 8004586:	4603      	mov	r3, r0
 8004588:	f241 0203 	movw	r2, #4099	@ 0x1003
 800458c:	4293      	cmp	r3, r2
 800458e:	d819      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x28c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d108      	bne.n	80045aa <HAL_RCC_OscConfig+0x272>
 8004598:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80045a0:	4a07      	ldr	r2, [pc, #28]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80045a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045a6:	6053      	str	r3, [r2, #4]
 80045a8:	e030      	b.n	800460c <HAL_RCC_OscConfig+0x2d4>
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	4901      	ldr	r1, [pc, #4]	@ (80045c0 <HAL_RCC_OscConfig+0x288>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
 80045be:	e025      	b.n	800460c <HAL_RCC_OscConfig+0x2d4>
 80045c0:	58024400 	.word	0x58024400
 80045c4:	4b9a      	ldr	r3, [pc, #616]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	4997      	ldr	r1, [pc, #604]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
 80045d8:	e018      	b.n	800460c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045da:	4b95      	ldr	r3, [pc, #596]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a94      	ldr	r2, [pc, #592]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd facb 	bl	8001b80 <HAL_GetTick>
 80045ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fd fac7 	bl	8001b80 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e2ed      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004600:	4b8b      	ldr	r3, [pc, #556]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a9 	beq.w	800476c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461a:	4b85      	ldr	r3, [pc, #532]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004622:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004624:	4b82      	ldr	r3, [pc, #520]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d007      	beq.n	8004640 <HAL_RCC_OscConfig+0x308>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b18      	cmp	r3, #24
 8004634:	d13a      	bne.n	80046ac <HAL_RCC_OscConfig+0x374>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d135      	bne.n	80046ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004640:	4b7b      	ldr	r3, [pc, #492]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_OscConfig+0x320>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b80      	cmp	r3, #128	@ 0x80
 8004652:	d001      	beq.n	8004658 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e2c1      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004658:	f7fd fac2 	bl	8001be0 <HAL_GetREVID>
 800465c:	4603      	mov	r3, r0
 800465e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004662:	4293      	cmp	r3, r2
 8004664:	d817      	bhi.n	8004696 <HAL_RCC_OscConfig+0x35e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	2b20      	cmp	r3, #32
 800466c:	d108      	bne.n	8004680 <HAL_RCC_OscConfig+0x348>
 800466e:	4b70      	ldr	r3, [pc, #448]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004676:	4a6e      	ldr	r2, [pc, #440]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800467c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800467e:	e075      	b.n	800476c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004680:	4b6b      	ldr	r3, [pc, #428]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	069b      	lsls	r3, r3, #26
 800468e:	4968      	ldr	r1, [pc, #416]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004694:	e06a      	b.n	800476c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004696:	4b66      	ldr	r3, [pc, #408]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	4962      	ldr	r1, [pc, #392]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046aa:	e05f      	b.n	800476c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d042      	beq.n	800473a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80046ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fd fa5e 	bl	8001b80 <HAL_GetTick>
 80046c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046c8:	f7fd fa5a 	bl	8001b80 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e280      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046da:	4b55      	ldr	r3, [pc, #340]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046e6:	f7fd fa7b 	bl	8001be0 <HAL_GetREVID>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d817      	bhi.n	8004724 <HAL_RCC_OscConfig+0x3ec>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d108      	bne.n	800470e <HAL_RCC_OscConfig+0x3d6>
 80046fc:	4b4c      	ldr	r3, [pc, #304]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004704:	4a4a      	ldr	r2, [pc, #296]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004706:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800470a:	6053      	str	r3, [r2, #4]
 800470c:	e02e      	b.n	800476c <HAL_RCC_OscConfig+0x434>
 800470e:	4b48      	ldr	r3, [pc, #288]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	4944      	ldr	r1, [pc, #272]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
 8004722:	e023      	b.n	800476c <HAL_RCC_OscConfig+0x434>
 8004724:	4b42      	ldr	r3, [pc, #264]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	493f      	ldr	r1, [pc, #252]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]
 8004738:	e018      	b.n	800476c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800473a:	4b3d      	ldr	r3, [pc, #244]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a3c      	ldr	r2, [pc, #240]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd fa1b 	bl	8001b80 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800474e:	f7fd fa17 	bl	8001b80 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e23d      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004760:	4b33      	ldr	r3, [pc, #204]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f0      	bne.n	800474e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d036      	beq.n	80047e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004780:	4b2b      	ldr	r3, [pc, #172]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004784:	4a2a      	ldr	r2, [pc, #168]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fd f9f8 	bl	8001b80 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004794:	f7fd f9f4 	bl	8001b80 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e21a      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047a6:	4b22      	ldr	r3, [pc, #136]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x45c>
 80047b2:	e018      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80047b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fd f9de 	bl	8001b80 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fd f9da 	bl	8001b80 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e200      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047da:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80047dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d039      	beq.n	8004866 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01c      	beq.n	8004834 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004800:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004804:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004806:	f7fd f9bb 	bl	8001b80 <HAL_GetTick>
 800480a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800480e:	f7fd f9b7 	bl	8001b80 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e1dd      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004820:	4b03      	ldr	r3, [pc, #12]	@ (8004830 <HAL_RCC_OscConfig+0x4f8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x4d6>
 800482c:	e01b      	b.n	8004866 <HAL_RCC_OscConfig+0x52e>
 800482e:	bf00      	nop
 8004830:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004834:	4b9b      	ldr	r3, [pc, #620]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a9a      	ldr	r2, [pc, #616]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 800483a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800483e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004840:	f7fd f99e 	bl	8001b80 <HAL_GetTick>
 8004844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004848:	f7fd f99a 	bl	8001b80 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e1c0      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800485a:	4b92      	ldr	r3, [pc, #584]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8081 	beq.w	8004976 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004874:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa8 <HAL_RCC_OscConfig+0x770>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a8b      	ldr	r2, [pc, #556]	@ (8004aa8 <HAL_RCC_OscConfig+0x770>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004880:	f7fd f97e 	bl	8001b80 <HAL_GetTick>
 8004884:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fd f97a 	bl	8001b80 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	@ 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e1a0      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800489a:	4b83      	ldr	r3, [pc, #524]	@ (8004aa8 <HAL_RCC_OscConfig+0x770>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d106      	bne.n	80048bc <HAL_RCC_OscConfig+0x584>
 80048ae:	4b7d      	ldr	r3, [pc, #500]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a7c      	ldr	r2, [pc, #496]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ba:	e02d      	b.n	8004918 <HAL_RCC_OscConfig+0x5e0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10c      	bne.n	80048de <HAL_RCC_OscConfig+0x5a6>
 80048c4:	4b77      	ldr	r3, [pc, #476]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c8:	4a76      	ldr	r2, [pc, #472]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d0:	4b74      	ldr	r3, [pc, #464]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d4:	4a73      	ldr	r2, [pc, #460]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048d6:	f023 0304 	bic.w	r3, r3, #4
 80048da:	6713      	str	r3, [r2, #112]	@ 0x70
 80048dc:	e01c      	b.n	8004918 <HAL_RCC_OscConfig+0x5e0>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x5c8>
 80048e6:	4b6f      	ldr	r3, [pc, #444]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ea:	4a6e      	ldr	r2, [pc, #440]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f2:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	4a6b      	ldr	r2, [pc, #428]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0x5e0>
 8004900:	4b68      	ldr	r3, [pc, #416]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004904:	4a67      	ldr	r2, [pc, #412]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	@ 0x70
 800490c:	4b65      	ldr	r3, [pc, #404]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004910:	4a64      	ldr	r2, [pc, #400]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004912:	f023 0304 	bic.w	r3, r3, #4
 8004916:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d015      	beq.n	800494c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fd f92e 	bl	8001b80 <HAL_GetTick>
 8004924:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004926:	e00a      	b.n	800493e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fd f92a 	bl	8001b80 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e14e      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800493e:	4b59      	ldr	r3, [pc, #356]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ee      	beq.n	8004928 <HAL_RCC_OscConfig+0x5f0>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fd f918 	bl	8001b80 <HAL_GetTick>
 8004950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004952:	e00a      	b.n	800496a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004954:	f7fd f914 	bl	8001b80 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e138      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800496a:	4b4e      	ldr	r3, [pc, #312]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ee      	bne.n	8004954 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 812d 	beq.w	8004bda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004980:	4b48      	ldr	r3, [pc, #288]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004988:	2b18      	cmp	r3, #24
 800498a:	f000 80bd 	beq.w	8004b08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	2b02      	cmp	r3, #2
 8004994:	f040 809e 	bne.w	8004ad4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004998:	4b42      	ldr	r3, [pc, #264]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a41      	ldr	r2, [pc, #260]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 800499e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd f8ec 	bl	8001b80 <HAL_GetTick>
 80049a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd f8e8 	bl	8001b80 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e10e      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049be:	4b39      	ldr	r3, [pc, #228]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ca:	4b36      	ldr	r3, [pc, #216]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049ce:	4b37      	ldr	r3, [pc, #220]	@ (8004aac <HAL_RCC_OscConfig+0x774>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049da:	0112      	lsls	r2, r2, #4
 80049dc:	430a      	orrs	r2, r1
 80049de:	4931      	ldr	r1, [pc, #196]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e8:	3b01      	subs	r3, #1
 80049ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f2:	3b01      	subs	r3, #1
 80049f4:	025b      	lsls	r3, r3, #9
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	3b01      	subs	r3, #1
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a14:	4923      	ldr	r1, [pc, #140]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a1a:	4b22      	ldr	r3, [pc, #136]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	4a21      	ldr	r2, [pc, #132]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a26:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2a:	4b21      	ldr	r3, [pc, #132]	@ (8004ab0 <HAL_RCC_OscConfig+0x778>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a32:	00d2      	lsls	r2, r2, #3
 8004a34:	491b      	ldr	r1, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	f023 020c 	bic.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	4917      	ldr	r1, [pc, #92]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a4c:	4b15      	ldr	r3, [pc, #84]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	f023 0202 	bic.w	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a58:	4912      	ldr	r1, [pc, #72]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a5e:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	4a10      	ldr	r2, [pc, #64]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a76:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a82:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	4a07      	ldr	r2, [pc, #28]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a8e:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a04      	ldr	r2, [pc, #16]	@ (8004aa4 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fd f871 	bl	8001b80 <HAL_GetTick>
 8004a9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aa0:	e011      	b.n	8004ac6 <HAL_RCC_OscConfig+0x78e>
 8004aa2:	bf00      	nop
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	58024800 	.word	0x58024800
 8004aac:	fffffc0c 	.word	0xfffffc0c
 8004ab0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fd f864 	bl	8001b80 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e08a      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x77c>
 8004ad2:	e082      	b.n	8004bda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad4:	4b43      	ldr	r3, [pc, #268]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a42      	ldr	r2, [pc, #264]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd f84e 	bl	8001b80 <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fd f84a 	bl	8001b80 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e070      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004afa:	4b3a      	ldr	r3, [pc, #232]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x7b0>
 8004b06:	e068      	b.n	8004bda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b08:	4b36      	ldr	r3, [pc, #216]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b0e:	4b35      	ldr	r3, [pc, #212]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d031      	beq.n	8004b80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f003 0203 	and.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d12a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d122      	bne.n	8004b80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d11a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	0a5b      	lsrs	r3, r3, #9
 8004b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d108      	bne.n	8004b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	0e1b      	lsrs	r3, r3, #24
 8004b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e02b      	b.n	8004bdc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b84:	4b17      	ldr	r3, [pc, #92]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b88:	08db      	lsrs	r3, r3, #3
 8004b8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d01f      	beq.n	8004bda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9e:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004ba0:	f023 0301 	bic.w	r3, r3, #1
 8004ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ba6:	f7fc ffeb 	bl	8001b80 <HAL_GetTick>
 8004baa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004bac:	bf00      	nop
 8004bae:	f7fc ffe7 	bl	8001b80 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d0f9      	beq.n	8004bae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <HAL_RCC_OscConfig+0x8b0>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bc6:	00d2      	lsls	r2, r2, #3
 8004bc8:	4906      	ldr	r1, [pc, #24]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004bce:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	4a04      	ldr	r2, [pc, #16]	@ (8004be4 <HAL_RCC_OscConfig+0x8ac>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3730      	adds	r7, #48	@ 0x30
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	58024400 	.word	0x58024400
 8004be8:	ffff0007 	.word	0xffff0007

08004bec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e19c      	b.n	8004f3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c00:	4b8a      	ldr	r3, [pc, #552]	@ (8004e2c <HAL_RCC_ClockConfig+0x240>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d910      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b87      	ldr	r3, [pc, #540]	@ (8004e2c <HAL_RCC_ClockConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 020f 	bic.w	r2, r3, #15
 8004c16:	4985      	ldr	r1, [pc, #532]	@ (8004e2c <HAL_RCC_ClockConfig+0x240>)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b83      	ldr	r3, [pc, #524]	@ (8004e2c <HAL_RCC_ClockConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e184      	b.n	8004f3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	4b7b      	ldr	r3, [pc, #492]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d908      	bls.n	8004c5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c4c:	4b78      	ldr	r3, [pc, #480]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	4975      	ldr	r1, [pc, #468]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	4b70      	ldr	r3, [pc, #448]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d908      	bls.n	8004c8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	496a      	ldr	r1, [pc, #424]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d010      	beq.n	8004cba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	4b64      	ldr	r3, [pc, #400]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d908      	bls.n	8004cba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ca8:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	495e      	ldr	r1, [pc, #376]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d010      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69da      	ldr	r2, [r3, #28]
 8004cca:	4b59      	ldr	r3, [pc, #356]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d908      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cd6:	4b56      	ldr	r3, [pc, #344]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	4953      	ldr	r1, [pc, #332]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d010      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d908      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d04:	4b4a      	ldr	r3, [pc, #296]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f023 020f 	bic.w	r2, r3, #15
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4947      	ldr	r1, [pc, #284]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d055      	beq.n	8004dce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d22:	4b43      	ldr	r3, [pc, #268]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4940      	ldr	r1, [pc, #256]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d121      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0f6      	b.n	8004f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d107      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d54:	4b36      	ldr	r3, [pc, #216]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d115      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0ea      	b.n	8004f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d6c:	4b30      	ldr	r3, [pc, #192]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0de      	b.n	8004f3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0d6      	b.n	8004f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d8c:	4b28      	ldr	r3, [pc, #160]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f023 0207 	bic.w	r2, r3, #7
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4925      	ldr	r1, [pc, #148]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9e:	f7fc feef 	bl	8001b80 <HAL_GetTick>
 8004da2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da6:	f7fc feeb 	bl	8001b80 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0be      	b.n	8004f3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d1eb      	bne.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d010      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d208      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dea:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f023 020f 	bic.w	r2, r3, #15
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	490e      	ldr	r1, [pc, #56]	@ (8004e30 <HAL_RCC_ClockConfig+0x244>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_RCC_ClockConfig+0x240>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d214      	bcs.n	8004e34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0a:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <HAL_RCC_ClockConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 020f 	bic.w	r2, r3, #15
 8004e12:	4906      	ldr	r1, [pc, #24]	@ (8004e2c <HAL_RCC_ClockConfig+0x240>)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <HAL_RCC_ClockConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e086      	b.n	8004f3a <HAL_RCC_ClockConfig+0x34e>
 8004e2c:	52002000 	.word	0x52002000
 8004e30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d010      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	4b3f      	ldr	r3, [pc, #252]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d208      	bcs.n	8004e62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e50:	4b3c      	ldr	r3, [pc, #240]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	4939      	ldr	r1, [pc, #228]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d010      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d208      	bcs.n	8004e90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e7e:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	492e      	ldr	r1, [pc, #184]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d010      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	4b28      	ldr	r3, [pc, #160]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d208      	bcs.n	8004ebe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eac:	4b25      	ldr	r3, [pc, #148]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	4922      	ldr	r1, [pc, #136]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d010      	beq.n	8004eec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69da      	ldr	r2, [r3, #28]
 8004ece:	4b1d      	ldr	r3, [pc, #116]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d208      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004eda:	4b1a      	ldr	r3, [pc, #104]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4917      	ldr	r1, [pc, #92]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004eec:	f000 f834 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b14      	ldr	r3, [pc, #80]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	4912      	ldr	r1, [pc, #72]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f44 <HAL_RCC_ClockConfig+0x358>)
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	4a0d      	ldr	r2, [pc, #52]	@ (8004f48 <HAL_RCC_ClockConfig+0x35c>)
 8004f14:	5cd3      	ldrb	r3, [r2, r3]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <HAL_RCC_ClockConfig+0x360>)
 8004f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f24:	4a0a      	ldr	r2, [pc, #40]	@ (8004f50 <HAL_RCC_ClockConfig+0x364>)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <HAL_RCC_ClockConfig+0x368>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fc fddc 	bl	8001aec <HAL_InitTick>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	58024400 	.word	0x58024400
 8004f48:	080116c0 	.word	0x080116c0
 8004f4c:	24000004 	.word	0x24000004
 8004f50:	24000000 	.word	0x24000000
 8004f54:	24000008 	.word	0x24000008

08004f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	@ 0x24
 8004f5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5e:	4bb3      	ldr	r3, [pc, #716]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f66:	2b18      	cmp	r3, #24
 8004f68:	f200 8156 	bhi.w	8005218 <HAL_RCC_GetSysClockFreq+0x2c0>
 8004f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f72:	bf00      	nop
 8004f74:	08004fd9 	.word	0x08004fd9
 8004f78:	08005219 	.word	0x08005219
 8004f7c:	08005219 	.word	0x08005219
 8004f80:	08005219 	.word	0x08005219
 8004f84:	08005219 	.word	0x08005219
 8004f88:	08005219 	.word	0x08005219
 8004f8c:	08005219 	.word	0x08005219
 8004f90:	08005219 	.word	0x08005219
 8004f94:	08004fff 	.word	0x08004fff
 8004f98:	08005219 	.word	0x08005219
 8004f9c:	08005219 	.word	0x08005219
 8004fa0:	08005219 	.word	0x08005219
 8004fa4:	08005219 	.word	0x08005219
 8004fa8:	08005219 	.word	0x08005219
 8004fac:	08005219 	.word	0x08005219
 8004fb0:	08005219 	.word	0x08005219
 8004fb4:	08005005 	.word	0x08005005
 8004fb8:	08005219 	.word	0x08005219
 8004fbc:	08005219 	.word	0x08005219
 8004fc0:	08005219 	.word	0x08005219
 8004fc4:	08005219 	.word	0x08005219
 8004fc8:	08005219 	.word	0x08005219
 8004fcc:	08005219 	.word	0x08005219
 8004fd0:	08005219 	.word	0x08005219
 8004fd4:	0800500d 	.word	0x0800500d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd8:	4b94      	ldr	r3, [pc, #592]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fe4:	4b91      	ldr	r3, [pc, #580]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	08db      	lsrs	r3, r3, #3
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	4a90      	ldr	r2, [pc, #576]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ff6:	e112      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x2c6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ff8:	4b8d      	ldr	r3, [pc, #564]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ffa:	61bb      	str	r3, [r7, #24]
      break;
 8004ffc:	e10f      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x2c6>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ffe:	4b8d      	ldr	r3, [pc, #564]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005000:	61bb      	str	r3, [r7, #24]
      break;
 8005002:	e10c      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x2c6>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005004:	f04f 73fa 	mov.w	r3, #32768000	@ 0x1f40000
 8005008:	61bb      	str	r3, [r7, #24]
      break;
 800500a:	e108      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x2c6>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800500c:	4b87      	ldr	r3, [pc, #540]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005016:	4b85      	ldr	r3, [pc, #532]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005020:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005022:	4b82      	ldr	r3, [pc, #520]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800502c:	4b7f      	ldr	r3, [pc, #508]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800502e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005030:	08db      	lsrs	r3, r3, #3
 8005032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	fb02 f303 	mul.w	r3, r2, r3
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005044:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80e1 	beq.w	8005212 <HAL_RCC_GetSysClockFreq+0x2ba>
      {
        switch (pllsource)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b02      	cmp	r3, #2
 8005054:	f000 8083 	beq.w	800515e <HAL_RCC_GetSysClockFreq+0x206>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b02      	cmp	r3, #2
 800505c:	f200 80a1 	bhi.w	80051a2 <HAL_RCC_GetSysClockFreq+0x24a>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_RCC_GetSysClockFreq+0x116>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d056      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0x1c2>
 800506c:	e099      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x24a>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800506e:	4b6f      	ldr	r3, [pc, #444]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d02d      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x17e>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800507a:	4b6c      	ldr	r3, [pc, #432]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	08db      	lsrs	r3, r3, #3
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	4a6a      	ldr	r2, [pc, #424]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005086:	fa22 f303 	lsr.w	r3, r2, r3
 800508a:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a4:	4b61      	ldr	r3, [pc, #388]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80050b8:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 8005238 <HAL_RCC_GetSysClockFreq+0x2e0>
 80050bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d0:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80050d4:	e087      	b.n	80051e6 <HAL_RCC_GetSysClockFreq+0x28e>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e0:	eddf 6a56 	vldr	s13, [pc, #344]	@ 800523c <HAL_RCC_GetSysClockFreq+0x2e4>
 80050e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e8:	4b50      	ldr	r3, [pc, #320]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80050fc:	eddf 5a4e 	vldr	s11, [pc, #312]	@ 8005238 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005108:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800510c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005114:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005118:	e065      	b.n	80051e6 <HAL_RCC_GetSysClockFreq+0x28e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005124:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005240 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512c:	4b3f      	ldr	r3, [pc, #252]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005134:	ee07 3a90 	vmov	s15, r3
 8005138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005140:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005238 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005158:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800515c:	e043      	b.n	80051e6 <HAL_RCC_GetSysClockFreq+0x28e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005168:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005244 <HAL_RCC_GetSysClockFreq+0x2ec>
 800516c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005170:	4b2e      	ldr	r3, [pc, #184]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005180:	ed97 6a02 	vldr	s12, [r7, #8]
 8005184:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005238 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005190:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519c:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051a0:	e021      	b.n	80051e6 <HAL_RCC_GetSysClockFreq+0x28e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ac:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8005240 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b4:	4b1d      	ldr	r3, [pc, #116]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80051c8:	eddf 5a1b 	vldr	s11, [pc, #108]	@ 8005238 <HAL_RCC_GetSysClockFreq+0x2e0>
 80051cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e0:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051e4:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051e6:	4b11      	ldr	r3, [pc, #68]	@ (800522c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ea:	0a5b      	lsrs	r3, r3, #9
 80051ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051f0:	3301      	adds	r3, #1
 80051f2:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800520a:	ee17 3a90 	vmov	r3, s15
 800520e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005210:	e005      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x2c6>
        sysclockfreq = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
      break;
 8005216:	e002      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x2c6>

    default:
      sysclockfreq = CSI_VALUE;
 8005218:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800521a:	61bb      	str	r3, [r7, #24]
      break;
 800521c:	bf00      	nop
  }

  return sysclockfreq;
 800521e:	69bb      	ldr	r3, [r7, #24]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3724      	adds	r7, #36	@ 0x24
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	58024400 	.word	0x58024400
 8005230:	03d09000 	.word	0x03d09000
 8005234:	003d0900 	.word	0x003d0900
 8005238:	46000000 	.word	0x46000000
 800523c:	4c742400 	.word	0x4c742400
 8005240:	4a742400 	.word	0x4a742400
 8005244:	4bfa0000 	.word	0x4bfa0000

08005248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800524e:	f7ff fe83 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8005252:	4602      	mov	r2, r0
 8005254:	4b10      	ldr	r3, [pc, #64]	@ (8005298 <HAL_RCC_GetHCLKFreq+0x50>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	490f      	ldr	r1, [pc, #60]	@ (800529c <HAL_RCC_GetHCLKFreq+0x54>)
 8005260:	5ccb      	ldrb	r3, [r1, r3]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800526c:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <HAL_RCC_GetHCLKFreq+0x50>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	4a09      	ldr	r2, [pc, #36]	@ (800529c <HAL_RCC_GetHCLKFreq+0x54>)
 8005276:	5cd3      	ldrb	r3, [r2, r3]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	fa22 f303 	lsr.w	r3, r2, r3
 8005282:	4a07      	ldr	r2, [pc, #28]	@ (80052a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005284:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005286:	4a07      	ldr	r2, [pc, #28]	@ (80052a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800528c:	4b04      	ldr	r3, [pc, #16]	@ (80052a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	58024400 	.word	0x58024400
 800529c:	080116c0 	.word	0x080116c0
 80052a0:	24000004 	.word	0x24000004
 80052a4:	24000000 	.word	0x24000000

080052a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052ac:	f7ff ffcc 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b06      	ldr	r3, [pc, #24]	@ (80052cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	4904      	ldr	r1, [pc, #16]	@ (80052d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	58024400 	.word	0x58024400
 80052d0:	080116c0 	.word	0x080116c0

080052d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052d8:	f7ff ffb6 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4904      	ldr	r1, [pc, #16]	@ (80052fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80052ea:	5ccb      	ldrb	r3, [r1, r3]
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	58024400 	.word	0x58024400
 80052fc:	080116c0 	.word	0x080116c0

08005300 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005304:	b0ca      	sub	sp, #296	@ 0x128
 8005306:	af00      	add	r7, sp, #0
 8005308:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005312:	2300      	movs	r3, #0
 8005314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005324:	2500      	movs	r5, #0
 8005326:	ea54 0305 	orrs.w	r3, r4, r5
 800532a:	d049      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005332:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005336:	d02f      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005338:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800533c:	d828      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800533e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005342:	d01a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005344:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005348:	d822      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800534e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005352:	d007      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005354:	e01c      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005356:	4bb8      	ldr	r3, [pc, #736]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	4ab7      	ldr	r2, [pc, #732]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005362:	e01a      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005368:	3308      	adds	r3, #8
 800536a:	2102      	movs	r1, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f001 fc8f 	bl	8006c90 <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005378:	e00f      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537e:	3328      	adds	r3, #40	@ 0x28
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f001 fd36 	bl	8006df4 <RCCEx_PLL3_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800538e:	e004      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005396:	e000      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053a2:	4ba5      	ldr	r3, [pc, #660]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053b0:	4aa1      	ldr	r2, [pc, #644]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80053b6:	e003      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	ea58 0309 	orrs.w	r3, r8, r9
 80053d4:	d047      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d82a      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053e0:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	080053fd 	.word	0x080053fd
 80053ec:	0800540b 	.word	0x0800540b
 80053f0:	08005421 	.word	0x08005421
 80053f4:	0800543f 	.word	0x0800543f
 80053f8:	0800543f 	.word	0x0800543f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053fc:	4b8e      	ldr	r3, [pc, #568]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	4a8d      	ldr	r2, [pc, #564]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005408:	e01a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540e:	3308      	adds	r3, #8
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f001 fc3c 	bl	8006c90 <RCCEx_PLL2_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800541e:	e00f      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005424:	3328      	adds	r3, #40	@ 0x28
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fce3 	bl	8006df4 <RCCEx_PLL3_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005434:	e004      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800543e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005448:	4b7b      	ldr	r3, [pc, #492]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800544a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544c:	f023 0107 	bic.w	r1, r3, #7
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005456:	4a78      	ldr	r2, [pc, #480]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6513      	str	r3, [r2, #80]	@ 0x50
 800545c:	e003      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005472:	f04f 0b00 	mov.w	fp, #0
 8005476:	ea5a 030b 	orrs.w	r3, sl, fp
 800547a:	d04c      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005486:	d030      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800548c:	d829      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800548e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005490:	d02d      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005492:	2bc0      	cmp	r3, #192	@ 0xc0
 8005494:	d825      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005496:	2b80      	cmp	r3, #128	@ 0x80
 8005498:	d018      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800549a:	2b80      	cmp	r3, #128	@ 0x80
 800549c:	d821      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80054a2:	2b40      	cmp	r3, #64	@ 0x40
 80054a4:	d007      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80054a6:	e01c      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a8:	4b63      	ldr	r3, [pc, #396]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	4a62      	ldr	r2, [pc, #392]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054b4:	e01c      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	3308      	adds	r3, #8
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fbe6 	bl	8006c90 <RCCEx_PLL2_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054ca:	e011      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d0:	3328      	adds	r3, #40	@ 0x28
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 fc8d 	bl	8006df4 <RCCEx_PLL3_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054e8:	e002      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	4a4c      	ldr	r2, [pc, #304]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005508:	430b      	orrs	r3, r1
 800550a:	6513      	str	r3, [r2, #80]	@ 0x50
 800550c:	e003      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005522:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005526:	2300      	movs	r3, #0
 8005528:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800552c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005530:	460b      	mov	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	d053      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800553e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005542:	d035      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005544:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005548:	d82e      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800554a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800554e:	d031      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005550:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005554:	d828      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800555a:	d01a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800555c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005560:	d822      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800556a:	d007      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800556c:	e01c      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556e:	4b32      	ldr	r3, [pc, #200]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005572:	4a31      	ldr	r2, [pc, #196]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800557a:	e01c      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005580:	3308      	adds	r3, #8
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f001 fb83 	bl	8006c90 <RCCEx_PLL2_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005590:	e011      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	3328      	adds	r3, #40	@ 0x28
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f001 fc2a 	bl	8006df4 <RCCEx_PLL3_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055a6:	e006      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055ae:	e002      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055b0:	bf00      	nop
 80055b2:	e000      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055be:	4b1e      	ldr	r3, [pc, #120]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d4:	e003      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80055f8:	460b      	mov	r3, r1
 80055fa:	4313      	orrs	r3, r2
 80055fc:	d056      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005606:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800560a:	d038      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800560c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005610:	d831      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005612:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005616:	d034      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005618:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800561c:	d82b      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800561e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005622:	d01d      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005628:	d825      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d006      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800562e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005634:	e01f      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005636:	bf00      	nop
 8005638:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563c:	4ba2      	ldr	r3, [pc, #648]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	4aa1      	ldr	r2, [pc, #644]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005648:	e01c      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564e:	3308      	adds	r3, #8
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fb1c 	bl	8006c90 <RCCEx_PLL2_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800565e:	e011      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005664:	3328      	adds	r3, #40	@ 0x28
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f001 fbc3 	bl	8006df4 <RCCEx_PLL3_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800567c:	e002      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800567e:	bf00      	nop
 8005680:	e000      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800568c:	4b8e      	ldr	r3, [pc, #568]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005690:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005698:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800569c:	4a8a      	ldr	r2, [pc, #552]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800569e:	430b      	orrs	r3, r1
 80056a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80056a2:	e003      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80056b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80056c6:	460b      	mov	r3, r1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	d03a      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d2:	2b30      	cmp	r3, #48	@ 0x30
 80056d4:	d01f      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80056d6:	2b30      	cmp	r3, #48	@ 0x30
 80056d8:	d819      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d00c      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d815      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d111      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ea:	4b77      	ldr	r3, [pc, #476]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	4a76      	ldr	r2, [pc, #472]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80056f6:	e011      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fc:	3308      	adds	r3, #8
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f001 fac5 	bl	8006c90 <RCCEx_PLL2_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800570c:	e006      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005714:	e002      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800571a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005724:	4b68      	ldr	r3, [pc, #416]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005728:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800572c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005732:	4a65      	ldr	r2, [pc, #404]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005734:	430b      	orrs	r3, r1
 8005736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005738:	e003      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800574e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005752:	2300      	movs	r3, #0
 8005754:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005758:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800575c:	460b      	mov	r3, r1
 800575e:	4313      	orrs	r3, r2
 8005760:	d051      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800576c:	d035      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800576e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005772:	d82e      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005774:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005778:	d031      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800577a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800577e:	d828      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005784:	d01a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578a:	d822      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005794:	d007      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005796:	e01c      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005798:	4b4b      	ldr	r3, [pc, #300]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a4a      	ldr	r2, [pc, #296]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057a4:	e01c      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	3308      	adds	r3, #8
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fa6e 	bl	8006c90 <RCCEx_PLL2_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057ba:	e011      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c0:	3328      	adds	r3, #40	@ 0x28
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fb15 	bl	8006df4 <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057d0:	e006      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d8:	e002      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057e8:	4b37      	ldr	r3, [pc, #220]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f6:	4a34      	ldr	r2, [pc, #208]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80057fc:	e003      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800581c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005820:	460b      	mov	r3, r1
 8005822:	4313      	orrs	r3, r2
 8005824:	d056      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800582c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005830:	d033      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005832:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005836:	d82c      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005838:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800583c:	d02f      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800583e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005842:	d826      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005844:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005848:	d02b      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800584a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800584e:	d820      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005854:	d012      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800585a:	d81a      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d022      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005864:	d115      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586a:	3308      	adds	r3, #8
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fa0e 	bl	8006c90 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800587a:	e015      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	3328      	adds	r3, #40	@ 0x28
 8005882:	2101      	movs	r1, #1
 8005884:	4618      	mov	r0, r3
 8005886:	f001 fab5 	bl	8006df4 <RCCEx_PLL3_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005890:	e00a      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005898:	e006      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800589a:	bf00      	nop
 800589c:	e004      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800589e:	bf00      	nop
 80058a0:	e002      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a2:	bf00      	nop
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10d      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058b0:	4b05      	ldr	r3, [pc, #20]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058be:	4a02      	ldr	r2, [pc, #8]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80058c4:	e006      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80058e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4313      	orrs	r3, r2
 80058f2:	d055      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005900:	d033      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005906:	d82c      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590c:	d02f      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005912:	d826      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005914:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005918:	d02b      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800591a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800591e:	d820      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005924:	d012      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800592a:	d81a      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d022      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005934:	d115      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	3308      	adds	r3, #8
 800593c:	2101      	movs	r1, #1
 800593e:	4618      	mov	r0, r3
 8005940:	f001 f9a6 	bl	8006c90 <RCCEx_PLL2_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800594a:	e015      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005950:	3328      	adds	r3, #40	@ 0x28
 8005952:	2101      	movs	r1, #1
 8005954:	4618      	mov	r0, r3
 8005956:	f001 fa4d 	bl	8006df4 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005960:	e00a      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800596a:	bf00      	nop
 800596c:	e004      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800596e:	bf00      	nop
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005980:	4ba3      	ldr	r3, [pc, #652]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005984:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005990:	4a9f      	ldr	r2, [pc, #636]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005992:	430b      	orrs	r3, r1
 8005994:	6593      	str	r3, [r2, #88]	@ 0x58
 8005996:	e003      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800599c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80059ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d037      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ca:	d00e      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80059cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d0:	d816      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80059d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059da:	d111      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e0:	4a8b      	ldr	r2, [pc, #556]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059e8:	e00f      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	3308      	adds	r3, #8
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 f94c 	bl	8006c90 <RCCEx_PLL2_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059fe:	e004      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a12:	4b7f      	ldr	r3, [pc, #508]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a20:	4a7b      	ldr	r2, [pc, #492]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d039      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d81c      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a9d 	.word	0x08005a9d
 8005a64:	08005a71 	.word	0x08005a71
 8005a68:	08005a7f 	.word	0x08005a7f
 8005a6c:	08005a9d 	.word	0x08005a9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b67      	ldr	r3, [pc, #412]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	4a66      	ldr	r2, [pc, #408]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00f      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	3308      	adds	r3, #8
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 f902 	bl	8006c90 <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a92:	e004      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aaa:	f023 0103 	bic.w	r1, r3, #3
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab4:	4a56      	ldr	r2, [pc, #344]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ada:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f000 809f 	beq.w	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a4a      	ldr	r2, [pc, #296]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af2:	f7fc f845 	bl	8001b80 <HAL_GetTick>
 8005af6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afa:	e00b      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afc:	f7fc f840 	bl	8001b80 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b64      	cmp	r3, #100	@ 0x64
 8005b0a:	d903      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b12:	e005      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b14:	4b3f      	ldr	r3, [pc, #252]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ed      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d179      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b28:	4b39      	ldr	r3, [pc, #228]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b34:	4053      	eors	r3, r2
 8005b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d015      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b3e:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b4a:	4b31      	ldr	r3, [pc, #196]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	4a30      	ldr	r2, [pc, #192]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b56:	4b2e      	ldr	r3, [pc, #184]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b62:	4a2b      	ldr	r2, [pc, #172]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b76:	d118      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fc f802 	bl	8001b80 <HAL_GetTick>
 8005b7c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b80:	e00d      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7fb fffd 	bl	8001b80 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b8c:	1ad2      	subs	r2, r2, r3
 8005b8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d903      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0eb      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d129      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc2:	d10e      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005bc4:	4b12      	ldr	r3, [pc, #72]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bd4:	091a      	lsrs	r2, r3, #4
 8005bd6:	4b10      	ldr	r3, [pc, #64]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	4a0d      	ldr	r2, [pc, #52]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6113      	str	r3, [r2, #16]
 8005be0:	e005      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005be2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bec:	6113      	str	r3, [r2, #16]
 8005bee:	4b08      	ldr	r3, [pc, #32]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfe:	4a04      	ldr	r2, [pc, #16]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c04:	e00e      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005c0e:	e009      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c10:	58024400 	.word	0x58024400
 8005c14:	58024800 	.word	0x58024800
 8005c18:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	f002 0301 	and.w	r3, r2, #1
 8005c30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f000 8089 	beq.w	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c4c:	2b28      	cmp	r3, #40	@ 0x28
 8005c4e:	d86b      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005c50:	a201      	add	r2, pc, #4	@ (adr r2, 8005c58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005d31 	.word	0x08005d31
 8005c5c:	08005d29 	.word	0x08005d29
 8005c60:	08005d29 	.word	0x08005d29
 8005c64:	08005d29 	.word	0x08005d29
 8005c68:	08005d29 	.word	0x08005d29
 8005c6c:	08005d29 	.word	0x08005d29
 8005c70:	08005d29 	.word	0x08005d29
 8005c74:	08005d29 	.word	0x08005d29
 8005c78:	08005cfd 	.word	0x08005cfd
 8005c7c:	08005d29 	.word	0x08005d29
 8005c80:	08005d29 	.word	0x08005d29
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d29 	.word	0x08005d29
 8005c8c:	08005d29 	.word	0x08005d29
 8005c90:	08005d29 	.word	0x08005d29
 8005c94:	08005d29 	.word	0x08005d29
 8005c98:	08005d13 	.word	0x08005d13
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d29 	.word	0x08005d29
 8005ca4:	08005d29 	.word	0x08005d29
 8005ca8:	08005d29 	.word	0x08005d29
 8005cac:	08005d29 	.word	0x08005d29
 8005cb0:	08005d29 	.word	0x08005d29
 8005cb4:	08005d29 	.word	0x08005d29
 8005cb8:	08005d31 	.word	0x08005d31
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005d29 	.word	0x08005d29
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	08005d29 	.word	0x08005d29
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d29 	.word	0x08005d29
 8005cd8:	08005d31 	.word	0x08005d31
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d29 	.word	0x08005d29
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d29 	.word	0x08005d29
 8005cf8:	08005d31 	.word	0x08005d31
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	3308      	adds	r3, #8
 8005d02:	2101      	movs	r1, #1
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 ffc3 	bl	8006c90 <RCCEx_PLL2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d10:	e00f      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d16:	3328      	adds	r3, #40	@ 0x28
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 f86a 	bl	8006df4 <RCCEx_PLL3_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d26:	e004      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d2e:	e000      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d3a:	4bbf      	ldr	r3, [pc, #764]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d48:	4abb      	ldr	r2, [pc, #748]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d4e:	e003      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f002 0302 	and.w	r3, r2, #2
 8005d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d72:	460b      	mov	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	d041      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d7e:	2b05      	cmp	r3, #5
 8005d80:	d824      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005d82:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dd5 	.word	0x08005dd5
 8005d8c:	08005da1 	.word	0x08005da1
 8005d90:	08005db7 	.word	0x08005db7
 8005d94:	08005dd5 	.word	0x08005dd5
 8005d98:	08005dd5 	.word	0x08005dd5
 8005d9c:	08005dd5 	.word	0x08005dd5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da4:	3308      	adds	r3, #8
 8005da6:	2101      	movs	r1, #1
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 ff71 	bl	8006c90 <RCCEx_PLL2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005db4:	e00f      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dba:	3328      	adds	r3, #40	@ 0x28
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f818 	bl	8006df4 <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dca:	e004      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dde:	4b96      	ldr	r3, [pc, #600]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de2:	f023 0107 	bic.w	r1, r3, #7
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dec:	4a92      	ldr	r2, [pc, #584]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 0304 	and.w	r3, r2, #4
 8005e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d044      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d825      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e28:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e7d 	.word	0x08005e7d
 8005e34:	08005e49 	.word	0x08005e49
 8005e38:	08005e5f 	.word	0x08005e5f
 8005e3c:	08005e7d 	.word	0x08005e7d
 8005e40:	08005e7d 	.word	0x08005e7d
 8005e44:	08005e7d 	.word	0x08005e7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 ff1d 	bl	8006c90 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00f      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3328      	adds	r3, #40	@ 0x28
 8005e64:	2101      	movs	r1, #1
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 ffc4 	bl	8006df4 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e72:	e004      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e86:	4b6c      	ldr	r3, [pc, #432]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8a:	f023 0107 	bic.w	r1, r3, #7
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e96:	4a68      	ldr	r2, [pc, #416]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e9c:	e003      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f002 0320 	and.w	r3, r2, #32
 8005eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d055      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed2:	d033      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed8:	d82c      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ede:	d02f      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee4:	d826      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ee6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eea:	d02b      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005eec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ef0:	d820      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef6:	d012      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efc:	d81a      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d022      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f06:	d115      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 febd 	bl	8006c90 <RCCEx_PLL2_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f1c:	e015      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	3328      	adds	r3, #40	@ 0x28
 8005f24:	2102      	movs	r1, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 ff64 	bl	8006df4 <RCCEx_PLL3_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f32:	e00a      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f3a:	e006      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f3c:	bf00      	nop
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f40:	bf00      	nop
 8005f42:	e002      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f44:	bf00      	nop
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f52:	4b39      	ldr	r3, [pc, #228]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f56:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f62:	4a35      	ldr	r2, [pc, #212]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f68:	e003      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f82:	2300      	movs	r3, #0
 8005f84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d058      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f9a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f9e:	d033      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005fa0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005fa4:	d82c      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005faa:	d02f      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb0:	d826      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fb6:	d02b      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fbc:	d820      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc2:	d012      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc8:	d81a      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d022      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd2:	d115      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd8:	3308      	adds	r3, #8
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fe57 	bl	8006c90 <RCCEx_PLL2_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fe8:	e015      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fee:	3328      	adds	r3, #40	@ 0x28
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fefe 	bl	8006df4 <RCCEx_PLL3_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ffe:	e00a      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006006:	e006      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006008:	bf00      	nop
 800600a:	e004      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10e      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800601e:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006022:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800602e:	4a02      	ldr	r2, [pc, #8]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006030:	430b      	orrs	r3, r1
 8006032:	6593      	str	r3, [r2, #88]	@ 0x58
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006036:	bf00      	nop
 8006038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800605a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d055      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800606c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006070:	d033      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006072:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006076:	d82c      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800607c:	d02f      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006082:	d826      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006084:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006088:	d02b      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800608a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800608e:	d820      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006090:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006094:	d012      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800609a:	d81a      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d022      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80060a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a4:	d115      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	3308      	adds	r3, #8
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fdee 	bl	8006c90 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060ba:	e015      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c0:	3328      	adds	r3, #40	@ 0x28
 80060c2:	2102      	movs	r1, #2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fe95 	bl	8006df4 <RCCEx_PLL3_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060d0:	e00a      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060da:	bf00      	nop
 80060dc:	e004      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060f0:	4ba1      	ldr	r3, [pc, #644]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006100:	4a9d      	ldr	r2, [pc, #628]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006102:	430b      	orrs	r3, r1
 8006104:	6593      	str	r3, [r2, #88]	@ 0x58
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f002 0308 	and.w	r3, r2, #8
 800611c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006126:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	d01e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613c:	d10c      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006142:	3328      	adds	r3, #40	@ 0x28
 8006144:	2102      	movs	r1, #2
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fe54 	bl	8006df4 <RCCEx_PLL3_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006158:	4b87      	ldr	r3, [pc, #540]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800615a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006168:	4a83      	ldr	r2, [pc, #524]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800616a:	430b      	orrs	r3, r1
 800616c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f002 0310 	and.w	r3, r2, #16
 800617a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800617e:	2300      	movs	r3, #0
 8006180:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006184:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d01e      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800619a:	d10c      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	3328      	adds	r3, #40	@ 0x28
 80061a2:	2102      	movs	r1, #2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fe25 	bl	8006df4 <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061b6:	4b70      	ldr	r3, [pc, #448]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061c6:	4a6c      	ldr	r2, [pc, #432]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80061d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061e6:	460b      	mov	r3, r1
 80061e8:	4313      	orrs	r3, r2
 80061ea:	d03e      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f8:	d022      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80061fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fe:	d81b      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006208:	d00b      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800620a:	e015      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006210:	3308      	adds	r3, #8
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fd3b 	bl	8006c90 <RCCEx_PLL2_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006220:	e00f      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	3328      	adds	r3, #40	@ 0x28
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fde2 	bl	8006df4 <RCCEx_PLL3_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006236:	e004      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800623e:	e000      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800624a:	4b4b      	ldr	r3, [pc, #300]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800624c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800625a:	4a47      	ldr	r2, [pc, #284]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800625c:	430b      	orrs	r3, r1
 800625e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006260:	e003      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006276:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006278:	2300      	movs	r3, #0
 800627a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800627c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006280:	460b      	mov	r3, r1
 8006282:	4313      	orrs	r3, r2
 8006284:	d03b      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006292:	d01f      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006294:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006298:	d818      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629e:	d003      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80062a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062a4:	d007      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80062a6:	e011      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a8:	4b33      	ldr	r3, [pc, #204]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	4a32      	ldr	r2, [pc, #200]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062b4:	e00f      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	3328      	adds	r3, #40	@ 0x28
 80062bc:	2101      	movs	r1, #1
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fd98 	bl	8006df4 <RCCEx_PLL3_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80062d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062de:	4b26      	ldr	r3, [pc, #152]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ee:	4a22      	ldr	r2, [pc, #136]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80062f4:	e003      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800630a:	673b      	str	r3, [r7, #112]	@ 0x70
 800630c:	2300      	movs	r3, #0
 800630e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006310:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006314:	460b      	mov	r3, r1
 8006316:	4313      	orrs	r3, r2
 8006318:	d034      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006328:	d007      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800632a:	e011      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800632c:	4b12      	ldr	r3, [pc, #72]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	4a11      	ldr	r2, [pc, #68]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006336:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006338:	e00e      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	3308      	adds	r3, #8
 8006340:	2102      	movs	r1, #2
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fca4 	bl	8006c90 <RCCEx_PLL2_Config>
 8006348:	4603      	mov	r3, r0
 800634a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800634e:	e003      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10d      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006360:	4b05      	ldr	r3, [pc, #20]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006364:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636e:	4a02      	ldr	r2, [pc, #8]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006370:	430b      	orrs	r3, r1
 8006372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006374:	e006      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006392:	2300      	movs	r3, #0
 8006394:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006396:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d00c      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a4:	3328      	adds	r3, #40	@ 0x28
 80063a6:	2102      	movs	r1, #2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fd23 	bl	8006df4 <RCCEx_PLL3_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80063c8:	2300      	movs	r3, #0
 80063ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80063cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80063d0:	460b      	mov	r3, r1
 80063d2:	4313      	orrs	r3, r2
 80063d4:	d038      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e2:	d018      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80063e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e8:	d811      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ee:	d014      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f4:	d80b      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d011      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fe:	d106      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006400:	4bc3      	ldr	r3, [pc, #780]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	4ac2      	ldr	r2, [pc, #776]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800640a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800640c:	e008      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006414:	e004      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006416:	bf00      	nop
 8006418:	e002      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800641e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006428:	4bb9      	ldr	r3, [pc, #740]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800642a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006438:	4ab5      	ldr	r2, [pc, #724]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800643a:	430b      	orrs	r3, r1
 800643c:	6553      	str	r3, [r2, #84]	@ 0x54
 800643e:	e003      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006454:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006456:	2300      	movs	r3, #0
 8006458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800645a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	d009      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006464:	4baa      	ldr	r3, [pc, #680]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006468:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006472:	4aa7      	ldr	r2, [pc, #668]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006474:	430b      	orrs	r3, r1
 8006476:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006484:	653b      	str	r3, [r7, #80]	@ 0x50
 8006486:	2300      	movs	r3, #0
 8006488:	657b      	str	r3, [r7, #84]	@ 0x54
 800648a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800648e:	460b      	mov	r3, r1
 8006490:	4313      	orrs	r3, r2
 8006492:	d00a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006494:	4b9e      	ldr	r3, [pc, #632]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80064a4:	4a9a      	ldr	r2, [pc, #616]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a6:	430b      	orrs	r3, r1
 80064a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80064b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064b8:	2300      	movs	r3, #0
 80064ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d009      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064c6:	4b92      	ldr	r3, [pc, #584]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d4:	4a8e      	ldr	r2, [pc, #568]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80064e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80064e8:	2300      	movs	r3, #0
 80064ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064f0:	460b      	mov	r3, r1
 80064f2:	4313      	orrs	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064f6:	4b86      	ldr	r3, [pc, #536]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	4a85      	ldr	r2, [pc, #532]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006500:	6113      	str	r3, [r2, #16]
 8006502:	4b83      	ldr	r3, [pc, #524]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006504:	6919      	ldr	r1, [r3, #16]
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800650e:	4a80      	ldr	r2, [pc, #512]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006510:	430b      	orrs	r3, r1
 8006512:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006522:	2300      	movs	r3, #0
 8006524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006526:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800652a:	460b      	mov	r3, r1
 800652c:	4313      	orrs	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006530:	4b77      	ldr	r3, [pc, #476]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006534:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653e:	4a74      	ldr	r2, [pc, #464]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006540:	430b      	orrs	r3, r1
 8006542:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006550:	633b      	str	r3, [r7, #48]	@ 0x30
 8006552:	2300      	movs	r3, #0
 8006554:	637b      	str	r3, [r7, #52]	@ 0x34
 8006556:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800655a:	460b      	mov	r3, r1
 800655c:	4313      	orrs	r3, r2
 800655e:	d00a      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006560:	4b6b      	ldr	r3, [pc, #428]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006564:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006570:	4a67      	ldr	r2, [pc, #412]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006572:	430b      	orrs	r3, r1
 8006574:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	2100      	movs	r1, #0
 8006580:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006588:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d011      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	3308      	adds	r3, #8
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fb78 	bl	8006c90 <RCCEx_PLL2_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	2100      	movs	r1, #0
 80065c0:	6239      	str	r1, [r7, #32]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d011      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	3308      	adds	r3, #8
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fb58 	bl	8006c90 <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	2100      	movs	r1, #0
 8006600:	61b9      	str	r1, [r7, #24]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d011      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	3308      	adds	r3, #8
 8006618:	2102      	movs	r1, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fb38 	bl	8006c90 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	2100      	movs	r1, #0
 8006640:	6139      	str	r1, [r7, #16]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800664c:	460b      	mov	r3, r1
 800664e:	4313      	orrs	r3, r2
 8006650:	d011      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006656:	3328      	adds	r3, #40	@ 0x28
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fbca 	bl	8006df4 <RCCEx_PLL3_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	2100      	movs	r1, #0
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d011      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	3328      	adds	r3, #40	@ 0x28
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fbaa 	bl	8006df4 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	2100      	movs	r1, #0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066cc:	460b      	mov	r3, r1
 80066ce:	4313      	orrs	r3, r2
 80066d0:	d011      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d6:	3328      	adds	r3, #40	@ 0x28
 80066d8:	2102      	movs	r1, #2
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fb8a 	bl	8006df4 <RCCEx_PLL3_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80066f6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	e000      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
}
 8006704:	4618      	mov	r0, r3
 8006706:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800670a:	46bd      	mov	sp, r7
 800670c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006710:	58024400 	.word	0x58024400

08006714 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006718:	f7fe fd96 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 800671c:	4602      	mov	r2, r0
 800671e:	4b06      	ldr	r3, [pc, #24]	@ (8006738 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	091b      	lsrs	r3, r3, #4
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	4904      	ldr	r1, [pc, #16]	@ (800673c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800672a:	5ccb      	ldrb	r3, [r1, r3]
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006734:	4618      	mov	r0, r3
 8006736:	bd80      	pop	{r7, pc}
 8006738:	58024400 	.word	0x58024400
 800673c:	080116c0 	.word	0x080116c0

08006740 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006740:	b480      	push	{r7}
 8006742:	b089      	sub	sp, #36	@ 0x24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006748:	4ba1      	ldr	r3, [pc, #644]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006752:	4b9f      	ldr	r3, [pc, #636]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006756:	0b1b      	lsrs	r3, r3, #12
 8006758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800675c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800675e:	4b9c      	ldr	r3, [pc, #624]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	091b      	lsrs	r3, r3, #4
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800676a:	4b99      	ldr	r3, [pc, #612]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800676c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676e:	08db      	lsrs	r3, r3, #3
 8006770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	fb02 f303 	mul.w	r3, r2, r3
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006782:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8111 	beq.w	80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b02      	cmp	r3, #2
 8006792:	f000 8083 	beq.w	800689c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b02      	cmp	r3, #2
 800679a:	f200 80a1 	bhi.w	80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d056      	beq.n	8006858 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067aa:	e099      	b.n	80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ac:	4b88      	ldr	r3, [pc, #544]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d02d      	beq.n	8006814 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b8:	4b85      	ldr	r3, [pc, #532]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	08db      	lsrs	r3, r3, #3
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	4a84      	ldr	r2, [pc, #528]	@ (80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
 80067c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e2:	4b7b      	ldr	r3, [pc, #492]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006812:	e087      	b.n	8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006826:	4b6a      	ldr	r3, [pc, #424]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006836:	ed97 6a03 	vldr	s12, [r7, #12]
 800683a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800683e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800684a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006856:	e065      	b.n	8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006862:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686a:	4b59      	ldr	r3, [pc, #356]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687a:	ed97 6a03 	vldr	s12, [r7, #12]
 800687e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800688a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800688e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800689a:	e043      	b.n	8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ae:	4b48      	ldr	r3, [pc, #288]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	ed97 6a03 	vldr	s12, [r7, #12]
 80068c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068de:	e021      	b.n	8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f2:	4b37      	ldr	r3, [pc, #220]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006902:	ed97 6a03 	vldr	s12, [r7, #12]
 8006906:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800690a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006922:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006924:	4b2a      	ldr	r3, [pc, #168]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	0a5b      	lsrs	r3, r3, #9
 800692a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800693a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800693e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800694a:	ee17 2a90 	vmov	r2, s15
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006952:	4b1f      	ldr	r3, [pc, #124]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800695c:	ee07 3a90 	vmov	s15, r3
 8006960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006964:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006968:	ee37 7a87 	vadd.f32	s14, s15, s14
 800696c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006978:	ee17 2a90 	vmov	r2, s15
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006980:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006984:	0e1b      	lsrs	r3, r3, #24
 8006986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800699a:	edd7 6a07 	vldr	s13, [r7, #28]
 800699e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a6:	ee17 2a90 	vmov	r2, s15
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069ae:	e008      	b.n	80069c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	609a      	str	r2, [r3, #8]
}
 80069c2:	bf00      	nop
 80069c4:	3724      	adds	r7, #36	@ 0x24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	03d09000 	.word	0x03d09000
 80069d8:	46000000 	.word	0x46000000
 80069dc:	4c742400 	.word	0x4c742400
 80069e0:	4a742400 	.word	0x4a742400
 80069e4:	4bfa0000 	.word	0x4bfa0000

080069e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b089      	sub	sp, #36	@ 0x24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069f0:	4ba1      	ldr	r3, [pc, #644]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80069fa:	4b9f      	ldr	r3, [pc, #636]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	0d1b      	lsrs	r3, r3, #20
 8006a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a06:	4b9c      	ldr	r3, [pc, #624]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0a:	0a1b      	lsrs	r3, r3, #8
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a12:	4b99      	ldr	r3, [pc, #612]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a16:	08db      	lsrs	r3, r3, #3
 8006a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	fb02 f303 	mul.w	r3, r2, r3
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8111 	beq.w	8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f000 8083 	beq.w	8006b44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	f200 80a1 	bhi.w	8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d056      	beq.n	8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a52:	e099      	b.n	8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a54:	4b88      	ldr	r3, [pc, #544]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d02d      	beq.n	8006abc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a60:	4b85      	ldr	r3, [pc, #532]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	08db      	lsrs	r3, r3, #3
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	4a84      	ldr	r2, [pc, #528]	@ (8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006aba:	e087      	b.n	8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ace:	4b6a      	ldr	r3, [pc, #424]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006afe:	e065      	b.n	8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b59      	ldr	r3, [pc, #356]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b42:	e043      	b.n	8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b48      	ldr	r3, [pc, #288]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b86:	e021      	b.n	8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b37      	ldr	r3, [pc, #220]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd0:	0a5b      	lsrs	r3, r3, #9
 8006bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf2:	ee17 2a90 	vmov	r2, s15
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	0c1b      	lsrs	r3, r3, #16
 8006c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c20:	ee17 2a90 	vmov	r2, s15
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c28:	4b13      	ldr	r3, [pc, #76]	@ (8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	0e1b      	lsrs	r3, r3, #24
 8006c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4e:	ee17 2a90 	vmov	r2, s15
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c56:	e008      	b.n	8006c6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	609a      	str	r2, [r3, #8]
}
 8006c6a:	bf00      	nop
 8006c6c:	3724      	adds	r7, #36	@ 0x24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	58024400 	.word	0x58024400
 8006c7c:	03d09000 	.word	0x03d09000
 8006c80:	46000000 	.word	0x46000000
 8006c84:	4c742400 	.word	0x4c742400
 8006c88:	4a742400 	.word	0x4a742400
 8006c8c:	4bfa0000 	.word	0x4bfa0000

08006c90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c9e:	4b53      	ldr	r3, [pc, #332]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d101      	bne.n	8006cae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e099      	b.n	8006de2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cae:	4b4f      	ldr	r3, [pc, #316]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a4e      	ldr	r2, [pc, #312]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006cb4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cba:	f7fa ff61 	bl	8001b80 <HAL_GetTick>
 8006cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cc0:	e008      	b.n	8006cd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cc2:	f7fa ff5d 	bl	8001b80 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e086      	b.n	8006de2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cd4:	4b45      	ldr	r3, [pc, #276]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f0      	bne.n	8006cc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ce0:	4b42      	ldr	r3, [pc, #264]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	031b      	lsls	r3, r3, #12
 8006cee:	493f      	ldr	r1, [pc, #252]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	025b      	lsls	r3, r3, #9
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	061b      	lsls	r3, r3, #24
 8006d20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d24:	4931      	ldr	r1, [pc, #196]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d2a:	4b30      	ldr	r3, [pc, #192]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	492d      	ldr	r1, [pc, #180]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d40:	f023 0220 	bic.w	r2, r3, #32
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	4928      	ldr	r1, [pc, #160]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d4e:	4b27      	ldr	r3, [pc, #156]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d52:	4a26      	ldr	r2, [pc, #152]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d54:	f023 0310 	bic.w	r3, r3, #16
 8006d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d5a:	4b24      	ldr	r3, [pc, #144]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d5e:	4b24      	ldr	r3, [pc, #144]	@ (8006df0 <RCCEx_PLL2_Config+0x160>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	69d2      	ldr	r2, [r2, #28]
 8006d66:	00d2      	lsls	r2, r2, #3
 8006d68:	4920      	ldr	r1, [pc, #128]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	4a1e      	ldr	r2, [pc, #120]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d74:	f043 0310 	orr.w	r3, r3, #16
 8006d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d80:	4b1a      	ldr	r3, [pc, #104]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	4a19      	ldr	r2, [pc, #100]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d8c:	e00f      	b.n	8006dae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d106      	bne.n	8006da2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d94:	4b15      	ldr	r3, [pc, #84]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d98:	4a14      	ldr	r2, [pc, #80]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006da0:	e005      	b.n	8006dae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da6:	4a11      	ldr	r2, [pc, #68]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006da8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006dac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dae:	4b0f      	ldr	r3, [pc, #60]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a0e      	ldr	r2, [pc, #56]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006db4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dba:	f7fa fee1 	bl	8001b80 <HAL_GetTick>
 8006dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dc0:	e008      	b.n	8006dd4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dc2:	f7fa fedd 	bl	8001b80 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e006      	b.n	8006de2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dd4:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <RCCEx_PLL2_Config+0x15c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0f0      	beq.n	8006dc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	58024400 	.word	0x58024400
 8006df0:	ffff0007 	.word	0xffff0007

08006df4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e02:	4b53      	ldr	r3, [pc, #332]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d101      	bne.n	8006e12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e099      	b.n	8006f46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e12:	4b4f      	ldr	r3, [pc, #316]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a4e      	ldr	r2, [pc, #312]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e1e:	f7fa feaf 	bl	8001b80 <HAL_GetTick>
 8006e22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e24:	e008      	b.n	8006e38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e26:	f7fa feab 	bl	8001b80 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e086      	b.n	8006f46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e38:	4b45      	ldr	r3, [pc, #276]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f0      	bne.n	8006e26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e44:	4b42      	ldr	r3, [pc, #264]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	051b      	lsls	r3, r3, #20
 8006e52:	493f      	ldr	r1, [pc, #252]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	025b      	lsls	r3, r3, #9
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	041b      	lsls	r3, r3, #16
 8006e76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	061b      	lsls	r3, r3, #24
 8006e84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e88:	4931      	ldr	r1, [pc, #196]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e8e:	4b30      	ldr	r3, [pc, #192]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	492d      	ldr	r1, [pc, #180]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	4928      	ldr	r1, [pc, #160]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006eb2:	4b27      	ldr	r3, [pc, #156]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	4a26      	ldr	r2, [pc, #152]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ebe:	4b24      	ldr	r3, [pc, #144]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006ec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ec2:	4b24      	ldr	r3, [pc, #144]	@ (8006f54 <RCCEx_PLL3_Config+0x160>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	69d2      	ldr	r2, [r2, #28]
 8006eca:	00d2      	lsls	r2, r2, #3
 8006ecc:	4920      	ldr	r1, [pc, #128]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	4a19      	ldr	r2, [pc, #100]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006eea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006eee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ef0:	e00f      	b.n	8006f12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d106      	bne.n	8006f06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ef8:	4b15      	ldr	r3, [pc, #84]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	4a14      	ldr	r2, [pc, #80]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006efe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f04:	e005      	b.n	8006f12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f06:	4b12      	ldr	r3, [pc, #72]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	4a11      	ldr	r2, [pc, #68]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006f0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f12:	4b0f      	ldr	r3, [pc, #60]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a0e      	ldr	r2, [pc, #56]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f1e:	f7fa fe2f 	bl	8001b80 <HAL_GetTick>
 8006f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f24:	e008      	b.n	8006f38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f26:	f7fa fe2b 	bl	8001b80 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e006      	b.n	8006f46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f38:	4b05      	ldr	r3, [pc, #20]	@ (8006f50 <RCCEx_PLL3_Config+0x15c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0f0      	beq.n	8006f26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	58024400 	.word	0x58024400
 8006f54:	ffff0007 	.word	0xffff0007

08006f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e042      	b.n	8006ff0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d106      	bne.n	8006f82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fa fb05 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2224      	movs	r2, #36	@ 0x24
 8006f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0201 	bic.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f9d2 	bl	800834c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc67 	bl	800787c <UART_SetConfig>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e01b      	b.n	8006ff0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 fa51 	bl	8008490 <UART_CheckIdleState>
 8006fee:	4603      	mov	r3, r0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	@ 0x28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800700c:	2b20      	cmp	r3, #32
 800700e:	d137      	bne.n	8007080 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_UART_Receive_IT+0x24>
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e030      	b.n	8007082 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a18      	ldr	r2, [pc, #96]	@ (800708c <HAL_UART_Receive_IT+0x94>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d01f      	beq.n	8007070 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d018      	beq.n	8007070 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	613b      	str	r3, [r7, #16]
   return(result);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007052:	627b      	str	r3, [r7, #36]	@ 0x24
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	623b      	str	r3, [r7, #32]
 800705e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	69f9      	ldr	r1, [r7, #28]
 8007062:	6a3a      	ldr	r2, [r7, #32]
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	61bb      	str	r3, [r7, #24]
   return(result);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e6      	bne.n	800703e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	461a      	mov	r2, r3
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f001 fb22 	bl	80086c0 <UART_Start_Receive_IT>
 800707c:	4603      	mov	r3, r0
 800707e:	e000      	b.n	8007082 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007080:	2302      	movs	r3, #2
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3728      	adds	r7, #40	@ 0x28
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	58000c00 	.word	0x58000c00

08007090 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b0ba      	sub	sp, #232	@ 0xe8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80070ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80070be:	4013      	ands	r3, r2
 80070c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80070c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11b      	bne.n	8007104 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d015      	beq.n	8007104 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 8393 	beq.w	8007820 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
      }
      return;
 8007102:	e38d      	b.n	8007820 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8123 	beq.w	8007354 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800710e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007112:	4b8d      	ldr	r3, [pc, #564]	@ (8007348 <HAL_UART_IRQHandler+0x2b8>)
 8007114:	4013      	ands	r3, r2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800711a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800711e:	4b8b      	ldr	r3, [pc, #556]	@ (800734c <HAL_UART_IRQHandler+0x2bc>)
 8007120:	4013      	ands	r3, r2
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8116 	beq.w	8007354 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d011      	beq.n	8007158 <HAL_UART_IRQHandler+0xc8>
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2201      	movs	r2, #1
 8007146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d011      	beq.n	8007188 <HAL_UART_IRQHandler+0xf8>
 8007164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2202      	movs	r2, #2
 8007176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717e:	f043 0204 	orr.w	r2, r3, #4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d011      	beq.n	80071b8 <HAL_UART_IRQHandler+0x128>
 8007194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2204      	movs	r2, #4
 80071a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ae:	f043 0202 	orr.w	r2, r3, #2
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d017      	beq.n	80071f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80071d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80071d4:	4b5c      	ldr	r3, [pc, #368]	@ (8007348 <HAL_UART_IRQHandler+0x2b8>)
 80071d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2208      	movs	r2, #8
 80071e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ea:	f043 0208 	orr.w	r2, r3, #8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d012      	beq.n	8007226 <HAL_UART_IRQHandler+0x196>
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007204:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800721c:	f043 0220 	orr.w	r2, r3, #32
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 82f9 	beq.w	8007824 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007236:	f003 0320 	and.w	r3, r3, #32
 800723a:	2b00      	cmp	r3, #0
 800723c:	d013      	beq.n	8007266 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800723e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800724a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800724e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727a:	2b40      	cmp	r3, #64	@ 0x40
 800727c:	d005      	beq.n	800728a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800727e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007282:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007286:	2b00      	cmp	r3, #0
 8007288:	d054      	beq.n	8007334 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fb3a 	bl	8008904 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729a:	2b40      	cmp	r3, #64	@ 0x40
 800729c:	d146      	bne.n	800732c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3308      	adds	r3, #8
 80072a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1d9      	bne.n	800729e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d017      	beq.n	8007324 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072fa:	4a15      	ldr	r2, [pc, #84]	@ (8007350 <HAL_UART_IRQHandler+0x2c0>)
 80072fc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007304:	4618      	mov	r0, r3
 8007306:	f7fb f91d 	bl	8002544 <HAL_DMA_Abort_IT>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d019      	beq.n	8007344 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800731e:	4610      	mov	r0, r2
 8007320:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007322:	e00f      	b.n	8007344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fa93 	bl	8007850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732a:	e00b      	b.n	8007344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa8f 	bl	8007850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007332:	e007      	b.n	8007344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fa8b 	bl	8007850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007342:	e26f      	b.n	8007824 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007344:	bf00      	nop
    return;
 8007346:	e26d      	b.n	8007824 <HAL_UART_IRQHandler+0x794>
 8007348:	10000001 	.word	0x10000001
 800734c:	04000120 	.word	0x04000120
 8007350:	080089d1 	.word	0x080089d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007358:	2b01      	cmp	r3, #1
 800735a:	f040 8203 	bne.w	8007764 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800735e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 81fc 	beq.w	8007764 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800736c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 81f5 	beq.w	8007764 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2210      	movs	r2, #16
 8007380:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800738c:	2b40      	cmp	r3, #64	@ 0x40
 800738e:	f040 816d 	bne.w	800766c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4aa4      	ldr	r2, [pc, #656]	@ (800762c <HAL_UART_IRQHandler+0x59c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d068      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4aa1      	ldr	r2, [pc, #644]	@ (8007630 <HAL_UART_IRQHandler+0x5a0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d061      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a9f      	ldr	r2, [pc, #636]	@ (8007634 <HAL_UART_IRQHandler+0x5a4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d05a      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a9c      	ldr	r2, [pc, #624]	@ (8007638 <HAL_UART_IRQHandler+0x5a8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d053      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a9a      	ldr	r2, [pc, #616]	@ (800763c <HAL_UART_IRQHandler+0x5ac>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d04c      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a97      	ldr	r2, [pc, #604]	@ (8007640 <HAL_UART_IRQHandler+0x5b0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d045      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a95      	ldr	r2, [pc, #596]	@ (8007644 <HAL_UART_IRQHandler+0x5b4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d03e      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a92      	ldr	r2, [pc, #584]	@ (8007648 <HAL_UART_IRQHandler+0x5b8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d037      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a90      	ldr	r2, [pc, #576]	@ (800764c <HAL_UART_IRQHandler+0x5bc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d030      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a8d      	ldr	r2, [pc, #564]	@ (8007650 <HAL_UART_IRQHandler+0x5c0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d029      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a8b      	ldr	r2, [pc, #556]	@ (8007654 <HAL_UART_IRQHandler+0x5c4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d022      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a88      	ldr	r2, [pc, #544]	@ (8007658 <HAL_UART_IRQHandler+0x5c8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01b      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a86      	ldr	r2, [pc, #536]	@ (800765c <HAL_UART_IRQHandler+0x5cc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d014      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a83      	ldr	r2, [pc, #524]	@ (8007660 <HAL_UART_IRQHandler+0x5d0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00d      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a81      	ldr	r2, [pc, #516]	@ (8007664 <HAL_UART_IRQHandler+0x5d4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d006      	beq.n	8007472 <HAL_UART_IRQHandler+0x3e2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a7e      	ldr	r2, [pc, #504]	@ (8007668 <HAL_UART_IRQHandler+0x5d8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d106      	bne.n	8007480 <HAL_UART_IRQHandler+0x3f0>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	b29b      	uxth	r3, r3
 800747e:	e005      	b.n	800748c <HAL_UART_IRQHandler+0x3fc>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80ad 	beq.w	80075f4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074a4:	429a      	cmp	r2, r3
 80074a6:	f080 80a5 	bcs.w	80075f4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074c0:	f000 8087 	beq.w	80075d2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074d0:	e853 3f00 	ldrex	r3, [r3]
 80074d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1da      	bne.n	80074c4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800751e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3308      	adds	r3, #8
 800752e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007532:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007536:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800753a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e1      	bne.n	800750e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800755a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800755c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3308      	adds	r3, #8
 800756a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800756e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007570:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007574:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800757c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e3      	bne.n	800754a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800759e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075a0:	f023 0310 	bic.w	r3, r3, #16
 80075a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e4      	bne.n	8007590 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fa fc9b 	bl	8001f08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f939 	bl	8007864 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80075f2:	e119      	b.n	8007828 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075fe:	429a      	cmp	r2, r3
 8007600:	f040 8112 	bne.w	8007828 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007610:	f040 810a 	bne.w	8007828 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f91e 	bl	8007864 <HAL_UARTEx_RxEventCallback>
      return;
 8007628:	e0fe      	b.n	8007828 <HAL_UART_IRQHandler+0x798>
 800762a:	bf00      	nop
 800762c:	40020010 	.word	0x40020010
 8007630:	40020028 	.word	0x40020028
 8007634:	40020040 	.word	0x40020040
 8007638:	40020058 	.word	0x40020058
 800763c:	40020070 	.word	0x40020070
 8007640:	40020088 	.word	0x40020088
 8007644:	400200a0 	.word	0x400200a0
 8007648:	400200b8 	.word	0x400200b8
 800764c:	40020410 	.word	0x40020410
 8007650:	40020428 	.word	0x40020428
 8007654:	40020440 	.word	0x40020440
 8007658:	40020458 	.word	0x40020458
 800765c:	40020470 	.word	0x40020470
 8007660:	40020488 	.word	0x40020488
 8007664:	400204a0 	.word	0x400204a0
 8007668:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007678:	b29b      	uxth	r3, r3
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80cf 	beq.w	800782c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800768e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 80ca 	beq.w	800782c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80076bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e4      	bne.n	8007698 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	623b      	str	r3, [r7, #32]
   return(result);
 80076de:	6a3a      	ldr	r2, [r7, #32]
 80076e0:	4b55      	ldr	r3, [pc, #340]	@ (8007838 <HAL_UART_IRQHandler+0x7a8>)
 80076e2:	4013      	ands	r3, r2
 80076e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80076f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e3      	bne.n	80076ce <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	60fb      	str	r3, [r7, #12]
   return(result);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0310 	bic.w	r3, r3, #16
 800772e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	69b9      	ldr	r1, [r7, #24]
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	617b      	str	r3, [r7, #20]
   return(result);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e4      	bne.n	800771a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007756:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f881 	bl	8007864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007762:	e063      	b.n	800782c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00e      	beq.n	800778e <HAL_UART_IRQHandler+0x6fe>
 8007770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d008      	beq.n	800778e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fe80 	bl	800948c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800778c:	e051      	b.n	8007832 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007796:	2b00      	cmp	r3, #0
 8007798:	d014      	beq.n	80077c4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800779a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800779e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80077a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d008      	beq.n	80077c4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d03a      	beq.n	8007830 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
    }
    return;
 80077c2:	e035      	b.n	8007830 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <HAL_UART_IRQHandler+0x754>
 80077d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f909 	bl	80089f4 <UART_EndTransmit_IT>
    return;
 80077e2:	e026      	b.n	8007832 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <HAL_UART_IRQHandler+0x774>
 80077f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fe59 	bl	80094b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007802:	e016      	b.n	8007832 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d010      	beq.n	8007832 <HAL_UART_IRQHandler+0x7a2>
 8007810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007814:	2b00      	cmp	r3, #0
 8007816:	da0c      	bge.n	8007832 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fe41 	bl	80094a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800781e:	e008      	b.n	8007832 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007820:	bf00      	nop
 8007822:	e006      	b.n	8007832 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007824:	bf00      	nop
 8007826:	e004      	b.n	8007832 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007828:	bf00      	nop
 800782a:	e002      	b.n	8007832 <HAL_UART_IRQHandler+0x7a2>
      return;
 800782c:	bf00      	nop
 800782e:	e000      	b.n	8007832 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007830:	bf00      	nop
  }
}
 8007832:	37e8      	adds	r7, #232	@ 0xe8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	effffffe 	.word	0xeffffffe

0800783c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800787c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007880:	b092      	sub	sp, #72	@ 0x48
 8007882:	af00      	add	r7, sp, #0
 8007884:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	431a      	orrs	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	431a      	orrs	r2, r3
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4bbe      	ldr	r3, [pc, #760]	@ (8007ba4 <UART_SetConfig+0x328>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4ab3      	ldr	r2, [pc, #716]	@ (8007ba8 <UART_SetConfig+0x32c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d004      	beq.n	80078e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078e4:	4313      	orrs	r3, r2
 80078e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689a      	ldr	r2, [r3, #8]
 80078ee:	4baf      	ldr	r3, [pc, #700]	@ (8007bac <UART_SetConfig+0x330>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007902:	f023 010f 	bic.w	r1, r3, #15
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4aa6      	ldr	r2, [pc, #664]	@ (8007bb0 <UART_SetConfig+0x334>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d177      	bne.n	8007a0c <UART_SetConfig+0x190>
 800791c:	4ba5      	ldr	r3, [pc, #660]	@ (8007bb4 <UART_SetConfig+0x338>)
 800791e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007920:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007924:	2b28      	cmp	r3, #40	@ 0x28
 8007926:	d86d      	bhi.n	8007a04 <UART_SetConfig+0x188>
 8007928:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <UART_SetConfig+0xb4>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	080079d5 	.word	0x080079d5
 8007934:	08007a05 	.word	0x08007a05
 8007938:	08007a05 	.word	0x08007a05
 800793c:	08007a05 	.word	0x08007a05
 8007940:	08007a05 	.word	0x08007a05
 8007944:	08007a05 	.word	0x08007a05
 8007948:	08007a05 	.word	0x08007a05
 800794c:	08007a05 	.word	0x08007a05
 8007950:	080079dd 	.word	0x080079dd
 8007954:	08007a05 	.word	0x08007a05
 8007958:	08007a05 	.word	0x08007a05
 800795c:	08007a05 	.word	0x08007a05
 8007960:	08007a05 	.word	0x08007a05
 8007964:	08007a05 	.word	0x08007a05
 8007968:	08007a05 	.word	0x08007a05
 800796c:	08007a05 	.word	0x08007a05
 8007970:	080079e5 	.word	0x080079e5
 8007974:	08007a05 	.word	0x08007a05
 8007978:	08007a05 	.word	0x08007a05
 800797c:	08007a05 	.word	0x08007a05
 8007980:	08007a05 	.word	0x08007a05
 8007984:	08007a05 	.word	0x08007a05
 8007988:	08007a05 	.word	0x08007a05
 800798c:	08007a05 	.word	0x08007a05
 8007990:	080079ed 	.word	0x080079ed
 8007994:	08007a05 	.word	0x08007a05
 8007998:	08007a05 	.word	0x08007a05
 800799c:	08007a05 	.word	0x08007a05
 80079a0:	08007a05 	.word	0x08007a05
 80079a4:	08007a05 	.word	0x08007a05
 80079a8:	08007a05 	.word	0x08007a05
 80079ac:	08007a05 	.word	0x08007a05
 80079b0:	080079f5 	.word	0x080079f5
 80079b4:	08007a05 	.word	0x08007a05
 80079b8:	08007a05 	.word	0x08007a05
 80079bc:	08007a05 	.word	0x08007a05
 80079c0:	08007a05 	.word	0x08007a05
 80079c4:	08007a05 	.word	0x08007a05
 80079c8:	08007a05 	.word	0x08007a05
 80079cc:	08007a05 	.word	0x08007a05
 80079d0:	080079fd 	.word	0x080079fd
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079da:	e222      	b.n	8007e22 <UART_SetConfig+0x5a6>
 80079dc:	2304      	movs	r3, #4
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e2:	e21e      	b.n	8007e22 <UART_SetConfig+0x5a6>
 80079e4:	2308      	movs	r3, #8
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ea:	e21a      	b.n	8007e22 <UART_SetConfig+0x5a6>
 80079ec:	2310      	movs	r3, #16
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f2:	e216      	b.n	8007e22 <UART_SetConfig+0x5a6>
 80079f4:	2320      	movs	r3, #32
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fa:	e212      	b.n	8007e22 <UART_SetConfig+0x5a6>
 80079fc:	2340      	movs	r3, #64	@ 0x40
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a02:	e20e      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a04:	2380      	movs	r3, #128	@ 0x80
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0a:	e20a      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a69      	ldr	r2, [pc, #420]	@ (8007bb8 <UART_SetConfig+0x33c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d130      	bne.n	8007a78 <UART_SetConfig+0x1fc>
 8007a16:	4b67      	ldr	r3, [pc, #412]	@ (8007bb4 <UART_SetConfig+0x338>)
 8007a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d826      	bhi.n	8007a70 <UART_SetConfig+0x1f4>
 8007a22:	a201      	add	r2, pc, #4	@ (adr r2, 8007a28 <UART_SetConfig+0x1ac>)
 8007a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a28:	08007a41 	.word	0x08007a41
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	08007a51 	.word	0x08007a51
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a69 	.word	0x08007a69
 8007a40:	2300      	movs	r3, #0
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e1ec      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e1e8      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a50:	2308      	movs	r3, #8
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a56:	e1e4      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a58:	2310      	movs	r3, #16
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5e:	e1e0      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a60:	2320      	movs	r3, #32
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a66:	e1dc      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a68:	2340      	movs	r3, #64	@ 0x40
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	e1d8      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a70:	2380      	movs	r3, #128	@ 0x80
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e1d4      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a4f      	ldr	r2, [pc, #316]	@ (8007bbc <UART_SetConfig+0x340>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d130      	bne.n	8007ae4 <UART_SetConfig+0x268>
 8007a82:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb4 <UART_SetConfig+0x338>)
 8007a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b05      	cmp	r3, #5
 8007a8c:	d826      	bhi.n	8007adc <UART_SetConfig+0x260>
 8007a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <UART_SetConfig+0x218>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007aad 	.word	0x08007aad
 8007a98:	08007ab5 	.word	0x08007ab5
 8007a9c:	08007abd 	.word	0x08007abd
 8007aa0:	08007ac5 	.word	0x08007ac5
 8007aa4:	08007acd 	.word	0x08007acd
 8007aa8:	08007ad5 	.word	0x08007ad5
 8007aac:	2300      	movs	r3, #0
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab2:	e1b6      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e1b2      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007abc:	2308      	movs	r3, #8
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac2:	e1ae      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aca:	e1aa      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007acc:	2320      	movs	r3, #32
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad2:	e1a6      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007ad4:	2340      	movs	r3, #64	@ 0x40
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ada:	e1a2      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007adc:	2380      	movs	r3, #128	@ 0x80
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae2:	e19e      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a35      	ldr	r2, [pc, #212]	@ (8007bc0 <UART_SetConfig+0x344>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d130      	bne.n	8007b50 <UART_SetConfig+0x2d4>
 8007aee:	4b31      	ldr	r3, [pc, #196]	@ (8007bb4 <UART_SetConfig+0x338>)
 8007af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	2b05      	cmp	r3, #5
 8007af8:	d826      	bhi.n	8007b48 <UART_SetConfig+0x2cc>
 8007afa:	a201      	add	r2, pc, #4	@ (adr r2, 8007b00 <UART_SetConfig+0x284>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b21 	.word	0x08007b21
 8007b08:	08007b29 	.word	0x08007b29
 8007b0c:	08007b31 	.word	0x08007b31
 8007b10:	08007b39 	.word	0x08007b39
 8007b14:	08007b41 	.word	0x08007b41
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1e:	e180      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b20:	2304      	movs	r3, #4
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e17c      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2e:	e178      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b30:	2310      	movs	r3, #16
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b36:	e174      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b38:	2320      	movs	r3, #32
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3e:	e170      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b40:	2340      	movs	r3, #64	@ 0x40
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b46:	e16c      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b48:	2380      	movs	r3, #128	@ 0x80
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4e:	e168      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc4 <UART_SetConfig+0x348>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d142      	bne.n	8007be0 <UART_SetConfig+0x364>
 8007b5a:	4b16      	ldr	r3, [pc, #88]	@ (8007bb4 <UART_SetConfig+0x338>)
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	2b05      	cmp	r3, #5
 8007b64:	d838      	bhi.n	8007bd8 <UART_SetConfig+0x35c>
 8007b66:	a201      	add	r2, pc, #4	@ (adr r2, 8007b6c <UART_SetConfig+0x2f0>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007b85 	.word	0x08007b85
 8007b70:	08007b8d 	.word	0x08007b8d
 8007b74:	08007b95 	.word	0x08007b95
 8007b78:	08007b9d 	.word	0x08007b9d
 8007b7c:	08007bc9 	.word	0x08007bc9
 8007b80:	08007bd1 	.word	0x08007bd1
 8007b84:	2300      	movs	r3, #0
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8a:	e14a      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b8c:	2304      	movs	r3, #4
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b92:	e146      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b94:	2308      	movs	r3, #8
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9a:	e142      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007b9c:	2310      	movs	r3, #16
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba2:	e13e      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007ba4:	cfff69f3 	.word	0xcfff69f3
 8007ba8:	58000c00 	.word	0x58000c00
 8007bac:	11fff4ff 	.word	0x11fff4ff
 8007bb0:	40011000 	.word	0x40011000
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	40004400 	.word	0x40004400
 8007bbc:	40004800 	.word	0x40004800
 8007bc0:	40004c00 	.word	0x40004c00
 8007bc4:	40005000 	.word	0x40005000
 8007bc8:	2320      	movs	r3, #32
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e128      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007bd0:	2340      	movs	r3, #64	@ 0x40
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e124      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007bd8:	2380      	movs	r3, #128	@ 0x80
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bde:	e120      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4acb      	ldr	r2, [pc, #812]	@ (8007f14 <UART_SetConfig+0x698>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d176      	bne.n	8007cd8 <UART_SetConfig+0x45c>
 8007bea:	4bcb      	ldr	r3, [pc, #812]	@ (8007f18 <UART_SetConfig+0x69c>)
 8007bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bf2:	2b28      	cmp	r3, #40	@ 0x28
 8007bf4:	d86c      	bhi.n	8007cd0 <UART_SetConfig+0x454>
 8007bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <UART_SetConfig+0x380>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007ca1 	.word	0x08007ca1
 8007c00:	08007cd1 	.word	0x08007cd1
 8007c04:	08007cd1 	.word	0x08007cd1
 8007c08:	08007cd1 	.word	0x08007cd1
 8007c0c:	08007cd1 	.word	0x08007cd1
 8007c10:	08007cd1 	.word	0x08007cd1
 8007c14:	08007cd1 	.word	0x08007cd1
 8007c18:	08007cd1 	.word	0x08007cd1
 8007c1c:	08007ca9 	.word	0x08007ca9
 8007c20:	08007cd1 	.word	0x08007cd1
 8007c24:	08007cd1 	.word	0x08007cd1
 8007c28:	08007cd1 	.word	0x08007cd1
 8007c2c:	08007cd1 	.word	0x08007cd1
 8007c30:	08007cd1 	.word	0x08007cd1
 8007c34:	08007cd1 	.word	0x08007cd1
 8007c38:	08007cd1 	.word	0x08007cd1
 8007c3c:	08007cb1 	.word	0x08007cb1
 8007c40:	08007cd1 	.word	0x08007cd1
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cd1 	.word	0x08007cd1
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cd1 	.word	0x08007cd1
 8007c54:	08007cd1 	.word	0x08007cd1
 8007c58:	08007cd1 	.word	0x08007cd1
 8007c5c:	08007cb9 	.word	0x08007cb9
 8007c60:	08007cd1 	.word	0x08007cd1
 8007c64:	08007cd1 	.word	0x08007cd1
 8007c68:	08007cd1 	.word	0x08007cd1
 8007c6c:	08007cd1 	.word	0x08007cd1
 8007c70:	08007cd1 	.word	0x08007cd1
 8007c74:	08007cd1 	.word	0x08007cd1
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007cc1 	.word	0x08007cc1
 8007c80:	08007cd1 	.word	0x08007cd1
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007cd1 	.word	0x08007cd1
 8007c90:	08007cd1 	.word	0x08007cd1
 8007c94:	08007cd1 	.word	0x08007cd1
 8007c98:	08007cd1 	.word	0x08007cd1
 8007c9c:	08007cc9 	.word	0x08007cc9
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e0bc      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	e0b8      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007cb0:	2308      	movs	r3, #8
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb6:	e0b4      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007cb8:	2310      	movs	r3, #16
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	e0b0      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007cc0:	2320      	movs	r3, #32
 8007cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc6:	e0ac      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007cc8:	2340      	movs	r3, #64	@ 0x40
 8007cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cce:	e0a8      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007cd0:	2380      	movs	r3, #128	@ 0x80
 8007cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd6:	e0a4      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a8f      	ldr	r2, [pc, #572]	@ (8007f1c <UART_SetConfig+0x6a0>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d130      	bne.n	8007d44 <UART_SetConfig+0x4c8>
 8007ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8007f18 <UART_SetConfig+0x69c>)
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b05      	cmp	r3, #5
 8007cec:	d826      	bhi.n	8007d3c <UART_SetConfig+0x4c0>
 8007cee:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <UART_SetConfig+0x478>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d0d 	.word	0x08007d0d
 8007cf8:	08007d15 	.word	0x08007d15
 8007cfc:	08007d1d 	.word	0x08007d1d
 8007d00:	08007d25 	.word	0x08007d25
 8007d04:	08007d2d 	.word	0x08007d2d
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e086      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d14:	2304      	movs	r3, #4
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e082      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d1c:	2308      	movs	r3, #8
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e07e      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d24:	2310      	movs	r3, #16
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e07a      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d2c:	2320      	movs	r3, #32
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d32:	e076      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d34:	2340      	movs	r3, #64	@ 0x40
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e072      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d3c:	2380      	movs	r3, #128	@ 0x80
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e06e      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a75      	ldr	r2, [pc, #468]	@ (8007f20 <UART_SetConfig+0x6a4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d130      	bne.n	8007db0 <UART_SetConfig+0x534>
 8007d4e:	4b72      	ldr	r3, [pc, #456]	@ (8007f18 <UART_SetConfig+0x69c>)
 8007d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b05      	cmp	r3, #5
 8007d58:	d826      	bhi.n	8007da8 <UART_SetConfig+0x52c>
 8007d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d60 <UART_SetConfig+0x4e4>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007d79 	.word	0x08007d79
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d89 	.word	0x08007d89
 8007d6c:	08007d91 	.word	0x08007d91
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007da1 	.word	0x08007da1
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e050      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d80:	2304      	movs	r3, #4
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e04c      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d88:	2308      	movs	r3, #8
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e048      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d90:	2310      	movs	r3, #16
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e044      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007d98:	2320      	movs	r3, #32
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9e:	e040      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007da0:	2340      	movs	r3, #64	@ 0x40
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e03c      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007da8:	2380      	movs	r3, #128	@ 0x80
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dae:	e038      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a5b      	ldr	r2, [pc, #364]	@ (8007f24 <UART_SetConfig+0x6a8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d130      	bne.n	8007e1c <UART_SetConfig+0x5a0>
 8007dba:	4b57      	ldr	r3, [pc, #348]	@ (8007f18 <UART_SetConfig+0x69c>)
 8007dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	2b05      	cmp	r3, #5
 8007dc4:	d826      	bhi.n	8007e14 <UART_SetConfig+0x598>
 8007dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dcc <UART_SetConfig+0x550>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007de5 	.word	0x08007de5
 8007dd0:	08007ded 	.word	0x08007ded
 8007dd4:	08007df5 	.word	0x08007df5
 8007dd8:	08007dfd 	.word	0x08007dfd
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	2302      	movs	r3, #2
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e01a      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007dec:	2304      	movs	r3, #4
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e016      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007df4:	2308      	movs	r3, #8
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e012      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e00e      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007e04:	2320      	movs	r3, #32
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	e00a      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007e0c:	2340      	movs	r3, #64	@ 0x40
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e006      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007e14:	2380      	movs	r3, #128	@ 0x80
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	e002      	b.n	8007e22 <UART_SetConfig+0x5a6>
 8007e1c:	2380      	movs	r3, #128	@ 0x80
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a3f      	ldr	r2, [pc, #252]	@ (8007f24 <UART_SetConfig+0x6a8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	f040 80f8 	bne.w	800801e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	dc46      	bgt.n	8007ec4 <UART_SetConfig+0x648>
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	f2c0 8082 	blt.w	8007f40 <UART_SetConfig+0x6c4>
 8007e3c:	3b02      	subs	r3, #2
 8007e3e:	2b1e      	cmp	r3, #30
 8007e40:	d87e      	bhi.n	8007f40 <UART_SetConfig+0x6c4>
 8007e42:	a201      	add	r2, pc, #4	@ (adr r2, 8007e48 <UART_SetConfig+0x5cc>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007ecb 	.word	0x08007ecb
 8007e4c:	08007f41 	.word	0x08007f41
 8007e50:	08007ed3 	.word	0x08007ed3
 8007e54:	08007f41 	.word	0x08007f41
 8007e58:	08007f41 	.word	0x08007f41
 8007e5c:	08007f41 	.word	0x08007f41
 8007e60:	08007ee3 	.word	0x08007ee3
 8007e64:	08007f41 	.word	0x08007f41
 8007e68:	08007f41 	.word	0x08007f41
 8007e6c:	08007f41 	.word	0x08007f41
 8007e70:	08007f41 	.word	0x08007f41
 8007e74:	08007f41 	.word	0x08007f41
 8007e78:	08007f41 	.word	0x08007f41
 8007e7c:	08007f41 	.word	0x08007f41
 8007e80:	08007ef3 	.word	0x08007ef3
 8007e84:	08007f41 	.word	0x08007f41
 8007e88:	08007f41 	.word	0x08007f41
 8007e8c:	08007f41 	.word	0x08007f41
 8007e90:	08007f41 	.word	0x08007f41
 8007e94:	08007f41 	.word	0x08007f41
 8007e98:	08007f41 	.word	0x08007f41
 8007e9c:	08007f41 	.word	0x08007f41
 8007ea0:	08007f41 	.word	0x08007f41
 8007ea4:	08007f41 	.word	0x08007f41
 8007ea8:	08007f41 	.word	0x08007f41
 8007eac:	08007f41 	.word	0x08007f41
 8007eb0:	08007f41 	.word	0x08007f41
 8007eb4:	08007f41 	.word	0x08007f41
 8007eb8:	08007f41 	.word	0x08007f41
 8007ebc:	08007f41 	.word	0x08007f41
 8007ec0:	08007f33 	.word	0x08007f33
 8007ec4:	2b40      	cmp	r3, #64	@ 0x40
 8007ec6:	d037      	beq.n	8007f38 <UART_SetConfig+0x6bc>
 8007ec8:	e03a      	b.n	8007f40 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007eca:	f7fe fc23 	bl	8006714 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ece:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ed0:	e03c      	b.n	8007f4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fc32 	bl	8006740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee0:	e034      	b.n	8007f4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ee2:	f107 0318 	add.w	r3, r7, #24
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fd7e 	bl	80069e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef0:	e02c      	b.n	8007f4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ef2:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <UART_SetConfig+0x69c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d016      	beq.n	8007f2c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007efe:	4b06      	ldr	r3, [pc, #24]	@ (8007f18 <UART_SetConfig+0x69c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	08db      	lsrs	r3, r3, #3
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	4a07      	ldr	r2, [pc, #28]	@ (8007f28 <UART_SetConfig+0x6ac>)
 8007f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f10:	e01c      	b.n	8007f4c <UART_SetConfig+0x6d0>
 8007f12:	bf00      	nop
 8007f14:	40011400 	.word	0x40011400
 8007f18:	58024400 	.word	0x58024400
 8007f1c:	40007800 	.word	0x40007800
 8007f20:	40007c00 	.word	0x40007c00
 8007f24:	58000c00 	.word	0x58000c00
 8007f28:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007f2c:	4b9d      	ldr	r3, [pc, #628]	@ (80081a4 <UART_SetConfig+0x928>)
 8007f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f30:	e00c      	b.n	8007f4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f32:	4b9d      	ldr	r3, [pc, #628]	@ (80081a8 <UART_SetConfig+0x92c>)
 8007f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f36:	e009      	b.n	8007f4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f3e:	e005      	b.n	8007f4c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 81de 	beq.w	8008310 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	4a94      	ldr	r2, [pc, #592]	@ (80081ac <UART_SetConfig+0x930>)
 8007f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f66:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	4413      	add	r3, r2
 8007f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d305      	bcc.n	8007f84 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d903      	bls.n	8007f8c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f8a:	e1c1      	b.n	8008310 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f8e:	2200      	movs	r2, #0
 8007f90:	60bb      	str	r3, [r7, #8]
 8007f92:	60fa      	str	r2, [r7, #12]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f98:	4a84      	ldr	r2, [pc, #528]	@ (80081ac <UART_SetConfig+0x930>)
 8007f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	607a      	str	r2, [r7, #4]
 8007fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fae:	f7f8 fbbb 	bl	8000728 <__aeabi_uldivmod>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	4619      	mov	r1, r3
 8007fba:	f04f 0200 	mov.w	r2, #0
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	020b      	lsls	r3, r1, #8
 8007fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fc8:	0202      	lsls	r2, r0, #8
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	6849      	ldr	r1, [r1, #4]
 8007fce:	0849      	lsrs	r1, r1, #1
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	eb12 0804 	adds.w	r8, r2, r4
 8007fda:	eb43 0905 	adc.w	r9, r3, r5
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	469a      	mov	sl, r3
 8007fe6:	4693      	mov	fp, r2
 8007fe8:	4652      	mov	r2, sl
 8007fea:	465b      	mov	r3, fp
 8007fec:	4640      	mov	r0, r8
 8007fee:	4649      	mov	r1, r9
 8007ff0:	f7f8 fb9a 	bl	8000728 <__aeabi_uldivmod>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008002:	d308      	bcc.n	8008016 <UART_SetConfig+0x79a>
 8008004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800800a:	d204      	bcs.n	8008016 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008012:	60da      	str	r2, [r3, #12]
 8008014:	e17c      	b.n	8008310 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800801c:	e178      	b.n	8008310 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008026:	f040 80c5 	bne.w	80081b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800802a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800802e:	2b20      	cmp	r3, #32
 8008030:	dc48      	bgt.n	80080c4 <UART_SetConfig+0x848>
 8008032:	2b00      	cmp	r3, #0
 8008034:	db7b      	blt.n	800812e <UART_SetConfig+0x8b2>
 8008036:	2b20      	cmp	r3, #32
 8008038:	d879      	bhi.n	800812e <UART_SetConfig+0x8b2>
 800803a:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <UART_SetConfig+0x7c4>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	080080cb 	.word	0x080080cb
 8008044:	080080d3 	.word	0x080080d3
 8008048:	0800812f 	.word	0x0800812f
 800804c:	0800812f 	.word	0x0800812f
 8008050:	080080db 	.word	0x080080db
 8008054:	0800812f 	.word	0x0800812f
 8008058:	0800812f 	.word	0x0800812f
 800805c:	0800812f 	.word	0x0800812f
 8008060:	080080eb 	.word	0x080080eb
 8008064:	0800812f 	.word	0x0800812f
 8008068:	0800812f 	.word	0x0800812f
 800806c:	0800812f 	.word	0x0800812f
 8008070:	0800812f 	.word	0x0800812f
 8008074:	0800812f 	.word	0x0800812f
 8008078:	0800812f 	.word	0x0800812f
 800807c:	0800812f 	.word	0x0800812f
 8008080:	080080fb 	.word	0x080080fb
 8008084:	0800812f 	.word	0x0800812f
 8008088:	0800812f 	.word	0x0800812f
 800808c:	0800812f 	.word	0x0800812f
 8008090:	0800812f 	.word	0x0800812f
 8008094:	0800812f 	.word	0x0800812f
 8008098:	0800812f 	.word	0x0800812f
 800809c:	0800812f 	.word	0x0800812f
 80080a0:	0800812f 	.word	0x0800812f
 80080a4:	0800812f 	.word	0x0800812f
 80080a8:	0800812f 	.word	0x0800812f
 80080ac:	0800812f 	.word	0x0800812f
 80080b0:	0800812f 	.word	0x0800812f
 80080b4:	0800812f 	.word	0x0800812f
 80080b8:	0800812f 	.word	0x0800812f
 80080bc:	0800812f 	.word	0x0800812f
 80080c0:	08008121 	.word	0x08008121
 80080c4:	2b40      	cmp	r3, #64	@ 0x40
 80080c6:	d02e      	beq.n	8008126 <UART_SetConfig+0x8aa>
 80080c8:	e031      	b.n	800812e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ca:	f7fd f8ed 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 80080ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080d0:	e033      	b.n	800813a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d2:	f7fd f8ff 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 80080d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080d8:	e02f      	b.n	800813a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fb2e 	bl	8006740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e8:	e027      	b.n	800813a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ea:	f107 0318 	add.w	r3, r7, #24
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fc7a 	bl	80069e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f8:	e01f      	b.n	800813a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080fa:	4b2d      	ldr	r3, [pc, #180]	@ (80081b0 <UART_SetConfig+0x934>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008106:	4b2a      	ldr	r3, [pc, #168]	@ (80081b0 <UART_SetConfig+0x934>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	08db      	lsrs	r3, r3, #3
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	4a24      	ldr	r2, [pc, #144]	@ (80081a4 <UART_SetConfig+0x928>)
 8008112:	fa22 f303 	lsr.w	r3, r2, r3
 8008116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008118:	e00f      	b.n	800813a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800811a:	4b22      	ldr	r3, [pc, #136]	@ (80081a4 <UART_SetConfig+0x928>)
 800811c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800811e:	e00c      	b.n	800813a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008120:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <UART_SetConfig+0x92c>)
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008124:	e009      	b.n	800813a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800812a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812c:	e005      	b.n	800813a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800813a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80e7 	beq.w	8008310 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008146:	4a19      	ldr	r2, [pc, #100]	@ (80081ac <UART_SetConfig+0x930>)
 8008148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800814c:	461a      	mov	r2, r3
 800814e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008150:	fbb3 f3f2 	udiv	r3, r3, r2
 8008154:	005a      	lsls	r2, r3, #1
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	085b      	lsrs	r3, r3, #1
 800815c:	441a      	add	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	fbb2 f3f3 	udiv	r3, r2, r3
 8008166:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816a:	2b0f      	cmp	r3, #15
 800816c:	d916      	bls.n	800819c <UART_SetConfig+0x920>
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008174:	d212      	bcs.n	800819c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008178:	b29b      	uxth	r3, r3
 800817a:	f023 030f 	bic.w	r3, r3, #15
 800817e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008182:	085b      	lsrs	r3, r3, #1
 8008184:	b29b      	uxth	r3, r3
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	b29a      	uxth	r2, r3
 800818c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800818e:	4313      	orrs	r3, r2
 8008190:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	e0b9      	b.n	8008310 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081a2:	e0b5      	b.n	8008310 <UART_SetConfig+0xa94>
 80081a4:	03d09000 	.word	0x03d09000
 80081a8:	003d0900 	.word	0x003d0900
 80081ac:	080116d0 	.word	0x080116d0
 80081b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80081b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	dc49      	bgt.n	8008250 <UART_SetConfig+0x9d4>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	db7c      	blt.n	80082ba <UART_SetConfig+0xa3e>
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d87a      	bhi.n	80082ba <UART_SetConfig+0xa3e>
 80081c4:	a201      	add	r2, pc, #4	@ (adr r2, 80081cc <UART_SetConfig+0x950>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	08008257 	.word	0x08008257
 80081d0:	0800825f 	.word	0x0800825f
 80081d4:	080082bb 	.word	0x080082bb
 80081d8:	080082bb 	.word	0x080082bb
 80081dc:	08008267 	.word	0x08008267
 80081e0:	080082bb 	.word	0x080082bb
 80081e4:	080082bb 	.word	0x080082bb
 80081e8:	080082bb 	.word	0x080082bb
 80081ec:	08008277 	.word	0x08008277
 80081f0:	080082bb 	.word	0x080082bb
 80081f4:	080082bb 	.word	0x080082bb
 80081f8:	080082bb 	.word	0x080082bb
 80081fc:	080082bb 	.word	0x080082bb
 8008200:	080082bb 	.word	0x080082bb
 8008204:	080082bb 	.word	0x080082bb
 8008208:	080082bb 	.word	0x080082bb
 800820c:	08008287 	.word	0x08008287
 8008210:	080082bb 	.word	0x080082bb
 8008214:	080082bb 	.word	0x080082bb
 8008218:	080082bb 	.word	0x080082bb
 800821c:	080082bb 	.word	0x080082bb
 8008220:	080082bb 	.word	0x080082bb
 8008224:	080082bb 	.word	0x080082bb
 8008228:	080082bb 	.word	0x080082bb
 800822c:	080082bb 	.word	0x080082bb
 8008230:	080082bb 	.word	0x080082bb
 8008234:	080082bb 	.word	0x080082bb
 8008238:	080082bb 	.word	0x080082bb
 800823c:	080082bb 	.word	0x080082bb
 8008240:	080082bb 	.word	0x080082bb
 8008244:	080082bb 	.word	0x080082bb
 8008248:	080082bb 	.word	0x080082bb
 800824c:	080082ad 	.word	0x080082ad
 8008250:	2b40      	cmp	r3, #64	@ 0x40
 8008252:	d02e      	beq.n	80082b2 <UART_SetConfig+0xa36>
 8008254:	e031      	b.n	80082ba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008256:	f7fd f827 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 800825a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800825c:	e033      	b.n	80082c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800825e:	f7fd f839 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 8008262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008264:	e02f      	b.n	80082c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fa68 	bl	8006740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008274:	e027      	b.n	80082c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008276:	f107 0318 	add.w	r3, r7, #24
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fbb4 	bl	80069e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008284:	e01f      	b.n	80082c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008286:	4b2d      	ldr	r3, [pc, #180]	@ (800833c <UART_SetConfig+0xac0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008292:	4b2a      	ldr	r3, [pc, #168]	@ (800833c <UART_SetConfig+0xac0>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	08db      	lsrs	r3, r3, #3
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	4a28      	ldr	r2, [pc, #160]	@ (8008340 <UART_SetConfig+0xac4>)
 800829e:	fa22 f303 	lsr.w	r3, r2, r3
 80082a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082a4:	e00f      	b.n	80082c6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80082a6:	4b26      	ldr	r3, [pc, #152]	@ (8008340 <UART_SetConfig+0xac4>)
 80082a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082aa:	e00c      	b.n	80082c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082ac:	4b25      	ldr	r3, [pc, #148]	@ (8008344 <UART_SetConfig+0xac8>)
 80082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b0:	e009      	b.n	80082c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b8:	e005      	b.n	80082c6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082c4:	bf00      	nop
    }

    if (pclk != 0U)
 80082c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d021      	beq.n	8008310 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008348 <UART_SetConfig+0xacc>)
 80082d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d6:	461a      	mov	r2, r3
 80082d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082da:	fbb3 f2f2 	udiv	r2, r3, r2
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	441a      	add	r2, r3
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f2:	2b0f      	cmp	r3, #15
 80082f4:	d909      	bls.n	800830a <UART_SetConfig+0xa8e>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082fc:	d205      	bcs.n	800830a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008300:	b29a      	uxth	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60da      	str	r2, [r3, #12]
 8008308:	e002      	b.n	8008310 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2201      	movs	r2, #1
 8008314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2201      	movs	r2, #1
 800831c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2200      	movs	r2, #0
 8008324:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2200      	movs	r2, #0
 800832a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800832c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008330:	4618      	mov	r0, r3
 8008332:	3748      	adds	r7, #72	@ 0x48
 8008334:	46bd      	mov	sp, r7
 8008336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800833a:	bf00      	nop
 800833c:	58024400 	.word	0x58024400
 8008340:	03d09000 	.word	0x03d09000
 8008344:	003d0900 	.word	0x003d0900
 8008348:	080116d0 	.word	0x080116d0

0800834c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083be:	f003 0304 	and.w	r3, r3, #4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01a      	beq.n	8008462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800844a:	d10a      	bne.n	8008462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	605a      	str	r2, [r3, #4]
  }
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b098      	sub	sp, #96	@ 0x60
 8008494:	af02      	add	r7, sp, #8
 8008496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084a0:	f7f9 fb6e 	bl	8001b80 <HAL_GetTick>
 80084a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d12f      	bne.n	8008514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084bc:	2200      	movs	r2, #0
 80084be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f88e 	bl	80085e4 <UART_WaitOnFlagUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d022      	beq.n	8008514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e063      	b.n	80085dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b04      	cmp	r3, #4
 8008520:	d149      	bne.n	80085b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008522:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800852a:	2200      	movs	r2, #0
 800852c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f857 	bl	80085e4 <UART_WaitOnFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d03c      	beq.n	80085b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	623b      	str	r3, [r7, #32]
   return(result);
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800855a:	633b      	str	r3, [r7, #48]	@ 0x30
 800855c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e6      	bne.n	800853c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3308      	adds	r3, #8
 8008574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	60fb      	str	r3, [r7, #12]
   return(result);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800858e:	61fa      	str	r2, [r7, #28]
 8008590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	69b9      	ldr	r1, [r7, #24]
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	617b      	str	r3, [r7, #20]
   return(result);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e5      	bne.n	800856e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e012      	b.n	80085dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3758      	adds	r7, #88	@ 0x58
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	4613      	mov	r3, r2
 80085f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f4:	e04f      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fc:	d04b      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fe:	f7f9 fabf 	bl	8001b80 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	429a      	cmp	r2, r3
 800860c:	d302      	bcc.n	8008614 <UART_WaitOnFlagUntilTimeout+0x30>
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e04e      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0304 	and.w	r3, r3, #4
 8008622:	2b00      	cmp	r3, #0
 8008624:	d037      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b80      	cmp	r3, #128	@ 0x80
 800862a:	d034      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b40      	cmp	r3, #64	@ 0x40
 8008630:	d031      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f003 0308 	and.w	r3, r3, #8
 800863c:	2b08      	cmp	r3, #8
 800863e:	d110      	bne.n	8008662 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2208      	movs	r2, #8
 8008646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f95b 	bl	8008904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2208      	movs	r2, #8
 8008652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e029      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800866c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008670:	d111      	bne.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800867a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f941 	bl	8008904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e00f      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4013      	ands	r3, r2
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	bf0c      	ite	eq
 80086a6:	2301      	moveq	r3, #1
 80086a8:	2300      	movne	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d0a0      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b0a3      	sub	sp, #140	@ 0x8c
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	88fa      	ldrh	r2, [r7, #6]
 80086d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	88fa      	ldrh	r2, [r7, #6]
 80086e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f2:	d10e      	bne.n	8008712 <UART_Start_Receive_IT+0x52>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d105      	bne.n	8008708 <UART_Start_Receive_IT+0x48>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008702:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008706:	e02d      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	22ff      	movs	r2, #255	@ 0xff
 800870c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008710:	e028      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10d      	bne.n	8008736 <UART_Start_Receive_IT+0x76>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d104      	bne.n	800872c <UART_Start_Receive_IT+0x6c>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	22ff      	movs	r2, #255	@ 0xff
 8008726:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800872a:	e01b      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	227f      	movs	r2, #127	@ 0x7f
 8008730:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008734:	e016      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800873e:	d10d      	bne.n	800875c <UART_Start_Receive_IT+0x9c>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d104      	bne.n	8008752 <UART_Start_Receive_IT+0x92>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	227f      	movs	r2, #127	@ 0x7f
 800874c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008750:	e008      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	223f      	movs	r2, #63	@ 0x3f
 8008756:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800875a:	e003      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2222      	movs	r2, #34	@ 0x22
 8008770:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008798:	673a      	str	r2, [r7, #112]	@ 0x70
 800879a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800879e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80087a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e3      	bne.n	8008774 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b4:	d14f      	bne.n	8008856 <UART_Start_Receive_IT+0x196>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80087bc:	88fa      	ldrh	r2, [r7, #6]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d349      	bcc.n	8008856 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ca:	d107      	bne.n	80087dc <UART_Start_Receive_IT+0x11c>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d103      	bne.n	80087dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a47      	ldr	r2, [pc, #284]	@ (80088f4 <UART_Start_Receive_IT+0x234>)
 80087d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80087da:	e002      	b.n	80087e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4a46      	ldr	r2, [pc, #280]	@ (80088f8 <UART_Start_Receive_IT+0x238>)
 80087e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d01a      	beq.n	8008820 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087f2:	e853 3f00 	ldrex	r3, [r3]
 80087f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800880c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800880e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008812:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008814:	e841 2300 	strex	r3, r2, [r1]
 8008818:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800881a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e4      	bne.n	80087ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3308      	adds	r3, #8
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008836:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3308      	adds	r3, #8
 800883e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008840:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008842:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800884e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e5      	bne.n	8008820 <UART_Start_Receive_IT+0x160>
 8008854:	e046      	b.n	80088e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800885e:	d107      	bne.n	8008870 <UART_Start_Receive_IT+0x1b0>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a24      	ldr	r2, [pc, #144]	@ (80088fc <UART_Start_Receive_IT+0x23c>)
 800886c:	675a      	str	r2, [r3, #116]	@ 0x74
 800886e:	e002      	b.n	8008876 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4a23      	ldr	r2, [pc, #140]	@ (8008900 <UART_Start_Receive_IT+0x240>)
 8008874:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d019      	beq.n	80088b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008892:	677b      	str	r3, [r7, #116]	@ 0x74
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
 800889e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e6      	bne.n	800887e <UART_Start_Receive_IT+0x1be>
 80088b0:	e018      	b.n	80088e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	613b      	str	r3, [r7, #16]
   return(result);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f043 0320 	orr.w	r3, r3, #32
 80088c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088d0:	623b      	str	r3, [r7, #32]
 80088d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	69f9      	ldr	r1, [r7, #28]
 80088d6:	6a3a      	ldr	r2, [r7, #32]
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e6      	bne.n	80088b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	378c      	adds	r7, #140	@ 0x8c
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	08009121 	.word	0x08009121
 80088f8:	08008dbd 	.word	0x08008dbd
 80088fc:	08008c05 	.word	0x08008c05
 8008900:	08008a4d 	.word	0x08008a4d

08008904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b095      	sub	sp, #84	@ 0x54
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800892a:	643b      	str	r3, [r7, #64]	@ 0x40
 800892c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e6      	bne.n	800890c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	61fb      	str	r3, [r7, #28]
   return(result);
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	4b1e      	ldr	r3, [pc, #120]	@ (80089cc <UART_EndRxTransfer+0xc8>)
 8008952:	4013      	ands	r3, r2
 8008954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800895e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e5      	bne.n	800893e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008976:	2b01      	cmp	r3, #1
 8008978:	d118      	bne.n	80089ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	60bb      	str	r3, [r7, #8]
   return(result);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f023 0310 	bic.w	r3, r3, #16
 800898e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6979      	ldr	r1, [r7, #20]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	613b      	str	r3, [r7, #16]
   return(result);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e6      	bne.n	800897a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089c0:	bf00      	nop
 80089c2:	3754      	adds	r7, #84	@ 0x54
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	effffffe 	.word	0xeffffffe

080089d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f7fe ff32 	bl	8007850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ec:	bf00      	nop
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a10:	61fb      	str	r3, [r7, #28]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	61bb      	str	r3, [r7, #24]
 8008a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6979      	ldr	r1, [r7, #20]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	613b      	str	r3, [r7, #16]
   return(result);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e6      	bne.n	80089fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7fe fefd 	bl	800783c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a42:	bf00      	nop
 8008a44:	3720      	adds	r7, #32
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b09c      	sub	sp, #112	@ 0x70
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a64:	2b22      	cmp	r3, #34	@ 0x22
 8008a66:	f040 80be 	bne.w	8008be6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a78:	b2d9      	uxtb	r1, r3
 8008a7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a84:	400a      	ands	r2, r1
 8008a86:	b2d2      	uxtb	r2, r2
 8008a88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f040 80a1 	bne.w	8008bf6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ad4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ad8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e6      	bne.n	8008ab4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af8:	f023 0301 	bic.w	r3, r3, #1
 8008afc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3308      	adds	r3, #8
 8008b04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b06:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e5      	bne.n	8008ae6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a33      	ldr	r2, [pc, #204]	@ (8008c00 <UART_RxISR_8BIT+0x1b4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d01f      	beq.n	8008b78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d018      	beq.n	8008b78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	623b      	str	r3, [r7, #32]
   return(result);
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e6      	bne.n	8008b46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d12e      	bne.n	8008bde <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0310 	bic.w	r3, r3, #16
 8008b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ba4:	61fb      	str	r3, [r7, #28]
 8008ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	69b9      	ldr	r1, [r7, #24]
 8008baa:	69fa      	ldr	r2, [r7, #28]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e6      	bne.n	8008b86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f003 0310 	and.w	r3, r3, #16
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d103      	bne.n	8008bce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2210      	movs	r2, #16
 8008bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7fe fe44 	bl	8007864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bdc:	e00b      	b.n	8008bf6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7f8 faf4 	bl	80011cc <HAL_UART_RxCpltCallback>
}
 8008be4:	e007      	b.n	8008bf6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f042 0208 	orr.w	r2, r2, #8
 8008bf4:	619a      	str	r2, [r3, #24]
}
 8008bf6:	bf00      	nop
 8008bf8:	3770      	adds	r7, #112	@ 0x70
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	58000c00 	.word	0x58000c00

08008c04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b09c      	sub	sp, #112	@ 0x70
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c1c:	2b22      	cmp	r3, #34	@ 0x22
 8008c1e:	f040 80be 	bne.w	8008d9e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c30:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008c36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c46:	1c9a      	adds	r2, r3, #2
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f040 80a1 	bne.w	8008dae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c8c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e6      	bne.n	8008c6c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	f023 0301 	bic.w	r3, r3, #1
 8008cb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cbe:	643a      	str	r2, [r7, #64]	@ 0x40
 8008cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cc6:	e841 2300 	strex	r3, r2, [r1]
 8008cca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1e5      	bne.n	8008c9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a33      	ldr	r2, [pc, #204]	@ (8008db8 <UART_RxISR_16BIT+0x1b4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d01f      	beq.n	8008d30 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d018      	beq.n	8008d30 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e6      	bne.n	8008cfe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d12e      	bne.n	8008d96 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f023 0310 	bic.w	r3, r3, #16
 8008d52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d5c:	61bb      	str	r3, [r7, #24]
 8008d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6979      	ldr	r1, [r7, #20]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e6      	bne.n	8008d3e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	2b10      	cmp	r3, #16
 8008d7c:	d103      	bne.n	8008d86 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2210      	movs	r2, #16
 8008d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fe fd68 	bl	8007864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d94:	e00b      	b.n	8008dae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7f8 fa18 	bl	80011cc <HAL_UART_RxCpltCallback>
}
 8008d9c:	e007      	b.n	8008dae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699a      	ldr	r2, [r3, #24]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0208 	orr.w	r2, r2, #8
 8008dac:	619a      	str	r2, [r3, #24]
}
 8008dae:	bf00      	nop
 8008db0:	3770      	adds	r7, #112	@ 0x70
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	58000c00 	.word	0x58000c00

08008dbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b0ac      	sub	sp, #176	@ 0xb0
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008df2:	2b22      	cmp	r3, #34	@ 0x22
 8008df4:	f040 8181 	bne.w	80090fa <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008dfe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e02:	e124      	b.n	800904e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e0e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008e12:	b2d9      	uxtb	r1, r3
 8008e14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e1e:	400a      	ands	r2, r1
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d053      	beq.n	8008efe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d011      	beq.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2201      	movs	r2, #1
 8008e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e7c:	f043 0201 	orr.w	r2, r3, #1
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d011      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eac:	f043 0204 	orr.w	r2, r3, #4
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d011      	beq.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008edc:	f043 0202 	orr.w	r2, r3, #2
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d006      	beq.n	8008efe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7fe fcad 	bl	8007850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f040 80a1 	bne.w	800904e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f30:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008f34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e4      	bne.n	8008f0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f54:	4b6f      	ldr	r3, [pc, #444]	@ (8009114 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3308      	adds	r3, #8
 8008f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f66:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008f68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e3      	bne.n	8008f42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a61      	ldr	r2, [pc, #388]	@ (8009118 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d021      	beq.n	8008fdc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01a      	beq.n	8008fdc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fae:	e853 3f00 	ldrex	r3, [r3]
 8008fb2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e4      	bne.n	8008fa6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d130      	bne.n	8009046 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffa:	f023 0310 	bic.w	r3, r3, #16
 8008ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800900c:	643b      	str	r3, [r7, #64]	@ 0x40
 800900e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009012:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800901a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e4      	bne.n	8008fea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	f003 0310 	and.w	r3, r3, #16
 800902a:	2b10      	cmp	r3, #16
 800902c:	d103      	bne.n	8009036 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2210      	movs	r2, #16
 8009034:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7fe fc10 	bl	8007864 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009044:	e00e      	b.n	8009064 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7f8 f8c0 	bl	80011cc <HAL_UART_RxCpltCallback>
        break;
 800904c:	e00a      	b.n	8009064 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800904e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009052:	2b00      	cmp	r3, #0
 8009054:	d006      	beq.n	8009064 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8009056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	f47f aed0 	bne.w	8008e04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800906a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800906e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009072:	2b00      	cmp	r3, #0
 8009074:	d049      	beq.n	800910a <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800907c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009080:	429a      	cmp	r2, r3
 8009082:	d242      	bcs.n	800910a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3308      	adds	r3, #8
 800908a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	61fb      	str	r3, [r7, #28]
   return(result);
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800909a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80090a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e3      	bne.n	8009084 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a17      	ldr	r2, [pc, #92]	@ (800911c <UART_RxISR_8BIT_FIFOEN+0x360>)
 80090c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f043 0320 	orr.w	r3, r3, #32
 80090d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6979      	ldr	r1, [r7, #20]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	613b      	str	r3, [r7, #16]
   return(result);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e4      	bne.n	80090c2 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090f8:	e007      	b.n	800910a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	699a      	ldr	r2, [r3, #24]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f042 0208 	orr.w	r2, r2, #8
 8009108:	619a      	str	r2, [r3, #24]
}
 800910a:	bf00      	nop
 800910c:	37b0      	adds	r7, #176	@ 0xb0
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	effffffe 	.word	0xeffffffe
 8009118:	58000c00 	.word	0x58000c00
 800911c:	08008a4d 	.word	0x08008a4d

08009120 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b0ae      	sub	sp, #184	@ 0xb8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800912e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009156:	2b22      	cmp	r3, #34	@ 0x22
 8009158:	f040 8185 	bne.w	8009466 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009162:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009166:	e128      	b.n	80093ba <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800917a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800917e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009182:	4013      	ands	r3, r2
 8009184:	b29a      	uxth	r2, r3
 8009186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800918a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009190:	1c9a      	adds	r2, r3, #2
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800919c:	b29b      	uxth	r3, r3
 800919e:	3b01      	subs	r3, #1
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d053      	beq.n	8009266 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d011      	beq.n	80091ee <UART_RxISR_16BIT_FIFOEN+0xce>
 80091ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2201      	movs	r2, #1
 80091dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e4:	f043 0201 	orr.w	r2, r3, #1
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d011      	beq.n	800921e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80091fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00b      	beq.n	800921e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2202      	movs	r2, #2
 800920c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009214:	f043 0204 	orr.w	r2, r3, #4
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800921e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	d011      	beq.n	800924e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800922a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00b      	beq.n	800924e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2204      	movs	r2, #4
 800923c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009244:	f043 0202 	orr.w	r2, r3, #2
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009254:	2b00      	cmp	r3, #0
 8009256:	d006      	beq.n	8009266 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7fe faf9 	bl	8007850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	f040 80a3 	bne.w	80093ba <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009296:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800929a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800929e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e2      	bne.n	8009274 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3308      	adds	r3, #8
 80092b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092c0:	4b6f      	ldr	r3, [pc, #444]	@ (8009480 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3308      	adds	r3, #8
 80092ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80092d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e3      	bne.n	80092ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a61      	ldr	r2, [pc, #388]	@ (8009484 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d021      	beq.n	8009348 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01a      	beq.n	8009348 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009322:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009334:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009336:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800933a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e4      	bne.n	8009312 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800934c:	2b01      	cmp	r3, #1
 800934e:	d130      	bne.n	80093b2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009366:	f023 0310 	bic.w	r3, r3, #16
 800936a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009378:	647b      	str	r3, [r7, #68]	@ 0x44
 800937a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800937e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e4      	bne.n	8009356 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	f003 0310 	and.w	r3, r3, #16
 8009396:	2b10      	cmp	r3, #16
 8009398:	d103      	bne.n	80093a2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2210      	movs	r2, #16
 80093a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7fe fa5a 	bl	8007864 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80093b0:	e00e      	b.n	80093d0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7f7 ff0a 	bl	80011cc <HAL_UART_RxCpltCallback>
        break;
 80093b8:	e00a      	b.n	80093d0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093ba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d006      	beq.n	80093d0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 80093c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f47f aecc 	bne.w	8009168 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093d6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d049      	beq.n	8009476 <UART_RxISR_16BIT_FIFOEN+0x356>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093e8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d242      	bcs.n	8009476 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3308      	adds	r3, #8
 80093f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	623b      	str	r3, [r7, #32]
   return(result);
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009406:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3308      	adds	r3, #8
 8009410:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009414:	633a      	str	r2, [r7, #48]	@ 0x30
 8009416:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800941a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e3      	bne.n	80093f0 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a17      	ldr	r2, [pc, #92]	@ (8009488 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800942c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	60fb      	str	r3, [r7, #12]
   return(result);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f043 0320 	orr.w	r3, r3, #32
 8009442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009450:	61fb      	str	r3, [r7, #28]
 8009452:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	69b9      	ldr	r1, [r7, #24]
 8009456:	69fa      	ldr	r2, [r7, #28]
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	617b      	str	r3, [r7, #20]
   return(result);
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e4      	bne.n	800942e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009464:	e007      	b.n	8009476 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699a      	ldr	r2, [r3, #24]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f042 0208 	orr.w	r2, r2, #8
 8009474:	619a      	str	r2, [r3, #24]
}
 8009476:	bf00      	nop
 8009478:	37b8      	adds	r7, #184	@ 0xb8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	effffffe 	.word	0xeffffffe
 8009484:	58000c00 	.word	0x58000c00
 8009488:	08008c05 	.word	0x08008c05

0800948c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_UARTEx_DisableFifoMode+0x16>
 80094da:	2302      	movs	r3, #2
 80094dc:	e027      	b.n	800952e <HAL_UARTEx_DisableFifoMode+0x66>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2224      	movs	r2, #36	@ 0x24
 80094ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0201 	bic.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800950c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800954e:	2302      	movs	r3, #2
 8009550:	e02d      	b.n	80095ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2224      	movs	r2, #36	@ 0x24
 800955e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0201 	bic.w	r2, r2, #1
 8009578:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f850 	bl	8009634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d101      	bne.n	80095ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e02d      	b.n	800962a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2224      	movs	r2, #36	@ 0x24
 80095da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0201 	bic.w	r2, r2, #1
 80095f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f812 	bl	8009634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2220      	movs	r2, #32
 800961c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009640:	2b00      	cmp	r3, #0
 8009642:	d108      	bne.n	8009656 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009654:	e031      	b.n	80096ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009656:	2310      	movs	r3, #16
 8009658:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800965a:	2310      	movs	r3, #16
 800965c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	0e5b      	lsrs	r3, r3, #25
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	0f5b      	lsrs	r3, r3, #29
 8009676:	b2db      	uxtb	r3, r3
 8009678:	f003 0307 	and.w	r3, r3, #7
 800967c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	7b3a      	ldrb	r2, [r7, #12]
 8009682:	4911      	ldr	r1, [pc, #68]	@ (80096c8 <UARTEx_SetNbDataToProcess+0x94>)
 8009684:	5c8a      	ldrb	r2, [r1, r2]
 8009686:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800968a:	7b3a      	ldrb	r2, [r7, #12]
 800968c:	490f      	ldr	r1, [pc, #60]	@ (80096cc <UARTEx_SetNbDataToProcess+0x98>)
 800968e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009690:	fb93 f3f2 	sdiv	r3, r3, r2
 8009694:	b29a      	uxth	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800969c:	7bfb      	ldrb	r3, [r7, #15]
 800969e:	7b7a      	ldrb	r2, [r7, #13]
 80096a0:	4909      	ldr	r1, [pc, #36]	@ (80096c8 <UARTEx_SetNbDataToProcess+0x94>)
 80096a2:	5c8a      	ldrb	r2, [r1, r2]
 80096a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096a8:	7b7a      	ldrb	r2, [r7, #13]
 80096aa:	4908      	ldr	r1, [pc, #32]	@ (80096cc <UARTEx_SetNbDataToProcess+0x98>)
 80096ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096ba:	bf00      	nop
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	080116e8 	.word	0x080116e8
 80096cc:	080116f0 	.word	0x080116f0

080096d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096d0:	b084      	sub	sp, #16
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	f107 001c 	add.w	r0, r7, #28
 80096de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d121      	bne.n	800972e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	4b2c      	ldr	r3, [pc, #176]	@ (80097ac <USB_CoreInit+0xdc>)
 80096fc:	4013      	ands	r3, r2
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800970e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009712:	2b01      	cmp	r3, #1
 8009714:	d105      	bne.n	8009722 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f001 fafa 	bl	800ad1c <USB_CoreReset>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
 800972c:	e01b      	b.n	8009766 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f001 faee 	bl	800ad1c <USB_CoreReset>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009744:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009748:	2b00      	cmp	r3, #0
 800974a:	d106      	bne.n	800975a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009750:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	639a      	str	r2, [r3, #56]	@ 0x38
 8009758:	e005      	b.n	8009766 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800975e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009766:	7fbb      	ldrb	r3, [r7, #30]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d116      	bne.n	800979a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009770:	b29a      	uxth	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800977a:	4b0d      	ldr	r3, [pc, #52]	@ (80097b0 <USB_CoreInit+0xe0>)
 800977c:	4313      	orrs	r3, r2
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f043 0206 	orr.w	r2, r3, #6
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f043 0220 	orr.w	r2, r3, #32
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097a6:	b004      	add	sp, #16
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	ffbdffbf 	.word	0xffbdffbf
 80097b0:	03ee0000 	.word	0x03ee0000

080097b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d165      	bne.n	8009894 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4a41      	ldr	r2, [pc, #260]	@ (80098d0 <USB_SetTurnaroundTime+0x11c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d906      	bls.n	80097de <USB_SetTurnaroundTime+0x2a>
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4a40      	ldr	r2, [pc, #256]	@ (80098d4 <USB_SetTurnaroundTime+0x120>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d202      	bcs.n	80097de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80097d8:	230f      	movs	r3, #15
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e062      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	4a3c      	ldr	r2, [pc, #240]	@ (80098d4 <USB_SetTurnaroundTime+0x120>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d306      	bcc.n	80097f4 <USB_SetTurnaroundTime+0x40>
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	4a3b      	ldr	r2, [pc, #236]	@ (80098d8 <USB_SetTurnaroundTime+0x124>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d202      	bcs.n	80097f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80097ee:	230e      	movs	r3, #14
 80097f0:	617b      	str	r3, [r7, #20]
 80097f2:	e057      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	4a38      	ldr	r2, [pc, #224]	@ (80098d8 <USB_SetTurnaroundTime+0x124>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d306      	bcc.n	800980a <USB_SetTurnaroundTime+0x56>
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4a37      	ldr	r2, [pc, #220]	@ (80098dc <USB_SetTurnaroundTime+0x128>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d202      	bcs.n	800980a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009804:	230d      	movs	r3, #13
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	e04c      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	4a33      	ldr	r2, [pc, #204]	@ (80098dc <USB_SetTurnaroundTime+0x128>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d306      	bcc.n	8009820 <USB_SetTurnaroundTime+0x6c>
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	4a32      	ldr	r2, [pc, #200]	@ (80098e0 <USB_SetTurnaroundTime+0x12c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d802      	bhi.n	8009820 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800981a:	230c      	movs	r3, #12
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	e041      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	4a2f      	ldr	r2, [pc, #188]	@ (80098e0 <USB_SetTurnaroundTime+0x12c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d906      	bls.n	8009836 <USB_SetTurnaroundTime+0x82>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	4a2e      	ldr	r2, [pc, #184]	@ (80098e4 <USB_SetTurnaroundTime+0x130>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d802      	bhi.n	8009836 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009830:	230b      	movs	r3, #11
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	e036      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	4a2a      	ldr	r2, [pc, #168]	@ (80098e4 <USB_SetTurnaroundTime+0x130>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d906      	bls.n	800984c <USB_SetTurnaroundTime+0x98>
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	4a29      	ldr	r2, [pc, #164]	@ (80098e8 <USB_SetTurnaroundTime+0x134>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d802      	bhi.n	800984c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009846:	230a      	movs	r3, #10
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e02b      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	4a26      	ldr	r2, [pc, #152]	@ (80098e8 <USB_SetTurnaroundTime+0x134>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d906      	bls.n	8009862 <USB_SetTurnaroundTime+0xae>
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4a25      	ldr	r2, [pc, #148]	@ (80098ec <USB_SetTurnaroundTime+0x138>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d202      	bcs.n	8009862 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800985c:	2309      	movs	r3, #9
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	e020      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4a21      	ldr	r2, [pc, #132]	@ (80098ec <USB_SetTurnaroundTime+0x138>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d306      	bcc.n	8009878 <USB_SetTurnaroundTime+0xc4>
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	4a20      	ldr	r2, [pc, #128]	@ (80098f0 <USB_SetTurnaroundTime+0x13c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d802      	bhi.n	8009878 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009872:	2308      	movs	r3, #8
 8009874:	617b      	str	r3, [r7, #20]
 8009876:	e015      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	4a1d      	ldr	r2, [pc, #116]	@ (80098f0 <USB_SetTurnaroundTime+0x13c>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d906      	bls.n	800988e <USB_SetTurnaroundTime+0xda>
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4a1c      	ldr	r2, [pc, #112]	@ (80098f4 <USB_SetTurnaroundTime+0x140>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d202      	bcs.n	800988e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009888:	2307      	movs	r3, #7
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	e00a      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800988e:	2306      	movs	r3, #6
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	e007      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800989a:	2309      	movs	r3, #9
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	e001      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80098a0:	2309      	movs	r3, #9
 80098a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	029b      	lsls	r3, r3, #10
 80098b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80098bc:	431a      	orrs	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	371c      	adds	r7, #28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	00d8acbf 	.word	0x00d8acbf
 80098d4:	00e4e1c0 	.word	0x00e4e1c0
 80098d8:	00f42400 	.word	0x00f42400
 80098dc:	01067380 	.word	0x01067380
 80098e0:	011a499f 	.word	0x011a499f
 80098e4:	01312cff 	.word	0x01312cff
 80098e8:	014ca43f 	.word	0x014ca43f
 80098ec:	016e3600 	.word	0x016e3600
 80098f0:	01a6ab1f 	.word	0x01a6ab1f
 80098f4:	01e84800 	.word	0x01e84800

080098f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f043 0201 	orr.w	r2, r3, #1
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f023 0201 	bic.w	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d115      	bne.n	800998a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800996a:	200a      	movs	r0, #10
 800996c:	f7f8 f914 	bl	8001b98 <HAL_Delay>
      ms += 10U;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	330a      	adds	r3, #10
 8009974:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 f93f 	bl	800abfa <USB_GetMode>
 800997c:	4603      	mov	r3, r0
 800997e:	2b01      	cmp	r3, #1
 8009980:	d01e      	beq.n	80099c0 <USB_SetCurrentMode+0x84>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2bc7      	cmp	r3, #199	@ 0xc7
 8009986:	d9f0      	bls.n	800996a <USB_SetCurrentMode+0x2e>
 8009988:	e01a      	b.n	80099c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800998a:	78fb      	ldrb	r3, [r7, #3]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d115      	bne.n	80099bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800999c:	200a      	movs	r0, #10
 800999e:	f7f8 f8fb 	bl	8001b98 <HAL_Delay>
      ms += 10U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	330a      	adds	r3, #10
 80099a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f926 	bl	800abfa <USB_GetMode>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <USB_SetCurrentMode+0x84>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80099b8:	d9f0      	bls.n	800999c <USB_SetCurrentMode+0x60>
 80099ba:	e001      	b.n	80099c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e005      	b.n	80099cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80099c4:	d101      	bne.n	80099ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e000      	b.n	80099cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099d4:	b084      	sub	sp, #16
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b086      	sub	sp, #24
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80099e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80099ee:	2300      	movs	r3, #0
 80099f0:	613b      	str	r3, [r7, #16]
 80099f2:	e009      	b.n	8009a08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	3340      	adds	r3, #64	@ 0x40
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	2200      	movs	r2, #0
 8009a00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	3301      	adds	r3, #1
 8009a06:	613b      	str	r3, [r7, #16]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	2b0e      	cmp	r3, #14
 8009a0c:	d9f2      	bls.n	80099f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d11c      	bne.n	8009a50 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a24:	f043 0302 	orr.w	r3, r3, #2
 8009a28:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	e005      	b.n	8009a5c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a62:	461a      	mov	r2, r3
 8009a64:	2300      	movs	r3, #0
 8009a66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d10d      	bne.n	8009a8c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d104      	bne.n	8009a82 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a78:	2100      	movs	r1, #0
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f968 	bl	8009d50 <USB_SetDevSpeed>
 8009a80:	e008      	b.n	8009a94 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a82:	2101      	movs	r1, #1
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f963 	bl	8009d50 <USB_SetDevSpeed>
 8009a8a:	e003      	b.n	8009a94 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a8c:	2103      	movs	r1, #3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f95e 	bl	8009d50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a94:	2110      	movs	r1, #16
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f8fa 	bl	8009c90 <USB_FlushTxFifo>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f924 	bl	8009cf4 <USB_FlushRxFifo>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009abc:	461a      	mov	r2, r3
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ac8:	461a      	mov	r2, r3
 8009aca:	2300      	movs	r3, #0
 8009acc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ada:	2300      	movs	r3, #0
 8009adc:	613b      	str	r3, [r7, #16]
 8009ade:	e043      	b.n	8009b68 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009af2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009af6:	d118      	bne.n	8009b2a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10a      	bne.n	8009b14 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	e013      	b.n	8009b3c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b20:	461a      	mov	r2, r3
 8009b22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	e008      	b.n	8009b3c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b36:	461a      	mov	r2, r3
 8009b38:	2300      	movs	r3, #0
 8009b3a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b48:	461a      	mov	r2, r3
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	3301      	adds	r3, #1
 8009b66:	613b      	str	r3, [r7, #16]
 8009b68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d3b5      	bcc.n	8009ae0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	e043      	b.n	8009c02 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b90:	d118      	bne.n	8009bc4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	e013      	b.n	8009bd6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	e008      	b.n	8009bd6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be2:	461a      	mov	r2, r3
 8009be4:	2300      	movs	r3, #0
 8009be6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009bfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c06:	461a      	mov	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d3b5      	bcc.n	8009b7a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009c2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d105      	bne.n	8009c44 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	f043 0210 	orr.w	r2, r3, #16
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	699a      	ldr	r2, [r3, #24]
 8009c48:	4b0f      	ldr	r3, [pc, #60]	@ (8009c88 <USB_DevInit+0x2b4>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	f043 0208 	orr.w	r2, r3, #8
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d105      	bne.n	8009c78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	699a      	ldr	r2, [r3, #24]
 8009c70:	4b06      	ldr	r3, [pc, #24]	@ (8009c8c <USB_DevInit+0x2b8>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c84:	b004      	add	sp, #16
 8009c86:	4770      	bx	lr
 8009c88:	803c3800 	.word	0x803c3800
 8009c8c:	40000004 	.word	0x40000004

08009c90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009caa:	d901      	bls.n	8009cb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e01b      	b.n	8009ce8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	daf2      	bge.n	8009c9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	019b      	lsls	r3, r3, #6
 8009cc0:	f043 0220 	orr.w	r2, r3, #32
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cd4:	d901      	bls.n	8009cda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e006      	b.n	8009ce8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	d0f0      	beq.n	8009cc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3301      	adds	r3, #1
 8009d04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d0c:	d901      	bls.n	8009d12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e018      	b.n	8009d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	daf2      	bge.n	8009d00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2210      	movs	r2, #16
 8009d22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	3301      	adds	r3, #1
 8009d28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d30:	d901      	bls.n	8009d36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e006      	b.n	8009d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f003 0310 	and.w	r3, r3, #16
 8009d3e:	2b10      	cmp	r3, #16
 8009d40:	d0f0      	beq.n	8009d24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	78fb      	ldrb	r3, [r7, #3]
 8009d6a:	68f9      	ldr	r1, [r7, #12]
 8009d6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d70:	4313      	orrs	r3, r2
 8009d72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b087      	sub	sp, #28
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f003 0306 	and.w	r3, r3, #6
 8009d9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009da2:	2300      	movs	r3, #0
 8009da4:	75fb      	strb	r3, [r7, #23]
 8009da6:	e00a      	b.n	8009dbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d002      	beq.n	8009db4 <USB_GetDevSpeed+0x32>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b06      	cmp	r3, #6
 8009db2:	d102      	bne.n	8009dba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009db4:	2302      	movs	r3, #2
 8009db6:	75fb      	strb	r3, [r7, #23]
 8009db8:	e001      	b.n	8009dbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009dba:	230f      	movs	r3, #15
 8009dbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	371c      	adds	r7, #28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	785b      	ldrb	r3, [r3, #1]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d139      	bne.n	8009e5c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dee:	69da      	ldr	r2, [r3, #28]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 030f 	and.w	r3, r3, #15
 8009df8:	2101      	movs	r1, #1
 8009dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	68f9      	ldr	r1, [r7, #12]
 8009e02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e06:	4313      	orrs	r3, r2
 8009e08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d153      	bne.n	8009ec8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	791b      	ldrb	r3, [r3, #4]
 8009e3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	059b      	lsls	r3, r3, #22
 8009e42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e44:	431a      	orrs	r2, r3
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	0159      	lsls	r1, r3, #5
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	440b      	add	r3, r1
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e52:	4619      	mov	r1, r3
 8009e54:	4b20      	ldr	r3, [pc, #128]	@ (8009ed8 <USB_ActivateEndpoint+0x10c>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	600b      	str	r3, [r1, #0]
 8009e5a:	e035      	b.n	8009ec8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e62:	69da      	ldr	r2, [r3, #28]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	f003 030f 	and.w	r3, r3, #15
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e72:	041b      	lsls	r3, r3, #16
 8009e74:	68f9      	ldr	r1, [r7, #12]
 8009e76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d119      	bne.n	8009ec8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	791b      	ldrb	r3, [r3, #4]
 8009eae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	0159      	lsls	r1, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	440b      	add	r3, r1
 8009ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4b05      	ldr	r3, [pc, #20]	@ (8009ed8 <USB_ActivateEndpoint+0x10c>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	10008000 	.word	0x10008000

08009edc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d161      	bne.n	8009fbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f0e:	d11f      	bne.n	8009f50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	2101      	movs	r1, #1
 8009f62:	fa01 f303 	lsl.w	r3, r1, r3
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	43db      	mvns	r3, r3
 8009f6a:	68f9      	ldr	r1, [r7, #12]
 8009f6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f70:	4013      	ands	r3, r2
 8009f72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f7a:	69da      	ldr	r2, [r3, #28]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f003 030f 	and.w	r3, r3, #15
 8009f84:	2101      	movs	r1, #1
 8009f86:	fa01 f303 	lsl.w	r3, r1, r3
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	68f9      	ldr	r1, [r7, #12]
 8009f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f94:	4013      	ands	r3, r2
 8009f96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	0159      	lsls	r1, r3, #5
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	440b      	add	r3, r1
 8009fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4b35      	ldr	r3, [pc, #212]	@ (800a08c <USB_DeactivateEndpoint+0x1b0>)
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	600b      	str	r3, [r1, #0]
 8009fba:	e060      	b.n	800a07e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fd2:	d11f      	bne.n	800a014 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	0151      	lsls	r1, r2, #5
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	440a      	add	r2, r1
 8009fea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ff2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	0151      	lsls	r1, r2, #5
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	440a      	add	r2, r1
 800a00a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a00e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a012:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a01a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 030f 	and.w	r3, r3, #15
 800a024:	2101      	movs	r1, #1
 800a026:	fa01 f303 	lsl.w	r3, r1, r3
 800a02a:	041b      	lsls	r3, r3, #16
 800a02c:	43db      	mvns	r3, r3
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a034:	4013      	ands	r3, r2
 800a036:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a03e:	69da      	ldr	r2, [r3, #28]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	f003 030f 	and.w	r3, r3, #15
 800a048:	2101      	movs	r1, #1
 800a04a:	fa01 f303 	lsl.w	r3, r1, r3
 800a04e:	041b      	lsls	r3, r3, #16
 800a050:	43db      	mvns	r3, r3
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a058:	4013      	ands	r3, r2
 800a05a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	0159      	lsls	r1, r3, #5
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	440b      	add	r3, r1
 800a072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a076:	4619      	mov	r1, r3
 800a078:	4b05      	ldr	r3, [pc, #20]	@ (800a090 <USB_DeactivateEndpoint+0x1b4>)
 800a07a:	4013      	ands	r3, r2
 800a07c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	ec337800 	.word	0xec337800
 800a090:	eff37800 	.word	0xeff37800

0800a094 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	@ 0x28
 800a098:	af02      	add	r7, sp, #8
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	785b      	ldrb	r3, [r3, #1]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	f040 8185 	bne.w	800a3c0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d132      	bne.n	800a124 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ca:	691a      	ldr	r2, [r3, #16]
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	0159      	lsls	r1, r3, #5
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	440b      	add	r3, r1
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4ba7      	ldr	r3, [pc, #668]	@ (800a378 <USB_EPStartXfer+0x2e4>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	0151      	lsls	r1, r2, #5
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	440a      	add	r2, r1
 800a0f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	0159      	lsls	r1, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	440b      	add	r3, r1
 800a116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a11a:	4619      	mov	r1, r3
 800a11c:	4b97      	ldr	r3, [pc, #604]	@ (800a37c <USB_EPStartXfer+0x2e8>)
 800a11e:	4013      	ands	r3, r2
 800a120:	610b      	str	r3, [r1, #16]
 800a122:	e097      	b.n	800a254 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a130:	691a      	ldr	r2, [r3, #16]
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	0159      	lsls	r1, r3, #5
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	440b      	add	r3, r1
 800a13a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a13e:	4619      	mov	r1, r3
 800a140:	4b8e      	ldr	r3, [pc, #568]	@ (800a37c <USB_EPStartXfer+0x2e8>)
 800a142:	4013      	ands	r3, r2
 800a144:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a152:	691a      	ldr	r2, [r3, #16]
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	0159      	lsls	r1, r3, #5
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	440b      	add	r3, r1
 800a15c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a160:	4619      	mov	r1, r3
 800a162:	4b85      	ldr	r3, [pc, #532]	@ (800a378 <USB_EPStartXfer+0x2e4>)
 800a164:	4013      	ands	r3, r2
 800a166:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d11a      	bne.n	800a1a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	691a      	ldr	r2, [r3, #16]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	429a      	cmp	r2, r3
 800a178:	d903      	bls.n	800a182 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	689a      	ldr	r2, [r3, #8]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	69fa      	ldr	r2, [r7, #28]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a19c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1a0:	6113      	str	r3, [r2, #16]
 800a1a2:	e044      	b.n	800a22e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	691a      	ldr	r2, [r3, #16]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	1e5a      	subs	r2, r3, #1
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c6:	691a      	ldr	r2, [r3, #16]
 800a1c8:	8afb      	ldrh	r3, [r7, #22]
 800a1ca:	04d9      	lsls	r1, r3, #19
 800a1cc:	4b6c      	ldr	r3, [pc, #432]	@ (800a380 <USB_EPStartXfer+0x2ec>)
 800a1ce:	400b      	ands	r3, r1
 800a1d0:	69b9      	ldr	r1, [r7, #24]
 800a1d2:	0148      	lsls	r0, r1, #5
 800a1d4:	69f9      	ldr	r1, [r7, #28]
 800a1d6:	4401      	add	r1, r0
 800a1d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d122      	bne.n	800a22e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	69ba      	ldr	r2, [r7, #24]
 800a1f8:	0151      	lsls	r1, r2, #5
 800a1fa:	69fa      	ldr	r2, [r7, #28]
 800a1fc:	440a      	add	r2, r1
 800a1fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a202:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a206:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a214:	691a      	ldr	r2, [r3, #16]
 800a216:	8afb      	ldrh	r3, [r7, #22]
 800a218:	075b      	lsls	r3, r3, #29
 800a21a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a21e:	69b9      	ldr	r1, [r7, #24]
 800a220:	0148      	lsls	r0, r1, #5
 800a222:	69f9      	ldr	r1, [r7, #28]
 800a224:	4401      	add	r1, r0
 800a226:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a22a:	4313      	orrs	r3, r2
 800a22c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	015a      	lsls	r2, r3, #5
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	4413      	add	r3, r2
 800a236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a244:	69b9      	ldr	r1, [r7, #24]
 800a246:	0148      	lsls	r0, r1, #5
 800a248:	69f9      	ldr	r1, [r7, #28]
 800a24a:	4401      	add	r1, r0
 800a24c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a250:	4313      	orrs	r3, r2
 800a252:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d14b      	bne.n	800a2f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d009      	beq.n	800a276 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a26e:	461a      	mov	r2, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	791b      	ldrb	r3, [r3, #4]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d128      	bne.n	800a2d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d110      	bne.n	800a2b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	0151      	lsls	r1, r2, #5
 800a2a0:	69fa      	ldr	r2, [r7, #28]
 800a2a2:	440a      	add	r2, r1
 800a2a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	e00f      	b.n	800a2d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	0151      	lsls	r1, r2, #5
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	440a      	add	r2, r1
 800a2c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	0151      	lsls	r1, r2, #5
 800a2e2:	69fa      	ldr	r2, [r7, #28]
 800a2e4:	440a      	add	r2, r1
 800a2e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	e169      	b.n	800a5c6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	0151      	lsls	r1, r2, #5
 800a304:	69fa      	ldr	r2, [r7, #28]
 800a306:	440a      	add	r2, r1
 800a308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a30c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a310:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	791b      	ldrb	r3, [r3, #4]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d015      	beq.n	800a346 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 8151 	beq.w	800a5c6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a32a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	f003 030f 	and.w	r3, r3, #15
 800a334:	2101      	movs	r1, #1
 800a336:	fa01 f303 	lsl.w	r3, r1, r3
 800a33a:	69f9      	ldr	r1, [r7, #28]
 800a33c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a340:	4313      	orrs	r3, r2
 800a342:	634b      	str	r3, [r1, #52]	@ 0x34
 800a344:	e13f      	b.n	800a5c6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a352:	2b00      	cmp	r3, #0
 800a354:	d116      	bne.n	800a384 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a370:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	e015      	b.n	800a3a4 <USB_EPStartXfer+0x310>
 800a378:	e007ffff 	.word	0xe007ffff
 800a37c:	fff80000 	.word	0xfff80000
 800a380:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a39e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	68d9      	ldr	r1, [r3, #12]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	781a      	ldrb	r2, [r3, #0]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	b298      	uxth	r0, r3
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 f9b9 	bl	800a730 <USB_WritePacket>
 800a3be:	e102      	b.n	800a5c6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3cc:	691a      	ldr	r2, [r3, #16]
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	0159      	lsls	r1, r3, #5
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	440b      	add	r3, r1
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4b7c      	ldr	r3, [pc, #496]	@ (800a5d0 <USB_EPStartXfer+0x53c>)
 800a3de:	4013      	ands	r3, r2
 800a3e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ee:	691a      	ldr	r2, [r3, #16]
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	0159      	lsls	r1, r3, #5
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	440b      	add	r3, r1
 800a3f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4b75      	ldr	r3, [pc, #468]	@ (800a5d4 <USB_EPStartXfer+0x540>)
 800a400:	4013      	ands	r3, r2
 800a402:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d12f      	bne.n	800a46a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	689a      	ldr	r2, [r3, #8]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a42e:	691a      	ldr	r2, [r3, #16]
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a438:	69b9      	ldr	r1, [r7, #24]
 800a43a:	0148      	lsls	r0, r1, #5
 800a43c:	69f9      	ldr	r1, [r7, #28]
 800a43e:	4401      	add	r1, r0
 800a440:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a444:	4313      	orrs	r3, r2
 800a446:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	0151      	lsls	r1, r2, #5
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	440a      	add	r2, r1
 800a45e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a462:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a466:	6113      	str	r3, [r2, #16]
 800a468:	e05f      	b.n	800a52a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d123      	bne.n	800a4ba <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47e:	691a      	ldr	r2, [r3, #16]
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a488:	69b9      	ldr	r1, [r7, #24]
 800a48a:	0148      	lsls	r0, r1, #5
 800a48c:	69f9      	ldr	r1, [r7, #28]
 800a48e:	4401      	add	r1, r0
 800a490:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a494:	4313      	orrs	r3, r2
 800a496:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	0151      	lsls	r1, r2, #5
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	440a      	add	r2, r1
 800a4ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4b6:	6113      	str	r3, [r2, #16]
 800a4b8:	e037      	b.n	800a52a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	691a      	ldr	r2, [r3, #16]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	1e5a      	subs	r2, r3, #1
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ce:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	8afa      	ldrh	r2, [r7, #22]
 800a4d6:	fb03 f202 	mul.w	r2, r3, r2
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	8afb      	ldrh	r3, [r7, #22]
 800a4ee:	04d9      	lsls	r1, r3, #19
 800a4f0:	4b39      	ldr	r3, [pc, #228]	@ (800a5d8 <USB_EPStartXfer+0x544>)
 800a4f2:	400b      	ands	r3, r1
 800a4f4:	69b9      	ldr	r1, [r7, #24]
 800a4f6:	0148      	lsls	r0, r1, #5
 800a4f8:	69f9      	ldr	r1, [r7, #28]
 800a4fa:	4401      	add	r1, r0
 800a4fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a500:	4313      	orrs	r3, r2
 800a502:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a510:	691a      	ldr	r2, [r3, #16]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a51a:	69b9      	ldr	r1, [r7, #24]
 800a51c:	0148      	lsls	r0, r1, #5
 800a51e:	69f9      	ldr	r1, [r7, #28]
 800a520:	4401      	add	r1, r0
 800a522:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a526:	4313      	orrs	r3, r2
 800a528:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d10d      	bne.n	800a54c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d009      	beq.n	800a54c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	68d9      	ldr	r1, [r3, #12]
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a548:	460a      	mov	r2, r1
 800a54a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	791b      	ldrb	r3, [r3, #4]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d128      	bne.n	800a5a6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a560:	2b00      	cmp	r3, #0
 800a562:	d110      	bne.n	800a586 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	69ba      	ldr	r2, [r7, #24]
 800a574:	0151      	lsls	r1, r2, #5
 800a576:	69fa      	ldr	r2, [r7, #28]
 800a578:	440a      	add	r2, r1
 800a57a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a57e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	e00f      	b.n	800a5a6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	015a      	lsls	r2, r3, #5
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	0151      	lsls	r1, r2, #5
 800a598:	69fa      	ldr	r2, [r7, #28]
 800a59a:	440a      	add	r2, r1
 800a59c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5a4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	0151      	lsls	r1, r2, #5
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	440a      	add	r2, r1
 800a5bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a5c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3720      	adds	r7, #32
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	fff80000 	.word	0xfff80000
 800a5d4:	e007ffff 	.word	0xe007ffff
 800a5d8:	1ff80000 	.word	0x1ff80000

0800a5dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d14a      	bne.n	800a690 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a60e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a612:	f040 8086 	bne.w	800a722 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	7812      	ldrb	r2, [r2, #0]
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a634:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a638:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	7812      	ldrb	r2, [r2, #0]
 800a64e:	0151      	lsls	r1, r2, #5
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	440a      	add	r2, r1
 800a654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a65c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3301      	adds	r3, #1
 800a662:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d902      	bls.n	800a674 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	75fb      	strb	r3, [r7, #23]
          break;
 800a672:	e056      	b.n	800a722 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a68c:	d0e7      	beq.n	800a65e <USB_EPStopXfer+0x82>
 800a68e:	e048      	b.n	800a722 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6a8:	d13b      	bne.n	800a722 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	7812      	ldrb	r2, [r2, #0]
 800a6be:	0151      	lsls	r1, r2, #5
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	440a      	add	r2, r1
 800a6c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	7812      	ldrb	r2, [r2, #0]
 800a6e2:	0151      	lsls	r1, r2, #5
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	440a      	add	r2, r1
 800a6e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d902      	bls.n	800a708 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	75fb      	strb	r3, [r7, #23]
          break;
 800a706:	e00c      	b.n	800a722 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	4413      	add	r3, r2
 800a712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a71c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a720:	d0e7      	beq.n	800a6f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a722:	7dfb      	ldrb	r3, [r7, #23]
}
 800a724:	4618      	mov	r0, r3
 800a726:	371c      	adds	r7, #28
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a730:	b480      	push	{r7}
 800a732:	b089      	sub	sp, #36	@ 0x24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4611      	mov	r1, r2
 800a73c:	461a      	mov	r2, r3
 800a73e:	460b      	mov	r3, r1
 800a740:	71fb      	strb	r3, [r7, #7]
 800a742:	4613      	mov	r3, r2
 800a744:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a74e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a752:	2b00      	cmp	r3, #0
 800a754:	d123      	bne.n	800a79e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a756:	88bb      	ldrh	r3, [r7, #4]
 800a758:	3303      	adds	r3, #3
 800a75a:	089b      	lsrs	r3, r3, #2
 800a75c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a75e:	2300      	movs	r3, #0
 800a760:	61bb      	str	r3, [r7, #24]
 800a762:	e018      	b.n	800a796 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a764:	79fb      	ldrb	r3, [r7, #7]
 800a766:	031a      	lsls	r2, r3, #12
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a770:	461a      	mov	r2, r3
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	3301      	adds	r3, #1
 800a77c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	3301      	adds	r3, #1
 800a782:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	3301      	adds	r3, #1
 800a788:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	3301      	adds	r3, #1
 800a78e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	3301      	adds	r3, #1
 800a794:	61bb      	str	r3, [r7, #24]
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d3e2      	bcc.n	800a764 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3724      	adds	r7, #36	@ 0x24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b08b      	sub	sp, #44	@ 0x2c
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a7c2:	88fb      	ldrh	r3, [r7, #6]
 800a7c4:	089b      	lsrs	r3, r3, #2
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a7ca:	88fb      	ldrh	r3, [r7, #6]
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	623b      	str	r3, [r7, #32]
 800a7d6:	e014      	b.n	800a802 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	3301      	adds	r3, #1
 800a800:	623b      	str	r3, [r7, #32]
 800a802:	6a3a      	ldr	r2, [r7, #32]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d3e6      	bcc.n	800a7d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a80a:	8bfb      	ldrh	r3, [r7, #30]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d01e      	beq.n	800a84e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a810:	2300      	movs	r3, #0
 800a812:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a81a:	461a      	mov	r2, r3
 800a81c:	f107 0310 	add.w	r3, r7, #16
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	fa22 f303 	lsr.w	r3, r2, r3
 800a830:	b2da      	uxtb	r2, r3
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	701a      	strb	r2, [r3, #0]
      i++;
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	3301      	adds	r3, #1
 800a83a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83e:	3301      	adds	r3, #1
 800a840:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a842:	8bfb      	ldrh	r3, [r7, #30]
 800a844:	3b01      	subs	r3, #1
 800a846:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a848:	8bfb      	ldrh	r3, [r7, #30]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1ea      	bne.n	800a824 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a850:	4618      	mov	r0, r3
 800a852:	372c      	adds	r7, #44	@ 0x2c
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	785b      	ldrb	r3, [r3, #1]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d12c      	bne.n	800a8d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	db12      	blt.n	800a8b0 <USB_EPSetStall+0x54>
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00f      	beq.n	800a8b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	015a      	lsls	r2, r3, #5
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	4413      	add	r3, r2
 800a898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	0151      	lsls	r1, r2, #5
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	440a      	add	r2, r1
 800a8a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a8ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	0151      	lsls	r1, r2, #5
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	440a      	add	r2, r1
 800a8c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	e02b      	b.n	800a92a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	db12      	blt.n	800a90a <USB_EPSetStall+0xae>
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00f      	beq.n	800a90a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	015a      	lsls	r2, r3, #5
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	0151      	lsls	r1, r2, #5
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	440a      	add	r2, r1
 800a900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a904:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a908:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	0151      	lsls	r1, r2, #5
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	440a      	add	r2, r1
 800a920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a924:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a928:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	785b      	ldrb	r3, [r3, #1]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d128      	bne.n	800a9a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	0151      	lsls	r1, r2, #5
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	440a      	add	r2, r1
 800a96a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a96e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a972:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	791b      	ldrb	r3, [r3, #4]
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d003      	beq.n	800a984 <USB_EPClearStall+0x4c>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	791b      	ldrb	r3, [r3, #4]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d138      	bne.n	800a9f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	0151      	lsls	r1, r2, #5
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	440a      	add	r2, r1
 800a99a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a99e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	e027      	b.n	800a9f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	0151      	lsls	r1, r2, #5
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	440a      	add	r2, r1
 800a9bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a9c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	791b      	ldrb	r3, [r3, #4]
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d003      	beq.n	800a9d6 <USB_EPClearStall+0x9e>
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	791b      	ldrb	r3, [r3, #4]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d10f      	bne.n	800a9f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	0151      	lsls	r1, r2, #5
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	440a      	add	r2, r1
 800a9ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aa26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	011b      	lsls	r3, r3, #4
 800aa34:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aa38:	68f9      	ldr	r1, [r7, #12]
 800aa3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa6a:	f023 0303 	bic.w	r3, r3, #3
 800aa6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa7e:	f023 0302 	bic.w	r3, r3, #2
 800aa82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b085      	sub	sp, #20
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aaac:	f023 0303 	bic.w	r3, r3, #3
 800aab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aac0:	f043 0302 	orr.w	r3, r3, #2
 800aac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	4013      	ands	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aaec:	68fb      	ldr	r3, [r7, #12]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b085      	sub	sp, #20
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	0c1b      	lsrs	r3, r3, #16
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b085      	sub	sp, #20
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	b29b      	uxth	r3, r3
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b085      	sub	sp, #20
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab90:	68bb      	ldr	r3, [r7, #8]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b087      	sub	sp, #28
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800abc2:	78fb      	ldrb	r3, [r7, #3]
 800abc4:	f003 030f 	and.w	r3, r3, #15
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	fa22 f303 	lsr.w	r3, r2, r3
 800abce:	01db      	lsls	r3, r3, #7
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800abd8:	78fb      	ldrb	r3, [r7, #3]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	4013      	ands	r3, r2
 800abea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abec:	68bb      	ldr	r3, [r7, #8]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	371c      	adds	r7, #28
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	f003 0301 	and.w	r3, r3, #1
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
	...

0800ac18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac32:	4619      	mov	r1, r3
 800ac34:	4b09      	ldr	r3, [pc, #36]	@ (800ac5c <USB_ActivateSetup+0x44>)
 800ac36:	4013      	ands	r3, r2
 800ac38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	fffff800 	.word	0xfffff800

0800ac60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	333c      	adds	r3, #60	@ 0x3c
 800ac76:	3304      	adds	r3, #4
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	4a26      	ldr	r2, [pc, #152]	@ (800ad18 <USB_EP0_OutStart+0xb8>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d90a      	bls.n	800ac9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac94:	d101      	bne.n	800ac9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e037      	b.n	800ad0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca0:	461a      	mov	r2, r3
 800aca2:	2300      	movs	r3, #0
 800aca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800acb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acc8:	f043 0318 	orr.w	r3, r3, #24
 800accc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acdc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ace0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d10f      	bne.n	800ad08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acee:	461a      	mov	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ad06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	371c      	adds	r7, #28
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	4f54300a 	.word	0x4f54300a

0800ad1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad34:	d901      	bls.n	800ad3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e01b      	b.n	800ad72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	daf2      	bge.n	800ad28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f043 0201 	orr.w	r2, r3, #1
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	3301      	adds	r3, #1
 800ad56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad5e:	d901      	bls.n	800ad64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e006      	b.n	800ad72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d0f0      	beq.n	800ad52 <USB_CoreReset+0x36>

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
	...

0800ad80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ad90:	f002 fd0a 	bl	800d7a8 <USBD_static_malloc>
 800ad94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	32b0      	adds	r2, #176	@ 0xb0
 800ada6:	2100      	movs	r1, #0
 800ada8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800adac:	2302      	movs	r3, #2
 800adae:	e0d4      	b.n	800af5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800adb0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800adb4:	2100      	movs	r1, #0
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f004 f97e 	bl	800f0b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	32b0      	adds	r2, #176	@ 0xb0
 800adc6:	68f9      	ldr	r1, [r7, #12]
 800adc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	32b0      	adds	r2, #176	@ 0xb0
 800add6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	7c1b      	ldrb	r3, [r3, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d138      	bne.n	800ae5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ade8:	4b5e      	ldr	r3, [pc, #376]	@ (800af64 <USBD_CDC_Init+0x1e4>)
 800adea:	7819      	ldrb	r1, [r3, #0]
 800adec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adf0:	2202      	movs	r2, #2
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f002 fbb5 	bl	800d562 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800adf8:	4b5a      	ldr	r3, [pc, #360]	@ (800af64 <USBD_CDC_Init+0x1e4>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 020f 	and.w	r2, r3, #15
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	440b      	add	r3, r1
 800ae0c:	3324      	adds	r3, #36	@ 0x24
 800ae0e:	2201      	movs	r2, #1
 800ae10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae12:	4b55      	ldr	r3, [pc, #340]	@ (800af68 <USBD_CDC_Init+0x1e8>)
 800ae14:	7819      	ldrb	r1, [r3, #0]
 800ae16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f002 fba0 	bl	800d562 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae22:	4b51      	ldr	r3, [pc, #324]	@ (800af68 <USBD_CDC_Init+0x1e8>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	f003 020f 	and.w	r2, r3, #15
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae3e:	4b4b      	ldr	r3, [pc, #300]	@ (800af6c <USBD_CDC_Init+0x1ec>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	f003 020f 	and.w	r2, r3, #15
 800ae46:	6879      	ldr	r1, [r7, #4]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	440b      	add	r3, r1
 800ae52:	3326      	adds	r3, #38	@ 0x26
 800ae54:	2210      	movs	r2, #16
 800ae56:	801a      	strh	r2, [r3, #0]
 800ae58:	e035      	b.n	800aec6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae5a:	4b42      	ldr	r3, [pc, #264]	@ (800af64 <USBD_CDC_Init+0x1e4>)
 800ae5c:	7819      	ldrb	r1, [r3, #0]
 800ae5e:	2340      	movs	r3, #64	@ 0x40
 800ae60:	2202      	movs	r2, #2
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f002 fb7d 	bl	800d562 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae68:	4b3e      	ldr	r3, [pc, #248]	@ (800af64 <USBD_CDC_Init+0x1e4>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	f003 020f 	and.w	r2, r3, #15
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	4613      	mov	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	440b      	add	r3, r1
 800ae7c:	3324      	adds	r3, #36	@ 0x24
 800ae7e:	2201      	movs	r2, #1
 800ae80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae82:	4b39      	ldr	r3, [pc, #228]	@ (800af68 <USBD_CDC_Init+0x1e8>)
 800ae84:	7819      	ldrb	r1, [r3, #0]
 800ae86:	2340      	movs	r3, #64	@ 0x40
 800ae88:	2202      	movs	r2, #2
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f002 fb69 	bl	800d562 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae90:	4b35      	ldr	r3, [pc, #212]	@ (800af68 <USBD_CDC_Init+0x1e8>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 020f 	and.w	r2, r3, #15
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	440b      	add	r3, r1
 800aea4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aea8:	2201      	movs	r2, #1
 800aeaa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aeac:	4b2f      	ldr	r3, [pc, #188]	@ (800af6c <USBD_CDC_Init+0x1ec>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f003 020f 	and.w	r2, r3, #15
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	440b      	add	r3, r1
 800aec0:	3326      	adds	r3, #38	@ 0x26
 800aec2:	2210      	movs	r2, #16
 800aec4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aec6:	4b29      	ldr	r3, [pc, #164]	@ (800af6c <USBD_CDC_Init+0x1ec>)
 800aec8:	7819      	ldrb	r1, [r3, #0]
 800aeca:	2308      	movs	r3, #8
 800aecc:	2203      	movs	r2, #3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f002 fb47 	bl	800d562 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aed4:	4b25      	ldr	r3, [pc, #148]	@ (800af6c <USBD_CDC_Init+0x1ec>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 020f 	and.w	r2, r3, #15
 800aedc:	6879      	ldr	r1, [r7, #4]
 800aede:	4613      	mov	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	440b      	add	r3, r1
 800aee8:	3324      	adds	r3, #36	@ 0x24
 800aeea:	2201      	movs	r2, #1
 800aeec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	33b0      	adds	r3, #176	@ 0xb0
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800af24:	2302      	movs	r3, #2
 800af26:	e018      	b.n	800af5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	7c1b      	ldrb	r3, [r3, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10a      	bne.n	800af46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af30:	4b0d      	ldr	r3, [pc, #52]	@ (800af68 <USBD_CDC_Init+0x1e8>)
 800af32:	7819      	ldrb	r1, [r3, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f002 fbfe 	bl	800d740 <USBD_LL_PrepareReceive>
 800af44:	e008      	b.n	800af58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af46:	4b08      	ldr	r3, [pc, #32]	@ (800af68 <USBD_CDC_Init+0x1e8>)
 800af48:	7819      	ldrb	r1, [r3, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af50:	2340      	movs	r3, #64	@ 0x40
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f002 fbf4 	bl	800d740 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	24000097 	.word	0x24000097
 800af68:	24000098 	.word	0x24000098
 800af6c:	24000099 	.word	0x24000099

0800af70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800af7c:	4b3a      	ldr	r3, [pc, #232]	@ (800b068 <USBD_CDC_DeInit+0xf8>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f002 fb13 	bl	800d5ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800af88:	4b37      	ldr	r3, [pc, #220]	@ (800b068 <USBD_CDC_DeInit+0xf8>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	f003 020f 	and.w	r2, r3, #15
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	440b      	add	r3, r1
 800af9c:	3324      	adds	r3, #36	@ 0x24
 800af9e:	2200      	movs	r2, #0
 800afa0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800afa2:	4b32      	ldr	r3, [pc, #200]	@ (800b06c <USBD_CDC_DeInit+0xfc>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f002 fb00 	bl	800d5ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800afae:	4b2f      	ldr	r3, [pc, #188]	@ (800b06c <USBD_CDC_DeInit+0xfc>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	f003 020f 	and.w	r2, r3, #15
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	4613      	mov	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	440b      	add	r3, r1
 800afc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afc6:	2200      	movs	r2, #0
 800afc8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800afca:	4b29      	ldr	r3, [pc, #164]	@ (800b070 <USBD_CDC_DeInit+0x100>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f002 faec 	bl	800d5ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800afd6:	4b26      	ldr	r3, [pc, #152]	@ (800b070 <USBD_CDC_DeInit+0x100>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	f003 020f 	and.w	r2, r3, #15
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	440b      	add	r3, r1
 800afea:	3324      	adds	r3, #36	@ 0x24
 800afec:	2200      	movs	r2, #0
 800afee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aff0:	4b1f      	ldr	r3, [pc, #124]	@ (800b070 <USBD_CDC_DeInit+0x100>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f003 020f 	and.w	r2, r3, #15
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4613      	mov	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	440b      	add	r3, r1
 800b004:	3326      	adds	r3, #38	@ 0x26
 800b006:	2200      	movs	r2, #0
 800b008:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	32b0      	adds	r2, #176	@ 0xb0
 800b014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d01f      	beq.n	800b05c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	33b0      	adds	r3, #176	@ 0xb0
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	32b0      	adds	r2, #176	@ 0xb0
 800b03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03e:	4618      	mov	r0, r3
 800b040:	f002 fbc0 	bl	800d7c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	32b0      	adds	r2, #176	@ 0xb0
 800b04e:	2100      	movs	r1, #0
 800b050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	24000097 	.word	0x24000097
 800b06c:	24000098 	.word	0x24000098
 800b070:	24000099 	.word	0x24000099

0800b074 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	32b0      	adds	r2, #176	@ 0xb0
 800b088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b08e:	2300      	movs	r3, #0
 800b090:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e0bf      	b.n	800b224 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d050      	beq.n	800b152 <USBD_CDC_Setup+0xde>
 800b0b0:	2b20      	cmp	r3, #32
 800b0b2:	f040 80af 	bne.w	800b214 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	88db      	ldrh	r3, [r3, #6]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d03a      	beq.n	800b134 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b25b      	sxtb	r3, r3
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	da1b      	bge.n	800b100 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	33b0      	adds	r3, #176	@ 0xb0
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b0de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	88d2      	ldrh	r2, [r2, #6]
 800b0e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	88db      	ldrh	r3, [r3, #6]
 800b0ea:	2b07      	cmp	r3, #7
 800b0ec:	bf28      	it	cs
 800b0ee:	2307      	movcs	r3, #7
 800b0f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	89fa      	ldrh	r2, [r7, #14]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 fdbd 	bl	800cc78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b0fe:	e090      	b.n	800b222 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	785a      	ldrb	r2, [r3, #1]
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	88db      	ldrh	r3, [r3, #6]
 800b10e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b110:	d803      	bhi.n	800b11a <USBD_CDC_Setup+0xa6>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	88db      	ldrh	r3, [r3, #6]
 800b116:	b2da      	uxtb	r2, r3
 800b118:	e000      	b.n	800b11c <USBD_CDC_Setup+0xa8>
 800b11a:	2240      	movs	r2, #64	@ 0x40
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b122:	6939      	ldr	r1, [r7, #16]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b12a:	461a      	mov	r2, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f001 fdcf 	bl	800ccd0 <USBD_CtlPrepareRx>
      break;
 800b132:	e076      	b.n	800b222 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	33b0      	adds	r3, #176	@ 0xb0
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	7850      	ldrb	r0, [r2, #1]
 800b14a:	2200      	movs	r2, #0
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	4798      	blx	r3
      break;
 800b150:	e067      	b.n	800b222 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	785b      	ldrb	r3, [r3, #1]
 800b156:	2b0b      	cmp	r3, #11
 800b158:	d851      	bhi.n	800b1fe <USBD_CDC_Setup+0x18a>
 800b15a:	a201      	add	r2, pc, #4	@ (adr r2, 800b160 <USBD_CDC_Setup+0xec>)
 800b15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b160:	0800b191 	.word	0x0800b191
 800b164:	0800b20d 	.word	0x0800b20d
 800b168:	0800b1ff 	.word	0x0800b1ff
 800b16c:	0800b1ff 	.word	0x0800b1ff
 800b170:	0800b1ff 	.word	0x0800b1ff
 800b174:	0800b1ff 	.word	0x0800b1ff
 800b178:	0800b1ff 	.word	0x0800b1ff
 800b17c:	0800b1ff 	.word	0x0800b1ff
 800b180:	0800b1ff 	.word	0x0800b1ff
 800b184:	0800b1ff 	.word	0x0800b1ff
 800b188:	0800b1bb 	.word	0x0800b1bb
 800b18c:	0800b1e5 	.word	0x0800b1e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b03      	cmp	r3, #3
 800b19a:	d107      	bne.n	800b1ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b19c:	f107 030a 	add.w	r3, r7, #10
 800b1a0:	2202      	movs	r2, #2
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 fd67 	bl	800cc78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1aa:	e032      	b.n	800b212 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 fce5 	bl	800cb7e <USBD_CtlError>
            ret = USBD_FAIL;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b1b8:	e02b      	b.n	800b212 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d107      	bne.n	800b1d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b1c6:	f107 030d 	add.w	r3, r7, #13
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f001 fd52 	bl	800cc78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1d4:	e01d      	b.n	800b212 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 fcd0 	bl	800cb7e <USBD_CtlError>
            ret = USBD_FAIL;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b1e2:	e016      	b.n	800b212 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b03      	cmp	r3, #3
 800b1ee:	d00f      	beq.n	800b210 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f001 fcc3 	bl	800cb7e <USBD_CtlError>
            ret = USBD_FAIL;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b1fc:	e008      	b.n	800b210 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f001 fcbc 	bl	800cb7e <USBD_CtlError>
          ret = USBD_FAIL;
 800b206:	2303      	movs	r3, #3
 800b208:	75fb      	strb	r3, [r7, #23]
          break;
 800b20a:	e002      	b.n	800b212 <USBD_CDC_Setup+0x19e>
          break;
 800b20c:	bf00      	nop
 800b20e:	e008      	b.n	800b222 <USBD_CDC_Setup+0x1ae>
          break;
 800b210:	bf00      	nop
      }
      break;
 800b212:	e006      	b.n	800b222 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b214:	6839      	ldr	r1, [r7, #0]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f001 fcb1 	bl	800cb7e <USBD_CtlError>
      ret = USBD_FAIL;
 800b21c:	2303      	movs	r3, #3
 800b21e:	75fb      	strb	r3, [r7, #23]
      break;
 800b220:	bf00      	nop
  }

  return (uint8_t)ret;
 800b222:	7dfb      	ldrb	r3, [r7, #23]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3718      	adds	r7, #24
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b23e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	32b0      	adds	r2, #176	@ 0xb0
 800b24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b252:	2303      	movs	r3, #3
 800b254:	e065      	b.n	800b322 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	32b0      	adds	r2, #176	@ 0xb0
 800b260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b264:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b266:	78fb      	ldrb	r3, [r7, #3]
 800b268:	f003 020f 	and.w	r2, r3, #15
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	440b      	add	r3, r1
 800b278:	3318      	adds	r3, #24
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d02f      	beq.n	800b2e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b280:	78fb      	ldrb	r3, [r7, #3]
 800b282:	f003 020f 	and.w	r2, r3, #15
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	4613      	mov	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	440b      	add	r3, r1
 800b292:	3318      	adds	r3, #24
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	78fb      	ldrb	r3, [r7, #3]
 800b298:	f003 010f 	and.w	r1, r3, #15
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	00db      	lsls	r3, r3, #3
 800b2a2:	440b      	add	r3, r1
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4403      	add	r3, r0
 800b2a8:	331c      	adds	r3, #28
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800b2b0:	fb01 f303 	mul.w	r3, r1, r3
 800b2b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d112      	bne.n	800b2e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	f003 020f 	and.w	r2, r3, #15
 800b2c0:	6879      	ldr	r1, [r7, #4]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	440b      	add	r3, r1
 800b2cc:	3318      	adds	r3, #24
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b2d2:	78f9      	ldrb	r1, [r7, #3]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f002 fa10 	bl	800d6fe <USBD_LL_Transmit>
 800b2de:	e01f      	b.n	800b320 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	33b0      	adds	r3, #176	@ 0xb0
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	4413      	add	r3, r2
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d010      	beq.n	800b320 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	33b0      	adds	r3, #176	@ 0xb0
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b31c:	78fa      	ldrb	r2, [r7, #3]
 800b31e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b084      	sub	sp, #16
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	460b      	mov	r3, r1
 800b334:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	32b0      	adds	r2, #176	@ 0xb0
 800b340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b344:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	32b0      	adds	r2, #176	@ 0xb0
 800b350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b358:	2303      	movs	r3, #3
 800b35a:	e01a      	b.n	800b392 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b35c:	78fb      	ldrb	r3, [r7, #3]
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f002 fa0e 	bl	800d782 <USBD_LL_GetRxDataSize>
 800b366:	4602      	mov	r2, r0
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	33b0      	adds	r3, #176	@ 0xb0
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b38c:	4611      	mov	r1, r2
 800b38e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	32b0      	adds	r2, #176	@ 0xb0
 800b3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	e024      	b.n	800b406 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	33b0      	adds	r3, #176	@ 0xb0
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d019      	beq.n	800b404 <USBD_CDC_EP0_RxReady+0x6a>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b3d6:	2bff      	cmp	r3, #255	@ 0xff
 800b3d8:	d014      	beq.n	800b404 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	33b0      	adds	r3, #176	@ 0xb0
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b3f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b3fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	22ff      	movs	r2, #255	@ 0xff
 800b400:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b418:	2182      	movs	r1, #130	@ 0x82
 800b41a:	4818      	ldr	r0, [pc, #96]	@ (800b47c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b41c:	f000 fd4f 	bl	800bebe <USBD_GetEpDesc>
 800b420:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b422:	2101      	movs	r1, #1
 800b424:	4815      	ldr	r0, [pc, #84]	@ (800b47c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b426:	f000 fd4a 	bl	800bebe <USBD_GetEpDesc>
 800b42a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b42c:	2181      	movs	r1, #129	@ 0x81
 800b42e:	4813      	ldr	r0, [pc, #76]	@ (800b47c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b430:	f000 fd45 	bl	800bebe <USBD_GetEpDesc>
 800b434:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2210      	movs	r2, #16
 800b440:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d006      	beq.n	800b456 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b450:	711a      	strb	r2, [r3, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d006      	beq.n	800b46a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b464:	711a      	strb	r2, [r3, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2243      	movs	r2, #67	@ 0x43
 800b46e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b470:	4b02      	ldr	r3, [pc, #8]	@ (800b47c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	24000054 	.word	0x24000054

0800b480 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b488:	2182      	movs	r1, #130	@ 0x82
 800b48a:	4818      	ldr	r0, [pc, #96]	@ (800b4ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b48c:	f000 fd17 	bl	800bebe <USBD_GetEpDesc>
 800b490:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b492:	2101      	movs	r1, #1
 800b494:	4815      	ldr	r0, [pc, #84]	@ (800b4ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b496:	f000 fd12 	bl	800bebe <USBD_GetEpDesc>
 800b49a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b49c:	2181      	movs	r1, #129	@ 0x81
 800b49e:	4813      	ldr	r0, [pc, #76]	@ (800b4ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b4a0:	f000 fd0d 	bl	800bebe <USBD_GetEpDesc>
 800b4a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	2210      	movs	r2, #16
 800b4b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d006      	beq.n	800b4c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	711a      	strb	r2, [r3, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f042 0202 	orr.w	r2, r2, #2
 800b4c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d006      	beq.n	800b4da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	711a      	strb	r2, [r3, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f042 0202 	orr.w	r2, r2, #2
 800b4d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2243      	movs	r2, #67	@ 0x43
 800b4de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4e0:	4b02      	ldr	r3, [pc, #8]	@ (800b4ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	24000054 	.word	0x24000054

0800b4f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4f8:	2182      	movs	r1, #130	@ 0x82
 800b4fa:	4818      	ldr	r0, [pc, #96]	@ (800b55c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4fc:	f000 fcdf 	bl	800bebe <USBD_GetEpDesc>
 800b500:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b502:	2101      	movs	r1, #1
 800b504:	4815      	ldr	r0, [pc, #84]	@ (800b55c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b506:	f000 fcda 	bl	800bebe <USBD_GetEpDesc>
 800b50a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b50c:	2181      	movs	r1, #129	@ 0x81
 800b50e:	4813      	ldr	r0, [pc, #76]	@ (800b55c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b510:	f000 fcd5 	bl	800bebe <USBD_GetEpDesc>
 800b514:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2210      	movs	r2, #16
 800b520:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d006      	beq.n	800b536 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b530:	711a      	strb	r2, [r3, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d006      	beq.n	800b54a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b544:	711a      	strb	r2, [r3, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2243      	movs	r2, #67	@ 0x43
 800b54e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b550:	4b02      	ldr	r3, [pc, #8]	@ (800b55c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b552:	4618      	mov	r0, r3
 800b554:	3718      	adds	r7, #24
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	24000054 	.word	0x24000054

0800b560 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	220a      	movs	r2, #10
 800b56c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b56e:	4b03      	ldr	r3, [pc, #12]	@ (800b57c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	24000010 	.word	0x24000010

0800b580 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b590:	2303      	movs	r3, #3
 800b592:	e009      	b.n	800b5a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	33b0      	adds	r3, #176	@ 0xb0
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	32b0      	adds	r2, #176	@ 0xb0
 800b5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e008      	b.n	800b5ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	371c      	adds	r7, #28
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	32b0      	adds	r2, #176	@ 0xb0
 800b60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b610:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d101      	bne.n	800b61c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b618:	2303      	movs	r3, #3
 800b61a:	e004      	b.n	800b626 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
	...

0800b634 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	32b0      	adds	r2, #176	@ 0xb0
 800b646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b64c:	2301      	movs	r3, #1
 800b64e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b656:	2303      	movs	r3, #3
 800b658:	e025      	b.n	800b6a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b660:	2b00      	cmp	r3, #0
 800b662:	d11f      	bne.n	800b6a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2201      	movs	r2, #1
 800b668:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b66c:	4b10      	ldr	r3, [pc, #64]	@ (800b6b0 <USBD_CDC_TransmitPacket+0x7c>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	f003 020f 	and.w	r2, r3, #15
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4403      	add	r3, r0
 800b686:	3318      	adds	r3, #24
 800b688:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b68a:	4b09      	ldr	r3, [pc, #36]	@ (800b6b0 <USBD_CDC_TransmitPacket+0x7c>)
 800b68c:	7819      	ldrb	r1, [r3, #0]
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f002 f82f 	bl	800d6fe <USBD_LL_Transmit>

    ret = USBD_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	24000097 	.word	0x24000097

0800b6b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	32b0      	adds	r2, #176	@ 0xb0
 800b6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	32b0      	adds	r2, #176	@ 0xb0
 800b6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e018      	b.n	800b714 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7c1b      	ldrb	r3, [r3, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10a      	bne.n	800b700 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b71c <USBD_CDC_ReceivePacket+0x68>)
 800b6ec:	7819      	ldrb	r1, [r3, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b6f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f002 f821 	bl	800d740 <USBD_LL_PrepareReceive>
 800b6fe:	e008      	b.n	800b712 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b700:	4b06      	ldr	r3, [pc, #24]	@ (800b71c <USBD_CDC_ReceivePacket+0x68>)
 800b702:	7819      	ldrb	r1, [r3, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b70a:	2340      	movs	r3, #64	@ 0x40
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f002 f817 	bl	800d740 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	24000098 	.word	0x24000098

0800b720 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	e01f      	b.n	800b778 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	79fa      	ldrb	r2, [r7, #7]
 800b76a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f001 fe8d 	bl	800d48c <USBD_LL_Init>
 800b772:	4603      	mov	r3, r0
 800b774:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b776:	7dfb      	ldrb	r3, [r7, #23]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b78a:	2300      	movs	r3, #0
 800b78c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	e025      	b.n	800b7e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	32ae      	adds	r2, #174	@ 0xae
 800b7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00f      	beq.n	800b7d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	32ae      	adds	r2, #174	@ 0xae
 800b7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c4:	f107 020e 	add.w	r2, r7, #14
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 fe99 	bl	800d52c <USBD_LL_Start>
 800b7fa:	4603      	mov	r3, r0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b80c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	460b      	mov	r3, r1
 800b824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b830:	2b00      	cmp	r3, #0
 800b832:	d009      	beq.n	800b848 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	4611      	mov	r1, r2
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	4798      	blx	r3
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	460b      	mov	r3, r1
 800b85c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	78fa      	ldrb	r2, [r7, #3]
 800b86c:	4611      	mov	r1, r2
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b878:	2303      	movs	r3, #3
 800b87a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	4618      	mov	r0, r3
 800b89a:	f001 f936 	bl	800cb0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b8ba:	f003 031f 	and.w	r3, r3, #31
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d01a      	beq.n	800b8f8 <USBD_LL_SetupStage+0x72>
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d822      	bhi.n	800b90c <USBD_LL_SetupStage+0x86>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <USBD_LL_SetupStage+0x4a>
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d00a      	beq.n	800b8e4 <USBD_LL_SetupStage+0x5e>
 800b8ce:	e01d      	b.n	800b90c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fb63 	bl	800bfa4 <USBD_StdDevReq>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e2:	e020      	b.n	800b926 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fbcb 	bl	800c088 <USBD_StdItfReq>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f6:	e016      	b.n	800b926 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fc2d 	bl	800c160 <USBD_StdEPReq>
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]
      break;
 800b90a:	e00c      	b.n	800b926 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b912:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b916:	b2db      	uxtb	r3, r3
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f001 fe66 	bl	800d5ec <USBD_LL_StallEP>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]
      break;
 800b924:	bf00      	nop
  }

  return ret;
 800b926:	7bfb      	ldrb	r3, [r7, #15]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	460b      	mov	r3, r1
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d16e      	bne.n	800ba26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b94e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b956:	2b03      	cmp	r3, #3
 800b958:	f040 8098 	bne.w	800ba8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	689a      	ldr	r2, [r3, #8]
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	429a      	cmp	r2, r3
 800b966:	d913      	bls.n	800b990 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	1ad2      	subs	r2, r2, r3
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	68da      	ldr	r2, [r3, #12]
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	4293      	cmp	r3, r2
 800b980:	bf28      	it	cs
 800b982:	4613      	movcs	r3, r2
 800b984:	461a      	mov	r2, r3
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f001 f9be 	bl	800cd0a <USBD_CtlContinueRx>
 800b98e:	e07d      	b.n	800ba8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b996:	f003 031f 	and.w	r3, r3, #31
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d014      	beq.n	800b9c8 <USBD_LL_DataOutStage+0x98>
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d81d      	bhi.n	800b9de <USBD_LL_DataOutStage+0xae>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <USBD_LL_DataOutStage+0x7c>
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d003      	beq.n	800b9b2 <USBD_LL_DataOutStage+0x82>
 800b9aa:	e018      	b.n	800b9de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	75bb      	strb	r3, [r7, #22]
            break;
 800b9b0:	e018      	b.n	800b9e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 fa64 	bl	800be8a <USBD_CoreFindIF>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	75bb      	strb	r3, [r7, #22]
            break;
 800b9c6:	e00d      	b.n	800b9e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 fa66 	bl	800bea4 <USBD_CoreFindEP>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	75bb      	strb	r3, [r7, #22]
            break;
 800b9dc:	e002      	b.n	800b9e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b9e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d119      	bne.n	800ba1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d113      	bne.n	800ba1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b9f6:	7dba      	ldrb	r2, [r7, #22]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	32ae      	adds	r2, #174	@ 0xae
 800b9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00b      	beq.n	800ba1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ba06:	7dba      	ldrb	r2, [r7, #22]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ba0e:	7dba      	ldrb	r2, [r7, #22]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	32ae      	adds	r2, #174	@ 0xae
 800ba14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f001 f984 	bl	800cd2c <USBD_CtlSendStatus>
 800ba24:	e032      	b.n	800ba8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ba26:	7afb      	ldrb	r3, [r7, #11]
 800ba28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	4619      	mov	r1, r3
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 fa37 	bl	800bea4 <USBD_CoreFindEP>
 800ba36:	4603      	mov	r3, r0
 800ba38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba3a:	7dbb      	ldrb	r3, [r7, #22]
 800ba3c:	2bff      	cmp	r3, #255	@ 0xff
 800ba3e:	d025      	beq.n	800ba8c <USBD_LL_DataOutStage+0x15c>
 800ba40:	7dbb      	ldrb	r3, [r7, #22]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d122      	bne.n	800ba8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d117      	bne.n	800ba82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ba52:	7dba      	ldrb	r2, [r7, #22]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	32ae      	adds	r2, #174	@ 0xae
 800ba58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00f      	beq.n	800ba82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ba62:	7dba      	ldrb	r2, [r7, #22]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ba6a:	7dba      	ldrb	r2, [r7, #22]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	32ae      	adds	r2, #174	@ 0xae
 800ba70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	7afa      	ldrb	r2, [r7, #11]
 800ba78:	4611      	mov	r1, r2
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	4798      	blx	r3
 800ba7e:	4603      	mov	r3, r0
 800ba80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	e000      	b.n	800ba8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b086      	sub	sp, #24
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	60f8      	str	r0, [r7, #12]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	607a      	str	r2, [r7, #4]
 800baa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800baa4:	7afb      	ldrb	r3, [r7, #11]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d16f      	bne.n	800bb8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3314      	adds	r3, #20
 800baae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d15a      	bne.n	800bb70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	689a      	ldr	r2, [r3, #8]
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d914      	bls.n	800baf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	689a      	ldr	r2, [r3, #8]
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	1ad2      	subs	r2, r2, r3
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	461a      	mov	r2, r3
 800bada:	6879      	ldr	r1, [r7, #4]
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f001 f8e6 	bl	800ccae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bae2:	2300      	movs	r3, #0
 800bae4:	2200      	movs	r2, #0
 800bae6:	2100      	movs	r1, #0
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f001 fe29 	bl	800d740 <USBD_LL_PrepareReceive>
 800baee:	e03f      	b.n	800bb70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	68da      	ldr	r2, [r3, #12]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d11c      	bne.n	800bb36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d316      	bcc.n	800bb36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d20f      	bcs.n	800bb36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f001 f8c7 	bl	800ccae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb28:	2300      	movs	r3, #0
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f001 fe06 	bl	800d740 <USBD_LL_PrepareReceive>
 800bb34:	e01c      	b.n	800bb70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d10f      	bne.n	800bb62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d009      	beq.n	800bb62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb62:	2180      	movs	r1, #128	@ 0x80
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f001 fd41 	bl	800d5ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f001 f8f1 	bl	800cd52 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d03a      	beq.n	800bbf0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fe42 	bl	800b804 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bb88:	e032      	b.n	800bbf0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bb8a:	7afb      	ldrb	r3, [r7, #11]
 800bb8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	4619      	mov	r1, r3
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f985 	bl	800bea4 <USBD_CoreFindEP>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb9e:	7dfb      	ldrb	r3, [r7, #23]
 800bba0:	2bff      	cmp	r3, #255	@ 0xff
 800bba2:	d025      	beq.n	800bbf0 <USBD_LL_DataInStage+0x15a>
 800bba4:	7dfb      	ldrb	r3, [r7, #23]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d122      	bne.n	800bbf0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d11c      	bne.n	800bbf0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bbb6:	7dfa      	ldrb	r2, [r7, #23]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	32ae      	adds	r2, #174	@ 0xae
 800bbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d014      	beq.n	800bbf0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bbc6:	7dfa      	ldrb	r2, [r7, #23]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bbce:	7dfa      	ldrb	r2, [r7, #23]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	32ae      	adds	r2, #174	@ 0xae
 800bbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	7afa      	ldrb	r2, [r7, #11]
 800bbdc:	4611      	mov	r1, r2
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	4798      	blx	r3
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bbe6:	7dbb      	ldrb	r3, [r7, #22]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bbec:	7dbb      	ldrb	r3, [r7, #22]
 800bbee:	e000      	b.n	800bbf2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3718      	adds	r7, #24
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d014      	beq.n	800bc60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00e      	beq.n	800bc60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6852      	ldr	r2, [r2, #4]
 800bc4e:	b2d2      	uxtb	r2, r2
 800bc50:	4611      	mov	r1, r2
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	4798      	blx	r3
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc60:	2340      	movs	r3, #64	@ 0x40
 800bc62:	2200      	movs	r2, #0
 800bc64:	2100      	movs	r1, #0
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 fc7b 	bl	800d562 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2240      	movs	r2, #64	@ 0x40
 800bc78:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc7c:	2340      	movs	r3, #64	@ 0x40
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2180      	movs	r1, #128	@ 0x80
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 fc6d 	bl	800d562 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2240      	movs	r2, #64	@ 0x40
 800bc92:	621a      	str	r2, [r3, #32]

  return ret;
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	78fa      	ldrb	r2, [r7, #3]
 800bcae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d006      	beq.n	800bce0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2204      	movs	r2, #4
 800bce4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b083      	sub	sp, #12
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b04      	cmp	r3, #4
 800bd08:	d106      	bne.n	800bd18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b082      	sub	sp, #8
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d110      	bne.n	800bd5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00b      	beq.n	800bd5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d005      	beq.n	800bd5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b082      	sub	sp, #8
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	32ae      	adds	r2, #174	@ 0xae
 800bd7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d101      	bne.n	800bd88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e01c      	b.n	800bdc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d115      	bne.n	800bdc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	32ae      	adds	r2, #174	@ 0xae
 800bd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	32ae      	adds	r2, #174	@ 0xae
 800bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	78fa      	ldrb	r2, [r7, #3]
 800bdba:	4611      	mov	r1, r2
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	32ae      	adds	r2, #174	@ 0xae
 800bde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e01c      	b.n	800be26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d115      	bne.n	800be24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	32ae      	adds	r2, #174	@ 0xae
 800be02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00b      	beq.n	800be24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	32ae      	adds	r2, #174	@ 0xae
 800be16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be1c:	78fa      	ldrb	r2, [r7, #3]
 800be1e:	4611      	mov	r1, r2
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00e      	beq.n	800be80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	6852      	ldr	r2, [r2, #4]
 800be6e:	b2d2      	uxtb	r2, r2
 800be70:	4611      	mov	r1, r2
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	4798      	blx	r3
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800be7c:	2303      	movs	r3, #3
 800be7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b083      	sub	sp, #12
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be98:	4618      	mov	r0, r3
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800beb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b086      	sub	sp, #24
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	460b      	mov	r3, r1
 800bec8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bed2:	2300      	movs	r3, #0
 800bed4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	885b      	ldrh	r3, [r3, #2]
 800beda:	b29b      	uxth	r3, r3
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	7812      	ldrb	r2, [r2, #0]
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d91f      	bls.n	800bf24 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800beea:	e013      	b.n	800bf14 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800beec:	f107 030a 	add.w	r3, r7, #10
 800bef0:	4619      	mov	r1, r3
 800bef2:	6978      	ldr	r0, [r7, #20]
 800bef4:	f000 f81b 	bl	800bf2e <USBD_GetNextDesc>
 800bef8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	785b      	ldrb	r3, [r3, #1]
 800befe:	2b05      	cmp	r3, #5
 800bf00:	d108      	bne.n	800bf14 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	789b      	ldrb	r3, [r3, #2]
 800bf0a:	78fa      	ldrb	r2, [r7, #3]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d008      	beq.n	800bf22 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	885b      	ldrh	r3, [r3, #2]
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	897b      	ldrh	r3, [r7, #10]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d8e5      	bhi.n	800beec <USBD_GetEpDesc+0x2e>
 800bf20:	e000      	b.n	800bf24 <USBD_GetEpDesc+0x66>
          break;
 800bf22:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bf24:	693b      	ldr	r3, [r7, #16]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b085      	sub	sp, #20
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	7812      	ldrb	r2, [r2, #0]
 800bf44:	4413      	add	r3, r2
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	461a      	mov	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4413      	add	r3, r2
 800bf56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf58:	68fb      	ldr	r3, [r7, #12]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3714      	adds	r7, #20
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b087      	sub	sp, #28
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bf88:	021b      	lsls	r3, r3, #8
 800bf8a:	b21a      	sxth	r2, r3
 800bf8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	b21b      	sxth	r3, r3
 800bf94:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf96:	89fb      	ldrh	r3, [r7, #14]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	371c      	adds	r7, #28
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfba:	2b40      	cmp	r3, #64	@ 0x40
 800bfbc:	d005      	beq.n	800bfca <USBD_StdDevReq+0x26>
 800bfbe:	2b40      	cmp	r3, #64	@ 0x40
 800bfc0:	d857      	bhi.n	800c072 <USBD_StdDevReq+0xce>
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00f      	beq.n	800bfe6 <USBD_StdDevReq+0x42>
 800bfc6:	2b20      	cmp	r3, #32
 800bfc8:	d153      	bne.n	800c072 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	32ae      	adds	r2, #174	@ 0xae
 800bfd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	4798      	blx	r3
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfe4:	e04a      	b.n	800c07c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	2b09      	cmp	r3, #9
 800bfec:	d83b      	bhi.n	800c066 <USBD_StdDevReq+0xc2>
 800bfee:	a201      	add	r2, pc, #4	@ (adr r2, 800bff4 <USBD_StdDevReq+0x50>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c049 	.word	0x0800c049
 800bff8:	0800c05d 	.word	0x0800c05d
 800bffc:	0800c067 	.word	0x0800c067
 800c000:	0800c053 	.word	0x0800c053
 800c004:	0800c067 	.word	0x0800c067
 800c008:	0800c027 	.word	0x0800c027
 800c00c:	0800c01d 	.word	0x0800c01d
 800c010:	0800c067 	.word	0x0800c067
 800c014:	0800c03f 	.word	0x0800c03f
 800c018:	0800c031 	.word	0x0800c031
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fa3c 	bl	800c49c <USBD_GetDescriptor>
          break;
 800c024:	e024      	b.n	800c070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fbcb 	bl	800c7c4 <USBD_SetAddress>
          break;
 800c02e:	e01f      	b.n	800c070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fc0a 	bl	800c84c <USBD_SetConfig>
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]
          break;
 800c03c:	e018      	b.n	800c070 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fcad 	bl	800c9a0 <USBD_GetConfig>
          break;
 800c046:	e013      	b.n	800c070 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fcde 	bl	800ca0c <USBD_GetStatus>
          break;
 800c050:	e00e      	b.n	800c070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fd0d 	bl	800ca74 <USBD_SetFeature>
          break;
 800c05a:	e009      	b.n	800c070 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fd31 	bl	800cac6 <USBD_ClrFeature>
          break;
 800c064:	e004      	b.n	800c070 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fd88 	bl	800cb7e <USBD_CtlError>
          break;
 800c06e:	bf00      	nop
      }
      break;
 800c070:	e004      	b.n	800c07c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fd82 	bl	800cb7e <USBD_CtlError>
      break;
 800c07a:	bf00      	nop
  }

  return ret;
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop

0800c088 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c09e:	2b40      	cmp	r3, #64	@ 0x40
 800c0a0:	d005      	beq.n	800c0ae <USBD_StdItfReq+0x26>
 800c0a2:	2b40      	cmp	r3, #64	@ 0x40
 800c0a4:	d852      	bhi.n	800c14c <USBD_StdItfReq+0xc4>
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d001      	beq.n	800c0ae <USBD_StdItfReq+0x26>
 800c0aa:	2b20      	cmp	r3, #32
 800c0ac:	d14e      	bne.n	800c14c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d840      	bhi.n	800c13e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	889b      	ldrh	r3, [r3, #4]
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d836      	bhi.n	800c134 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	889b      	ldrh	r3, [r3, #4]
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff fedb 	bl	800be8a <USBD_CoreFindIF>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0d8:	7bbb      	ldrb	r3, [r7, #14]
 800c0da:	2bff      	cmp	r3, #255	@ 0xff
 800c0dc:	d01d      	beq.n	800c11a <USBD_StdItfReq+0x92>
 800c0de:	7bbb      	ldrb	r3, [r7, #14]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d11a      	bne.n	800c11a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c0e4:	7bba      	ldrb	r2, [r7, #14]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32ae      	adds	r2, #174	@ 0xae
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00f      	beq.n	800c114 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c0f4:	7bba      	ldrb	r2, [r7, #14]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0fc:	7bba      	ldrb	r2, [r7, #14]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	32ae      	adds	r2, #174	@ 0xae
 800c102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	4798      	blx	r3
 800c10e:	4603      	mov	r3, r0
 800c110:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c112:	e004      	b.n	800c11e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c114:	2303      	movs	r3, #3
 800c116:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c118:	e001      	b.n	800c11e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c11a:	2303      	movs	r3, #3
 800c11c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	88db      	ldrh	r3, [r3, #6]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d110      	bne.n	800c148 <USBD_StdItfReq+0xc0>
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10d      	bne.n	800c148 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fdfd 	bl	800cd2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c132:	e009      	b.n	800c148 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fd21 	bl	800cb7e <USBD_CtlError>
          break;
 800c13c:	e004      	b.n	800c148 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fd1c 	bl	800cb7e <USBD_CtlError>
          break;
 800c146:	e000      	b.n	800c14a <USBD_StdItfReq+0xc2>
          break;
 800c148:	bf00      	nop
      }
      break;
 800c14a:	e004      	b.n	800c156 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fd15 	bl	800cb7e <USBD_CtlError>
      break;
 800c154:	bf00      	nop
  }

  return ret;
 800c156:	7bfb      	ldrb	r3, [r7, #15]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	889b      	ldrh	r3, [r3, #4]
 800c172:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c17c:	2b40      	cmp	r3, #64	@ 0x40
 800c17e:	d007      	beq.n	800c190 <USBD_StdEPReq+0x30>
 800c180:	2b40      	cmp	r3, #64	@ 0x40
 800c182:	f200 817f 	bhi.w	800c484 <USBD_StdEPReq+0x324>
 800c186:	2b00      	cmp	r3, #0
 800c188:	d02a      	beq.n	800c1e0 <USBD_StdEPReq+0x80>
 800c18a:	2b20      	cmp	r3, #32
 800c18c:	f040 817a 	bne.w	800c484 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff fe85 	bl	800bea4 <USBD_CoreFindEP>
 800c19a:	4603      	mov	r3, r0
 800c19c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c19e:	7b7b      	ldrb	r3, [r7, #13]
 800c1a0:	2bff      	cmp	r3, #255	@ 0xff
 800c1a2:	f000 8174 	beq.w	800c48e <USBD_StdEPReq+0x32e>
 800c1a6:	7b7b      	ldrb	r3, [r7, #13]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f040 8170 	bne.w	800c48e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c1ae:	7b7a      	ldrb	r2, [r7, #13]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c1b6:	7b7a      	ldrb	r2, [r7, #13]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	32ae      	adds	r2, #174	@ 0xae
 800c1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 8163 	beq.w	800c48e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c1c8:	7b7a      	ldrb	r2, [r7, #13]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	32ae      	adds	r2, #174	@ 0xae
 800c1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	6839      	ldr	r1, [r7, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	4798      	blx	r3
 800c1da:	4603      	mov	r3, r0
 800c1dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c1de:	e156      	b.n	800c48e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	785b      	ldrb	r3, [r3, #1]
 800c1e4:	2b03      	cmp	r3, #3
 800c1e6:	d008      	beq.n	800c1fa <USBD_StdEPReq+0x9a>
 800c1e8:	2b03      	cmp	r3, #3
 800c1ea:	f300 8145 	bgt.w	800c478 <USBD_StdEPReq+0x318>
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f000 809b 	beq.w	800c32a <USBD_StdEPReq+0x1ca>
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d03c      	beq.n	800c272 <USBD_StdEPReq+0x112>
 800c1f8:	e13e      	b.n	800c478 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b02      	cmp	r3, #2
 800c204:	d002      	beq.n	800c20c <USBD_StdEPReq+0xac>
 800c206:	2b03      	cmp	r3, #3
 800c208:	d016      	beq.n	800c238 <USBD_StdEPReq+0xd8>
 800c20a:	e02c      	b.n	800c266 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c20c:	7bbb      	ldrb	r3, [r7, #14]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00d      	beq.n	800c22e <USBD_StdEPReq+0xce>
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	2b80      	cmp	r3, #128	@ 0x80
 800c216:	d00a      	beq.n	800c22e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 f9e5 	bl	800d5ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c222:	2180      	movs	r1, #128	@ 0x80
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f001 f9e1 	bl	800d5ec <USBD_LL_StallEP>
 800c22a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c22c:	e020      	b.n	800c270 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fca4 	bl	800cb7e <USBD_CtlError>
              break;
 800c236:	e01b      	b.n	800c270 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	885b      	ldrh	r3, [r3, #2]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10e      	bne.n	800c25e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c240:	7bbb      	ldrb	r3, [r7, #14]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00b      	beq.n	800c25e <USBD_StdEPReq+0xfe>
 800c246:	7bbb      	ldrb	r3, [r7, #14]
 800c248:	2b80      	cmp	r3, #128	@ 0x80
 800c24a:	d008      	beq.n	800c25e <USBD_StdEPReq+0xfe>
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	88db      	ldrh	r3, [r3, #6]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d104      	bne.n	800c25e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	4619      	mov	r1, r3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f001 f9c7 	bl	800d5ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fd64 	bl	800cd2c <USBD_CtlSendStatus>

              break;
 800c264:	e004      	b.n	800c270 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fc88 	bl	800cb7e <USBD_CtlError>
              break;
 800c26e:	bf00      	nop
          }
          break;
 800c270:	e107      	b.n	800c482 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d002      	beq.n	800c284 <USBD_StdEPReq+0x124>
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d016      	beq.n	800c2b0 <USBD_StdEPReq+0x150>
 800c282:	e04b      	b.n	800c31c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c284:	7bbb      	ldrb	r3, [r7, #14]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00d      	beq.n	800c2a6 <USBD_StdEPReq+0x146>
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	2b80      	cmp	r3, #128	@ 0x80
 800c28e:	d00a      	beq.n	800c2a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f001 f9a9 	bl	800d5ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c29a:	2180      	movs	r1, #128	@ 0x80
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f001 f9a5 	bl	800d5ec <USBD_LL_StallEP>
 800c2a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2a4:	e040      	b.n	800c328 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fc68 	bl	800cb7e <USBD_CtlError>
              break;
 800c2ae:	e03b      	b.n	800c328 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	885b      	ldrh	r3, [r3, #2]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d136      	bne.n	800c326 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d004      	beq.n	800c2cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c2c2:	7bbb      	ldrb	r3, [r7, #14]
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 f9af 	bl	800d62a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fd2d 	bl	800cd2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff fde4 	bl	800bea4 <USBD_CoreFindEP>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2e0:	7b7b      	ldrb	r3, [r7, #13]
 800c2e2:	2bff      	cmp	r3, #255	@ 0xff
 800c2e4:	d01f      	beq.n	800c326 <USBD_StdEPReq+0x1c6>
 800c2e6:	7b7b      	ldrb	r3, [r7, #13]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d11c      	bne.n	800c326 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c2ec:	7b7a      	ldrb	r2, [r7, #13]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c2f4:	7b7a      	ldrb	r2, [r7, #13]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	32ae      	adds	r2, #174	@ 0xae
 800c2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d010      	beq.n	800c326 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c304:	7b7a      	ldrb	r2, [r7, #13]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	32ae      	adds	r2, #174	@ 0xae
 800c30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	4798      	blx	r3
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c31a:	e004      	b.n	800c326 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fc2d 	bl	800cb7e <USBD_CtlError>
              break;
 800c324:	e000      	b.n	800c328 <USBD_StdEPReq+0x1c8>
              break;
 800c326:	bf00      	nop
          }
          break;
 800c328:	e0ab      	b.n	800c482 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b02      	cmp	r3, #2
 800c334:	d002      	beq.n	800c33c <USBD_StdEPReq+0x1dc>
 800c336:	2b03      	cmp	r3, #3
 800c338:	d032      	beq.n	800c3a0 <USBD_StdEPReq+0x240>
 800c33a:	e097      	b.n	800c46c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d007      	beq.n	800c352 <USBD_StdEPReq+0x1f2>
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	2b80      	cmp	r3, #128	@ 0x80
 800c346:	d004      	beq.n	800c352 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fc17 	bl	800cb7e <USBD_CtlError>
                break;
 800c350:	e091      	b.n	800c476 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c356:	2b00      	cmp	r3, #0
 800c358:	da0b      	bge.n	800c372 <USBD_StdEPReq+0x212>
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c360:	4613      	mov	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	3310      	adds	r3, #16
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	4413      	add	r3, r2
 800c36e:	3304      	adds	r3, #4
 800c370:	e00b      	b.n	800c38a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c372:	7bbb      	ldrb	r3, [r7, #14]
 800c374:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	4413      	add	r3, r2
 800c388:	3304      	adds	r3, #4
 800c38a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2200      	movs	r2, #0
 800c390:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2202      	movs	r2, #2
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fc6d 	bl	800cc78 <USBD_CtlSendData>
              break;
 800c39e:	e06a      	b.n	800c476 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c3a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	da11      	bge.n	800c3cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
 800c3aa:	f003 020f 	and.w	r2, r3, #15
 800c3ae:	6879      	ldr	r1, [r7, #4]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	440b      	add	r3, r1
 800c3ba:	3324      	adds	r3, #36	@ 0x24
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d117      	bne.n	800c3f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 fbda 	bl	800cb7e <USBD_CtlError>
                  break;
 800c3ca:	e054      	b.n	800c476 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	f003 020f 	and.w	r2, r3, #15
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	4413      	add	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	440b      	add	r3, r1
 800c3de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c3e2:	881b      	ldrh	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d104      	bne.n	800c3f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fbc7 	bl	800cb7e <USBD_CtlError>
                  break;
 800c3f0:	e041      	b.n	800c476 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	da0b      	bge.n	800c412 <USBD_StdEPReq+0x2b2>
 800c3fa:	7bbb      	ldrb	r3, [r7, #14]
 800c3fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c400:	4613      	mov	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	3310      	adds	r3, #16
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	4413      	add	r3, r2
 800c40e:	3304      	adds	r3, #4
 800c410:	e00b      	b.n	800c42a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c412:	7bbb      	ldrb	r3, [r7, #14]
 800c414:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c418:	4613      	mov	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	4413      	add	r3, r2
 800c428:	3304      	adds	r3, #4
 800c42a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c42c:	7bbb      	ldrb	r3, [r7, #14]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d002      	beq.n	800c438 <USBD_StdEPReq+0x2d8>
 800c432:	7bbb      	ldrb	r3, [r7, #14]
 800c434:	2b80      	cmp	r3, #128	@ 0x80
 800c436:	d103      	bne.n	800c440 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	e00e      	b.n	800c45e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c440:	7bbb      	ldrb	r3, [r7, #14]
 800c442:	4619      	mov	r1, r3
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f001 f90f 	bl	800d668 <USBD_LL_IsStallEP>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d003      	beq.n	800c458 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2201      	movs	r2, #1
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	e002      	b.n	800c45e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2202      	movs	r2, #2
 800c462:	4619      	mov	r1, r3
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fc07 	bl	800cc78 <USBD_CtlSendData>
              break;
 800c46a:	e004      	b.n	800c476 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fb85 	bl	800cb7e <USBD_CtlError>
              break;
 800c474:	bf00      	nop
          }
          break;
 800c476:	e004      	b.n	800c482 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fb7f 	bl	800cb7e <USBD_CtlError>
          break;
 800c480:	bf00      	nop
      }
      break;
 800c482:	e005      	b.n	800c490 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fb79 	bl	800cb7e <USBD_CtlError>
      break;
 800c48c:	e000      	b.n	800c490 <USBD_StdEPReq+0x330>
      break;
 800c48e:	bf00      	nop
  }

  return ret;
 800c490:	7bfb      	ldrb	r3, [r7, #15]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	885b      	ldrh	r3, [r3, #2]
 800c4b6:	0a1b      	lsrs	r3, r3, #8
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	2b0e      	cmp	r3, #14
 800c4be:	f200 8152 	bhi.w	800c766 <USBD_GetDescriptor+0x2ca>
 800c4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c8 <USBD_GetDescriptor+0x2c>)
 800c4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c8:	0800c539 	.word	0x0800c539
 800c4cc:	0800c551 	.word	0x0800c551
 800c4d0:	0800c591 	.word	0x0800c591
 800c4d4:	0800c767 	.word	0x0800c767
 800c4d8:	0800c767 	.word	0x0800c767
 800c4dc:	0800c707 	.word	0x0800c707
 800c4e0:	0800c733 	.word	0x0800c733
 800c4e4:	0800c767 	.word	0x0800c767
 800c4e8:	0800c767 	.word	0x0800c767
 800c4ec:	0800c767 	.word	0x0800c767
 800c4f0:	0800c767 	.word	0x0800c767
 800c4f4:	0800c767 	.word	0x0800c767
 800c4f8:	0800c767 	.word	0x0800c767
 800c4fc:	0800c767 	.word	0x0800c767
 800c500:	0800c505 	.word	0x0800c505
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c50a:	69db      	ldr	r3, [r3, #28]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00b      	beq.n	800c528 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	7c12      	ldrb	r2, [r2, #16]
 800c51c:	f107 0108 	add.w	r1, r7, #8
 800c520:	4610      	mov	r0, r2
 800c522:	4798      	blx	r3
 800c524:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c526:	e126      	b.n	800c776 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fb27 	bl	800cb7e <USBD_CtlError>
        err++;
 800c530:	7afb      	ldrb	r3, [r7, #11]
 800c532:	3301      	adds	r3, #1
 800c534:	72fb      	strb	r3, [r7, #11]
      break;
 800c536:	e11e      	b.n	800c776 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	7c12      	ldrb	r2, [r2, #16]
 800c544:	f107 0108 	add.w	r1, r7, #8
 800c548:	4610      	mov	r0, r2
 800c54a:	4798      	blx	r3
 800c54c:	60f8      	str	r0, [r7, #12]
      break;
 800c54e:	e112      	b.n	800c776 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	7c1b      	ldrb	r3, [r3, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10d      	bne.n	800c574 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c560:	f107 0208 	add.w	r2, r7, #8
 800c564:	4610      	mov	r0, r2
 800c566:	4798      	blx	r3
 800c568:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3301      	adds	r3, #1
 800c56e:	2202      	movs	r2, #2
 800c570:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c572:	e100      	b.n	800c776 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c57c:	f107 0208 	add.w	r2, r7, #8
 800c580:	4610      	mov	r0, r2
 800c582:	4798      	blx	r3
 800c584:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3301      	adds	r3, #1
 800c58a:	2202      	movs	r2, #2
 800c58c:	701a      	strb	r2, [r3, #0]
      break;
 800c58e:	e0f2      	b.n	800c776 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	885b      	ldrh	r3, [r3, #2]
 800c594:	b2db      	uxtb	r3, r3
 800c596:	2b05      	cmp	r3, #5
 800c598:	f200 80ac 	bhi.w	800c6f4 <USBD_GetDescriptor+0x258>
 800c59c:	a201      	add	r2, pc, #4	@ (adr r2, 800c5a4 <USBD_GetDescriptor+0x108>)
 800c59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a2:	bf00      	nop
 800c5a4:	0800c5bd 	.word	0x0800c5bd
 800c5a8:	0800c5f1 	.word	0x0800c5f1
 800c5ac:	0800c625 	.word	0x0800c625
 800c5b0:	0800c659 	.word	0x0800c659
 800c5b4:	0800c68d 	.word	0x0800c68d
 800c5b8:	0800c6c1 	.word	0x0800c6c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	7c12      	ldrb	r2, [r2, #16]
 800c5d4:	f107 0108 	add.w	r1, r7, #8
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4798      	blx	r3
 800c5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5de:	e091      	b.n	800c704 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 facb 	bl	800cb7e <USBD_CtlError>
            err++;
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ee:	e089      	b.n	800c704 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00b      	beq.n	800c614 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	7c12      	ldrb	r2, [r2, #16]
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
 800c610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c612:	e077      	b.n	800c704 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fab1 	bl	800cb7e <USBD_CtlError>
            err++;
 800c61c:	7afb      	ldrb	r3, [r7, #11]
 800c61e:	3301      	adds	r3, #1
 800c620:	72fb      	strb	r3, [r7, #11]
          break;
 800c622:	e06f      	b.n	800c704 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	7c12      	ldrb	r2, [r2, #16]
 800c63c:	f107 0108 	add.w	r1, r7, #8
 800c640:	4610      	mov	r0, r2
 800c642:	4798      	blx	r3
 800c644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c646:	e05d      	b.n	800c704 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fa97 	bl	800cb7e <USBD_CtlError>
            err++;
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	3301      	adds	r3, #1
 800c654:	72fb      	strb	r3, [r7, #11]
          break;
 800c656:	e055      	b.n	800c704 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	7c12      	ldrb	r2, [r2, #16]
 800c670:	f107 0108 	add.w	r1, r7, #8
 800c674:	4610      	mov	r0, r2
 800c676:	4798      	blx	r3
 800c678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c67a:	e043      	b.n	800c704 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fa7d 	bl	800cb7e <USBD_CtlError>
            err++;
 800c684:	7afb      	ldrb	r3, [r7, #11]
 800c686:	3301      	adds	r3, #1
 800c688:	72fb      	strb	r3, [r7, #11]
          break;
 800c68a:	e03b      	b.n	800c704 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c692:	695b      	ldr	r3, [r3, #20]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00b      	beq.n	800c6b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	7c12      	ldrb	r2, [r2, #16]
 800c6a4:	f107 0108 	add.w	r1, r7, #8
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	4798      	blx	r3
 800c6ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ae:	e029      	b.n	800c704 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 fa63 	bl	800cb7e <USBD_CtlError>
            err++;
 800c6b8:	7afb      	ldrb	r3, [r7, #11]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c6be:	e021      	b.n	800c704 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	7c12      	ldrb	r2, [r2, #16]
 800c6d8:	f107 0108 	add.w	r1, r7, #8
 800c6dc:	4610      	mov	r0, r2
 800c6de:	4798      	blx	r3
 800c6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6e2:	e00f      	b.n	800c704 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fa49 	bl	800cb7e <USBD_CtlError>
            err++;
 800c6ec:	7afb      	ldrb	r3, [r7, #11]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6f2:	e007      	b.n	800c704 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 fa41 	bl	800cb7e <USBD_CtlError>
          err++;
 800c6fc:	7afb      	ldrb	r3, [r7, #11]
 800c6fe:	3301      	adds	r3, #1
 800c700:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c702:	bf00      	nop
      }
      break;
 800c704:	e037      	b.n	800c776 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	7c1b      	ldrb	r3, [r3, #16]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d109      	bne.n	800c722 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c716:	f107 0208 	add.w	r2, r7, #8
 800c71a:	4610      	mov	r0, r2
 800c71c:	4798      	blx	r3
 800c71e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c720:	e029      	b.n	800c776 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fa2a 	bl	800cb7e <USBD_CtlError>
        err++;
 800c72a:	7afb      	ldrb	r3, [r7, #11]
 800c72c:	3301      	adds	r3, #1
 800c72e:	72fb      	strb	r3, [r7, #11]
      break;
 800c730:	e021      	b.n	800c776 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	7c1b      	ldrb	r3, [r3, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10d      	bne.n	800c756 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c742:	f107 0208 	add.w	r2, r7, #8
 800c746:	4610      	mov	r0, r2
 800c748:	4798      	blx	r3
 800c74a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3301      	adds	r3, #1
 800c750:	2207      	movs	r2, #7
 800c752:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c754:	e00f      	b.n	800c776 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fa10 	bl	800cb7e <USBD_CtlError>
        err++;
 800c75e:	7afb      	ldrb	r3, [r7, #11]
 800c760:	3301      	adds	r3, #1
 800c762:	72fb      	strb	r3, [r7, #11]
      break;
 800c764:	e007      	b.n	800c776 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 fa08 	bl	800cb7e <USBD_CtlError>
      err++;
 800c76e:	7afb      	ldrb	r3, [r7, #11]
 800c770:	3301      	adds	r3, #1
 800c772:	72fb      	strb	r3, [r7, #11]
      break;
 800c774:	bf00      	nop
  }

  if (err != 0U)
 800c776:	7afb      	ldrb	r3, [r7, #11]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d11e      	bne.n	800c7ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	88db      	ldrh	r3, [r3, #6]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d016      	beq.n	800c7b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c784:	893b      	ldrh	r3, [r7, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00e      	beq.n	800c7a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	88da      	ldrh	r2, [r3, #6]
 800c78e:	893b      	ldrh	r3, [r7, #8]
 800c790:	4293      	cmp	r3, r2
 800c792:	bf28      	it	cs
 800c794:	4613      	movcs	r3, r2
 800c796:	b29b      	uxth	r3, r3
 800c798:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c79a:	893b      	ldrh	r3, [r7, #8]
 800c79c:	461a      	mov	r2, r3
 800c79e:	68f9      	ldr	r1, [r7, #12]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fa69 	bl	800cc78 <USBD_CtlSendData>
 800c7a6:	e009      	b.n	800c7bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f9e7 	bl	800cb7e <USBD_CtlError>
 800c7b0:	e004      	b.n	800c7bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 faba 	bl	800cd2c <USBD_CtlSendStatus>
 800c7b8:	e000      	b.n	800c7bc <USBD_GetDescriptor+0x320>
    return;
 800c7ba:	bf00      	nop
  }
}
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop

0800c7c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	889b      	ldrh	r3, [r3, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d131      	bne.n	800c83a <USBD_SetAddress+0x76>
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	88db      	ldrh	r3, [r3, #6]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d12d      	bne.n	800c83a <USBD_SetAddress+0x76>
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	885b      	ldrh	r3, [r3, #2]
 800c7e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7e4:	d829      	bhi.n	800c83a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	885b      	ldrh	r3, [r3, #2]
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d104      	bne.n	800c808 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f9bc 	bl	800cb7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c806:	e01d      	b.n	800c844 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	7bfa      	ldrb	r2, [r7, #15]
 800c80c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	4619      	mov	r1, r3
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 ff53 	bl	800d6c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fa86 	bl	800cd2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d004      	beq.n	800c830 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2202      	movs	r2, #2
 800c82a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c82e:	e009      	b.n	800c844 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c838:	e004      	b.n	800c844 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 f99e 	bl	800cb7e <USBD_CtlError>
  }
}
 800c842:	bf00      	nop
 800c844:	bf00      	nop
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	885b      	ldrh	r3, [r3, #2]
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	4b4e      	ldr	r3, [pc, #312]	@ (800c99c <USBD_SetConfig+0x150>)
 800c862:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c864:	4b4d      	ldr	r3, [pc, #308]	@ (800c99c <USBD_SetConfig+0x150>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d905      	bls.n	800c878 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c86c:	6839      	ldr	r1, [r7, #0]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f985 	bl	800cb7e <USBD_CtlError>
    return USBD_FAIL;
 800c874:	2303      	movs	r3, #3
 800c876:	e08c      	b.n	800c992 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	2b02      	cmp	r3, #2
 800c882:	d002      	beq.n	800c88a <USBD_SetConfig+0x3e>
 800c884:	2b03      	cmp	r3, #3
 800c886:	d029      	beq.n	800c8dc <USBD_SetConfig+0x90>
 800c888:	e075      	b.n	800c976 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c88a:	4b44      	ldr	r3, [pc, #272]	@ (800c99c <USBD_SetConfig+0x150>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d020      	beq.n	800c8d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c892:	4b42      	ldr	r3, [pc, #264]	@ (800c99c <USBD_SetConfig+0x150>)
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c89c:	4b3f      	ldr	r3, [pc, #252]	@ (800c99c <USBD_SetConfig+0x150>)
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7fe ffb9 	bl	800b81a <USBD_SetClassConfig>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d008      	beq.n	800c8c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f962 	bl	800cb7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8c2:	e065      	b.n	800c990 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fa31 	bl	800cd2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c8d2:	e05d      	b.n	800c990 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 fa29 	bl	800cd2c <USBD_CtlSendStatus>
      break;
 800c8da:	e059      	b.n	800c990 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c8dc:	4b2f      	ldr	r3, [pc, #188]	@ (800c99c <USBD_SetConfig+0x150>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d112      	bne.n	800c90a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2202      	movs	r2, #2
 800c8e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c8ec:	4b2b      	ldr	r3, [pc, #172]	@ (800c99c <USBD_SetConfig+0x150>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8f6:	4b29      	ldr	r3, [pc, #164]	@ (800c99c <USBD_SetConfig+0x150>)
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7fe ffa8 	bl	800b852 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fa12 	bl	800cd2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c908:	e042      	b.n	800c990 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c90a:	4b24      	ldr	r3, [pc, #144]	@ (800c99c <USBD_SetConfig+0x150>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	429a      	cmp	r2, r3
 800c916:	d02a      	beq.n	800c96e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7fe ff96 	bl	800b852 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c926:	4b1d      	ldr	r3, [pc, #116]	@ (800c99c <USBD_SetConfig+0x150>)
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c930:	4b1a      	ldr	r3, [pc, #104]	@ (800c99c <USBD_SetConfig+0x150>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	4619      	mov	r1, r3
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7fe ff6f 	bl	800b81a <USBD_SetClassConfig>
 800c93c:	4603      	mov	r3, r0
 800c93e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00f      	beq.n	800c966 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f918 	bl	800cb7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	b2db      	uxtb	r3, r3
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7fe ff7b 	bl	800b852 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c964:	e014      	b.n	800c990 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f9e0 	bl	800cd2c <USBD_CtlSendStatus>
      break;
 800c96c:	e010      	b.n	800c990 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f9dc 	bl	800cd2c <USBD_CtlSendStatus>
      break;
 800c974:	e00c      	b.n	800c990 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f900 	bl	800cb7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c97e:	4b07      	ldr	r3, [pc, #28]	@ (800c99c <USBD_SetConfig+0x150>)
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7fe ff64 	bl	800b852 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c98a:	2303      	movs	r3, #3
 800c98c:	73fb      	strb	r3, [r7, #15]
      break;
 800c98e:	bf00      	nop
  }

  return ret;
 800c990:	7bfb      	ldrb	r3, [r7, #15]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	24001c58 	.word	0x24001c58

0800c9a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	88db      	ldrh	r3, [r3, #6]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d004      	beq.n	800c9bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 f8e2 	bl	800cb7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c9ba:	e023      	b.n	800ca04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	dc02      	bgt.n	800c9ce <USBD_GetConfig+0x2e>
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	dc03      	bgt.n	800c9d4 <USBD_GetConfig+0x34>
 800c9cc:	e015      	b.n	800c9fa <USBD_GetConfig+0x5a>
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d00b      	beq.n	800c9ea <USBD_GetConfig+0x4a>
 800c9d2:	e012      	b.n	800c9fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	3308      	adds	r3, #8
 800c9de:	2201      	movs	r2, #1
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f948 	bl	800cc78 <USBD_CtlSendData>
        break;
 800c9e8:	e00c      	b.n	800ca04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f940 	bl	800cc78 <USBD_CtlSendData>
        break;
 800c9f8:	e004      	b.n	800ca04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f8be 	bl	800cb7e <USBD_CtlError>
        break;
 800ca02:	bf00      	nop
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d81e      	bhi.n	800ca62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	88db      	ldrh	r3, [r3, #6]
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d004      	beq.n	800ca36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f8a5 	bl	800cb7e <USBD_CtlError>
        break;
 800ca34:	e01a      	b.n	800ca6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d005      	beq.n	800ca52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	f043 0202 	orr.w	r2, r3, #2
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	330c      	adds	r3, #12
 800ca56:	2202      	movs	r2, #2
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f90c 	bl	800cc78 <USBD_CtlSendData>
      break;
 800ca60:	e004      	b.n	800ca6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f88a 	bl	800cb7e <USBD_CtlError>
      break;
 800ca6a:	bf00      	nop
  }
}
 800ca6c:	bf00      	nop
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	885b      	ldrh	r3, [r3, #2]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d107      	bne.n	800ca96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f94c 	bl	800cd2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ca94:	e013      	b.n	800cabe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	885b      	ldrh	r3, [r3, #2]
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	d10b      	bne.n	800cab6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	889b      	ldrh	r3, [r3, #4]
 800caa2:	0a1b      	lsrs	r3, r3, #8
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f93c 	bl	800cd2c <USBD_CtlSendStatus>
}
 800cab4:	e003      	b.n	800cabe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f860 	bl	800cb7e <USBD_CtlError>
}
 800cabe:	bf00      	nop
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	3b01      	subs	r3, #1
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d80b      	bhi.n	800caf6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	885b      	ldrh	r3, [r3, #2]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d10c      	bne.n	800cb00 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f91c 	bl	800cd2c <USBD_CtlSendStatus>
      }
      break;
 800caf4:	e004      	b.n	800cb00 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f840 	bl	800cb7e <USBD_CtlError>
      break;
 800cafe:	e000      	b.n	800cb02 <USBD_ClrFeature+0x3c>
      break;
 800cb00:	bf00      	nop
  }
}
 800cb02:	bf00      	nop
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	781a      	ldrb	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	3301      	adds	r3, #1
 800cb24:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3301      	adds	r3, #1
 800cb32:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f7ff fa16 	bl	800bf66 <SWAPBYTE>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	3301      	adds	r3, #1
 800cb46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f7ff fa09 	bl	800bf66 <SWAPBYTE>
 800cb54:	4603      	mov	r3, r0
 800cb56:	461a      	mov	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3301      	adds	r3, #1
 800cb66:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f7ff f9fc 	bl	800bf66 <SWAPBYTE>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	461a      	mov	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	80da      	strh	r2, [r3, #6]
}
 800cb76:	bf00      	nop
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb88:	2180      	movs	r1, #128	@ 0x80
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fd2e 	bl	800d5ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb90:	2100      	movs	r1, #0
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fd2a 	bl	800d5ec <USBD_LL_StallEP>
}
 800cb98:	bf00      	nop
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cbac:	2300      	movs	r3, #0
 800cbae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d042      	beq.n	800cc3c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cbba:	6938      	ldr	r0, [r7, #16]
 800cbbc:	f000 f842 	bl	800cc44 <USBD_GetLen>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbca:	d808      	bhi.n	800cbde <USBD_GetString+0x3e>
 800cbcc:	6938      	ldr	r0, [r7, #16]
 800cbce:	f000 f839 	bl	800cc44 <USBD_GetLen>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	e001      	b.n	800cbe2 <USBD_GetString+0x42>
 800cbde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cbe6:	7dfb      	ldrb	r3, [r7, #23]
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	4413      	add	r3, r2
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	7812      	ldrb	r2, [r2, #0]
 800cbf0:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	2203      	movs	r2, #3
 800cc00:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc02:	7dfb      	ldrb	r3, [r7, #23]
 800cc04:	3301      	adds	r3, #1
 800cc06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc08:	e013      	b.n	800cc32 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	4413      	add	r3, r2
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	7812      	ldrb	r2, [r2, #0]
 800cc14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	613b      	str	r3, [r7, #16]
    idx++;
 800cc1c:	7dfb      	ldrb	r3, [r7, #23]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	4413      	add	r3, r2
 800cc28:	2200      	movs	r2, #0
 800cc2a:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1e7      	bne.n	800cc0a <USBD_GetString+0x6a>
 800cc3a:	e000      	b.n	800cc3e <USBD_GetString+0x9e>
    return;
 800cc3c:	bf00      	nop
  }
}
 800cc3e:	3718      	adds	r7, #24
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc54:	e005      	b.n	800cc62 <USBD_GetLen+0x1e>
  {
    len++;
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1f5      	bne.n	800cc56 <USBD_GetLen+0x12>
  }

  return len;
 800cc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2202      	movs	r2, #2
 800cc88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 fd2d 	bl	800d6fe <USBD_LL_Transmit>

  return USBD_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b084      	sub	sp, #16
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	60f8      	str	r0, [r7, #12]
 800ccb6:	60b9      	str	r1, [r7, #8]
 800ccb8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f000 fd1c 	bl	800d6fe <USBD_LL_Transmit>

  return USBD_OK;
 800ccc6:	2300      	movs	r3, #0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2203      	movs	r2, #3
 800cce0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f000 fd20 	bl	800d740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	60f8      	str	r0, [r7, #12]
 800cd12:	60b9      	str	r1, [r7, #8]
 800cd14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f000 fd0f 	bl	800d740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2204      	movs	r2, #4
 800cd38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	2200      	movs	r2, #0
 800cd40:	2100      	movs	r1, #0
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fcdb 	bl	800d6fe <USBD_LL_Transmit>

  return USBD_OK;
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3708      	adds	r7, #8
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b082      	sub	sp, #8
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2205      	movs	r2, #5
 800cd5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd62:	2300      	movs	r3, #0
 800cd64:	2200      	movs	r2, #0
 800cd66:	2100      	movs	r1, #0
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 fce9 	bl	800d740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	4913      	ldr	r1, [pc, #76]	@ (800cdcc <MX_USB_DEVICE_Init+0x54>)
 800cd80:	4813      	ldr	r0, [pc, #76]	@ (800cdd0 <MX_USB_DEVICE_Init+0x58>)
 800cd82:	f7fe fccd 	bl	800b720 <USBD_Init>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd8c:	f7f4 fbde 	bl	800154c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd90:	4910      	ldr	r1, [pc, #64]	@ (800cdd4 <MX_USB_DEVICE_Init+0x5c>)
 800cd92:	480f      	ldr	r0, [pc, #60]	@ (800cdd0 <MX_USB_DEVICE_Init+0x58>)
 800cd94:	f7fe fcf4 	bl	800b780 <USBD_RegisterClass>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd9e:	f7f4 fbd5 	bl	800154c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cda2:	490d      	ldr	r1, [pc, #52]	@ (800cdd8 <MX_USB_DEVICE_Init+0x60>)
 800cda4:	480a      	ldr	r0, [pc, #40]	@ (800cdd0 <MX_USB_DEVICE_Init+0x58>)
 800cda6:	f7fe fbeb 	bl	800b580 <USBD_CDC_RegisterInterface>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cdb0:	f7f4 fbcc 	bl	800154c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cdb4:	4806      	ldr	r0, [pc, #24]	@ (800cdd0 <MX_USB_DEVICE_Init+0x58>)
 800cdb6:	f7fe fd19 	bl	800b7ec <USBD_Start>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cdc0:	f7f4 fbc4 	bl	800154c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cdc4:	f7f7 faa8 	bl	8004318 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cdc8:	bf00      	nop
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	240000b0 	.word	0x240000b0
 800cdd0:	24001c5c 	.word	0x24001c5c
 800cdd4:	2400001c 	.word	0x2400001c
 800cdd8:	2400009c 	.word	0x2400009c

0800cddc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cde0:	2200      	movs	r2, #0
 800cde2:	4905      	ldr	r1, [pc, #20]	@ (800cdf8 <CDC_Init_FS+0x1c>)
 800cde4:	4805      	ldr	r0, [pc, #20]	@ (800cdfc <CDC_Init_FS+0x20>)
 800cde6:	f7fe fbe5 	bl	800b5b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cdea:	4905      	ldr	r1, [pc, #20]	@ (800ce00 <CDC_Init_FS+0x24>)
 800cdec:	4803      	ldr	r0, [pc, #12]	@ (800cdfc <CDC_Init_FS+0x20>)
 800cdee:	f7fe fc03 	bl	800b5f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cdf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	24002738 	.word	0x24002738
 800cdfc:	24001c5c 	.word	0x24001c5c
 800ce00:	24001f38 	.word	0x24001f38

0800ce04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce04:	b480      	push	{r7}
 800ce06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	6039      	str	r1, [r7, #0]
 800ce1e:	71fb      	strb	r3, [r7, #7]
 800ce20:	4613      	mov	r3, r2
 800ce22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	2b23      	cmp	r3, #35	@ 0x23
 800ce28:	d84a      	bhi.n	800cec0 <CDC_Control_FS+0xac>
 800ce2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce30 <CDC_Control_FS+0x1c>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800cec1 	.word	0x0800cec1
 800ce34:	0800cec1 	.word	0x0800cec1
 800ce38:	0800cec1 	.word	0x0800cec1
 800ce3c:	0800cec1 	.word	0x0800cec1
 800ce40:	0800cec1 	.word	0x0800cec1
 800ce44:	0800cec1 	.word	0x0800cec1
 800ce48:	0800cec1 	.word	0x0800cec1
 800ce4c:	0800cec1 	.word	0x0800cec1
 800ce50:	0800cec1 	.word	0x0800cec1
 800ce54:	0800cec1 	.word	0x0800cec1
 800ce58:	0800cec1 	.word	0x0800cec1
 800ce5c:	0800cec1 	.word	0x0800cec1
 800ce60:	0800cec1 	.word	0x0800cec1
 800ce64:	0800cec1 	.word	0x0800cec1
 800ce68:	0800cec1 	.word	0x0800cec1
 800ce6c:	0800cec1 	.word	0x0800cec1
 800ce70:	0800cec1 	.word	0x0800cec1
 800ce74:	0800cec1 	.word	0x0800cec1
 800ce78:	0800cec1 	.word	0x0800cec1
 800ce7c:	0800cec1 	.word	0x0800cec1
 800ce80:	0800cec1 	.word	0x0800cec1
 800ce84:	0800cec1 	.word	0x0800cec1
 800ce88:	0800cec1 	.word	0x0800cec1
 800ce8c:	0800cec1 	.word	0x0800cec1
 800ce90:	0800cec1 	.word	0x0800cec1
 800ce94:	0800cec1 	.word	0x0800cec1
 800ce98:	0800cec1 	.word	0x0800cec1
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800cec1 	.word	0x0800cec1
 800cea4:	0800cec1 	.word	0x0800cec1
 800cea8:	0800cec1 	.word	0x0800cec1
 800ceac:	0800cec1 	.word	0x0800cec1
 800ceb0:	0800cec1 	.word	0x0800cec1
 800ceb4:	0800cec1 	.word	0x0800cec1
 800ceb8:	0800cec1 	.word	0x0800cec1
 800cebc:	0800cec1 	.word	0x0800cec1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cec0:	bf00      	nop
  }

  return (USBD_OK);
 800cec2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_Transmit_FS(Buf,*Len);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	b29b      	uxth	r3, r3
 800cee0:	4619      	mov	r1, r3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 f814 	bl	800cf10 <CDC_Transmit_FS>
	Rec_Proc(&USART1_Protocol,Buf);
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	4807      	ldr	r0, [pc, #28]	@ (800cf08 <CDC_Receive_FS+0x38>)
 800ceec:	f7f3 fdea 	bl	8000ac4 <Rec_Proc>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cef0:	6879      	ldr	r1, [r7, #4]
 800cef2:	4806      	ldr	r0, [pc, #24]	@ (800cf0c <CDC_Receive_FS+0x3c>)
 800cef4:	f7fe fb80 	bl	800b5f8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cef8:	4804      	ldr	r0, [pc, #16]	@ (800cf0c <CDC_Receive_FS+0x3c>)
 800cefa:	f7fe fbdb 	bl	800b6b4 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800cefe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	24001ac8 	.word	0x24001ac8
 800cf0c:	24001c5c 	.word	0x24001c5c

0800cf10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf20:	4b0d      	ldr	r3, [pc, #52]	@ (800cf58 <CDC_Transmit_FS+0x48>)
 800cf22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cf26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e00b      	b.n	800cf4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf36:	887b      	ldrh	r3, [r7, #2]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	4806      	ldr	r0, [pc, #24]	@ (800cf58 <CDC_Transmit_FS+0x48>)
 800cf3e:	f7fe fb39 	bl	800b5b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf42:	4805      	ldr	r0, [pc, #20]	@ (800cf58 <CDC_Transmit_FS+0x48>)
 800cf44:	f7fe fb76 	bl	800b634 <USBD_CDC_TransmitPacket>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	24001c5c 	.word	0x24001c5c

0800cf5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cf6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	371c      	adds	r7, #28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
	...

0800cf80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	6039      	str	r1, [r7, #0]
 800cf8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2212      	movs	r2, #18
 800cf90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf92:	4b03      	ldr	r3, [pc, #12]	@ (800cfa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	240000d0 	.word	0x240000d0

0800cfa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	6039      	str	r1, [r7, #0]
 800cfae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	2204      	movs	r2, #4
 800cfb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfb6:	4b03      	ldr	r3, [pc, #12]	@ (800cfc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	240000e4 	.word	0x240000e4

0800cfc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	6039      	str	r1, [r7, #0]
 800cfd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfd4:	79fb      	ldrb	r3, [r7, #7]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d105      	bne.n	800cfe6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	4907      	ldr	r1, [pc, #28]	@ (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
 800cfde:	4808      	ldr	r0, [pc, #32]	@ (800d000 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfe0:	f7ff fdde 	bl	800cba0 <USBD_GetString>
 800cfe4:	e004      	b.n	800cff0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	4904      	ldr	r1, [pc, #16]	@ (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
 800cfea:	4805      	ldr	r0, [pc, #20]	@ (800d000 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfec:	f7ff fdd8 	bl	800cba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cff0:	4b02      	ldr	r3, [pc, #8]	@ (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	24002f38 	.word	0x24002f38
 800d000:	08011678 	.word	0x08011678

0800d004 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	4603      	mov	r3, r0
 800d00c:	6039      	str	r1, [r7, #0]
 800d00e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	4904      	ldr	r1, [pc, #16]	@ (800d024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d014:	4804      	ldr	r0, [pc, #16]	@ (800d028 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d016:	f7ff fdc3 	bl	800cba0 <USBD_GetString>
  return USBD_StrDesc;
 800d01a:	4b02      	ldr	r3, [pc, #8]	@ (800d024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	24002f38 	.word	0x24002f38
 800d028:	08011690 	.word	0x08011690

0800d02c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	4603      	mov	r3, r0
 800d034:	6039      	str	r1, [r7, #0]
 800d036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	221a      	movs	r2, #26
 800d03c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d03e:	f000 f843 	bl	800d0c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d042:	4b02      	ldr	r3, [pc, #8]	@ (800d04c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	240000e8 	.word	0x240000e8

0800d050 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	6039      	str	r1, [r7, #0]
 800d05a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d105      	bne.n	800d06e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	4907      	ldr	r1, [pc, #28]	@ (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d066:	4808      	ldr	r0, [pc, #32]	@ (800d088 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d068:	f7ff fd9a 	bl	800cba0 <USBD_GetString>
 800d06c:	e004      	b.n	800d078 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	4904      	ldr	r1, [pc, #16]	@ (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d072:	4805      	ldr	r0, [pc, #20]	@ (800d088 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d074:	f7ff fd94 	bl	800cba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d078:	4b02      	ldr	r3, [pc, #8]	@ (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	24002f38 	.word	0x24002f38
 800d088:	080116a4 	.word	0x080116a4

0800d08c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d105      	bne.n	800d0aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	4907      	ldr	r1, [pc, #28]	@ (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0a2:	4808      	ldr	r0, [pc, #32]	@ (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0a4:	f7ff fd7c 	bl	800cba0 <USBD_GetString>
 800d0a8:	e004      	b.n	800d0b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	4904      	ldr	r1, [pc, #16]	@ (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0ae:	4805      	ldr	r0, [pc, #20]	@ (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0b0:	f7ff fd76 	bl	800cba0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0b4:	4b02      	ldr	r3, [pc, #8]	@ (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	24002f38 	.word	0x24002f38
 800d0c4:	080116b0 	.word	0x080116b0

0800d0c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d10c <Get_SerialNum+0x44>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d110 <Get_SerialNum+0x48>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0da:	4b0e      	ldr	r3, [pc, #56]	@ (800d114 <Get_SerialNum+0x4c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d009      	beq.n	800d102 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d0ee:	2208      	movs	r2, #8
 800d0f0:	4909      	ldr	r1, [pc, #36]	@ (800d118 <Get_SerialNum+0x50>)
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f000 f814 	bl	800d120 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d0f8:	2204      	movs	r2, #4
 800d0fa:	4908      	ldr	r1, [pc, #32]	@ (800d11c <Get_SerialNum+0x54>)
 800d0fc:	68b8      	ldr	r0, [r7, #8]
 800d0fe:	f000 f80f 	bl	800d120 <IntToUnicode>
  }
}
 800d102:	bf00      	nop
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	1ff1e800 	.word	0x1ff1e800
 800d110:	1ff1e804 	.word	0x1ff1e804
 800d114:	1ff1e808 	.word	0x1ff1e808
 800d118:	240000ea 	.word	0x240000ea
 800d11c:	240000fa 	.word	0x240000fa

0800d120 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	4613      	mov	r3, r2
 800d12c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d132:	2300      	movs	r3, #0
 800d134:	75fb      	strb	r3, [r7, #23]
 800d136:	e027      	b.n	800d188 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	0f1b      	lsrs	r3, r3, #28
 800d13c:	2b09      	cmp	r3, #9
 800d13e:	d80b      	bhi.n	800d158 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	0f1b      	lsrs	r3, r3, #28
 800d144:	b2da      	uxtb	r2, r3
 800d146:	7dfb      	ldrb	r3, [r7, #23]
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	4619      	mov	r1, r3
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	440b      	add	r3, r1
 800d150:	3230      	adds	r2, #48	@ 0x30
 800d152:	b2d2      	uxtb	r2, r2
 800d154:	701a      	strb	r2, [r3, #0]
 800d156:	e00a      	b.n	800d16e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	0f1b      	lsrs	r3, r3, #28
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	7dfb      	ldrb	r3, [r7, #23]
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	4619      	mov	r1, r3
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	440b      	add	r3, r1
 800d168:	3237      	adds	r2, #55	@ 0x37
 800d16a:	b2d2      	uxtb	r2, r2
 800d16c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	011b      	lsls	r3, r3, #4
 800d172:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d174:	7dfb      	ldrb	r3, [r7, #23]
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	3301      	adds	r3, #1
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	4413      	add	r3, r2
 800d17e:	2200      	movs	r2, #0
 800d180:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	3301      	adds	r3, #1
 800d186:	75fb      	strb	r3, [r7, #23]
 800d188:	7dfa      	ldrb	r2, [r7, #23]
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d3d3      	bcc.n	800d138 <IntToUnicode+0x18>
  }
}
 800d190:	bf00      	nop
 800d192:	bf00      	nop
 800d194:	371c      	adds	r7, #28
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
	...

0800d1a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b0ba      	sub	sp, #232	@ 0xe8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	601a      	str	r2, [r3, #0]
 800d1b0:	605a      	str	r2, [r3, #4]
 800d1b2:	609a      	str	r2, [r3, #8]
 800d1b4:	60da      	str	r2, [r3, #12]
 800d1b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d1b8:	f107 0310 	add.w	r3, r7, #16
 800d1bc:	22c0      	movs	r2, #192	@ 0xc0
 800d1be:	2100      	movs	r1, #0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f001 ff79 	bl	800f0b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a34      	ldr	r2, [pc, #208]	@ (800d29c <HAL_PCD_MspInit+0xfc>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d161      	bne.n	800d294 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d1d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d1d4:	f04f 0300 	mov.w	r3, #0
 800d1d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d1dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d1e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d1e4:	f107 0310 	add.w	r3, r7, #16
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f8 f889 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800d1f4:	f7f4 f9aa 	bl	800154c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d1f8:	f7f7 f88e 	bl	8004318 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1fc:	4b28      	ldr	r3, [pc, #160]	@ (800d2a0 <HAL_PCD_MspInit+0x100>)
 800d1fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d202:	4a27      	ldr	r2, [pc, #156]	@ (800d2a0 <HAL_PCD_MspInit+0x100>)
 800d204:	f043 0301 	orr.w	r3, r3, #1
 800d208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d20c:	4b24      	ldr	r3, [pc, #144]	@ (800d2a0 <HAL_PCD_MspInit+0x100>)
 800d20e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	60fb      	str	r3, [r7, #12]
 800d218:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d21a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d21e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d222:	2302      	movs	r3, #2
 800d224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d228:	2300      	movs	r3, #0
 800d22a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d22e:	2300      	movs	r3, #0
 800d230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d234:	230a      	movs	r3, #10
 800d236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d23a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d23e:	4619      	mov	r1, r3
 800d240:	4818      	ldr	r0, [pc, #96]	@ (800d2a4 <HAL_PCD_MspInit+0x104>)
 800d242:	f7f5 fbc5 	bl	80029d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d246:	4b16      	ldr	r3, [pc, #88]	@ (800d2a0 <HAL_PCD_MspInit+0x100>)
 800d248:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d24c:	4a14      	ldr	r2, [pc, #80]	@ (800d2a0 <HAL_PCD_MspInit+0x100>)
 800d24e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d252:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d256:	4b12      	ldr	r3, [pc, #72]	@ (800d2a0 <HAL_PCD_MspInit+0x100>)
 800d258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d25c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d260:	60bb      	str	r3, [r7, #8]
 800d262:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800d264:	2200      	movs	r2, #0
 800d266:	2100      	movs	r1, #0
 800d268:	2062      	movs	r0, #98	@ 0x62
 800d26a:	f7f4 fda0 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800d26e:	2062      	movs	r0, #98	@ 0x62
 800d270:	f7f4 fdb7 	bl	8001de2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800d274:	2200      	movs	r2, #0
 800d276:	2100      	movs	r1, #0
 800d278:	2063      	movs	r0, #99	@ 0x63
 800d27a:	f7f4 fd98 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800d27e:	2063      	movs	r0, #99	@ 0x63
 800d280:	f7f4 fdaf 	bl	8001de2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d284:	2200      	movs	r2, #0
 800d286:	2100      	movs	r1, #0
 800d288:	2065      	movs	r0, #101	@ 0x65
 800d28a:	f7f4 fd90 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d28e:	2065      	movs	r0, #101	@ 0x65
 800d290:	f7f4 fda7 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d294:	bf00      	nop
 800d296:	37e8      	adds	r7, #232	@ 0xe8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	40080000 	.word	0x40080000
 800d2a0:	58024400 	.word	0x58024400
 800d2a4:	58020000 	.word	0x58020000

0800d2a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f7fe fae1 	bl	800b886 <USBD_LL_SetupStage>
}
 800d2c4:	bf00      	nop
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d2de:	78fa      	ldrb	r2, [r7, #3]
 800d2e0:	6879      	ldr	r1, [r7, #4]
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	4413      	add	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	440b      	add	r3, r1
 800d2ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	78fb      	ldrb	r3, [r7, #3]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	f7fe fb1b 	bl	800b930 <USBD_LL_DataOutStage>
}
 800d2fa:	bf00      	nop
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b082      	sub	sp, #8
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	460b      	mov	r3, r1
 800d30c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d314:	78fa      	ldrb	r2, [r7, #3]
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	4613      	mov	r3, r2
 800d31a:	00db      	lsls	r3, r3, #3
 800d31c:	4413      	add	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	440b      	add	r3, r1
 800d322:	3320      	adds	r3, #32
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	78fb      	ldrb	r3, [r7, #3]
 800d328:	4619      	mov	r1, r3
 800d32a:	f7fe fbb4 	bl	800ba96 <USBD_LL_DataInStage>
}
 800d32e:	bf00      	nop
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b082      	sub	sp, #8
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d344:	4618      	mov	r0, r3
 800d346:	f7fe fcee 	bl	800bd26 <USBD_LL_SOF>
}
 800d34a:	bf00      	nop
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b084      	sub	sp, #16
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d35a:	2301      	movs	r3, #1
 800d35c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	79db      	ldrb	r3, [r3, #7]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d102      	bne.n	800d36c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d366:	2300      	movs	r3, #0
 800d368:	73fb      	strb	r3, [r7, #15]
 800d36a:	e008      	b.n	800d37e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	79db      	ldrb	r3, [r3, #7]
 800d370:	2b02      	cmp	r3, #2
 800d372:	d102      	bne.n	800d37a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d374:	2301      	movs	r3, #1
 800d376:	73fb      	strb	r3, [r7, #15]
 800d378:	e001      	b.n	800d37e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d37a:	f7f4 f8e7 	bl	800154c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d384:	7bfa      	ldrb	r2, [r7, #15]
 800d386:	4611      	mov	r1, r2
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe fc88 	bl	800bc9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d394:	4618      	mov	r0, r3
 800d396:	f7fe fc30 	bl	800bbfa <USBD_LL_Reset>
}
 800d39a:	bf00      	nop
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
	...

0800d3a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fe fc83 	bl	800bcbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	6812      	ldr	r2, [r2, #0]
 800d3c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d3ca:	f043 0301 	orr.w	r3, r3, #1
 800d3ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	7adb      	ldrb	r3, [r3, #11]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d005      	beq.n	800d3e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3d8:	4b04      	ldr	r3, [pc, #16]	@ (800d3ec <HAL_PCD_SuspendCallback+0x48>)
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	4a03      	ldr	r2, [pc, #12]	@ (800d3ec <HAL_PCD_SuspendCallback+0x48>)
 800d3de:	f043 0306 	orr.w	r3, r3, #6
 800d3e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	e000ed00 	.word	0xe000ed00

0800d3f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe fc79 	bl	800bcf6 <USBD_LL_Resume>
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d41e:	78fa      	ldrb	r2, [r7, #3]
 800d420:	4611      	mov	r1, r2
 800d422:	4618      	mov	r0, r3
 800d424:	f7fe fcd1 	bl	800bdca <USBD_LL_IsoOUTIncomplete>
}
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d442:	78fa      	ldrb	r2, [r7, #3]
 800d444:	4611      	mov	r1, r2
 800d446:	4618      	mov	r0, r3
 800d448:	f7fe fc8d 	bl	800bd66 <USBD_LL_IsoINIncomplete>
}
 800d44c:	bf00      	nop
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe fce3 	bl	800be2e <USBD_LL_DevConnected>
}
 800d468:	bf00      	nop
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe fce0 	bl	800be44 <USBD_LL_DevDisconnected>
}
 800d484:	bf00      	nop
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d13e      	bne.n	800d51a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d49c:	4a21      	ldr	r2, [pc, #132]	@ (800d524 <USBD_LL_Init+0x98>)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a1f      	ldr	r2, [pc, #124]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d4ac:	4b1d      	ldr	r3, [pc, #116]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4ae:	4a1e      	ldr	r2, [pc, #120]	@ (800d528 <USBD_LL_Init+0x9c>)
 800d4b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d4b2:	4b1c      	ldr	r3, [pc, #112]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4b4:	2209      	movs	r2, #9
 800d4b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d4b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d4be:	4b19      	ldr	r3, [pc, #100]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d4c4:	4b17      	ldr	r3, [pc, #92]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4c6:	2202      	movs	r2, #2
 800d4c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4ca:	4b16      	ldr	r3, [pc, #88]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d4d0:	4b14      	ldr	r3, [pc, #80]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d4d6:	4b13      	ldr	r3, [pc, #76]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d4dc:	4b11      	ldr	r3, [pc, #68]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d4e2:	4b10      	ldr	r3, [pc, #64]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d4ee:	480d      	ldr	r0, [pc, #52]	@ (800d524 <USBD_LL_Init+0x98>)
 800d4f0:	f7f5 fc37 	bl	8002d62 <HAL_PCD_Init>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d4fa:	f7f4 f827 	bl	800154c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d4fe:	2180      	movs	r1, #128	@ 0x80
 800d500:	4808      	ldr	r0, [pc, #32]	@ (800d524 <USBD_LL_Init+0x98>)
 800d502:	f7f6 fe8e 	bl	8004222 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d506:	2240      	movs	r2, #64	@ 0x40
 800d508:	2100      	movs	r1, #0
 800d50a:	4806      	ldr	r0, [pc, #24]	@ (800d524 <USBD_LL_Init+0x98>)
 800d50c:	f7f6 fe42 	bl	8004194 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d510:	2280      	movs	r2, #128	@ 0x80
 800d512:	2101      	movs	r1, #1
 800d514:	4803      	ldr	r0, [pc, #12]	@ (800d524 <USBD_LL_Init+0x98>)
 800d516:	f7f6 fe3d 	bl	8004194 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	24003138 	.word	0x24003138
 800d528:	40080000 	.word	0x40080000

0800d52c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d542:	4618      	mov	r0, r3
 800d544:	f7f5 fd19 	bl	8002f7a <HAL_PCD_Start>
 800d548:	4603      	mov	r3, r0
 800d54a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d54c:	7bfb      	ldrb	r3, [r7, #15]
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 f942 	bl	800d7d8 <USBD_Get_USB_Status>
 800d554:	4603      	mov	r3, r0
 800d556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d558:	7bbb      	ldrb	r3, [r7, #14]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	4608      	mov	r0, r1
 800d56c:	4611      	mov	r1, r2
 800d56e:	461a      	mov	r2, r3
 800d570:	4603      	mov	r3, r0
 800d572:	70fb      	strb	r3, [r7, #3]
 800d574:	460b      	mov	r3, r1
 800d576:	70bb      	strb	r3, [r7, #2]
 800d578:	4613      	mov	r3, r2
 800d57a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d580:	2300      	movs	r3, #0
 800d582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d58a:	78bb      	ldrb	r3, [r7, #2]
 800d58c:	883a      	ldrh	r2, [r7, #0]
 800d58e:	78f9      	ldrb	r1, [r7, #3]
 800d590:	f7f6 fa1a 	bl	80039c8 <HAL_PCD_EP_Open>
 800d594:	4603      	mov	r3, r0
 800d596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d598:	7bfb      	ldrb	r3, [r7, #15]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 f91c 	bl	800d7d8 <USBD_Get_USB_Status>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5c8:	78fa      	ldrb	r2, [r7, #3]
 800d5ca:	4611      	mov	r1, r2
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7f6 fa65 	bl	8003a9c <HAL_PCD_EP_Close>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f000 f8fd 	bl	800d7d8 <USBD_Get_USB_Status>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d606:	78fa      	ldrb	r2, [r7, #3]
 800d608:	4611      	mov	r1, r2
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7f6 fb1d 	bl	8003c4a <HAL_PCD_EP_SetStall>
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	4618      	mov	r0, r3
 800d618:	f000 f8de 	bl	800d7d8 <USBD_Get_USB_Status>
 800d61c:	4603      	mov	r3, r0
 800d61e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d620:	7bbb      	ldrb	r3, [r7, #14]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b084      	sub	sp, #16
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	460b      	mov	r3, r1
 800d634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d63a:	2300      	movs	r3, #0
 800d63c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d644:	78fa      	ldrb	r2, [r7, #3]
 800d646:	4611      	mov	r1, r2
 800d648:	4618      	mov	r0, r3
 800d64a:	f7f6 fb61 	bl	8003d10 <HAL_PCD_EP_ClrStall>
 800d64e:	4603      	mov	r3, r0
 800d650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d652:	7bfb      	ldrb	r3, [r7, #15]
 800d654:	4618      	mov	r0, r3
 800d656:	f000 f8bf 	bl	800d7d8 <USBD_Get_USB_Status>
 800d65a:	4603      	mov	r3, r0
 800d65c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d65e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	460b      	mov	r3, r1
 800d672:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d67a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d67c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d680:	2b00      	cmp	r3, #0
 800d682:	da0b      	bge.n	800d69c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d684:	78fb      	ldrb	r3, [r7, #3]
 800d686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d68a:	68f9      	ldr	r1, [r7, #12]
 800d68c:	4613      	mov	r3, r2
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	4413      	add	r3, r2
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	440b      	add	r3, r1
 800d696:	3316      	adds	r3, #22
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	e00b      	b.n	800d6b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d69c:	78fb      	ldrb	r3, [r7, #3]
 800d69e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d6a2:	68f9      	ldr	r1, [r7, #12]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	00db      	lsls	r3, r3, #3
 800d6a8:	4413      	add	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	440b      	add	r3, r1
 800d6ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d6b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3714      	adds	r7, #20
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6da:	78fa      	ldrb	r2, [r7, #3]
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7f6 f94e 	bl	8003980 <HAL_PCD_SetAddress>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6e8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 f874 	bl	800d7d8 <USBD_Get_USB_Status>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b086      	sub	sp, #24
 800d702:	af00      	add	r7, sp, #0
 800d704:	60f8      	str	r0, [r7, #12]
 800d706:	607a      	str	r2, [r7, #4]
 800d708:	603b      	str	r3, [r7, #0]
 800d70a:	460b      	mov	r3, r1
 800d70c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d70e:	2300      	movs	r3, #0
 800d710:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d712:	2300      	movs	r3, #0
 800d714:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d71c:	7af9      	ldrb	r1, [r7, #11]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	f7f6 fa58 	bl	8003bd6 <HAL_PCD_EP_Transmit>
 800d726:	4603      	mov	r3, r0
 800d728:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f000 f853 	bl	800d7d8 <USBD_Get_USB_Status>
 800d732:	4603      	mov	r3, r0
 800d734:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d736:	7dbb      	ldrb	r3, [r7, #22]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3718      	adds	r7, #24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	607a      	str	r2, [r7, #4]
 800d74a:	603b      	str	r3, [r7, #0]
 800d74c:	460b      	mov	r3, r1
 800d74e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d75e:	7af9      	ldrb	r1, [r7, #11]
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	f7f6 f9e4 	bl	8003b30 <HAL_PCD_EP_Receive>
 800d768:	4603      	mov	r3, r0
 800d76a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d76c:	7dfb      	ldrb	r3, [r7, #23]
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f832 	bl	800d7d8 <USBD_Get_USB_Status>
 800d774:	4603      	mov	r3, r0
 800d776:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d778:	7dbb      	ldrb	r3, [r7, #22]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3718      	adds	r7, #24
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b082      	sub	sp, #8
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	460b      	mov	r3, r1
 800d78c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d794:	78fa      	ldrb	r2, [r7, #3]
 800d796:	4611      	mov	r1, r2
 800d798:	4618      	mov	r0, r3
 800d79a:	f7f6 fa04 	bl	8003ba6 <HAL_PCD_EP_GetRxCount>
 800d79e:	4603      	mov	r3, r0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7b0:	4b03      	ldr	r3, [pc, #12]	@ (800d7c0 <USBD_static_malloc+0x18>)
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	2400361c 	.word	0x2400361c

0800d7c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d7cc:	bf00      	nop
 800d7ce:	370c      	adds	r7, #12
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
 800d7e8:	2b03      	cmp	r3, #3
 800d7ea:	d817      	bhi.n	800d81c <USBD_Get_USB_Status+0x44>
 800d7ec:	a201      	add	r2, pc, #4	@ (adr r2, 800d7f4 <USBD_Get_USB_Status+0x1c>)
 800d7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f2:	bf00      	nop
 800d7f4:	0800d805 	.word	0x0800d805
 800d7f8:	0800d80b 	.word	0x0800d80b
 800d7fc:	0800d811 	.word	0x0800d811
 800d800:	0800d817 	.word	0x0800d817
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	73fb      	strb	r3, [r7, #15]
    break;
 800d808:	e00b      	b.n	800d822 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d80a:	2303      	movs	r3, #3
 800d80c:	73fb      	strb	r3, [r7, #15]
    break;
 800d80e:	e008      	b.n	800d822 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d810:	2301      	movs	r3, #1
 800d812:	73fb      	strb	r3, [r7, #15]
    break;
 800d814:	e005      	b.n	800d822 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d816:	2303      	movs	r3, #3
 800d818:	73fb      	strb	r3, [r7, #15]
    break;
 800d81a:	e002      	b.n	800d822 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d81c:	2303      	movs	r3, #3
 800d81e:	73fb      	strb	r3, [r7, #15]
    break;
 800d820:	bf00      	nop
  }
  return usb_status;
 800d822:	7bfb      	ldrb	r3, [r7, #15]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <sulp>:
 800d830:	b570      	push	{r4, r5, r6, lr}
 800d832:	4604      	mov	r4, r0
 800d834:	460d      	mov	r5, r1
 800d836:	4616      	mov	r6, r2
 800d838:	ec45 4b10 	vmov	d0, r4, r5
 800d83c:	f003 fa92 	bl	8010d64 <__ulp>
 800d840:	b17e      	cbz	r6, 800d862 <sulp+0x32>
 800d842:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d846:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	dd09      	ble.n	800d862 <sulp+0x32>
 800d84e:	051b      	lsls	r3, r3, #20
 800d850:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d854:	2000      	movs	r0, #0
 800d856:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d85a:	ec41 0b17 	vmov	d7, r0, r1
 800d85e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d862:	bd70      	pop	{r4, r5, r6, pc}
 800d864:	0000      	movs	r0, r0
	...

0800d868 <_strtod_l>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	ed2d 8b0a 	vpush	{d8-d12}
 800d870:	b097      	sub	sp, #92	@ 0x5c
 800d872:	4688      	mov	r8, r1
 800d874:	920e      	str	r2, [sp, #56]	@ 0x38
 800d876:	2200      	movs	r2, #0
 800d878:	9212      	str	r2, [sp, #72]	@ 0x48
 800d87a:	9005      	str	r0, [sp, #20]
 800d87c:	f04f 0a00 	mov.w	sl, #0
 800d880:	f04f 0b00 	mov.w	fp, #0
 800d884:	460a      	mov	r2, r1
 800d886:	9211      	str	r2, [sp, #68]	@ 0x44
 800d888:	7811      	ldrb	r1, [r2, #0]
 800d88a:	292b      	cmp	r1, #43	@ 0x2b
 800d88c:	d04c      	beq.n	800d928 <_strtod_l+0xc0>
 800d88e:	d839      	bhi.n	800d904 <_strtod_l+0x9c>
 800d890:	290d      	cmp	r1, #13
 800d892:	d833      	bhi.n	800d8fc <_strtod_l+0x94>
 800d894:	2908      	cmp	r1, #8
 800d896:	d833      	bhi.n	800d900 <_strtod_l+0x98>
 800d898:	2900      	cmp	r1, #0
 800d89a:	d03c      	beq.n	800d916 <_strtod_l+0xae>
 800d89c:	2200      	movs	r2, #0
 800d89e:	9208      	str	r2, [sp, #32]
 800d8a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d8a2:	782a      	ldrb	r2, [r5, #0]
 800d8a4:	2a30      	cmp	r2, #48	@ 0x30
 800d8a6:	f040 80b7 	bne.w	800da18 <_strtod_l+0x1b0>
 800d8aa:	786a      	ldrb	r2, [r5, #1]
 800d8ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8b0:	2a58      	cmp	r2, #88	@ 0x58
 800d8b2:	d170      	bne.n	800d996 <_strtod_l+0x12e>
 800d8b4:	9302      	str	r3, [sp, #8]
 800d8b6:	9b08      	ldr	r3, [sp, #32]
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	ab12      	add	r3, sp, #72	@ 0x48
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	4a90      	ldr	r2, [pc, #576]	@ (800db00 <_strtod_l+0x298>)
 800d8c0:	9805      	ldr	r0, [sp, #20]
 800d8c2:	ab13      	add	r3, sp, #76	@ 0x4c
 800d8c4:	a911      	add	r1, sp, #68	@ 0x44
 800d8c6:	f002 fb47 	bl	800ff58 <__gethex>
 800d8ca:	f010 060f 	ands.w	r6, r0, #15
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	d005      	beq.n	800d8de <_strtod_l+0x76>
 800d8d2:	2e06      	cmp	r6, #6
 800d8d4:	d12a      	bne.n	800d92c <_strtod_l+0xc4>
 800d8d6:	3501      	adds	r5, #1
 800d8d8:	2300      	movs	r3, #0
 800d8da:	9511      	str	r5, [sp, #68]	@ 0x44
 800d8dc:	9308      	str	r3, [sp, #32]
 800d8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f040 8537 	bne.w	800e354 <_strtod_l+0xaec>
 800d8e6:	9b08      	ldr	r3, [sp, #32]
 800d8e8:	ec4b ab10 	vmov	d0, sl, fp
 800d8ec:	b1cb      	cbz	r3, 800d922 <_strtod_l+0xba>
 800d8ee:	eeb1 0b40 	vneg.f64	d0, d0
 800d8f2:	b017      	add	sp, #92	@ 0x5c
 800d8f4:	ecbd 8b0a 	vpop	{d8-d12}
 800d8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fc:	2920      	cmp	r1, #32
 800d8fe:	d1cd      	bne.n	800d89c <_strtod_l+0x34>
 800d900:	3201      	adds	r2, #1
 800d902:	e7c0      	b.n	800d886 <_strtod_l+0x1e>
 800d904:	292d      	cmp	r1, #45	@ 0x2d
 800d906:	d1c9      	bne.n	800d89c <_strtod_l+0x34>
 800d908:	2101      	movs	r1, #1
 800d90a:	9108      	str	r1, [sp, #32]
 800d90c:	1c51      	adds	r1, r2, #1
 800d90e:	9111      	str	r1, [sp, #68]	@ 0x44
 800d910:	7852      	ldrb	r2, [r2, #1]
 800d912:	2a00      	cmp	r2, #0
 800d914:	d1c4      	bne.n	800d8a0 <_strtod_l+0x38>
 800d916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d918:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f040 8517 	bne.w	800e350 <_strtod_l+0xae8>
 800d922:	ec4b ab10 	vmov	d0, sl, fp
 800d926:	e7e4      	b.n	800d8f2 <_strtod_l+0x8a>
 800d928:	2100      	movs	r1, #0
 800d92a:	e7ee      	b.n	800d90a <_strtod_l+0xa2>
 800d92c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d92e:	b13a      	cbz	r2, 800d940 <_strtod_l+0xd8>
 800d930:	2135      	movs	r1, #53	@ 0x35
 800d932:	a814      	add	r0, sp, #80	@ 0x50
 800d934:	f003 fb0d 	bl	8010f52 <__copybits>
 800d938:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d93a:	9805      	ldr	r0, [sp, #20]
 800d93c:	f002 fee6 	bl	801070c <_Bfree>
 800d940:	1e73      	subs	r3, r6, #1
 800d942:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d944:	2b04      	cmp	r3, #4
 800d946:	d806      	bhi.n	800d956 <_strtod_l+0xee>
 800d948:	e8df f003 	tbb	[pc, r3]
 800d94c:	201d0314 	.word	0x201d0314
 800d950:	14          	.byte	0x14
 800d951:	00          	.byte	0x00
 800d952:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d956:	05e3      	lsls	r3, r4, #23
 800d958:	bf48      	it	mi
 800d95a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d95e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d962:	0d1b      	lsrs	r3, r3, #20
 800d964:	051b      	lsls	r3, r3, #20
 800d966:	2b00      	cmp	r3, #0
 800d968:	d1b9      	bne.n	800d8de <_strtod_l+0x76>
 800d96a:	f001 fc09 	bl	800f180 <__errno>
 800d96e:	2322      	movs	r3, #34	@ 0x22
 800d970:	6003      	str	r3, [r0, #0]
 800d972:	e7b4      	b.n	800d8de <_strtod_l+0x76>
 800d974:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d978:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d97c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d980:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d984:	e7e7      	b.n	800d956 <_strtod_l+0xee>
 800d986:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800db08 <_strtod_l+0x2a0>
 800d98a:	e7e4      	b.n	800d956 <_strtod_l+0xee>
 800d98c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d990:	f04f 3aff 	mov.w	sl, #4294967295
 800d994:	e7df      	b.n	800d956 <_strtod_l+0xee>
 800d996:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d99c:	785b      	ldrb	r3, [r3, #1]
 800d99e:	2b30      	cmp	r3, #48	@ 0x30
 800d9a0:	d0f9      	beq.n	800d996 <_strtod_l+0x12e>
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d09b      	beq.n	800d8de <_strtod_l+0x76>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	9307      	str	r3, [sp, #28]
 800d9aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	9306      	str	r3, [sp, #24]
 800d9b2:	4699      	mov	r9, r3
 800d9b4:	461d      	mov	r5, r3
 800d9b6:	220a      	movs	r2, #10
 800d9b8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d9ba:	7804      	ldrb	r4, [r0, #0]
 800d9bc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d9c0:	b2d9      	uxtb	r1, r3
 800d9c2:	2909      	cmp	r1, #9
 800d9c4:	d92a      	bls.n	800da1c <_strtod_l+0x1b4>
 800d9c6:	494f      	ldr	r1, [pc, #316]	@ (800db04 <_strtod_l+0x29c>)
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f001 fb7d 	bl	800f0c8 <strncmp>
 800d9ce:	b398      	cbz	r0, 800da38 <_strtod_l+0x1d0>
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	4622      	mov	r2, r4
 800d9d4:	462b      	mov	r3, r5
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	4601      	mov	r1, r0
 800d9da:	2a65      	cmp	r2, #101	@ 0x65
 800d9dc:	d001      	beq.n	800d9e2 <_strtod_l+0x17a>
 800d9de:	2a45      	cmp	r2, #69	@ 0x45
 800d9e0:	d118      	bne.n	800da14 <_strtod_l+0x1ac>
 800d9e2:	b91b      	cbnz	r3, 800d9ec <_strtod_l+0x184>
 800d9e4:	9b07      	ldr	r3, [sp, #28]
 800d9e6:	4303      	orrs	r3, r0
 800d9e8:	d095      	beq.n	800d916 <_strtod_l+0xae>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d9f0:	f108 0201 	add.w	r2, r8, #1
 800d9f4:	9211      	str	r2, [sp, #68]	@ 0x44
 800d9f6:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d9fa:	2a2b      	cmp	r2, #43	@ 0x2b
 800d9fc:	d074      	beq.n	800dae8 <_strtod_l+0x280>
 800d9fe:	2a2d      	cmp	r2, #45	@ 0x2d
 800da00:	d07a      	beq.n	800daf8 <_strtod_l+0x290>
 800da02:	f04f 0e00 	mov.w	lr, #0
 800da06:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800da0a:	2c09      	cmp	r4, #9
 800da0c:	f240 8082 	bls.w	800db14 <_strtod_l+0x2ac>
 800da10:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800da14:	2400      	movs	r4, #0
 800da16:	e09d      	b.n	800db54 <_strtod_l+0x2ec>
 800da18:	2300      	movs	r3, #0
 800da1a:	e7c5      	b.n	800d9a8 <_strtod_l+0x140>
 800da1c:	2d08      	cmp	r5, #8
 800da1e:	bfc8      	it	gt
 800da20:	9906      	ldrgt	r1, [sp, #24]
 800da22:	f100 0001 	add.w	r0, r0, #1
 800da26:	bfca      	itet	gt
 800da28:	fb02 3301 	mlagt	r3, r2, r1, r3
 800da2c:	fb02 3909 	mlale	r9, r2, r9, r3
 800da30:	9306      	strgt	r3, [sp, #24]
 800da32:	3501      	adds	r5, #1
 800da34:	9011      	str	r0, [sp, #68]	@ 0x44
 800da36:	e7bf      	b.n	800d9b8 <_strtod_l+0x150>
 800da38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	9211      	str	r2, [sp, #68]	@ 0x44
 800da3e:	785a      	ldrb	r2, [r3, #1]
 800da40:	b3bd      	cbz	r5, 800dab2 <_strtod_l+0x24a>
 800da42:	4607      	mov	r7, r0
 800da44:	462b      	mov	r3, r5
 800da46:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800da4a:	2909      	cmp	r1, #9
 800da4c:	d912      	bls.n	800da74 <_strtod_l+0x20c>
 800da4e:	2101      	movs	r1, #1
 800da50:	e7c3      	b.n	800d9da <_strtod_l+0x172>
 800da52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	9211      	str	r2, [sp, #68]	@ 0x44
 800da58:	785a      	ldrb	r2, [r3, #1]
 800da5a:	3001      	adds	r0, #1
 800da5c:	2a30      	cmp	r2, #48	@ 0x30
 800da5e:	d0f8      	beq.n	800da52 <_strtod_l+0x1ea>
 800da60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800da64:	2b08      	cmp	r3, #8
 800da66:	f200 847a 	bhi.w	800e35e <_strtod_l+0xaf6>
 800da6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800da6e:	4607      	mov	r7, r0
 800da70:	2000      	movs	r0, #0
 800da72:	4603      	mov	r3, r0
 800da74:	3a30      	subs	r2, #48	@ 0x30
 800da76:	f100 0101 	add.w	r1, r0, #1
 800da7a:	d014      	beq.n	800daa6 <_strtod_l+0x23e>
 800da7c:	440f      	add	r7, r1
 800da7e:	469c      	mov	ip, r3
 800da80:	f04f 0e0a 	mov.w	lr, #10
 800da84:	f10c 0401 	add.w	r4, ip, #1
 800da88:	1ae6      	subs	r6, r4, r3
 800da8a:	42b1      	cmp	r1, r6
 800da8c:	dc13      	bgt.n	800dab6 <_strtod_l+0x24e>
 800da8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800da92:	1819      	adds	r1, r3, r0
 800da94:	2908      	cmp	r1, #8
 800da96:	f103 0301 	add.w	r3, r3, #1
 800da9a:	4403      	add	r3, r0
 800da9c:	dc19      	bgt.n	800dad2 <_strtod_l+0x26a>
 800da9e:	210a      	movs	r1, #10
 800daa0:	fb01 2909 	mla	r9, r1, r9, r2
 800daa4:	2100      	movs	r1, #0
 800daa6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800daa8:	1c50      	adds	r0, r2, #1
 800daaa:	9011      	str	r0, [sp, #68]	@ 0x44
 800daac:	7852      	ldrb	r2, [r2, #1]
 800daae:	4608      	mov	r0, r1
 800dab0:	e7c9      	b.n	800da46 <_strtod_l+0x1de>
 800dab2:	4628      	mov	r0, r5
 800dab4:	e7d2      	b.n	800da5c <_strtod_l+0x1f4>
 800dab6:	f1bc 0f08 	cmp.w	ip, #8
 800daba:	dc03      	bgt.n	800dac4 <_strtod_l+0x25c>
 800dabc:	fb0e f909 	mul.w	r9, lr, r9
 800dac0:	46a4      	mov	ip, r4
 800dac2:	e7df      	b.n	800da84 <_strtod_l+0x21c>
 800dac4:	2c10      	cmp	r4, #16
 800dac6:	bfde      	ittt	le
 800dac8:	9e06      	ldrle	r6, [sp, #24]
 800daca:	fb0e f606 	mulle.w	r6, lr, r6
 800dace:	9606      	strle	r6, [sp, #24]
 800dad0:	e7f6      	b.n	800dac0 <_strtod_l+0x258>
 800dad2:	290f      	cmp	r1, #15
 800dad4:	bfdf      	itttt	le
 800dad6:	9806      	ldrle	r0, [sp, #24]
 800dad8:	210a      	movle	r1, #10
 800dada:	fb01 2200 	mlale	r2, r1, r0, r2
 800dade:	9206      	strle	r2, [sp, #24]
 800dae0:	e7e0      	b.n	800daa4 <_strtod_l+0x23c>
 800dae2:	2700      	movs	r7, #0
 800dae4:	2101      	movs	r1, #1
 800dae6:	e77d      	b.n	800d9e4 <_strtod_l+0x17c>
 800dae8:	f04f 0e00 	mov.w	lr, #0
 800daec:	f108 0202 	add.w	r2, r8, #2
 800daf0:	9211      	str	r2, [sp, #68]	@ 0x44
 800daf2:	f898 2002 	ldrb.w	r2, [r8, #2]
 800daf6:	e786      	b.n	800da06 <_strtod_l+0x19e>
 800daf8:	f04f 0e01 	mov.w	lr, #1
 800dafc:	e7f6      	b.n	800daec <_strtod_l+0x284>
 800dafe:	bf00      	nop
 800db00:	080118e0 	.word	0x080118e0
 800db04:	080116f8 	.word	0x080116f8
 800db08:	7ff00000 	.word	0x7ff00000
 800db0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db0e:	1c54      	adds	r4, r2, #1
 800db10:	9411      	str	r4, [sp, #68]	@ 0x44
 800db12:	7852      	ldrb	r2, [r2, #1]
 800db14:	2a30      	cmp	r2, #48	@ 0x30
 800db16:	d0f9      	beq.n	800db0c <_strtod_l+0x2a4>
 800db18:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800db1c:	2c08      	cmp	r4, #8
 800db1e:	f63f af79 	bhi.w	800da14 <_strtod_l+0x1ac>
 800db22:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800db26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db28:	9209      	str	r2, [sp, #36]	@ 0x24
 800db2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db2c:	1c54      	adds	r4, r2, #1
 800db2e:	9411      	str	r4, [sp, #68]	@ 0x44
 800db30:	7852      	ldrb	r2, [r2, #1]
 800db32:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800db36:	2e09      	cmp	r6, #9
 800db38:	d937      	bls.n	800dbaa <_strtod_l+0x342>
 800db3a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800db3c:	1ba4      	subs	r4, r4, r6
 800db3e:	2c08      	cmp	r4, #8
 800db40:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800db44:	dc02      	bgt.n	800db4c <_strtod_l+0x2e4>
 800db46:	4564      	cmp	r4, ip
 800db48:	bfa8      	it	ge
 800db4a:	4664      	movge	r4, ip
 800db4c:	f1be 0f00 	cmp.w	lr, #0
 800db50:	d000      	beq.n	800db54 <_strtod_l+0x2ec>
 800db52:	4264      	negs	r4, r4
 800db54:	2b00      	cmp	r3, #0
 800db56:	d14d      	bne.n	800dbf4 <_strtod_l+0x38c>
 800db58:	9b07      	ldr	r3, [sp, #28]
 800db5a:	4318      	orrs	r0, r3
 800db5c:	f47f aebf 	bne.w	800d8de <_strtod_l+0x76>
 800db60:	2900      	cmp	r1, #0
 800db62:	f47f aed8 	bne.w	800d916 <_strtod_l+0xae>
 800db66:	2a69      	cmp	r2, #105	@ 0x69
 800db68:	d027      	beq.n	800dbba <_strtod_l+0x352>
 800db6a:	dc24      	bgt.n	800dbb6 <_strtod_l+0x34e>
 800db6c:	2a49      	cmp	r2, #73	@ 0x49
 800db6e:	d024      	beq.n	800dbba <_strtod_l+0x352>
 800db70:	2a4e      	cmp	r2, #78	@ 0x4e
 800db72:	f47f aed0 	bne.w	800d916 <_strtod_l+0xae>
 800db76:	4997      	ldr	r1, [pc, #604]	@ (800ddd4 <_strtod_l+0x56c>)
 800db78:	a811      	add	r0, sp, #68	@ 0x44
 800db7a:	f002 fc0f 	bl	801039c <__match>
 800db7e:	2800      	cmp	r0, #0
 800db80:	f43f aec9 	beq.w	800d916 <_strtod_l+0xae>
 800db84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	2b28      	cmp	r3, #40	@ 0x28
 800db8a:	d12d      	bne.n	800dbe8 <_strtod_l+0x380>
 800db8c:	4992      	ldr	r1, [pc, #584]	@ (800ddd8 <_strtod_l+0x570>)
 800db8e:	aa14      	add	r2, sp, #80	@ 0x50
 800db90:	a811      	add	r0, sp, #68	@ 0x44
 800db92:	f002 fc17 	bl	80103c4 <__hexnan>
 800db96:	2805      	cmp	r0, #5
 800db98:	d126      	bne.n	800dbe8 <_strtod_l+0x380>
 800db9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800db9c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800dba0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dba4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dba8:	e699      	b.n	800d8de <_strtod_l+0x76>
 800dbaa:	240a      	movs	r4, #10
 800dbac:	fb04 2c0c 	mla	ip, r4, ip, r2
 800dbb0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800dbb4:	e7b9      	b.n	800db2a <_strtod_l+0x2c2>
 800dbb6:	2a6e      	cmp	r2, #110	@ 0x6e
 800dbb8:	e7db      	b.n	800db72 <_strtod_l+0x30a>
 800dbba:	4988      	ldr	r1, [pc, #544]	@ (800dddc <_strtod_l+0x574>)
 800dbbc:	a811      	add	r0, sp, #68	@ 0x44
 800dbbe:	f002 fbed 	bl	801039c <__match>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	f43f aea7 	beq.w	800d916 <_strtod_l+0xae>
 800dbc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbca:	4985      	ldr	r1, [pc, #532]	@ (800dde0 <_strtod_l+0x578>)
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	a811      	add	r0, sp, #68	@ 0x44
 800dbd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dbd2:	f002 fbe3 	bl	801039c <__match>
 800dbd6:	b910      	cbnz	r0, 800dbde <_strtod_l+0x376>
 800dbd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbda:	3301      	adds	r3, #1
 800dbdc:	9311      	str	r3, [sp, #68]	@ 0x44
 800dbde:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800ddf4 <_strtod_l+0x58c>
 800dbe2:	f04f 0a00 	mov.w	sl, #0
 800dbe6:	e67a      	b.n	800d8de <_strtod_l+0x76>
 800dbe8:	487e      	ldr	r0, [pc, #504]	@ (800dde4 <_strtod_l+0x57c>)
 800dbea:	f001 fb0d 	bl	800f208 <nan>
 800dbee:	ec5b ab10 	vmov	sl, fp, d0
 800dbf2:	e674      	b.n	800d8de <_strtod_l+0x76>
 800dbf4:	ee07 9a90 	vmov	s15, r9
 800dbf8:	1be2      	subs	r2, r4, r7
 800dbfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dbfe:	2d00      	cmp	r5, #0
 800dc00:	bf08      	it	eq
 800dc02:	461d      	moveq	r5, r3
 800dc04:	2b10      	cmp	r3, #16
 800dc06:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc08:	461a      	mov	r2, r3
 800dc0a:	bfa8      	it	ge
 800dc0c:	2210      	movge	r2, #16
 800dc0e:	2b09      	cmp	r3, #9
 800dc10:	ec5b ab17 	vmov	sl, fp, d7
 800dc14:	dc15      	bgt.n	800dc42 <_strtod_l+0x3da>
 800dc16:	1be1      	subs	r1, r4, r7
 800dc18:	2900      	cmp	r1, #0
 800dc1a:	f43f ae60 	beq.w	800d8de <_strtod_l+0x76>
 800dc1e:	eba4 0107 	sub.w	r1, r4, r7
 800dc22:	dd72      	ble.n	800dd0a <_strtod_l+0x4a2>
 800dc24:	2916      	cmp	r1, #22
 800dc26:	dc59      	bgt.n	800dcdc <_strtod_l+0x474>
 800dc28:	4b6f      	ldr	r3, [pc, #444]	@ (800dde8 <_strtod_l+0x580>)
 800dc2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc30:	ed93 7b00 	vldr	d7, [r3]
 800dc34:	ec4b ab16 	vmov	d6, sl, fp
 800dc38:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc3c:	ec5b ab17 	vmov	sl, fp, d7
 800dc40:	e64d      	b.n	800d8de <_strtod_l+0x76>
 800dc42:	4969      	ldr	r1, [pc, #420]	@ (800dde8 <_strtod_l+0x580>)
 800dc44:	eddd 6a06 	vldr	s13, [sp, #24]
 800dc48:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dc4c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800dc50:	2b0f      	cmp	r3, #15
 800dc52:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800dc56:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dc5a:	ec5b ab16 	vmov	sl, fp, d6
 800dc5e:	ddda      	ble.n	800dc16 <_strtod_l+0x3ae>
 800dc60:	1a9a      	subs	r2, r3, r2
 800dc62:	1be1      	subs	r1, r4, r7
 800dc64:	440a      	add	r2, r1
 800dc66:	2a00      	cmp	r2, #0
 800dc68:	f340 8094 	ble.w	800dd94 <_strtod_l+0x52c>
 800dc6c:	f012 000f 	ands.w	r0, r2, #15
 800dc70:	d00a      	beq.n	800dc88 <_strtod_l+0x420>
 800dc72:	495d      	ldr	r1, [pc, #372]	@ (800dde8 <_strtod_l+0x580>)
 800dc74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dc78:	ed91 7b00 	vldr	d7, [r1]
 800dc7c:	ec4b ab16 	vmov	d6, sl, fp
 800dc80:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc84:	ec5b ab17 	vmov	sl, fp, d7
 800dc88:	f032 020f 	bics.w	r2, r2, #15
 800dc8c:	d073      	beq.n	800dd76 <_strtod_l+0x50e>
 800dc8e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800dc92:	dd47      	ble.n	800dd24 <_strtod_l+0x4bc>
 800dc94:	2400      	movs	r4, #0
 800dc96:	4625      	mov	r5, r4
 800dc98:	9407      	str	r4, [sp, #28]
 800dc9a:	4626      	mov	r6, r4
 800dc9c:	9a05      	ldr	r2, [sp, #20]
 800dc9e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ddf4 <_strtod_l+0x58c>
 800dca2:	2322      	movs	r3, #34	@ 0x22
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	f04f 0a00 	mov.w	sl, #0
 800dcaa:	9b07      	ldr	r3, [sp, #28]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f43f ae16 	beq.w	800d8de <_strtod_l+0x76>
 800dcb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dcb4:	9805      	ldr	r0, [sp, #20]
 800dcb6:	f002 fd29 	bl	801070c <_Bfree>
 800dcba:	9805      	ldr	r0, [sp, #20]
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	f002 fd25 	bl	801070c <_Bfree>
 800dcc2:	9805      	ldr	r0, [sp, #20]
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	f002 fd21 	bl	801070c <_Bfree>
 800dcca:	9907      	ldr	r1, [sp, #28]
 800dccc:	9805      	ldr	r0, [sp, #20]
 800dcce:	f002 fd1d 	bl	801070c <_Bfree>
 800dcd2:	9805      	ldr	r0, [sp, #20]
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	f002 fd19 	bl	801070c <_Bfree>
 800dcda:	e600      	b.n	800d8de <_strtod_l+0x76>
 800dcdc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800dce0:	1be0      	subs	r0, r4, r7
 800dce2:	4281      	cmp	r1, r0
 800dce4:	dbbc      	blt.n	800dc60 <_strtod_l+0x3f8>
 800dce6:	4a40      	ldr	r2, [pc, #256]	@ (800dde8 <_strtod_l+0x580>)
 800dce8:	f1c3 030f 	rsb	r3, r3, #15
 800dcec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800dcf0:	ed91 7b00 	vldr	d7, [r1]
 800dcf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dcf6:	ec4b ab16 	vmov	d6, sl, fp
 800dcfa:	1acb      	subs	r3, r1, r3
 800dcfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800dd00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd04:	ed92 6b00 	vldr	d6, [r2]
 800dd08:	e796      	b.n	800dc38 <_strtod_l+0x3d0>
 800dd0a:	3116      	adds	r1, #22
 800dd0c:	dba8      	blt.n	800dc60 <_strtod_l+0x3f8>
 800dd0e:	4b36      	ldr	r3, [pc, #216]	@ (800dde8 <_strtod_l+0x580>)
 800dd10:	1b3c      	subs	r4, r7, r4
 800dd12:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dd16:	ed94 7b00 	vldr	d7, [r4]
 800dd1a:	ec4b ab16 	vmov	d6, sl, fp
 800dd1e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dd22:	e78b      	b.n	800dc3c <_strtod_l+0x3d4>
 800dd24:	2000      	movs	r0, #0
 800dd26:	ec4b ab17 	vmov	d7, sl, fp
 800dd2a:	4e30      	ldr	r6, [pc, #192]	@ (800ddec <_strtod_l+0x584>)
 800dd2c:	1112      	asrs	r2, r2, #4
 800dd2e:	4601      	mov	r1, r0
 800dd30:	2a01      	cmp	r2, #1
 800dd32:	dc23      	bgt.n	800dd7c <_strtod_l+0x514>
 800dd34:	b108      	cbz	r0, 800dd3a <_strtod_l+0x4d2>
 800dd36:	ec5b ab17 	vmov	sl, fp, d7
 800dd3a:	4a2c      	ldr	r2, [pc, #176]	@ (800ddec <_strtod_l+0x584>)
 800dd3c:	482c      	ldr	r0, [pc, #176]	@ (800ddf0 <_strtod_l+0x588>)
 800dd3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dd42:	ed92 7b00 	vldr	d7, [r2]
 800dd46:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd4a:	ec4b ab16 	vmov	d6, sl, fp
 800dd4e:	4a29      	ldr	r2, [pc, #164]	@ (800ddf4 <_strtod_l+0x58c>)
 800dd50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd54:	ee17 1a90 	vmov	r1, s15
 800dd58:	400a      	ands	r2, r1
 800dd5a:	4282      	cmp	r2, r0
 800dd5c:	ec5b ab17 	vmov	sl, fp, d7
 800dd60:	d898      	bhi.n	800dc94 <_strtod_l+0x42c>
 800dd62:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800dd66:	4282      	cmp	r2, r0
 800dd68:	bf86      	itte	hi
 800dd6a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ddf8 <_strtod_l+0x590>
 800dd6e:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd72:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800dd76:	2200      	movs	r2, #0
 800dd78:	9206      	str	r2, [sp, #24]
 800dd7a:	e076      	b.n	800de6a <_strtod_l+0x602>
 800dd7c:	f012 0f01 	tst.w	r2, #1
 800dd80:	d004      	beq.n	800dd8c <_strtod_l+0x524>
 800dd82:	ed96 6b00 	vldr	d6, [r6]
 800dd86:	2001      	movs	r0, #1
 800dd88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd8c:	3101      	adds	r1, #1
 800dd8e:	1052      	asrs	r2, r2, #1
 800dd90:	3608      	adds	r6, #8
 800dd92:	e7cd      	b.n	800dd30 <_strtod_l+0x4c8>
 800dd94:	d0ef      	beq.n	800dd76 <_strtod_l+0x50e>
 800dd96:	4252      	negs	r2, r2
 800dd98:	f012 000f 	ands.w	r0, r2, #15
 800dd9c:	d00a      	beq.n	800ddb4 <_strtod_l+0x54c>
 800dd9e:	4912      	ldr	r1, [pc, #72]	@ (800dde8 <_strtod_l+0x580>)
 800dda0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dda4:	ed91 7b00 	vldr	d7, [r1]
 800dda8:	ec4b ab16 	vmov	d6, sl, fp
 800ddac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ddb0:	ec5b ab17 	vmov	sl, fp, d7
 800ddb4:	1112      	asrs	r2, r2, #4
 800ddb6:	d0de      	beq.n	800dd76 <_strtod_l+0x50e>
 800ddb8:	2a1f      	cmp	r2, #31
 800ddba:	dd1f      	ble.n	800ddfc <_strtod_l+0x594>
 800ddbc:	2400      	movs	r4, #0
 800ddbe:	4625      	mov	r5, r4
 800ddc0:	9407      	str	r4, [sp, #28]
 800ddc2:	4626      	mov	r6, r4
 800ddc4:	9a05      	ldr	r2, [sp, #20]
 800ddc6:	2322      	movs	r3, #34	@ 0x22
 800ddc8:	f04f 0a00 	mov.w	sl, #0
 800ddcc:	f04f 0b00 	mov.w	fp, #0
 800ddd0:	6013      	str	r3, [r2, #0]
 800ddd2:	e76a      	b.n	800dcaa <_strtod_l+0x442>
 800ddd4:	08011707 	.word	0x08011707
 800ddd8:	080118cc 	.word	0x080118cc
 800dddc:	080116ff 	.word	0x080116ff
 800dde0:	08011739 	.word	0x08011739
 800dde4:	080118c8 	.word	0x080118c8
 800dde8:	08011958 	.word	0x08011958
 800ddec:	08011930 	.word	0x08011930
 800ddf0:	7ca00000 	.word	0x7ca00000
 800ddf4:	7ff00000 	.word	0x7ff00000
 800ddf8:	7fefffff 	.word	0x7fefffff
 800ddfc:	f012 0110 	ands.w	r1, r2, #16
 800de00:	bf18      	it	ne
 800de02:	216a      	movne	r1, #106	@ 0x6a
 800de04:	9106      	str	r1, [sp, #24]
 800de06:	ec4b ab17 	vmov	d7, sl, fp
 800de0a:	49af      	ldr	r1, [pc, #700]	@ (800e0c8 <_strtod_l+0x860>)
 800de0c:	2000      	movs	r0, #0
 800de0e:	07d6      	lsls	r6, r2, #31
 800de10:	d504      	bpl.n	800de1c <_strtod_l+0x5b4>
 800de12:	ed91 6b00 	vldr	d6, [r1]
 800de16:	2001      	movs	r0, #1
 800de18:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de1c:	1052      	asrs	r2, r2, #1
 800de1e:	f101 0108 	add.w	r1, r1, #8
 800de22:	d1f4      	bne.n	800de0e <_strtod_l+0x5a6>
 800de24:	b108      	cbz	r0, 800de2a <_strtod_l+0x5c2>
 800de26:	ec5b ab17 	vmov	sl, fp, d7
 800de2a:	9a06      	ldr	r2, [sp, #24]
 800de2c:	b1b2      	cbz	r2, 800de5c <_strtod_l+0x5f4>
 800de2e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800de32:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800de36:	2a00      	cmp	r2, #0
 800de38:	4658      	mov	r0, fp
 800de3a:	dd0f      	ble.n	800de5c <_strtod_l+0x5f4>
 800de3c:	2a1f      	cmp	r2, #31
 800de3e:	dd55      	ble.n	800deec <_strtod_l+0x684>
 800de40:	2a34      	cmp	r2, #52	@ 0x34
 800de42:	bfde      	ittt	le
 800de44:	f04f 32ff 	movle.w	r2, #4294967295
 800de48:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800de4c:	408a      	lslle	r2, r1
 800de4e:	f04f 0a00 	mov.w	sl, #0
 800de52:	bfcc      	ite	gt
 800de54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de58:	ea02 0b00 	andle.w	fp, r2, r0
 800de5c:	ec4b ab17 	vmov	d7, sl, fp
 800de60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de68:	d0a8      	beq.n	800ddbc <_strtod_l+0x554>
 800de6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de6c:	9805      	ldr	r0, [sp, #20]
 800de6e:	f8cd 9000 	str.w	r9, [sp]
 800de72:	462a      	mov	r2, r5
 800de74:	f002 fcb2 	bl	80107dc <__s2b>
 800de78:	9007      	str	r0, [sp, #28]
 800de7a:	2800      	cmp	r0, #0
 800de7c:	f43f af0a 	beq.w	800dc94 <_strtod_l+0x42c>
 800de80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de82:	1b3f      	subs	r7, r7, r4
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfb4      	ite	lt
 800de88:	463b      	movlt	r3, r7
 800de8a:	2300      	movge	r3, #0
 800de8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800de8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de90:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800e0b8 <_strtod_l+0x850>
 800de94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de98:	2400      	movs	r4, #0
 800de9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800de9c:	4625      	mov	r5, r4
 800de9e:	9b07      	ldr	r3, [sp, #28]
 800dea0:	9805      	ldr	r0, [sp, #20]
 800dea2:	6859      	ldr	r1, [r3, #4]
 800dea4:	f002 fbf2 	bl	801068c <_Balloc>
 800dea8:	4606      	mov	r6, r0
 800deaa:	2800      	cmp	r0, #0
 800deac:	f43f aef6 	beq.w	800dc9c <_strtod_l+0x434>
 800deb0:	9b07      	ldr	r3, [sp, #28]
 800deb2:	691a      	ldr	r2, [r3, #16]
 800deb4:	ec4b ab19 	vmov	d9, sl, fp
 800deb8:	3202      	adds	r2, #2
 800deba:	f103 010c 	add.w	r1, r3, #12
 800debe:	0092      	lsls	r2, r2, #2
 800dec0:	300c      	adds	r0, #12
 800dec2:	f001 f992 	bl	800f1ea <memcpy>
 800dec6:	eeb0 0b49 	vmov.f64	d0, d9
 800deca:	9805      	ldr	r0, [sp, #20]
 800decc:	aa14      	add	r2, sp, #80	@ 0x50
 800dece:	a913      	add	r1, sp, #76	@ 0x4c
 800ded0:	f002 ffb8 	bl	8010e44 <__d2b>
 800ded4:	9012      	str	r0, [sp, #72]	@ 0x48
 800ded6:	2800      	cmp	r0, #0
 800ded8:	f43f aee0 	beq.w	800dc9c <_strtod_l+0x434>
 800dedc:	9805      	ldr	r0, [sp, #20]
 800dede:	2101      	movs	r1, #1
 800dee0:	f002 fd12 	bl	8010908 <__i2b>
 800dee4:	4605      	mov	r5, r0
 800dee6:	b940      	cbnz	r0, 800defa <_strtod_l+0x692>
 800dee8:	2500      	movs	r5, #0
 800deea:	e6d7      	b.n	800dc9c <_strtod_l+0x434>
 800deec:	f04f 31ff 	mov.w	r1, #4294967295
 800def0:	fa01 f202 	lsl.w	r2, r1, r2
 800def4:	ea02 0a0a 	and.w	sl, r2, sl
 800def8:	e7b0      	b.n	800de5c <_strtod_l+0x5f4>
 800defa:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800defc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800defe:	2f00      	cmp	r7, #0
 800df00:	bfab      	itete	ge
 800df02:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800df04:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800df06:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800df0a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800df0e:	bfac      	ite	ge
 800df10:	eb07 0903 	addge.w	r9, r7, r3
 800df14:	eba3 0807 	sublt.w	r8, r3, r7
 800df18:	9b06      	ldr	r3, [sp, #24]
 800df1a:	1aff      	subs	r7, r7, r3
 800df1c:	4417      	add	r7, r2
 800df1e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800df22:	4a6a      	ldr	r2, [pc, #424]	@ (800e0cc <_strtod_l+0x864>)
 800df24:	3f01      	subs	r7, #1
 800df26:	4297      	cmp	r7, r2
 800df28:	da51      	bge.n	800dfce <_strtod_l+0x766>
 800df2a:	1bd1      	subs	r1, r2, r7
 800df2c:	291f      	cmp	r1, #31
 800df2e:	eba3 0301 	sub.w	r3, r3, r1
 800df32:	f04f 0201 	mov.w	r2, #1
 800df36:	dc3e      	bgt.n	800dfb6 <_strtod_l+0x74e>
 800df38:	408a      	lsls	r2, r1
 800df3a:	920c      	str	r2, [sp, #48]	@ 0x30
 800df3c:	2200      	movs	r2, #0
 800df3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800df40:	eb09 0703 	add.w	r7, r9, r3
 800df44:	4498      	add	r8, r3
 800df46:	9b06      	ldr	r3, [sp, #24]
 800df48:	45b9      	cmp	r9, r7
 800df4a:	4498      	add	r8, r3
 800df4c:	464b      	mov	r3, r9
 800df4e:	bfa8      	it	ge
 800df50:	463b      	movge	r3, r7
 800df52:	4543      	cmp	r3, r8
 800df54:	bfa8      	it	ge
 800df56:	4643      	movge	r3, r8
 800df58:	2b00      	cmp	r3, #0
 800df5a:	bfc2      	ittt	gt
 800df5c:	1aff      	subgt	r7, r7, r3
 800df5e:	eba8 0803 	subgt.w	r8, r8, r3
 800df62:	eba9 0903 	subgt.w	r9, r9, r3
 800df66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df68:	2b00      	cmp	r3, #0
 800df6a:	dd16      	ble.n	800df9a <_strtod_l+0x732>
 800df6c:	4629      	mov	r1, r5
 800df6e:	9805      	ldr	r0, [sp, #20]
 800df70:	461a      	mov	r2, r3
 800df72:	f002 fd81 	bl	8010a78 <__pow5mult>
 800df76:	4605      	mov	r5, r0
 800df78:	2800      	cmp	r0, #0
 800df7a:	d0b5      	beq.n	800dee8 <_strtod_l+0x680>
 800df7c:	4601      	mov	r1, r0
 800df7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800df80:	9805      	ldr	r0, [sp, #20]
 800df82:	f002 fcd7 	bl	8010934 <__multiply>
 800df86:	900f      	str	r0, [sp, #60]	@ 0x3c
 800df88:	2800      	cmp	r0, #0
 800df8a:	f43f ae87 	beq.w	800dc9c <_strtod_l+0x434>
 800df8e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800df90:	9805      	ldr	r0, [sp, #20]
 800df92:	f002 fbbb 	bl	801070c <_Bfree>
 800df96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df98:	9312      	str	r3, [sp, #72]	@ 0x48
 800df9a:	2f00      	cmp	r7, #0
 800df9c:	dc1b      	bgt.n	800dfd6 <_strtod_l+0x76e>
 800df9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	dd21      	ble.n	800dfe8 <_strtod_l+0x780>
 800dfa4:	4631      	mov	r1, r6
 800dfa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfa8:	9805      	ldr	r0, [sp, #20]
 800dfaa:	f002 fd65 	bl	8010a78 <__pow5mult>
 800dfae:	4606      	mov	r6, r0
 800dfb0:	b9d0      	cbnz	r0, 800dfe8 <_strtod_l+0x780>
 800dfb2:	2600      	movs	r6, #0
 800dfb4:	e672      	b.n	800dc9c <_strtod_l+0x434>
 800dfb6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800dfba:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800dfbe:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800dfc2:	37e2      	adds	r7, #226	@ 0xe2
 800dfc4:	fa02 f107 	lsl.w	r1, r2, r7
 800dfc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dfca:	920c      	str	r2, [sp, #48]	@ 0x30
 800dfcc:	e7b8      	b.n	800df40 <_strtod_l+0x6d8>
 800dfce:	2200      	movs	r2, #0
 800dfd0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	e7f9      	b.n	800dfca <_strtod_l+0x762>
 800dfd6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dfd8:	9805      	ldr	r0, [sp, #20]
 800dfda:	463a      	mov	r2, r7
 800dfdc:	f002 fda6 	bl	8010b2c <__lshift>
 800dfe0:	9012      	str	r0, [sp, #72]	@ 0x48
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d1db      	bne.n	800df9e <_strtod_l+0x736>
 800dfe6:	e659      	b.n	800dc9c <_strtod_l+0x434>
 800dfe8:	f1b8 0f00 	cmp.w	r8, #0
 800dfec:	dd07      	ble.n	800dffe <_strtod_l+0x796>
 800dfee:	4631      	mov	r1, r6
 800dff0:	9805      	ldr	r0, [sp, #20]
 800dff2:	4642      	mov	r2, r8
 800dff4:	f002 fd9a 	bl	8010b2c <__lshift>
 800dff8:	4606      	mov	r6, r0
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d0d9      	beq.n	800dfb2 <_strtod_l+0x74a>
 800dffe:	f1b9 0f00 	cmp.w	r9, #0
 800e002:	dd08      	ble.n	800e016 <_strtod_l+0x7ae>
 800e004:	4629      	mov	r1, r5
 800e006:	9805      	ldr	r0, [sp, #20]
 800e008:	464a      	mov	r2, r9
 800e00a:	f002 fd8f 	bl	8010b2c <__lshift>
 800e00e:	4605      	mov	r5, r0
 800e010:	2800      	cmp	r0, #0
 800e012:	f43f ae43 	beq.w	800dc9c <_strtod_l+0x434>
 800e016:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e018:	9805      	ldr	r0, [sp, #20]
 800e01a:	4632      	mov	r2, r6
 800e01c:	f002 fe0e 	bl	8010c3c <__mdiff>
 800e020:	4604      	mov	r4, r0
 800e022:	2800      	cmp	r0, #0
 800e024:	f43f ae3a 	beq.w	800dc9c <_strtod_l+0x434>
 800e028:	2300      	movs	r3, #0
 800e02a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e02e:	60c3      	str	r3, [r0, #12]
 800e030:	4629      	mov	r1, r5
 800e032:	f002 fde7 	bl	8010c04 <__mcmp>
 800e036:	2800      	cmp	r0, #0
 800e038:	da4c      	bge.n	800e0d4 <_strtod_l+0x86c>
 800e03a:	ea58 080a 	orrs.w	r8, r8, sl
 800e03e:	d172      	bne.n	800e126 <_strtod_l+0x8be>
 800e040:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e044:	2b00      	cmp	r3, #0
 800e046:	d16e      	bne.n	800e126 <_strtod_l+0x8be>
 800e048:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e04c:	0d1b      	lsrs	r3, r3, #20
 800e04e:	051b      	lsls	r3, r3, #20
 800e050:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e054:	d967      	bls.n	800e126 <_strtod_l+0x8be>
 800e056:	6963      	ldr	r3, [r4, #20]
 800e058:	b913      	cbnz	r3, 800e060 <_strtod_l+0x7f8>
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	dd62      	ble.n	800e126 <_strtod_l+0x8be>
 800e060:	4621      	mov	r1, r4
 800e062:	2201      	movs	r2, #1
 800e064:	9805      	ldr	r0, [sp, #20]
 800e066:	f002 fd61 	bl	8010b2c <__lshift>
 800e06a:	4629      	mov	r1, r5
 800e06c:	4604      	mov	r4, r0
 800e06e:	f002 fdc9 	bl	8010c04 <__mcmp>
 800e072:	2800      	cmp	r0, #0
 800e074:	dd57      	ble.n	800e126 <_strtod_l+0x8be>
 800e076:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e07a:	9a06      	ldr	r2, [sp, #24]
 800e07c:	0d1b      	lsrs	r3, r3, #20
 800e07e:	051b      	lsls	r3, r3, #20
 800e080:	2a00      	cmp	r2, #0
 800e082:	d06e      	beq.n	800e162 <_strtod_l+0x8fa>
 800e084:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e088:	d86b      	bhi.n	800e162 <_strtod_l+0x8fa>
 800e08a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e08e:	f67f ae99 	bls.w	800ddc4 <_strtod_l+0x55c>
 800e092:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800e0c0 <_strtod_l+0x858>
 800e096:	ec4b ab16 	vmov	d6, sl, fp
 800e09a:	4b0d      	ldr	r3, [pc, #52]	@ (800e0d0 <_strtod_l+0x868>)
 800e09c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0a0:	ee17 2a90 	vmov	r2, s15
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	ec5b ab17 	vmov	sl, fp, d7
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f47f ae01 	bne.w	800dcb2 <_strtod_l+0x44a>
 800e0b0:	9a05      	ldr	r2, [sp, #20]
 800e0b2:	2322      	movs	r3, #34	@ 0x22
 800e0b4:	6013      	str	r3, [r2, #0]
 800e0b6:	e5fc      	b.n	800dcb2 <_strtod_l+0x44a>
 800e0b8:	ffc00000 	.word	0xffc00000
 800e0bc:	41dfffff 	.word	0x41dfffff
 800e0c0:	00000000 	.word	0x00000000
 800e0c4:	39500000 	.word	0x39500000
 800e0c8:	080118f8 	.word	0x080118f8
 800e0cc:	fffffc02 	.word	0xfffffc02
 800e0d0:	7ff00000 	.word	0x7ff00000
 800e0d4:	46d9      	mov	r9, fp
 800e0d6:	d15d      	bne.n	800e194 <_strtod_l+0x92c>
 800e0d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0dc:	f1b8 0f00 	cmp.w	r8, #0
 800e0e0:	d02a      	beq.n	800e138 <_strtod_l+0x8d0>
 800e0e2:	4aa9      	ldr	r2, [pc, #676]	@ (800e388 <_strtod_l+0xb20>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d12a      	bne.n	800e13e <_strtod_l+0x8d6>
 800e0e8:	9b06      	ldr	r3, [sp, #24]
 800e0ea:	4652      	mov	r2, sl
 800e0ec:	b1fb      	cbz	r3, 800e12e <_strtod_l+0x8c6>
 800e0ee:	4ba7      	ldr	r3, [pc, #668]	@ (800e38c <_strtod_l+0xb24>)
 800e0f0:	ea0b 0303 	and.w	r3, fp, r3
 800e0f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e0f8:	f04f 31ff 	mov.w	r1, #4294967295
 800e0fc:	d81a      	bhi.n	800e134 <_strtod_l+0x8cc>
 800e0fe:	0d1b      	lsrs	r3, r3, #20
 800e100:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e104:	fa01 f303 	lsl.w	r3, r1, r3
 800e108:	429a      	cmp	r2, r3
 800e10a:	d118      	bne.n	800e13e <_strtod_l+0x8d6>
 800e10c:	4ba0      	ldr	r3, [pc, #640]	@ (800e390 <_strtod_l+0xb28>)
 800e10e:	4599      	cmp	r9, r3
 800e110:	d102      	bne.n	800e118 <_strtod_l+0x8b0>
 800e112:	3201      	adds	r2, #1
 800e114:	f43f adc2 	beq.w	800dc9c <_strtod_l+0x434>
 800e118:	4b9c      	ldr	r3, [pc, #624]	@ (800e38c <_strtod_l+0xb24>)
 800e11a:	ea09 0303 	and.w	r3, r9, r3
 800e11e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e122:	f04f 0a00 	mov.w	sl, #0
 800e126:	9b06      	ldr	r3, [sp, #24]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1b2      	bne.n	800e092 <_strtod_l+0x82a>
 800e12c:	e5c1      	b.n	800dcb2 <_strtod_l+0x44a>
 800e12e:	f04f 33ff 	mov.w	r3, #4294967295
 800e132:	e7e9      	b.n	800e108 <_strtod_l+0x8a0>
 800e134:	460b      	mov	r3, r1
 800e136:	e7e7      	b.n	800e108 <_strtod_l+0x8a0>
 800e138:	ea53 030a 	orrs.w	r3, r3, sl
 800e13c:	d09b      	beq.n	800e076 <_strtod_l+0x80e>
 800e13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e140:	b1c3      	cbz	r3, 800e174 <_strtod_l+0x90c>
 800e142:	ea13 0f09 	tst.w	r3, r9
 800e146:	d0ee      	beq.n	800e126 <_strtod_l+0x8be>
 800e148:	9a06      	ldr	r2, [sp, #24]
 800e14a:	4650      	mov	r0, sl
 800e14c:	4659      	mov	r1, fp
 800e14e:	f1b8 0f00 	cmp.w	r8, #0
 800e152:	d013      	beq.n	800e17c <_strtod_l+0x914>
 800e154:	f7ff fb6c 	bl	800d830 <sulp>
 800e158:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e15c:	ec5b ab17 	vmov	sl, fp, d7
 800e160:	e7e1      	b.n	800e126 <_strtod_l+0x8be>
 800e162:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e166:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e16a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e16e:	f04f 3aff 	mov.w	sl, #4294967295
 800e172:	e7d8      	b.n	800e126 <_strtod_l+0x8be>
 800e174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e176:	ea13 0f0a 	tst.w	r3, sl
 800e17a:	e7e4      	b.n	800e146 <_strtod_l+0x8de>
 800e17c:	f7ff fb58 	bl	800d830 <sulp>
 800e180:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e184:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18c:	ec5b ab10 	vmov	sl, fp, d0
 800e190:	d1c9      	bne.n	800e126 <_strtod_l+0x8be>
 800e192:	e617      	b.n	800ddc4 <_strtod_l+0x55c>
 800e194:	4629      	mov	r1, r5
 800e196:	4620      	mov	r0, r4
 800e198:	f002 feac 	bl	8010ef4 <__ratio>
 800e19c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e1a0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a8:	d85d      	bhi.n	800e266 <_strtod_l+0x9fe>
 800e1aa:	f1b8 0f00 	cmp.w	r8, #0
 800e1ae:	d164      	bne.n	800e27a <_strtod_l+0xa12>
 800e1b0:	f1ba 0f00 	cmp.w	sl, #0
 800e1b4:	d14b      	bne.n	800e24e <_strtod_l+0x9e6>
 800e1b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1ba:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d160      	bne.n	800e284 <_strtod_l+0xa1c>
 800e1c2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e1c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ce:	d401      	bmi.n	800e1d4 <_strtod_l+0x96c>
 800e1d0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e1d4:	eeb1 ab48 	vneg.f64	d10, d8
 800e1d8:	486c      	ldr	r0, [pc, #432]	@ (800e38c <_strtod_l+0xb24>)
 800e1da:	496e      	ldr	r1, [pc, #440]	@ (800e394 <_strtod_l+0xb2c>)
 800e1dc:	ea09 0700 	and.w	r7, r9, r0
 800e1e0:	428f      	cmp	r7, r1
 800e1e2:	ec53 2b1a 	vmov	r2, r3, d10
 800e1e6:	d17d      	bne.n	800e2e4 <_strtod_l+0xa7c>
 800e1e8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e1ec:	ec4b ab1c 	vmov	d12, sl, fp
 800e1f0:	eeb0 0b4c 	vmov.f64	d0, d12
 800e1f4:	f002 fdb6 	bl	8010d64 <__ulp>
 800e1f8:	4864      	ldr	r0, [pc, #400]	@ (800e38c <_strtod_l+0xb24>)
 800e1fa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e1fe:	ee1c 3a90 	vmov	r3, s25
 800e202:	4a65      	ldr	r2, [pc, #404]	@ (800e398 <_strtod_l+0xb30>)
 800e204:	ea03 0100 	and.w	r1, r3, r0
 800e208:	4291      	cmp	r1, r2
 800e20a:	ec5b ab1c 	vmov	sl, fp, d12
 800e20e:	d93c      	bls.n	800e28a <_strtod_l+0xa22>
 800e210:	ee19 2a90 	vmov	r2, s19
 800e214:	4b5e      	ldr	r3, [pc, #376]	@ (800e390 <_strtod_l+0xb28>)
 800e216:	429a      	cmp	r2, r3
 800e218:	d104      	bne.n	800e224 <_strtod_l+0x9bc>
 800e21a:	ee19 3a10 	vmov	r3, s18
 800e21e:	3301      	adds	r3, #1
 800e220:	f43f ad3c 	beq.w	800dc9c <_strtod_l+0x434>
 800e224:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800e390 <_strtod_l+0xb28>
 800e228:	f04f 3aff 	mov.w	sl, #4294967295
 800e22c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e22e:	9805      	ldr	r0, [sp, #20]
 800e230:	f002 fa6c 	bl	801070c <_Bfree>
 800e234:	9805      	ldr	r0, [sp, #20]
 800e236:	4631      	mov	r1, r6
 800e238:	f002 fa68 	bl	801070c <_Bfree>
 800e23c:	9805      	ldr	r0, [sp, #20]
 800e23e:	4629      	mov	r1, r5
 800e240:	f002 fa64 	bl	801070c <_Bfree>
 800e244:	9805      	ldr	r0, [sp, #20]
 800e246:	4621      	mov	r1, r4
 800e248:	f002 fa60 	bl	801070c <_Bfree>
 800e24c:	e627      	b.n	800de9e <_strtod_l+0x636>
 800e24e:	f1ba 0f01 	cmp.w	sl, #1
 800e252:	d103      	bne.n	800e25c <_strtod_l+0x9f4>
 800e254:	f1bb 0f00 	cmp.w	fp, #0
 800e258:	f43f adb4 	beq.w	800ddc4 <_strtod_l+0x55c>
 800e25c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e260:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e264:	e7b8      	b.n	800e1d8 <_strtod_l+0x970>
 800e266:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e26a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e26e:	f1b8 0f00 	cmp.w	r8, #0
 800e272:	d0af      	beq.n	800e1d4 <_strtod_l+0x96c>
 800e274:	eeb0 ab48 	vmov.f64	d10, d8
 800e278:	e7ae      	b.n	800e1d8 <_strtod_l+0x970>
 800e27a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e27e:	eeb0 8b4a 	vmov.f64	d8, d10
 800e282:	e7a9      	b.n	800e1d8 <_strtod_l+0x970>
 800e284:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e288:	e7a6      	b.n	800e1d8 <_strtod_l+0x970>
 800e28a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e28e:	9b06      	ldr	r3, [sp, #24]
 800e290:	46d9      	mov	r9, fp
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1ca      	bne.n	800e22c <_strtod_l+0x9c4>
 800e296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e29a:	0d1b      	lsrs	r3, r3, #20
 800e29c:	051b      	lsls	r3, r3, #20
 800e29e:	429f      	cmp	r7, r3
 800e2a0:	d1c4      	bne.n	800e22c <_strtod_l+0x9c4>
 800e2a2:	ec51 0b18 	vmov	r0, r1, d8
 800e2a6:	f7f2 fa57 	bl	8000758 <__aeabi_d2lz>
 800e2aa:	f7f2 fa0f 	bl	80006cc <__aeabi_l2d>
 800e2ae:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e2b2:	ec41 0b17 	vmov	d7, r0, r1
 800e2b6:	ea49 090a 	orr.w	r9, r9, sl
 800e2ba:	ea59 0908 	orrs.w	r9, r9, r8
 800e2be:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e2c2:	d03c      	beq.n	800e33e <_strtod_l+0xad6>
 800e2c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e370 <_strtod_l+0xb08>
 800e2c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d0:	f53f acef 	bmi.w	800dcb2 <_strtod_l+0x44a>
 800e2d4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800e378 <_strtod_l+0xb10>
 800e2d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e0:	dda4      	ble.n	800e22c <_strtod_l+0x9c4>
 800e2e2:	e4e6      	b.n	800dcb2 <_strtod_l+0x44a>
 800e2e4:	9906      	ldr	r1, [sp, #24]
 800e2e6:	b1e1      	cbz	r1, 800e322 <_strtod_l+0xaba>
 800e2e8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e2ec:	d819      	bhi.n	800e322 <_strtod_l+0xaba>
 800e2ee:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f6:	d811      	bhi.n	800e31c <_strtod_l+0xab4>
 800e2f8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e2fc:	ee18 3a10 	vmov	r3, s16
 800e300:	2b01      	cmp	r3, #1
 800e302:	bf38      	it	cc
 800e304:	2301      	movcc	r3, #1
 800e306:	ee08 3a10 	vmov	s16, r3
 800e30a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e30e:	f1b8 0f00 	cmp.w	r8, #0
 800e312:	d111      	bne.n	800e338 <_strtod_l+0xad0>
 800e314:	eeb1 7b48 	vneg.f64	d7, d8
 800e318:	ec53 2b17 	vmov	r2, r3, d7
 800e31c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e320:	1bcb      	subs	r3, r1, r7
 800e322:	eeb0 0b49 	vmov.f64	d0, d9
 800e326:	ec43 2b1a 	vmov	d10, r2, r3
 800e32a:	f002 fd1b 	bl	8010d64 <__ulp>
 800e32e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e332:	ec5b ab19 	vmov	sl, fp, d9
 800e336:	e7aa      	b.n	800e28e <_strtod_l+0xa26>
 800e338:	eeb0 7b48 	vmov.f64	d7, d8
 800e33c:	e7ec      	b.n	800e318 <_strtod_l+0xab0>
 800e33e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e380 <_strtod_l+0xb18>
 800e342:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34a:	f57f af6f 	bpl.w	800e22c <_strtod_l+0x9c4>
 800e34e:	e4b0      	b.n	800dcb2 <_strtod_l+0x44a>
 800e350:	2300      	movs	r3, #0
 800e352:	9308      	str	r3, [sp, #32]
 800e354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e356:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e358:	6013      	str	r3, [r2, #0]
 800e35a:	f7ff bac4 	b.w	800d8e6 <_strtod_l+0x7e>
 800e35e:	2a65      	cmp	r2, #101	@ 0x65
 800e360:	f43f abbf 	beq.w	800dae2 <_strtod_l+0x27a>
 800e364:	2a45      	cmp	r2, #69	@ 0x45
 800e366:	f43f abbc 	beq.w	800dae2 <_strtod_l+0x27a>
 800e36a:	2101      	movs	r1, #1
 800e36c:	f7ff bbf4 	b.w	800db58 <_strtod_l+0x2f0>
 800e370:	94a03595 	.word	0x94a03595
 800e374:	3fdfffff 	.word	0x3fdfffff
 800e378:	35afe535 	.word	0x35afe535
 800e37c:	3fe00000 	.word	0x3fe00000
 800e380:	94a03595 	.word	0x94a03595
 800e384:	3fcfffff 	.word	0x3fcfffff
 800e388:	000fffff 	.word	0x000fffff
 800e38c:	7ff00000 	.word	0x7ff00000
 800e390:	7fefffff 	.word	0x7fefffff
 800e394:	7fe00000 	.word	0x7fe00000
 800e398:	7c9fffff 	.word	0x7c9fffff
 800e39c:	00000000 	.word	0x00000000

0800e3a0 <strtof>:
 800e3a0:	b510      	push	{r4, lr}
 800e3a2:	4c21      	ldr	r4, [pc, #132]	@ (800e428 <strtof+0x88>)
 800e3a4:	4b21      	ldr	r3, [pc, #132]	@ (800e42c <strtof+0x8c>)
 800e3a6:	460a      	mov	r2, r1
 800e3a8:	4601      	mov	r1, r0
 800e3aa:	6820      	ldr	r0, [r4, #0]
 800e3ac:	f7ff fa5c 	bl	800d868 <_strtod_l>
 800e3b0:	eeb4 0b40 	vcmp.f64	d0, d0
 800e3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b8:	eeb0 7b40 	vmov.f64	d7, d0
 800e3bc:	d70d      	bvc.n	800e3da <strtof+0x3a>
 800e3be:	ee17 3a90 	vmov	r3, s15
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	481a      	ldr	r0, [pc, #104]	@ (800e430 <strtof+0x90>)
 800e3c6:	da04      	bge.n	800e3d2 <strtof+0x32>
 800e3c8:	f000 ff26 	bl	800f218 <nanf>
 800e3cc:	eeb1 0a40 	vneg.f32	s0, s0
 800e3d0:	bd10      	pop	{r4, pc}
 800e3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3d6:	f000 bf1f 	b.w	800f218 <nanf>
 800e3da:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e3de:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800e434 <strtof+0x94>
 800e3e2:	eeb0 6ac0 	vabs.f32	s12, s0
 800e3e6:	eeb4 6a66 	vcmp.f32	s12, s13
 800e3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ee:	dd08      	ble.n	800e402 <strtof+0x62>
 800e3f0:	eeb0 6bc7 	vabs.f64	d6, d7
 800e3f4:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 800e420 <strtof+0x80>
 800e3f8:	eeb4 6b45 	vcmp.f64	d6, d5
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	dd0a      	ble.n	800e418 <strtof+0x78>
 800e402:	ee10 3a10 	vmov	r3, s0
 800e406:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e40a:	d1e1      	bne.n	800e3d0 <strtof+0x30>
 800e40c:	ee17 2a90 	vmov	r2, s15
 800e410:	4b09      	ldr	r3, [pc, #36]	@ (800e438 <strtof+0x98>)
 800e412:	4013      	ands	r3, r2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d0db      	beq.n	800e3d0 <strtof+0x30>
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	2222      	movs	r2, #34	@ 0x22
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	e7d7      	b.n	800e3d0 <strtof+0x30>
 800e420:	ffffffff 	.word	0xffffffff
 800e424:	7fefffff 	.word	0x7fefffff
 800e428:	2400027c 	.word	0x2400027c
 800e42c:	24000110 	.word	0x24000110
 800e430:	080118c8 	.word	0x080118c8
 800e434:	7f7fffff 	.word	0x7f7fffff
 800e438:	7ff00000 	.word	0x7ff00000

0800e43c <__cvt>:
 800e43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e43e:	ed2d 8b02 	vpush	{d8}
 800e442:	eeb0 8b40 	vmov.f64	d8, d0
 800e446:	b085      	sub	sp, #20
 800e448:	4617      	mov	r7, r2
 800e44a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e44c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e44e:	ee18 2a90 	vmov	r2, s17
 800e452:	f025 0520 	bic.w	r5, r5, #32
 800e456:	2a00      	cmp	r2, #0
 800e458:	bfb6      	itet	lt
 800e45a:	222d      	movlt	r2, #45	@ 0x2d
 800e45c:	2200      	movge	r2, #0
 800e45e:	eeb1 8b40 	vneglt.f64	d8, d0
 800e462:	2d46      	cmp	r5, #70	@ 0x46
 800e464:	460c      	mov	r4, r1
 800e466:	701a      	strb	r2, [r3, #0]
 800e468:	d004      	beq.n	800e474 <__cvt+0x38>
 800e46a:	2d45      	cmp	r5, #69	@ 0x45
 800e46c:	d100      	bne.n	800e470 <__cvt+0x34>
 800e46e:	3401      	adds	r4, #1
 800e470:	2102      	movs	r1, #2
 800e472:	e000      	b.n	800e476 <__cvt+0x3a>
 800e474:	2103      	movs	r1, #3
 800e476:	ab03      	add	r3, sp, #12
 800e478:	9301      	str	r3, [sp, #4]
 800e47a:	ab02      	add	r3, sp, #8
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	4622      	mov	r2, r4
 800e480:	4633      	mov	r3, r6
 800e482:	eeb0 0b48 	vmov.f64	d0, d8
 800e486:	f000 ff57 	bl	800f338 <_dtoa_r>
 800e48a:	2d47      	cmp	r5, #71	@ 0x47
 800e48c:	d114      	bne.n	800e4b8 <__cvt+0x7c>
 800e48e:	07fb      	lsls	r3, r7, #31
 800e490:	d50a      	bpl.n	800e4a8 <__cvt+0x6c>
 800e492:	1902      	adds	r2, r0, r4
 800e494:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49c:	bf08      	it	eq
 800e49e:	9203      	streq	r2, [sp, #12]
 800e4a0:	2130      	movs	r1, #48	@ 0x30
 800e4a2:	9b03      	ldr	r3, [sp, #12]
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d319      	bcc.n	800e4dc <__cvt+0xa0>
 800e4a8:	9b03      	ldr	r3, [sp, #12]
 800e4aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4ac:	1a1b      	subs	r3, r3, r0
 800e4ae:	6013      	str	r3, [r2, #0]
 800e4b0:	b005      	add	sp, #20
 800e4b2:	ecbd 8b02 	vpop	{d8}
 800e4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4b8:	2d46      	cmp	r5, #70	@ 0x46
 800e4ba:	eb00 0204 	add.w	r2, r0, r4
 800e4be:	d1e9      	bne.n	800e494 <__cvt+0x58>
 800e4c0:	7803      	ldrb	r3, [r0, #0]
 800e4c2:	2b30      	cmp	r3, #48	@ 0x30
 800e4c4:	d107      	bne.n	800e4d6 <__cvt+0x9a>
 800e4c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ce:	bf1c      	itt	ne
 800e4d0:	f1c4 0401 	rsbne	r4, r4, #1
 800e4d4:	6034      	strne	r4, [r6, #0]
 800e4d6:	6833      	ldr	r3, [r6, #0]
 800e4d8:	441a      	add	r2, r3
 800e4da:	e7db      	b.n	800e494 <__cvt+0x58>
 800e4dc:	1c5c      	adds	r4, r3, #1
 800e4de:	9403      	str	r4, [sp, #12]
 800e4e0:	7019      	strb	r1, [r3, #0]
 800e4e2:	e7de      	b.n	800e4a2 <__cvt+0x66>

0800e4e4 <__exponent>:
 800e4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4e6:	2900      	cmp	r1, #0
 800e4e8:	bfba      	itte	lt
 800e4ea:	4249      	neglt	r1, r1
 800e4ec:	232d      	movlt	r3, #45	@ 0x2d
 800e4ee:	232b      	movge	r3, #43	@ 0x2b
 800e4f0:	2909      	cmp	r1, #9
 800e4f2:	7002      	strb	r2, [r0, #0]
 800e4f4:	7043      	strb	r3, [r0, #1]
 800e4f6:	dd29      	ble.n	800e54c <__exponent+0x68>
 800e4f8:	f10d 0307 	add.w	r3, sp, #7
 800e4fc:	461d      	mov	r5, r3
 800e4fe:	270a      	movs	r7, #10
 800e500:	461a      	mov	r2, r3
 800e502:	fbb1 f6f7 	udiv	r6, r1, r7
 800e506:	fb07 1416 	mls	r4, r7, r6, r1
 800e50a:	3430      	adds	r4, #48	@ 0x30
 800e50c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e510:	460c      	mov	r4, r1
 800e512:	2c63      	cmp	r4, #99	@ 0x63
 800e514:	f103 33ff 	add.w	r3, r3, #4294967295
 800e518:	4631      	mov	r1, r6
 800e51a:	dcf1      	bgt.n	800e500 <__exponent+0x1c>
 800e51c:	3130      	adds	r1, #48	@ 0x30
 800e51e:	1e94      	subs	r4, r2, #2
 800e520:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e524:	1c41      	adds	r1, r0, #1
 800e526:	4623      	mov	r3, r4
 800e528:	42ab      	cmp	r3, r5
 800e52a:	d30a      	bcc.n	800e542 <__exponent+0x5e>
 800e52c:	f10d 0309 	add.w	r3, sp, #9
 800e530:	1a9b      	subs	r3, r3, r2
 800e532:	42ac      	cmp	r4, r5
 800e534:	bf88      	it	hi
 800e536:	2300      	movhi	r3, #0
 800e538:	3302      	adds	r3, #2
 800e53a:	4403      	add	r3, r0
 800e53c:	1a18      	subs	r0, r3, r0
 800e53e:	b003      	add	sp, #12
 800e540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e542:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e546:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e54a:	e7ed      	b.n	800e528 <__exponent+0x44>
 800e54c:	2330      	movs	r3, #48	@ 0x30
 800e54e:	3130      	adds	r1, #48	@ 0x30
 800e550:	7083      	strb	r3, [r0, #2]
 800e552:	70c1      	strb	r1, [r0, #3]
 800e554:	1d03      	adds	r3, r0, #4
 800e556:	e7f1      	b.n	800e53c <__exponent+0x58>

0800e558 <_printf_float>:
 800e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e55c:	b08d      	sub	sp, #52	@ 0x34
 800e55e:	460c      	mov	r4, r1
 800e560:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e564:	4616      	mov	r6, r2
 800e566:	461f      	mov	r7, r3
 800e568:	4605      	mov	r5, r0
 800e56a:	f000 fdbf 	bl	800f0ec <_localeconv_r>
 800e56e:	f8d0 b000 	ldr.w	fp, [r0]
 800e572:	4658      	mov	r0, fp
 800e574:	f7f1 ff14 	bl	80003a0 <strlen>
 800e578:	2300      	movs	r3, #0
 800e57a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e57c:	f8d8 3000 	ldr.w	r3, [r8]
 800e580:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e584:	6822      	ldr	r2, [r4, #0]
 800e586:	9005      	str	r0, [sp, #20]
 800e588:	3307      	adds	r3, #7
 800e58a:	f023 0307 	bic.w	r3, r3, #7
 800e58e:	f103 0108 	add.w	r1, r3, #8
 800e592:	f8c8 1000 	str.w	r1, [r8]
 800e596:	ed93 0b00 	vldr	d0, [r3]
 800e59a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e7f8 <_printf_float+0x2a0>
 800e59e:	eeb0 7bc0 	vabs.f64	d7, d0
 800e5a2:	eeb4 7b46 	vcmp.f64	d7, d6
 800e5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e5ae:	dd24      	ble.n	800e5fa <_printf_float+0xa2>
 800e5b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b8:	d502      	bpl.n	800e5c0 <_printf_float+0x68>
 800e5ba:	232d      	movs	r3, #45	@ 0x2d
 800e5bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5c0:	498f      	ldr	r1, [pc, #572]	@ (800e800 <_printf_float+0x2a8>)
 800e5c2:	4b90      	ldr	r3, [pc, #576]	@ (800e804 <_printf_float+0x2ac>)
 800e5c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e5c8:	bf8c      	ite	hi
 800e5ca:	4688      	movhi	r8, r1
 800e5cc:	4698      	movls	r8, r3
 800e5ce:	f022 0204 	bic.w	r2, r2, #4
 800e5d2:	2303      	movs	r3, #3
 800e5d4:	6123      	str	r3, [r4, #16]
 800e5d6:	6022      	str	r2, [r4, #0]
 800e5d8:	f04f 0a00 	mov.w	sl, #0
 800e5dc:	9700      	str	r7, [sp, #0]
 800e5de:	4633      	mov	r3, r6
 800e5e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	f000 f9d1 	bl	800e98c <_printf_common>
 800e5ea:	3001      	adds	r0, #1
 800e5ec:	f040 8089 	bne.w	800e702 <_printf_float+0x1aa>
 800e5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f4:	b00d      	add	sp, #52	@ 0x34
 800e5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fa:	eeb4 0b40 	vcmp.f64	d0, d0
 800e5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e602:	d709      	bvc.n	800e618 <_printf_float+0xc0>
 800e604:	ee10 3a90 	vmov	r3, s1
 800e608:	2b00      	cmp	r3, #0
 800e60a:	bfbc      	itt	lt
 800e60c:	232d      	movlt	r3, #45	@ 0x2d
 800e60e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e612:	497d      	ldr	r1, [pc, #500]	@ (800e808 <_printf_float+0x2b0>)
 800e614:	4b7d      	ldr	r3, [pc, #500]	@ (800e80c <_printf_float+0x2b4>)
 800e616:	e7d5      	b.n	800e5c4 <_printf_float+0x6c>
 800e618:	6863      	ldr	r3, [r4, #4]
 800e61a:	1c59      	adds	r1, r3, #1
 800e61c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e620:	d139      	bne.n	800e696 <_printf_float+0x13e>
 800e622:	2306      	movs	r3, #6
 800e624:	6063      	str	r3, [r4, #4]
 800e626:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e62a:	2300      	movs	r3, #0
 800e62c:	6022      	str	r2, [r4, #0]
 800e62e:	9303      	str	r3, [sp, #12]
 800e630:	ab0a      	add	r3, sp, #40	@ 0x28
 800e632:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e636:	ab09      	add	r3, sp, #36	@ 0x24
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	6861      	ldr	r1, [r4, #4]
 800e63c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e640:	4628      	mov	r0, r5
 800e642:	f7ff fefb 	bl	800e43c <__cvt>
 800e646:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e64a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e64c:	4680      	mov	r8, r0
 800e64e:	d129      	bne.n	800e6a4 <_printf_float+0x14c>
 800e650:	1cc8      	adds	r0, r1, #3
 800e652:	db02      	blt.n	800e65a <_printf_float+0x102>
 800e654:	6863      	ldr	r3, [r4, #4]
 800e656:	4299      	cmp	r1, r3
 800e658:	dd41      	ble.n	800e6de <_printf_float+0x186>
 800e65a:	f1a9 0902 	sub.w	r9, r9, #2
 800e65e:	fa5f f989 	uxtb.w	r9, r9
 800e662:	3901      	subs	r1, #1
 800e664:	464a      	mov	r2, r9
 800e666:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e66a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e66c:	f7ff ff3a 	bl	800e4e4 <__exponent>
 800e670:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e672:	1813      	adds	r3, r2, r0
 800e674:	2a01      	cmp	r2, #1
 800e676:	4682      	mov	sl, r0
 800e678:	6123      	str	r3, [r4, #16]
 800e67a:	dc02      	bgt.n	800e682 <_printf_float+0x12a>
 800e67c:	6822      	ldr	r2, [r4, #0]
 800e67e:	07d2      	lsls	r2, r2, #31
 800e680:	d501      	bpl.n	800e686 <_printf_float+0x12e>
 800e682:	3301      	adds	r3, #1
 800e684:	6123      	str	r3, [r4, #16]
 800e686:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d0a6      	beq.n	800e5dc <_printf_float+0x84>
 800e68e:	232d      	movs	r3, #45	@ 0x2d
 800e690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e694:	e7a2      	b.n	800e5dc <_printf_float+0x84>
 800e696:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e69a:	d1c4      	bne.n	800e626 <_printf_float+0xce>
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1c2      	bne.n	800e626 <_printf_float+0xce>
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e7bf      	b.n	800e624 <_printf_float+0xcc>
 800e6a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e6a8:	d9db      	bls.n	800e662 <_printf_float+0x10a>
 800e6aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e6ae:	d118      	bne.n	800e6e2 <_printf_float+0x18a>
 800e6b0:	2900      	cmp	r1, #0
 800e6b2:	6863      	ldr	r3, [r4, #4]
 800e6b4:	dd0b      	ble.n	800e6ce <_printf_float+0x176>
 800e6b6:	6121      	str	r1, [r4, #16]
 800e6b8:	b913      	cbnz	r3, 800e6c0 <_printf_float+0x168>
 800e6ba:	6822      	ldr	r2, [r4, #0]
 800e6bc:	07d0      	lsls	r0, r2, #31
 800e6be:	d502      	bpl.n	800e6c6 <_printf_float+0x16e>
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	440b      	add	r3, r1
 800e6c4:	6123      	str	r3, [r4, #16]
 800e6c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e6c8:	f04f 0a00 	mov.w	sl, #0
 800e6cc:	e7db      	b.n	800e686 <_printf_float+0x12e>
 800e6ce:	b913      	cbnz	r3, 800e6d6 <_printf_float+0x17e>
 800e6d0:	6822      	ldr	r2, [r4, #0]
 800e6d2:	07d2      	lsls	r2, r2, #31
 800e6d4:	d501      	bpl.n	800e6da <_printf_float+0x182>
 800e6d6:	3302      	adds	r3, #2
 800e6d8:	e7f4      	b.n	800e6c4 <_printf_float+0x16c>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e7f2      	b.n	800e6c4 <_printf_float+0x16c>
 800e6de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e6e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6e4:	4299      	cmp	r1, r3
 800e6e6:	db05      	blt.n	800e6f4 <_printf_float+0x19c>
 800e6e8:	6823      	ldr	r3, [r4, #0]
 800e6ea:	6121      	str	r1, [r4, #16]
 800e6ec:	07d8      	lsls	r0, r3, #31
 800e6ee:	d5ea      	bpl.n	800e6c6 <_printf_float+0x16e>
 800e6f0:	1c4b      	adds	r3, r1, #1
 800e6f2:	e7e7      	b.n	800e6c4 <_printf_float+0x16c>
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	bfd4      	ite	le
 800e6f8:	f1c1 0202 	rsble	r2, r1, #2
 800e6fc:	2201      	movgt	r2, #1
 800e6fe:	4413      	add	r3, r2
 800e700:	e7e0      	b.n	800e6c4 <_printf_float+0x16c>
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	055a      	lsls	r2, r3, #21
 800e706:	d407      	bmi.n	800e718 <_printf_float+0x1c0>
 800e708:	6923      	ldr	r3, [r4, #16]
 800e70a:	4642      	mov	r2, r8
 800e70c:	4631      	mov	r1, r6
 800e70e:	4628      	mov	r0, r5
 800e710:	47b8      	blx	r7
 800e712:	3001      	adds	r0, #1
 800e714:	d12a      	bne.n	800e76c <_printf_float+0x214>
 800e716:	e76b      	b.n	800e5f0 <_printf_float+0x98>
 800e718:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e71c:	f240 80e0 	bls.w	800e8e0 <_printf_float+0x388>
 800e720:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e724:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72c:	d133      	bne.n	800e796 <_printf_float+0x23e>
 800e72e:	4a38      	ldr	r2, [pc, #224]	@ (800e810 <_printf_float+0x2b8>)
 800e730:	2301      	movs	r3, #1
 800e732:	4631      	mov	r1, r6
 800e734:	4628      	mov	r0, r5
 800e736:	47b8      	blx	r7
 800e738:	3001      	adds	r0, #1
 800e73a:	f43f af59 	beq.w	800e5f0 <_printf_float+0x98>
 800e73e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e742:	4543      	cmp	r3, r8
 800e744:	db02      	blt.n	800e74c <_printf_float+0x1f4>
 800e746:	6823      	ldr	r3, [r4, #0]
 800e748:	07d8      	lsls	r0, r3, #31
 800e74a:	d50f      	bpl.n	800e76c <_printf_float+0x214>
 800e74c:	9b05      	ldr	r3, [sp, #20]
 800e74e:	465a      	mov	r2, fp
 800e750:	4631      	mov	r1, r6
 800e752:	4628      	mov	r0, r5
 800e754:	47b8      	blx	r7
 800e756:	3001      	adds	r0, #1
 800e758:	f43f af4a 	beq.w	800e5f0 <_printf_float+0x98>
 800e75c:	f04f 0900 	mov.w	r9, #0
 800e760:	f108 38ff 	add.w	r8, r8, #4294967295
 800e764:	f104 0a1a 	add.w	sl, r4, #26
 800e768:	45c8      	cmp	r8, r9
 800e76a:	dc09      	bgt.n	800e780 <_printf_float+0x228>
 800e76c:	6823      	ldr	r3, [r4, #0]
 800e76e:	079b      	lsls	r3, r3, #30
 800e770:	f100 8107 	bmi.w	800e982 <_printf_float+0x42a>
 800e774:	68e0      	ldr	r0, [r4, #12]
 800e776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e778:	4298      	cmp	r0, r3
 800e77a:	bfb8      	it	lt
 800e77c:	4618      	movlt	r0, r3
 800e77e:	e739      	b.n	800e5f4 <_printf_float+0x9c>
 800e780:	2301      	movs	r3, #1
 800e782:	4652      	mov	r2, sl
 800e784:	4631      	mov	r1, r6
 800e786:	4628      	mov	r0, r5
 800e788:	47b8      	blx	r7
 800e78a:	3001      	adds	r0, #1
 800e78c:	f43f af30 	beq.w	800e5f0 <_printf_float+0x98>
 800e790:	f109 0901 	add.w	r9, r9, #1
 800e794:	e7e8      	b.n	800e768 <_printf_float+0x210>
 800e796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e798:	2b00      	cmp	r3, #0
 800e79a:	dc3b      	bgt.n	800e814 <_printf_float+0x2bc>
 800e79c:	4a1c      	ldr	r2, [pc, #112]	@ (800e810 <_printf_float+0x2b8>)
 800e79e:	2301      	movs	r3, #1
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	47b8      	blx	r7
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	f43f af22 	beq.w	800e5f0 <_printf_float+0x98>
 800e7ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e7b0:	ea59 0303 	orrs.w	r3, r9, r3
 800e7b4:	d102      	bne.n	800e7bc <_printf_float+0x264>
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	07d9      	lsls	r1, r3, #31
 800e7ba:	d5d7      	bpl.n	800e76c <_printf_float+0x214>
 800e7bc:	9b05      	ldr	r3, [sp, #20]
 800e7be:	465a      	mov	r2, fp
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	47b8      	blx	r7
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	f43f af12 	beq.w	800e5f0 <_printf_float+0x98>
 800e7cc:	f04f 0a00 	mov.w	sl, #0
 800e7d0:	f104 0b1a 	add.w	fp, r4, #26
 800e7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7d6:	425b      	negs	r3, r3
 800e7d8:	4553      	cmp	r3, sl
 800e7da:	dc01      	bgt.n	800e7e0 <_printf_float+0x288>
 800e7dc:	464b      	mov	r3, r9
 800e7de:	e794      	b.n	800e70a <_printf_float+0x1b2>
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	465a      	mov	r2, fp
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	47b8      	blx	r7
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	f43f af00 	beq.w	800e5f0 <_printf_float+0x98>
 800e7f0:	f10a 0a01 	add.w	sl, sl, #1
 800e7f4:	e7ee      	b.n	800e7d4 <_printf_float+0x27c>
 800e7f6:	bf00      	nop
 800e7f8:	ffffffff 	.word	0xffffffff
 800e7fc:	7fefffff 	.word	0x7fefffff
 800e800:	080116fe 	.word	0x080116fe
 800e804:	080116fa 	.word	0x080116fa
 800e808:	08011706 	.word	0x08011706
 800e80c:	08011702 	.word	0x08011702
 800e810:	0801170a 	.word	0x0801170a
 800e814:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e816:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e81a:	4553      	cmp	r3, sl
 800e81c:	bfa8      	it	ge
 800e81e:	4653      	movge	r3, sl
 800e820:	2b00      	cmp	r3, #0
 800e822:	4699      	mov	r9, r3
 800e824:	dc37      	bgt.n	800e896 <_printf_float+0x33e>
 800e826:	2300      	movs	r3, #0
 800e828:	9307      	str	r3, [sp, #28]
 800e82a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e82e:	f104 021a 	add.w	r2, r4, #26
 800e832:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e834:	9907      	ldr	r1, [sp, #28]
 800e836:	9306      	str	r3, [sp, #24]
 800e838:	eba3 0309 	sub.w	r3, r3, r9
 800e83c:	428b      	cmp	r3, r1
 800e83e:	dc31      	bgt.n	800e8a4 <_printf_float+0x34c>
 800e840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e842:	459a      	cmp	sl, r3
 800e844:	dc3b      	bgt.n	800e8be <_printf_float+0x366>
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	07da      	lsls	r2, r3, #31
 800e84a:	d438      	bmi.n	800e8be <_printf_float+0x366>
 800e84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84e:	ebaa 0903 	sub.w	r9, sl, r3
 800e852:	9b06      	ldr	r3, [sp, #24]
 800e854:	ebaa 0303 	sub.w	r3, sl, r3
 800e858:	4599      	cmp	r9, r3
 800e85a:	bfa8      	it	ge
 800e85c:	4699      	movge	r9, r3
 800e85e:	f1b9 0f00 	cmp.w	r9, #0
 800e862:	dc34      	bgt.n	800e8ce <_printf_float+0x376>
 800e864:	f04f 0800 	mov.w	r8, #0
 800e868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e86c:	f104 0b1a 	add.w	fp, r4, #26
 800e870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e872:	ebaa 0303 	sub.w	r3, sl, r3
 800e876:	eba3 0309 	sub.w	r3, r3, r9
 800e87a:	4543      	cmp	r3, r8
 800e87c:	f77f af76 	ble.w	800e76c <_printf_float+0x214>
 800e880:	2301      	movs	r3, #1
 800e882:	465a      	mov	r2, fp
 800e884:	4631      	mov	r1, r6
 800e886:	4628      	mov	r0, r5
 800e888:	47b8      	blx	r7
 800e88a:	3001      	adds	r0, #1
 800e88c:	f43f aeb0 	beq.w	800e5f0 <_printf_float+0x98>
 800e890:	f108 0801 	add.w	r8, r8, #1
 800e894:	e7ec      	b.n	800e870 <_printf_float+0x318>
 800e896:	4642      	mov	r2, r8
 800e898:	4631      	mov	r1, r6
 800e89a:	4628      	mov	r0, r5
 800e89c:	47b8      	blx	r7
 800e89e:	3001      	adds	r0, #1
 800e8a0:	d1c1      	bne.n	800e826 <_printf_float+0x2ce>
 800e8a2:	e6a5      	b.n	800e5f0 <_printf_float+0x98>
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	4631      	mov	r1, r6
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	9206      	str	r2, [sp, #24]
 800e8ac:	47b8      	blx	r7
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	f43f ae9e 	beq.w	800e5f0 <_printf_float+0x98>
 800e8b4:	9b07      	ldr	r3, [sp, #28]
 800e8b6:	9a06      	ldr	r2, [sp, #24]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	9307      	str	r3, [sp, #28]
 800e8bc:	e7b9      	b.n	800e832 <_printf_float+0x2da>
 800e8be:	9b05      	ldr	r3, [sp, #20]
 800e8c0:	465a      	mov	r2, fp
 800e8c2:	4631      	mov	r1, r6
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	47b8      	blx	r7
 800e8c8:	3001      	adds	r0, #1
 800e8ca:	d1bf      	bne.n	800e84c <_printf_float+0x2f4>
 800e8cc:	e690      	b.n	800e5f0 <_printf_float+0x98>
 800e8ce:	9a06      	ldr	r2, [sp, #24]
 800e8d0:	464b      	mov	r3, r9
 800e8d2:	4442      	add	r2, r8
 800e8d4:	4631      	mov	r1, r6
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	47b8      	blx	r7
 800e8da:	3001      	adds	r0, #1
 800e8dc:	d1c2      	bne.n	800e864 <_printf_float+0x30c>
 800e8de:	e687      	b.n	800e5f0 <_printf_float+0x98>
 800e8e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e8e4:	f1b9 0f01 	cmp.w	r9, #1
 800e8e8:	dc01      	bgt.n	800e8ee <_printf_float+0x396>
 800e8ea:	07db      	lsls	r3, r3, #31
 800e8ec:	d536      	bpl.n	800e95c <_printf_float+0x404>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	4642      	mov	r2, r8
 800e8f2:	4631      	mov	r1, r6
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	47b8      	blx	r7
 800e8f8:	3001      	adds	r0, #1
 800e8fa:	f43f ae79 	beq.w	800e5f0 <_printf_float+0x98>
 800e8fe:	9b05      	ldr	r3, [sp, #20]
 800e900:	465a      	mov	r2, fp
 800e902:	4631      	mov	r1, r6
 800e904:	4628      	mov	r0, r5
 800e906:	47b8      	blx	r7
 800e908:	3001      	adds	r0, #1
 800e90a:	f43f ae71 	beq.w	800e5f0 <_printf_float+0x98>
 800e90e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e912:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e91e:	d018      	beq.n	800e952 <_printf_float+0x3fa>
 800e920:	464b      	mov	r3, r9
 800e922:	f108 0201 	add.w	r2, r8, #1
 800e926:	4631      	mov	r1, r6
 800e928:	4628      	mov	r0, r5
 800e92a:	47b8      	blx	r7
 800e92c:	3001      	adds	r0, #1
 800e92e:	d10c      	bne.n	800e94a <_printf_float+0x3f2>
 800e930:	e65e      	b.n	800e5f0 <_printf_float+0x98>
 800e932:	2301      	movs	r3, #1
 800e934:	465a      	mov	r2, fp
 800e936:	4631      	mov	r1, r6
 800e938:	4628      	mov	r0, r5
 800e93a:	47b8      	blx	r7
 800e93c:	3001      	adds	r0, #1
 800e93e:	f43f ae57 	beq.w	800e5f0 <_printf_float+0x98>
 800e942:	f108 0801 	add.w	r8, r8, #1
 800e946:	45c8      	cmp	r8, r9
 800e948:	dbf3      	blt.n	800e932 <_printf_float+0x3da>
 800e94a:	4653      	mov	r3, sl
 800e94c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e950:	e6dc      	b.n	800e70c <_printf_float+0x1b4>
 800e952:	f04f 0800 	mov.w	r8, #0
 800e956:	f104 0b1a 	add.w	fp, r4, #26
 800e95a:	e7f4      	b.n	800e946 <_printf_float+0x3ee>
 800e95c:	2301      	movs	r3, #1
 800e95e:	4642      	mov	r2, r8
 800e960:	e7e1      	b.n	800e926 <_printf_float+0x3ce>
 800e962:	2301      	movs	r3, #1
 800e964:	464a      	mov	r2, r9
 800e966:	4631      	mov	r1, r6
 800e968:	4628      	mov	r0, r5
 800e96a:	47b8      	blx	r7
 800e96c:	3001      	adds	r0, #1
 800e96e:	f43f ae3f 	beq.w	800e5f0 <_printf_float+0x98>
 800e972:	f108 0801 	add.w	r8, r8, #1
 800e976:	68e3      	ldr	r3, [r4, #12]
 800e978:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e97a:	1a5b      	subs	r3, r3, r1
 800e97c:	4543      	cmp	r3, r8
 800e97e:	dcf0      	bgt.n	800e962 <_printf_float+0x40a>
 800e980:	e6f8      	b.n	800e774 <_printf_float+0x21c>
 800e982:	f04f 0800 	mov.w	r8, #0
 800e986:	f104 0919 	add.w	r9, r4, #25
 800e98a:	e7f4      	b.n	800e976 <_printf_float+0x41e>

0800e98c <_printf_common>:
 800e98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e990:	4616      	mov	r6, r2
 800e992:	4698      	mov	r8, r3
 800e994:	688a      	ldr	r2, [r1, #8]
 800e996:	690b      	ldr	r3, [r1, #16]
 800e998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e99c:	4293      	cmp	r3, r2
 800e99e:	bfb8      	it	lt
 800e9a0:	4613      	movlt	r3, r2
 800e9a2:	6033      	str	r3, [r6, #0]
 800e9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e9a8:	4607      	mov	r7, r0
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	b10a      	cbz	r2, 800e9b2 <_printf_common+0x26>
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	6033      	str	r3, [r6, #0]
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	0699      	lsls	r1, r3, #26
 800e9b6:	bf42      	ittt	mi
 800e9b8:	6833      	ldrmi	r3, [r6, #0]
 800e9ba:	3302      	addmi	r3, #2
 800e9bc:	6033      	strmi	r3, [r6, #0]
 800e9be:	6825      	ldr	r5, [r4, #0]
 800e9c0:	f015 0506 	ands.w	r5, r5, #6
 800e9c4:	d106      	bne.n	800e9d4 <_printf_common+0x48>
 800e9c6:	f104 0a19 	add.w	sl, r4, #25
 800e9ca:	68e3      	ldr	r3, [r4, #12]
 800e9cc:	6832      	ldr	r2, [r6, #0]
 800e9ce:	1a9b      	subs	r3, r3, r2
 800e9d0:	42ab      	cmp	r3, r5
 800e9d2:	dc26      	bgt.n	800ea22 <_printf_common+0x96>
 800e9d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e9d8:	6822      	ldr	r2, [r4, #0]
 800e9da:	3b00      	subs	r3, #0
 800e9dc:	bf18      	it	ne
 800e9de:	2301      	movne	r3, #1
 800e9e0:	0692      	lsls	r2, r2, #26
 800e9e2:	d42b      	bmi.n	800ea3c <_printf_common+0xb0>
 800e9e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e9e8:	4641      	mov	r1, r8
 800e9ea:	4638      	mov	r0, r7
 800e9ec:	47c8      	blx	r9
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	d01e      	beq.n	800ea30 <_printf_common+0xa4>
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	6922      	ldr	r2, [r4, #16]
 800e9f6:	f003 0306 	and.w	r3, r3, #6
 800e9fa:	2b04      	cmp	r3, #4
 800e9fc:	bf02      	ittt	eq
 800e9fe:	68e5      	ldreq	r5, [r4, #12]
 800ea00:	6833      	ldreq	r3, [r6, #0]
 800ea02:	1aed      	subeq	r5, r5, r3
 800ea04:	68a3      	ldr	r3, [r4, #8]
 800ea06:	bf0c      	ite	eq
 800ea08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea0c:	2500      	movne	r5, #0
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	bfc4      	itt	gt
 800ea12:	1a9b      	subgt	r3, r3, r2
 800ea14:	18ed      	addgt	r5, r5, r3
 800ea16:	2600      	movs	r6, #0
 800ea18:	341a      	adds	r4, #26
 800ea1a:	42b5      	cmp	r5, r6
 800ea1c:	d11a      	bne.n	800ea54 <_printf_common+0xc8>
 800ea1e:	2000      	movs	r0, #0
 800ea20:	e008      	b.n	800ea34 <_printf_common+0xa8>
 800ea22:	2301      	movs	r3, #1
 800ea24:	4652      	mov	r2, sl
 800ea26:	4641      	mov	r1, r8
 800ea28:	4638      	mov	r0, r7
 800ea2a:	47c8      	blx	r9
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	d103      	bne.n	800ea38 <_printf_common+0xac>
 800ea30:	f04f 30ff 	mov.w	r0, #4294967295
 800ea34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea38:	3501      	adds	r5, #1
 800ea3a:	e7c6      	b.n	800e9ca <_printf_common+0x3e>
 800ea3c:	18e1      	adds	r1, r4, r3
 800ea3e:	1c5a      	adds	r2, r3, #1
 800ea40:	2030      	movs	r0, #48	@ 0x30
 800ea42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea46:	4422      	add	r2, r4
 800ea48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea50:	3302      	adds	r3, #2
 800ea52:	e7c7      	b.n	800e9e4 <_printf_common+0x58>
 800ea54:	2301      	movs	r3, #1
 800ea56:	4622      	mov	r2, r4
 800ea58:	4641      	mov	r1, r8
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	47c8      	blx	r9
 800ea5e:	3001      	adds	r0, #1
 800ea60:	d0e6      	beq.n	800ea30 <_printf_common+0xa4>
 800ea62:	3601      	adds	r6, #1
 800ea64:	e7d9      	b.n	800ea1a <_printf_common+0x8e>
	...

0800ea68 <_printf_i>:
 800ea68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea6c:	7e0f      	ldrb	r7, [r1, #24]
 800ea6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea70:	2f78      	cmp	r7, #120	@ 0x78
 800ea72:	4691      	mov	r9, r2
 800ea74:	4680      	mov	r8, r0
 800ea76:	460c      	mov	r4, r1
 800ea78:	469a      	mov	sl, r3
 800ea7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ea7e:	d807      	bhi.n	800ea90 <_printf_i+0x28>
 800ea80:	2f62      	cmp	r7, #98	@ 0x62
 800ea82:	d80a      	bhi.n	800ea9a <_printf_i+0x32>
 800ea84:	2f00      	cmp	r7, #0
 800ea86:	f000 80d1 	beq.w	800ec2c <_printf_i+0x1c4>
 800ea8a:	2f58      	cmp	r7, #88	@ 0x58
 800ea8c:	f000 80b8 	beq.w	800ec00 <_printf_i+0x198>
 800ea90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ea98:	e03a      	b.n	800eb10 <_printf_i+0xa8>
 800ea9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ea9e:	2b15      	cmp	r3, #21
 800eaa0:	d8f6      	bhi.n	800ea90 <_printf_i+0x28>
 800eaa2:	a101      	add	r1, pc, #4	@ (adr r1, 800eaa8 <_printf_i+0x40>)
 800eaa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eaa8:	0800eb01 	.word	0x0800eb01
 800eaac:	0800eb15 	.word	0x0800eb15
 800eab0:	0800ea91 	.word	0x0800ea91
 800eab4:	0800ea91 	.word	0x0800ea91
 800eab8:	0800ea91 	.word	0x0800ea91
 800eabc:	0800ea91 	.word	0x0800ea91
 800eac0:	0800eb15 	.word	0x0800eb15
 800eac4:	0800ea91 	.word	0x0800ea91
 800eac8:	0800ea91 	.word	0x0800ea91
 800eacc:	0800ea91 	.word	0x0800ea91
 800ead0:	0800ea91 	.word	0x0800ea91
 800ead4:	0800ec13 	.word	0x0800ec13
 800ead8:	0800eb3f 	.word	0x0800eb3f
 800eadc:	0800ebcd 	.word	0x0800ebcd
 800eae0:	0800ea91 	.word	0x0800ea91
 800eae4:	0800ea91 	.word	0x0800ea91
 800eae8:	0800ec35 	.word	0x0800ec35
 800eaec:	0800ea91 	.word	0x0800ea91
 800eaf0:	0800eb3f 	.word	0x0800eb3f
 800eaf4:	0800ea91 	.word	0x0800ea91
 800eaf8:	0800ea91 	.word	0x0800ea91
 800eafc:	0800ebd5 	.word	0x0800ebd5
 800eb00:	6833      	ldr	r3, [r6, #0]
 800eb02:	1d1a      	adds	r2, r3, #4
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6032      	str	r2, [r6, #0]
 800eb08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb10:	2301      	movs	r3, #1
 800eb12:	e09c      	b.n	800ec4e <_printf_i+0x1e6>
 800eb14:	6833      	ldr	r3, [r6, #0]
 800eb16:	6820      	ldr	r0, [r4, #0]
 800eb18:	1d19      	adds	r1, r3, #4
 800eb1a:	6031      	str	r1, [r6, #0]
 800eb1c:	0606      	lsls	r6, r0, #24
 800eb1e:	d501      	bpl.n	800eb24 <_printf_i+0xbc>
 800eb20:	681d      	ldr	r5, [r3, #0]
 800eb22:	e003      	b.n	800eb2c <_printf_i+0xc4>
 800eb24:	0645      	lsls	r5, r0, #25
 800eb26:	d5fb      	bpl.n	800eb20 <_printf_i+0xb8>
 800eb28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb2c:	2d00      	cmp	r5, #0
 800eb2e:	da03      	bge.n	800eb38 <_printf_i+0xd0>
 800eb30:	232d      	movs	r3, #45	@ 0x2d
 800eb32:	426d      	negs	r5, r5
 800eb34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb38:	4858      	ldr	r0, [pc, #352]	@ (800ec9c <_printf_i+0x234>)
 800eb3a:	230a      	movs	r3, #10
 800eb3c:	e011      	b.n	800eb62 <_printf_i+0xfa>
 800eb3e:	6821      	ldr	r1, [r4, #0]
 800eb40:	6833      	ldr	r3, [r6, #0]
 800eb42:	0608      	lsls	r0, r1, #24
 800eb44:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb48:	d402      	bmi.n	800eb50 <_printf_i+0xe8>
 800eb4a:	0649      	lsls	r1, r1, #25
 800eb4c:	bf48      	it	mi
 800eb4e:	b2ad      	uxthmi	r5, r5
 800eb50:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb52:	4852      	ldr	r0, [pc, #328]	@ (800ec9c <_printf_i+0x234>)
 800eb54:	6033      	str	r3, [r6, #0]
 800eb56:	bf14      	ite	ne
 800eb58:	230a      	movne	r3, #10
 800eb5a:	2308      	moveq	r3, #8
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eb62:	6866      	ldr	r6, [r4, #4]
 800eb64:	60a6      	str	r6, [r4, #8]
 800eb66:	2e00      	cmp	r6, #0
 800eb68:	db05      	blt.n	800eb76 <_printf_i+0x10e>
 800eb6a:	6821      	ldr	r1, [r4, #0]
 800eb6c:	432e      	orrs	r6, r5
 800eb6e:	f021 0104 	bic.w	r1, r1, #4
 800eb72:	6021      	str	r1, [r4, #0]
 800eb74:	d04b      	beq.n	800ec0e <_printf_i+0x1a6>
 800eb76:	4616      	mov	r6, r2
 800eb78:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb7c:	fb03 5711 	mls	r7, r3, r1, r5
 800eb80:	5dc7      	ldrb	r7, [r0, r7]
 800eb82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb86:	462f      	mov	r7, r5
 800eb88:	42bb      	cmp	r3, r7
 800eb8a:	460d      	mov	r5, r1
 800eb8c:	d9f4      	bls.n	800eb78 <_printf_i+0x110>
 800eb8e:	2b08      	cmp	r3, #8
 800eb90:	d10b      	bne.n	800ebaa <_printf_i+0x142>
 800eb92:	6823      	ldr	r3, [r4, #0]
 800eb94:	07df      	lsls	r7, r3, #31
 800eb96:	d508      	bpl.n	800ebaa <_printf_i+0x142>
 800eb98:	6923      	ldr	r3, [r4, #16]
 800eb9a:	6861      	ldr	r1, [r4, #4]
 800eb9c:	4299      	cmp	r1, r3
 800eb9e:	bfde      	ittt	le
 800eba0:	2330      	movle	r3, #48	@ 0x30
 800eba2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eba6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ebaa:	1b92      	subs	r2, r2, r6
 800ebac:	6122      	str	r2, [r4, #16]
 800ebae:	f8cd a000 	str.w	sl, [sp]
 800ebb2:	464b      	mov	r3, r9
 800ebb4:	aa03      	add	r2, sp, #12
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	4640      	mov	r0, r8
 800ebba:	f7ff fee7 	bl	800e98c <_printf_common>
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	d14a      	bne.n	800ec58 <_printf_i+0x1f0>
 800ebc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc6:	b004      	add	sp, #16
 800ebc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	f043 0320 	orr.w	r3, r3, #32
 800ebd2:	6023      	str	r3, [r4, #0]
 800ebd4:	4832      	ldr	r0, [pc, #200]	@ (800eca0 <_printf_i+0x238>)
 800ebd6:	2778      	movs	r7, #120	@ 0x78
 800ebd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ebdc:	6823      	ldr	r3, [r4, #0]
 800ebde:	6831      	ldr	r1, [r6, #0]
 800ebe0:	061f      	lsls	r7, r3, #24
 800ebe2:	f851 5b04 	ldr.w	r5, [r1], #4
 800ebe6:	d402      	bmi.n	800ebee <_printf_i+0x186>
 800ebe8:	065f      	lsls	r7, r3, #25
 800ebea:	bf48      	it	mi
 800ebec:	b2ad      	uxthmi	r5, r5
 800ebee:	6031      	str	r1, [r6, #0]
 800ebf0:	07d9      	lsls	r1, r3, #31
 800ebf2:	bf44      	itt	mi
 800ebf4:	f043 0320 	orrmi.w	r3, r3, #32
 800ebf8:	6023      	strmi	r3, [r4, #0]
 800ebfa:	b11d      	cbz	r5, 800ec04 <_printf_i+0x19c>
 800ebfc:	2310      	movs	r3, #16
 800ebfe:	e7ad      	b.n	800eb5c <_printf_i+0xf4>
 800ec00:	4826      	ldr	r0, [pc, #152]	@ (800ec9c <_printf_i+0x234>)
 800ec02:	e7e9      	b.n	800ebd8 <_printf_i+0x170>
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	f023 0320 	bic.w	r3, r3, #32
 800ec0a:	6023      	str	r3, [r4, #0]
 800ec0c:	e7f6      	b.n	800ebfc <_printf_i+0x194>
 800ec0e:	4616      	mov	r6, r2
 800ec10:	e7bd      	b.n	800eb8e <_printf_i+0x126>
 800ec12:	6833      	ldr	r3, [r6, #0]
 800ec14:	6825      	ldr	r5, [r4, #0]
 800ec16:	6961      	ldr	r1, [r4, #20]
 800ec18:	1d18      	adds	r0, r3, #4
 800ec1a:	6030      	str	r0, [r6, #0]
 800ec1c:	062e      	lsls	r6, r5, #24
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	d501      	bpl.n	800ec26 <_printf_i+0x1be>
 800ec22:	6019      	str	r1, [r3, #0]
 800ec24:	e002      	b.n	800ec2c <_printf_i+0x1c4>
 800ec26:	0668      	lsls	r0, r5, #25
 800ec28:	d5fb      	bpl.n	800ec22 <_printf_i+0x1ba>
 800ec2a:	8019      	strh	r1, [r3, #0]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	6123      	str	r3, [r4, #16]
 800ec30:	4616      	mov	r6, r2
 800ec32:	e7bc      	b.n	800ebae <_printf_i+0x146>
 800ec34:	6833      	ldr	r3, [r6, #0]
 800ec36:	1d1a      	adds	r2, r3, #4
 800ec38:	6032      	str	r2, [r6, #0]
 800ec3a:	681e      	ldr	r6, [r3, #0]
 800ec3c:	6862      	ldr	r2, [r4, #4]
 800ec3e:	2100      	movs	r1, #0
 800ec40:	4630      	mov	r0, r6
 800ec42:	f7f1 fb5d 	bl	8000300 <memchr>
 800ec46:	b108      	cbz	r0, 800ec4c <_printf_i+0x1e4>
 800ec48:	1b80      	subs	r0, r0, r6
 800ec4a:	6060      	str	r0, [r4, #4]
 800ec4c:	6863      	ldr	r3, [r4, #4]
 800ec4e:	6123      	str	r3, [r4, #16]
 800ec50:	2300      	movs	r3, #0
 800ec52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec56:	e7aa      	b.n	800ebae <_printf_i+0x146>
 800ec58:	6923      	ldr	r3, [r4, #16]
 800ec5a:	4632      	mov	r2, r6
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	4640      	mov	r0, r8
 800ec60:	47d0      	blx	sl
 800ec62:	3001      	adds	r0, #1
 800ec64:	d0ad      	beq.n	800ebc2 <_printf_i+0x15a>
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	079b      	lsls	r3, r3, #30
 800ec6a:	d413      	bmi.n	800ec94 <_printf_i+0x22c>
 800ec6c:	68e0      	ldr	r0, [r4, #12]
 800ec6e:	9b03      	ldr	r3, [sp, #12]
 800ec70:	4298      	cmp	r0, r3
 800ec72:	bfb8      	it	lt
 800ec74:	4618      	movlt	r0, r3
 800ec76:	e7a6      	b.n	800ebc6 <_printf_i+0x15e>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	4632      	mov	r2, r6
 800ec7c:	4649      	mov	r1, r9
 800ec7e:	4640      	mov	r0, r8
 800ec80:	47d0      	blx	sl
 800ec82:	3001      	adds	r0, #1
 800ec84:	d09d      	beq.n	800ebc2 <_printf_i+0x15a>
 800ec86:	3501      	adds	r5, #1
 800ec88:	68e3      	ldr	r3, [r4, #12]
 800ec8a:	9903      	ldr	r1, [sp, #12]
 800ec8c:	1a5b      	subs	r3, r3, r1
 800ec8e:	42ab      	cmp	r3, r5
 800ec90:	dcf2      	bgt.n	800ec78 <_printf_i+0x210>
 800ec92:	e7eb      	b.n	800ec6c <_printf_i+0x204>
 800ec94:	2500      	movs	r5, #0
 800ec96:	f104 0619 	add.w	r6, r4, #25
 800ec9a:	e7f5      	b.n	800ec88 <_printf_i+0x220>
 800ec9c:	0801170c 	.word	0x0801170c
 800eca0:	0801171d 	.word	0x0801171d

0800eca4 <std>:
 800eca4:	2300      	movs	r3, #0
 800eca6:	b510      	push	{r4, lr}
 800eca8:	4604      	mov	r4, r0
 800ecaa:	e9c0 3300 	strd	r3, r3, [r0]
 800ecae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecb2:	6083      	str	r3, [r0, #8]
 800ecb4:	8181      	strh	r1, [r0, #12]
 800ecb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecb8:	81c2      	strh	r2, [r0, #14]
 800ecba:	6183      	str	r3, [r0, #24]
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	2208      	movs	r2, #8
 800ecc0:	305c      	adds	r0, #92	@ 0x5c
 800ecc2:	f000 f9f9 	bl	800f0b8 <memset>
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ecfc <std+0x58>)
 800ecc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800ecca:	4b0d      	ldr	r3, [pc, #52]	@ (800ed00 <std+0x5c>)
 800eccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecce:	4b0d      	ldr	r3, [pc, #52]	@ (800ed04 <std+0x60>)
 800ecd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed08 <std+0x64>)
 800ecd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed0c <std+0x68>)
 800ecd8:	6224      	str	r4, [r4, #32]
 800ecda:	429c      	cmp	r4, r3
 800ecdc:	d006      	beq.n	800ecec <std+0x48>
 800ecde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ece2:	4294      	cmp	r4, r2
 800ece4:	d002      	beq.n	800ecec <std+0x48>
 800ece6:	33d0      	adds	r3, #208	@ 0xd0
 800ece8:	429c      	cmp	r4, r3
 800ecea:	d105      	bne.n	800ecf8 <std+0x54>
 800ecec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ecf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecf4:	f000 ba6e 	b.w	800f1d4 <__retarget_lock_init_recursive>
 800ecf8:	bd10      	pop	{r4, pc}
 800ecfa:	bf00      	nop
 800ecfc:	0800ef09 	.word	0x0800ef09
 800ed00:	0800ef2b 	.word	0x0800ef2b
 800ed04:	0800ef63 	.word	0x0800ef63
 800ed08:	0800ef87 	.word	0x0800ef87
 800ed0c:	2400383c 	.word	0x2400383c

0800ed10 <stdio_exit_handler>:
 800ed10:	4a02      	ldr	r2, [pc, #8]	@ (800ed1c <stdio_exit_handler+0xc>)
 800ed12:	4903      	ldr	r1, [pc, #12]	@ (800ed20 <stdio_exit_handler+0x10>)
 800ed14:	4803      	ldr	r0, [pc, #12]	@ (800ed24 <stdio_exit_handler+0x14>)
 800ed16:	f000 b869 	b.w	800edec <_fwalk_sglue>
 800ed1a:	bf00      	nop
 800ed1c:	24000104 	.word	0x24000104
 800ed20:	08011381 	.word	0x08011381
 800ed24:	24000280 	.word	0x24000280

0800ed28 <cleanup_stdio>:
 800ed28:	6841      	ldr	r1, [r0, #4]
 800ed2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ed5c <cleanup_stdio+0x34>)
 800ed2c:	4299      	cmp	r1, r3
 800ed2e:	b510      	push	{r4, lr}
 800ed30:	4604      	mov	r4, r0
 800ed32:	d001      	beq.n	800ed38 <cleanup_stdio+0x10>
 800ed34:	f002 fb24 	bl	8011380 <_fflush_r>
 800ed38:	68a1      	ldr	r1, [r4, #8]
 800ed3a:	4b09      	ldr	r3, [pc, #36]	@ (800ed60 <cleanup_stdio+0x38>)
 800ed3c:	4299      	cmp	r1, r3
 800ed3e:	d002      	beq.n	800ed46 <cleanup_stdio+0x1e>
 800ed40:	4620      	mov	r0, r4
 800ed42:	f002 fb1d 	bl	8011380 <_fflush_r>
 800ed46:	68e1      	ldr	r1, [r4, #12]
 800ed48:	4b06      	ldr	r3, [pc, #24]	@ (800ed64 <cleanup_stdio+0x3c>)
 800ed4a:	4299      	cmp	r1, r3
 800ed4c:	d004      	beq.n	800ed58 <cleanup_stdio+0x30>
 800ed4e:	4620      	mov	r0, r4
 800ed50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed54:	f002 bb14 	b.w	8011380 <_fflush_r>
 800ed58:	bd10      	pop	{r4, pc}
 800ed5a:	bf00      	nop
 800ed5c:	2400383c 	.word	0x2400383c
 800ed60:	240038a4 	.word	0x240038a4
 800ed64:	2400390c 	.word	0x2400390c

0800ed68 <global_stdio_init.part.0>:
 800ed68:	b510      	push	{r4, lr}
 800ed6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed98 <global_stdio_init.part.0+0x30>)
 800ed6c:	4c0b      	ldr	r4, [pc, #44]	@ (800ed9c <global_stdio_init.part.0+0x34>)
 800ed6e:	4a0c      	ldr	r2, [pc, #48]	@ (800eda0 <global_stdio_init.part.0+0x38>)
 800ed70:	601a      	str	r2, [r3, #0]
 800ed72:	4620      	mov	r0, r4
 800ed74:	2200      	movs	r2, #0
 800ed76:	2104      	movs	r1, #4
 800ed78:	f7ff ff94 	bl	800eca4 <std>
 800ed7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed80:	2201      	movs	r2, #1
 800ed82:	2109      	movs	r1, #9
 800ed84:	f7ff ff8e 	bl	800eca4 <std>
 800ed88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed8c:	2202      	movs	r2, #2
 800ed8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed92:	2112      	movs	r1, #18
 800ed94:	f7ff bf86 	b.w	800eca4 <std>
 800ed98:	24003974 	.word	0x24003974
 800ed9c:	2400383c 	.word	0x2400383c
 800eda0:	0800ed11 	.word	0x0800ed11

0800eda4 <__sfp_lock_acquire>:
 800eda4:	4801      	ldr	r0, [pc, #4]	@ (800edac <__sfp_lock_acquire+0x8>)
 800eda6:	f000 ba16 	b.w	800f1d6 <__retarget_lock_acquire_recursive>
 800edaa:	bf00      	nop
 800edac:	2400397d 	.word	0x2400397d

0800edb0 <__sfp_lock_release>:
 800edb0:	4801      	ldr	r0, [pc, #4]	@ (800edb8 <__sfp_lock_release+0x8>)
 800edb2:	f000 ba11 	b.w	800f1d8 <__retarget_lock_release_recursive>
 800edb6:	bf00      	nop
 800edb8:	2400397d 	.word	0x2400397d

0800edbc <__sinit>:
 800edbc:	b510      	push	{r4, lr}
 800edbe:	4604      	mov	r4, r0
 800edc0:	f7ff fff0 	bl	800eda4 <__sfp_lock_acquire>
 800edc4:	6a23      	ldr	r3, [r4, #32]
 800edc6:	b11b      	cbz	r3, 800edd0 <__sinit+0x14>
 800edc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edcc:	f7ff bff0 	b.w	800edb0 <__sfp_lock_release>
 800edd0:	4b04      	ldr	r3, [pc, #16]	@ (800ede4 <__sinit+0x28>)
 800edd2:	6223      	str	r3, [r4, #32]
 800edd4:	4b04      	ldr	r3, [pc, #16]	@ (800ede8 <__sinit+0x2c>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1f5      	bne.n	800edc8 <__sinit+0xc>
 800eddc:	f7ff ffc4 	bl	800ed68 <global_stdio_init.part.0>
 800ede0:	e7f2      	b.n	800edc8 <__sinit+0xc>
 800ede2:	bf00      	nop
 800ede4:	0800ed29 	.word	0x0800ed29
 800ede8:	24003974 	.word	0x24003974

0800edec <_fwalk_sglue>:
 800edec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf0:	4607      	mov	r7, r0
 800edf2:	4688      	mov	r8, r1
 800edf4:	4614      	mov	r4, r2
 800edf6:	2600      	movs	r6, #0
 800edf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edfc:	f1b9 0901 	subs.w	r9, r9, #1
 800ee00:	d505      	bpl.n	800ee0e <_fwalk_sglue+0x22>
 800ee02:	6824      	ldr	r4, [r4, #0]
 800ee04:	2c00      	cmp	r4, #0
 800ee06:	d1f7      	bne.n	800edf8 <_fwalk_sglue+0xc>
 800ee08:	4630      	mov	r0, r6
 800ee0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee0e:	89ab      	ldrh	r3, [r5, #12]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d907      	bls.n	800ee24 <_fwalk_sglue+0x38>
 800ee14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	d003      	beq.n	800ee24 <_fwalk_sglue+0x38>
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	4638      	mov	r0, r7
 800ee20:	47c0      	blx	r8
 800ee22:	4306      	orrs	r6, r0
 800ee24:	3568      	adds	r5, #104	@ 0x68
 800ee26:	e7e9      	b.n	800edfc <_fwalk_sglue+0x10>

0800ee28 <iprintf>:
 800ee28:	b40f      	push	{r0, r1, r2, r3}
 800ee2a:	b507      	push	{r0, r1, r2, lr}
 800ee2c:	4906      	ldr	r1, [pc, #24]	@ (800ee48 <iprintf+0x20>)
 800ee2e:	ab04      	add	r3, sp, #16
 800ee30:	6808      	ldr	r0, [r1, #0]
 800ee32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee36:	6881      	ldr	r1, [r0, #8]
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	f002 f905 	bl	8011048 <_vfiprintf_r>
 800ee3e:	b003      	add	sp, #12
 800ee40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee44:	b004      	add	sp, #16
 800ee46:	4770      	bx	lr
 800ee48:	2400027c 	.word	0x2400027c

0800ee4c <_puts_r>:
 800ee4c:	6a03      	ldr	r3, [r0, #32]
 800ee4e:	b570      	push	{r4, r5, r6, lr}
 800ee50:	6884      	ldr	r4, [r0, #8]
 800ee52:	4605      	mov	r5, r0
 800ee54:	460e      	mov	r6, r1
 800ee56:	b90b      	cbnz	r3, 800ee5c <_puts_r+0x10>
 800ee58:	f7ff ffb0 	bl	800edbc <__sinit>
 800ee5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee5e:	07db      	lsls	r3, r3, #31
 800ee60:	d405      	bmi.n	800ee6e <_puts_r+0x22>
 800ee62:	89a3      	ldrh	r3, [r4, #12]
 800ee64:	0598      	lsls	r0, r3, #22
 800ee66:	d402      	bmi.n	800ee6e <_puts_r+0x22>
 800ee68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee6a:	f000 f9b4 	bl	800f1d6 <__retarget_lock_acquire_recursive>
 800ee6e:	89a3      	ldrh	r3, [r4, #12]
 800ee70:	0719      	lsls	r1, r3, #28
 800ee72:	d502      	bpl.n	800ee7a <_puts_r+0x2e>
 800ee74:	6923      	ldr	r3, [r4, #16]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d135      	bne.n	800eee6 <_puts_r+0x9a>
 800ee7a:	4621      	mov	r1, r4
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	f000 f8c5 	bl	800f00c <__swsetup_r>
 800ee82:	b380      	cbz	r0, 800eee6 <_puts_r+0x9a>
 800ee84:	f04f 35ff 	mov.w	r5, #4294967295
 800ee88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee8a:	07da      	lsls	r2, r3, #31
 800ee8c:	d405      	bmi.n	800ee9a <_puts_r+0x4e>
 800ee8e:	89a3      	ldrh	r3, [r4, #12]
 800ee90:	059b      	lsls	r3, r3, #22
 800ee92:	d402      	bmi.n	800ee9a <_puts_r+0x4e>
 800ee94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee96:	f000 f99f 	bl	800f1d8 <__retarget_lock_release_recursive>
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	bd70      	pop	{r4, r5, r6, pc}
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	da04      	bge.n	800eeac <_puts_r+0x60>
 800eea2:	69a2      	ldr	r2, [r4, #24]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	dc17      	bgt.n	800eed8 <_puts_r+0x8c>
 800eea8:	290a      	cmp	r1, #10
 800eeaa:	d015      	beq.n	800eed8 <_puts_r+0x8c>
 800eeac:	6823      	ldr	r3, [r4, #0]
 800eeae:	1c5a      	adds	r2, r3, #1
 800eeb0:	6022      	str	r2, [r4, #0]
 800eeb2:	7019      	strb	r1, [r3, #0]
 800eeb4:	68a3      	ldr	r3, [r4, #8]
 800eeb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eeba:	3b01      	subs	r3, #1
 800eebc:	60a3      	str	r3, [r4, #8]
 800eebe:	2900      	cmp	r1, #0
 800eec0:	d1ed      	bne.n	800ee9e <_puts_r+0x52>
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	da11      	bge.n	800eeea <_puts_r+0x9e>
 800eec6:	4622      	mov	r2, r4
 800eec8:	210a      	movs	r1, #10
 800eeca:	4628      	mov	r0, r5
 800eecc:	f000 f85f 	bl	800ef8e <__swbuf_r>
 800eed0:	3001      	adds	r0, #1
 800eed2:	d0d7      	beq.n	800ee84 <_puts_r+0x38>
 800eed4:	250a      	movs	r5, #10
 800eed6:	e7d7      	b.n	800ee88 <_puts_r+0x3c>
 800eed8:	4622      	mov	r2, r4
 800eeda:	4628      	mov	r0, r5
 800eedc:	f000 f857 	bl	800ef8e <__swbuf_r>
 800eee0:	3001      	adds	r0, #1
 800eee2:	d1e7      	bne.n	800eeb4 <_puts_r+0x68>
 800eee4:	e7ce      	b.n	800ee84 <_puts_r+0x38>
 800eee6:	3e01      	subs	r6, #1
 800eee8:	e7e4      	b.n	800eeb4 <_puts_r+0x68>
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	1c5a      	adds	r2, r3, #1
 800eeee:	6022      	str	r2, [r4, #0]
 800eef0:	220a      	movs	r2, #10
 800eef2:	701a      	strb	r2, [r3, #0]
 800eef4:	e7ee      	b.n	800eed4 <_puts_r+0x88>
	...

0800eef8 <puts>:
 800eef8:	4b02      	ldr	r3, [pc, #8]	@ (800ef04 <puts+0xc>)
 800eefa:	4601      	mov	r1, r0
 800eefc:	6818      	ldr	r0, [r3, #0]
 800eefe:	f7ff bfa5 	b.w	800ee4c <_puts_r>
 800ef02:	bf00      	nop
 800ef04:	2400027c 	.word	0x2400027c

0800ef08 <__sread>:
 800ef08:	b510      	push	{r4, lr}
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef10:	f000 f912 	bl	800f138 <_read_r>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	bfab      	itete	ge
 800ef18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ef1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ef1c:	181b      	addge	r3, r3, r0
 800ef1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ef22:	bfac      	ite	ge
 800ef24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ef26:	81a3      	strhlt	r3, [r4, #12]
 800ef28:	bd10      	pop	{r4, pc}

0800ef2a <__swrite>:
 800ef2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef2e:	461f      	mov	r7, r3
 800ef30:	898b      	ldrh	r3, [r1, #12]
 800ef32:	05db      	lsls	r3, r3, #23
 800ef34:	4605      	mov	r5, r0
 800ef36:	460c      	mov	r4, r1
 800ef38:	4616      	mov	r6, r2
 800ef3a:	d505      	bpl.n	800ef48 <__swrite+0x1e>
 800ef3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef40:	2302      	movs	r3, #2
 800ef42:	2200      	movs	r2, #0
 800ef44:	f000 f8e6 	bl	800f114 <_lseek_r>
 800ef48:	89a3      	ldrh	r3, [r4, #12]
 800ef4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef52:	81a3      	strh	r3, [r4, #12]
 800ef54:	4632      	mov	r2, r6
 800ef56:	463b      	mov	r3, r7
 800ef58:	4628      	mov	r0, r5
 800ef5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef5e:	f000 b8fd 	b.w	800f15c <_write_r>

0800ef62 <__sseek>:
 800ef62:	b510      	push	{r4, lr}
 800ef64:	460c      	mov	r4, r1
 800ef66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef6a:	f000 f8d3 	bl	800f114 <_lseek_r>
 800ef6e:	1c43      	adds	r3, r0, #1
 800ef70:	89a3      	ldrh	r3, [r4, #12]
 800ef72:	bf15      	itete	ne
 800ef74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef7e:	81a3      	strheq	r3, [r4, #12]
 800ef80:	bf18      	it	ne
 800ef82:	81a3      	strhne	r3, [r4, #12]
 800ef84:	bd10      	pop	{r4, pc}

0800ef86 <__sclose>:
 800ef86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef8a:	f000 b8b3 	b.w	800f0f4 <_close_r>

0800ef8e <__swbuf_r>:
 800ef8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef90:	460e      	mov	r6, r1
 800ef92:	4614      	mov	r4, r2
 800ef94:	4605      	mov	r5, r0
 800ef96:	b118      	cbz	r0, 800efa0 <__swbuf_r+0x12>
 800ef98:	6a03      	ldr	r3, [r0, #32]
 800ef9a:	b90b      	cbnz	r3, 800efa0 <__swbuf_r+0x12>
 800ef9c:	f7ff ff0e 	bl	800edbc <__sinit>
 800efa0:	69a3      	ldr	r3, [r4, #24]
 800efa2:	60a3      	str	r3, [r4, #8]
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	071a      	lsls	r2, r3, #28
 800efa8:	d501      	bpl.n	800efae <__swbuf_r+0x20>
 800efaa:	6923      	ldr	r3, [r4, #16]
 800efac:	b943      	cbnz	r3, 800efc0 <__swbuf_r+0x32>
 800efae:	4621      	mov	r1, r4
 800efb0:	4628      	mov	r0, r5
 800efb2:	f000 f82b 	bl	800f00c <__swsetup_r>
 800efb6:	b118      	cbz	r0, 800efc0 <__swbuf_r+0x32>
 800efb8:	f04f 37ff 	mov.w	r7, #4294967295
 800efbc:	4638      	mov	r0, r7
 800efbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	6922      	ldr	r2, [r4, #16]
 800efc4:	1a98      	subs	r0, r3, r2
 800efc6:	6963      	ldr	r3, [r4, #20]
 800efc8:	b2f6      	uxtb	r6, r6
 800efca:	4283      	cmp	r3, r0
 800efcc:	4637      	mov	r7, r6
 800efce:	dc05      	bgt.n	800efdc <__swbuf_r+0x4e>
 800efd0:	4621      	mov	r1, r4
 800efd2:	4628      	mov	r0, r5
 800efd4:	f002 f9d4 	bl	8011380 <_fflush_r>
 800efd8:	2800      	cmp	r0, #0
 800efda:	d1ed      	bne.n	800efb8 <__swbuf_r+0x2a>
 800efdc:	68a3      	ldr	r3, [r4, #8]
 800efde:	3b01      	subs	r3, #1
 800efe0:	60a3      	str	r3, [r4, #8]
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	701e      	strb	r6, [r3, #0]
 800efea:	6962      	ldr	r2, [r4, #20]
 800efec:	1c43      	adds	r3, r0, #1
 800efee:	429a      	cmp	r2, r3
 800eff0:	d004      	beq.n	800effc <__swbuf_r+0x6e>
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	07db      	lsls	r3, r3, #31
 800eff6:	d5e1      	bpl.n	800efbc <__swbuf_r+0x2e>
 800eff8:	2e0a      	cmp	r6, #10
 800effa:	d1df      	bne.n	800efbc <__swbuf_r+0x2e>
 800effc:	4621      	mov	r1, r4
 800effe:	4628      	mov	r0, r5
 800f000:	f002 f9be 	bl	8011380 <_fflush_r>
 800f004:	2800      	cmp	r0, #0
 800f006:	d0d9      	beq.n	800efbc <__swbuf_r+0x2e>
 800f008:	e7d6      	b.n	800efb8 <__swbuf_r+0x2a>
	...

0800f00c <__swsetup_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4b29      	ldr	r3, [pc, #164]	@ (800f0b4 <__swsetup_r+0xa8>)
 800f010:	4605      	mov	r5, r0
 800f012:	6818      	ldr	r0, [r3, #0]
 800f014:	460c      	mov	r4, r1
 800f016:	b118      	cbz	r0, 800f020 <__swsetup_r+0x14>
 800f018:	6a03      	ldr	r3, [r0, #32]
 800f01a:	b90b      	cbnz	r3, 800f020 <__swsetup_r+0x14>
 800f01c:	f7ff fece 	bl	800edbc <__sinit>
 800f020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f024:	0719      	lsls	r1, r3, #28
 800f026:	d422      	bmi.n	800f06e <__swsetup_r+0x62>
 800f028:	06da      	lsls	r2, r3, #27
 800f02a:	d407      	bmi.n	800f03c <__swsetup_r+0x30>
 800f02c:	2209      	movs	r2, #9
 800f02e:	602a      	str	r2, [r5, #0]
 800f030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f034:	81a3      	strh	r3, [r4, #12]
 800f036:	f04f 30ff 	mov.w	r0, #4294967295
 800f03a:	e033      	b.n	800f0a4 <__swsetup_r+0x98>
 800f03c:	0758      	lsls	r0, r3, #29
 800f03e:	d512      	bpl.n	800f066 <__swsetup_r+0x5a>
 800f040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f042:	b141      	cbz	r1, 800f056 <__swsetup_r+0x4a>
 800f044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f048:	4299      	cmp	r1, r3
 800f04a:	d002      	beq.n	800f052 <__swsetup_r+0x46>
 800f04c:	4628      	mov	r0, r5
 800f04e:	f000 fed1 	bl	800fdf4 <_free_r>
 800f052:	2300      	movs	r3, #0
 800f054:	6363      	str	r3, [r4, #52]	@ 0x34
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f05c:	81a3      	strh	r3, [r4, #12]
 800f05e:	2300      	movs	r3, #0
 800f060:	6063      	str	r3, [r4, #4]
 800f062:	6923      	ldr	r3, [r4, #16]
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	89a3      	ldrh	r3, [r4, #12]
 800f068:	f043 0308 	orr.w	r3, r3, #8
 800f06c:	81a3      	strh	r3, [r4, #12]
 800f06e:	6923      	ldr	r3, [r4, #16]
 800f070:	b94b      	cbnz	r3, 800f086 <__swsetup_r+0x7a>
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f07c:	d003      	beq.n	800f086 <__swsetup_r+0x7a>
 800f07e:	4621      	mov	r1, r4
 800f080:	4628      	mov	r0, r5
 800f082:	f002 f9cb 	bl	801141c <__smakebuf_r>
 800f086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08a:	f013 0201 	ands.w	r2, r3, #1
 800f08e:	d00a      	beq.n	800f0a6 <__swsetup_r+0x9a>
 800f090:	2200      	movs	r2, #0
 800f092:	60a2      	str	r2, [r4, #8]
 800f094:	6962      	ldr	r2, [r4, #20]
 800f096:	4252      	negs	r2, r2
 800f098:	61a2      	str	r2, [r4, #24]
 800f09a:	6922      	ldr	r2, [r4, #16]
 800f09c:	b942      	cbnz	r2, 800f0b0 <__swsetup_r+0xa4>
 800f09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0a2:	d1c5      	bne.n	800f030 <__swsetup_r+0x24>
 800f0a4:	bd38      	pop	{r3, r4, r5, pc}
 800f0a6:	0799      	lsls	r1, r3, #30
 800f0a8:	bf58      	it	pl
 800f0aa:	6962      	ldrpl	r2, [r4, #20]
 800f0ac:	60a2      	str	r2, [r4, #8]
 800f0ae:	e7f4      	b.n	800f09a <__swsetup_r+0x8e>
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	e7f7      	b.n	800f0a4 <__swsetup_r+0x98>
 800f0b4:	2400027c 	.word	0x2400027c

0800f0b8 <memset>:
 800f0b8:	4402      	add	r2, r0
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d100      	bne.n	800f0c2 <memset+0xa>
 800f0c0:	4770      	bx	lr
 800f0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800f0c6:	e7f9      	b.n	800f0bc <memset+0x4>

0800f0c8 <strncmp>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	b16a      	cbz	r2, 800f0e8 <strncmp+0x20>
 800f0cc:	3901      	subs	r1, #1
 800f0ce:	1884      	adds	r4, r0, r2
 800f0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d103      	bne.n	800f0e4 <strncmp+0x1c>
 800f0dc:	42a0      	cmp	r0, r4
 800f0de:	d001      	beq.n	800f0e4 <strncmp+0x1c>
 800f0e0:	2a00      	cmp	r2, #0
 800f0e2:	d1f5      	bne.n	800f0d0 <strncmp+0x8>
 800f0e4:	1ad0      	subs	r0, r2, r3
 800f0e6:	bd10      	pop	{r4, pc}
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	e7fc      	b.n	800f0e6 <strncmp+0x1e>

0800f0ec <_localeconv_r>:
 800f0ec:	4800      	ldr	r0, [pc, #0]	@ (800f0f0 <_localeconv_r+0x4>)
 800f0ee:	4770      	bx	lr
 800f0f0:	24000200 	.word	0x24000200

0800f0f4 <_close_r>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	4d06      	ldr	r5, [pc, #24]	@ (800f110 <_close_r+0x1c>)
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4608      	mov	r0, r1
 800f0fe:	602b      	str	r3, [r5, #0]
 800f100:	f7f2 fb6a 	bl	80017d8 <_close>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d102      	bne.n	800f10e <_close_r+0x1a>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	b103      	cbz	r3, 800f10e <_close_r+0x1a>
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	bd38      	pop	{r3, r4, r5, pc}
 800f110:	24003978 	.word	0x24003978

0800f114 <_lseek_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	4d07      	ldr	r5, [pc, #28]	@ (800f134 <_lseek_r+0x20>)
 800f118:	4604      	mov	r4, r0
 800f11a:	4608      	mov	r0, r1
 800f11c:	4611      	mov	r1, r2
 800f11e:	2200      	movs	r2, #0
 800f120:	602a      	str	r2, [r5, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	f7f2 fb7f 	bl	8001826 <_lseek>
 800f128:	1c43      	adds	r3, r0, #1
 800f12a:	d102      	bne.n	800f132 <_lseek_r+0x1e>
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	b103      	cbz	r3, 800f132 <_lseek_r+0x1e>
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	24003978 	.word	0x24003978

0800f138 <_read_r>:
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	4d07      	ldr	r5, [pc, #28]	@ (800f158 <_read_r+0x20>)
 800f13c:	4604      	mov	r4, r0
 800f13e:	4608      	mov	r0, r1
 800f140:	4611      	mov	r1, r2
 800f142:	2200      	movs	r2, #0
 800f144:	602a      	str	r2, [r5, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	f7f2 fb0d 	bl	8001766 <_read>
 800f14c:	1c43      	adds	r3, r0, #1
 800f14e:	d102      	bne.n	800f156 <_read_r+0x1e>
 800f150:	682b      	ldr	r3, [r5, #0]
 800f152:	b103      	cbz	r3, 800f156 <_read_r+0x1e>
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	24003978 	.word	0x24003978

0800f15c <_write_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4d07      	ldr	r5, [pc, #28]	@ (800f17c <_write_r+0x20>)
 800f160:	4604      	mov	r4, r0
 800f162:	4608      	mov	r0, r1
 800f164:	4611      	mov	r1, r2
 800f166:	2200      	movs	r2, #0
 800f168:	602a      	str	r2, [r5, #0]
 800f16a:	461a      	mov	r2, r3
 800f16c:	f7f2 fb18 	bl	80017a0 <_write>
 800f170:	1c43      	adds	r3, r0, #1
 800f172:	d102      	bne.n	800f17a <_write_r+0x1e>
 800f174:	682b      	ldr	r3, [r5, #0]
 800f176:	b103      	cbz	r3, 800f17a <_write_r+0x1e>
 800f178:	6023      	str	r3, [r4, #0]
 800f17a:	bd38      	pop	{r3, r4, r5, pc}
 800f17c:	24003978 	.word	0x24003978

0800f180 <__errno>:
 800f180:	4b01      	ldr	r3, [pc, #4]	@ (800f188 <__errno+0x8>)
 800f182:	6818      	ldr	r0, [r3, #0]
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	2400027c 	.word	0x2400027c

0800f18c <__libc_init_array>:
 800f18c:	b570      	push	{r4, r5, r6, lr}
 800f18e:	4d0d      	ldr	r5, [pc, #52]	@ (800f1c4 <__libc_init_array+0x38>)
 800f190:	4c0d      	ldr	r4, [pc, #52]	@ (800f1c8 <__libc_init_array+0x3c>)
 800f192:	1b64      	subs	r4, r4, r5
 800f194:	10a4      	asrs	r4, r4, #2
 800f196:	2600      	movs	r6, #0
 800f198:	42a6      	cmp	r6, r4
 800f19a:	d109      	bne.n	800f1b0 <__libc_init_array+0x24>
 800f19c:	4d0b      	ldr	r5, [pc, #44]	@ (800f1cc <__libc_init_array+0x40>)
 800f19e:	4c0c      	ldr	r4, [pc, #48]	@ (800f1d0 <__libc_init_array+0x44>)
 800f1a0:	f002 fa3a 	bl	8011618 <_init>
 800f1a4:	1b64      	subs	r4, r4, r5
 800f1a6:	10a4      	asrs	r4, r4, #2
 800f1a8:	2600      	movs	r6, #0
 800f1aa:	42a6      	cmp	r6, r4
 800f1ac:	d105      	bne.n	800f1ba <__libc_init_array+0x2e>
 800f1ae:	bd70      	pop	{r4, r5, r6, pc}
 800f1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1b4:	4798      	blx	r3
 800f1b6:	3601      	adds	r6, #1
 800f1b8:	e7ee      	b.n	800f198 <__libc_init_array+0xc>
 800f1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1be:	4798      	blx	r3
 800f1c0:	3601      	adds	r6, #1
 800f1c2:	e7f2      	b.n	800f1aa <__libc_init_array+0x1e>
 800f1c4:	08011b2c 	.word	0x08011b2c
 800f1c8:	08011b2c 	.word	0x08011b2c
 800f1cc:	08011b2c 	.word	0x08011b2c
 800f1d0:	08011b30 	.word	0x08011b30

0800f1d4 <__retarget_lock_init_recursive>:
 800f1d4:	4770      	bx	lr

0800f1d6 <__retarget_lock_acquire_recursive>:
 800f1d6:	4770      	bx	lr

0800f1d8 <__retarget_lock_release_recursive>:
 800f1d8:	4770      	bx	lr

0800f1da <strcpy>:
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1e0:	f803 2b01 	strb.w	r2, [r3], #1
 800f1e4:	2a00      	cmp	r2, #0
 800f1e6:	d1f9      	bne.n	800f1dc <strcpy+0x2>
 800f1e8:	4770      	bx	lr

0800f1ea <memcpy>:
 800f1ea:	440a      	add	r2, r1
 800f1ec:	4291      	cmp	r1, r2
 800f1ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1f2:	d100      	bne.n	800f1f6 <memcpy+0xc>
 800f1f4:	4770      	bx	lr
 800f1f6:	b510      	push	{r4, lr}
 800f1f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f200:	4291      	cmp	r1, r2
 800f202:	d1f9      	bne.n	800f1f8 <memcpy+0xe>
 800f204:	bd10      	pop	{r4, pc}
	...

0800f208 <nan>:
 800f208:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f210 <nan+0x8>
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	00000000 	.word	0x00000000
 800f214:	7ff80000 	.word	0x7ff80000

0800f218 <nanf>:
 800f218:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f220 <nanf+0x8>
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	7fc00000 	.word	0x7fc00000

0800f224 <quorem>:
 800f224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f228:	6903      	ldr	r3, [r0, #16]
 800f22a:	690c      	ldr	r4, [r1, #16]
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	4607      	mov	r7, r0
 800f230:	db7e      	blt.n	800f330 <quorem+0x10c>
 800f232:	3c01      	subs	r4, #1
 800f234:	f101 0814 	add.w	r8, r1, #20
 800f238:	00a3      	lsls	r3, r4, #2
 800f23a:	f100 0514 	add.w	r5, r0, #20
 800f23e:	9300      	str	r3, [sp, #0]
 800f240:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f244:	9301      	str	r3, [sp, #4]
 800f246:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f24a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f24e:	3301      	adds	r3, #1
 800f250:	429a      	cmp	r2, r3
 800f252:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f256:	fbb2 f6f3 	udiv	r6, r2, r3
 800f25a:	d32e      	bcc.n	800f2ba <quorem+0x96>
 800f25c:	f04f 0a00 	mov.w	sl, #0
 800f260:	46c4      	mov	ip, r8
 800f262:	46ae      	mov	lr, r5
 800f264:	46d3      	mov	fp, sl
 800f266:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f26a:	b298      	uxth	r0, r3
 800f26c:	fb06 a000 	mla	r0, r6, r0, sl
 800f270:	0c02      	lsrs	r2, r0, #16
 800f272:	0c1b      	lsrs	r3, r3, #16
 800f274:	fb06 2303 	mla	r3, r6, r3, r2
 800f278:	f8de 2000 	ldr.w	r2, [lr]
 800f27c:	b280      	uxth	r0, r0
 800f27e:	b292      	uxth	r2, r2
 800f280:	1a12      	subs	r2, r2, r0
 800f282:	445a      	add	r2, fp
 800f284:	f8de 0000 	ldr.w	r0, [lr]
 800f288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f292:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f296:	b292      	uxth	r2, r2
 800f298:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f29c:	45e1      	cmp	r9, ip
 800f29e:	f84e 2b04 	str.w	r2, [lr], #4
 800f2a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f2a6:	d2de      	bcs.n	800f266 <quorem+0x42>
 800f2a8:	9b00      	ldr	r3, [sp, #0]
 800f2aa:	58eb      	ldr	r3, [r5, r3]
 800f2ac:	b92b      	cbnz	r3, 800f2ba <quorem+0x96>
 800f2ae:	9b01      	ldr	r3, [sp, #4]
 800f2b0:	3b04      	subs	r3, #4
 800f2b2:	429d      	cmp	r5, r3
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	d32f      	bcc.n	800f318 <quorem+0xf4>
 800f2b8:	613c      	str	r4, [r7, #16]
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	f001 fca2 	bl	8010c04 <__mcmp>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	db25      	blt.n	800f310 <quorem+0xec>
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f2cc:	f8d1 c000 	ldr.w	ip, [r1]
 800f2d0:	fa1f fe82 	uxth.w	lr, r2
 800f2d4:	fa1f f38c 	uxth.w	r3, ip
 800f2d8:	eba3 030e 	sub.w	r3, r3, lr
 800f2dc:	4403      	add	r3, r0
 800f2de:	0c12      	lsrs	r2, r2, #16
 800f2e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f2e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2ee:	45c1      	cmp	r9, r8
 800f2f0:	f841 3b04 	str.w	r3, [r1], #4
 800f2f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f2f8:	d2e6      	bcs.n	800f2c8 <quorem+0xa4>
 800f2fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f302:	b922      	cbnz	r2, 800f30e <quorem+0xea>
 800f304:	3b04      	subs	r3, #4
 800f306:	429d      	cmp	r5, r3
 800f308:	461a      	mov	r2, r3
 800f30a:	d30b      	bcc.n	800f324 <quorem+0x100>
 800f30c:	613c      	str	r4, [r7, #16]
 800f30e:	3601      	adds	r6, #1
 800f310:	4630      	mov	r0, r6
 800f312:	b003      	add	sp, #12
 800f314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f318:	6812      	ldr	r2, [r2, #0]
 800f31a:	3b04      	subs	r3, #4
 800f31c:	2a00      	cmp	r2, #0
 800f31e:	d1cb      	bne.n	800f2b8 <quorem+0x94>
 800f320:	3c01      	subs	r4, #1
 800f322:	e7c6      	b.n	800f2b2 <quorem+0x8e>
 800f324:	6812      	ldr	r2, [r2, #0]
 800f326:	3b04      	subs	r3, #4
 800f328:	2a00      	cmp	r2, #0
 800f32a:	d1ef      	bne.n	800f30c <quorem+0xe8>
 800f32c:	3c01      	subs	r4, #1
 800f32e:	e7ea      	b.n	800f306 <quorem+0xe2>
 800f330:	2000      	movs	r0, #0
 800f332:	e7ee      	b.n	800f312 <quorem+0xee>
 800f334:	0000      	movs	r0, r0
	...

0800f338 <_dtoa_r>:
 800f338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f33c:	ed2d 8b02 	vpush	{d8}
 800f340:	69c7      	ldr	r7, [r0, #28]
 800f342:	b091      	sub	sp, #68	@ 0x44
 800f344:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f348:	ec55 4b10 	vmov	r4, r5, d0
 800f34c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f34e:	9107      	str	r1, [sp, #28]
 800f350:	4681      	mov	r9, r0
 800f352:	9209      	str	r2, [sp, #36]	@ 0x24
 800f354:	930d      	str	r3, [sp, #52]	@ 0x34
 800f356:	b97f      	cbnz	r7, 800f378 <_dtoa_r+0x40>
 800f358:	2010      	movs	r0, #16
 800f35a:	f001 f8cf 	bl	80104fc <malloc>
 800f35e:	4602      	mov	r2, r0
 800f360:	f8c9 001c 	str.w	r0, [r9, #28]
 800f364:	b920      	cbnz	r0, 800f370 <_dtoa_r+0x38>
 800f366:	4ba0      	ldr	r3, [pc, #640]	@ (800f5e8 <_dtoa_r+0x2b0>)
 800f368:	21ef      	movs	r1, #239	@ 0xef
 800f36a:	48a0      	ldr	r0, [pc, #640]	@ (800f5ec <_dtoa_r+0x2b4>)
 800f36c:	f002 f8c4 	bl	80114f8 <__assert_func>
 800f370:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f374:	6007      	str	r7, [r0, #0]
 800f376:	60c7      	str	r7, [r0, #12]
 800f378:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f37c:	6819      	ldr	r1, [r3, #0]
 800f37e:	b159      	cbz	r1, 800f398 <_dtoa_r+0x60>
 800f380:	685a      	ldr	r2, [r3, #4]
 800f382:	604a      	str	r2, [r1, #4]
 800f384:	2301      	movs	r3, #1
 800f386:	4093      	lsls	r3, r2
 800f388:	608b      	str	r3, [r1, #8]
 800f38a:	4648      	mov	r0, r9
 800f38c:	f001 f9be 	bl	801070c <_Bfree>
 800f390:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f394:	2200      	movs	r2, #0
 800f396:	601a      	str	r2, [r3, #0]
 800f398:	1e2b      	subs	r3, r5, #0
 800f39a:	bfbb      	ittet	lt
 800f39c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f3a0:	9303      	strlt	r3, [sp, #12]
 800f3a2:	2300      	movge	r3, #0
 800f3a4:	2201      	movlt	r2, #1
 800f3a6:	bfac      	ite	ge
 800f3a8:	6033      	strge	r3, [r6, #0]
 800f3aa:	6032      	strlt	r2, [r6, #0]
 800f3ac:	4b90      	ldr	r3, [pc, #576]	@ (800f5f0 <_dtoa_r+0x2b8>)
 800f3ae:	9e03      	ldr	r6, [sp, #12]
 800f3b0:	43b3      	bics	r3, r6
 800f3b2:	d110      	bne.n	800f3d6 <_dtoa_r+0x9e>
 800f3b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f3ba:	6013      	str	r3, [r2, #0]
 800f3bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f3c0:	4323      	orrs	r3, r4
 800f3c2:	f000 84e6 	beq.w	800fd92 <_dtoa_r+0xa5a>
 800f3c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f3c8:	4f8a      	ldr	r7, [pc, #552]	@ (800f5f4 <_dtoa_r+0x2bc>)
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f000 84e8 	beq.w	800fda0 <_dtoa_r+0xa68>
 800f3d0:	1cfb      	adds	r3, r7, #3
 800f3d2:	f000 bce3 	b.w	800fd9c <_dtoa_r+0xa64>
 800f3d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f3da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e2:	d10a      	bne.n	800f3fa <_dtoa_r+0xc2>
 800f3e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	6013      	str	r3, [r2, #0]
 800f3ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f3ec:	b113      	cbz	r3, 800f3f4 <_dtoa_r+0xbc>
 800f3ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f3f0:	4b81      	ldr	r3, [pc, #516]	@ (800f5f8 <_dtoa_r+0x2c0>)
 800f3f2:	6013      	str	r3, [r2, #0]
 800f3f4:	4f81      	ldr	r7, [pc, #516]	@ (800f5fc <_dtoa_r+0x2c4>)
 800f3f6:	f000 bcd3 	b.w	800fda0 <_dtoa_r+0xa68>
 800f3fa:	aa0e      	add	r2, sp, #56	@ 0x38
 800f3fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800f3fe:	4648      	mov	r0, r9
 800f400:	eeb0 0b48 	vmov.f64	d0, d8
 800f404:	f001 fd1e 	bl	8010e44 <__d2b>
 800f408:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f40c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f40e:	9001      	str	r0, [sp, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d045      	beq.n	800f4a0 <_dtoa_r+0x168>
 800f414:	eeb0 7b48 	vmov.f64	d7, d8
 800f418:	ee18 1a90 	vmov	r1, s17
 800f41c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f420:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f424:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f428:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f42c:	2500      	movs	r5, #0
 800f42e:	ee07 1a90 	vmov	s15, r1
 800f432:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f436:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f5d0 <_dtoa_r+0x298>
 800f43a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f43e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f5d8 <_dtoa_r+0x2a0>
 800f442:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f446:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f5e0 <_dtoa_r+0x2a8>
 800f44a:	ee07 3a90 	vmov	s15, r3
 800f44e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f452:	eeb0 7b46 	vmov.f64	d7, d6
 800f456:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f45a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f45e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f466:	ee16 8a90 	vmov	r8, s13
 800f46a:	d508      	bpl.n	800f47e <_dtoa_r+0x146>
 800f46c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f470:	eeb4 6b47 	vcmp.f64	d6, d7
 800f474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f478:	bf18      	it	ne
 800f47a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f47e:	f1b8 0f16 	cmp.w	r8, #22
 800f482:	d82b      	bhi.n	800f4dc <_dtoa_r+0x1a4>
 800f484:	495e      	ldr	r1, [pc, #376]	@ (800f600 <_dtoa_r+0x2c8>)
 800f486:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f48a:	ed91 7b00 	vldr	d7, [r1]
 800f48e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f496:	d501      	bpl.n	800f49c <_dtoa_r+0x164>
 800f498:	f108 38ff 	add.w	r8, r8, #4294967295
 800f49c:	2100      	movs	r1, #0
 800f49e:	e01e      	b.n	800f4de <_dtoa_r+0x1a6>
 800f4a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4a2:	4413      	add	r3, r2
 800f4a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f4a8:	2920      	cmp	r1, #32
 800f4aa:	bfc1      	itttt	gt
 800f4ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f4b0:	408e      	lslgt	r6, r1
 800f4b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f4b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f4ba:	bfd6      	itet	le
 800f4bc:	f1c1 0120 	rsble	r1, r1, #32
 800f4c0:	4331      	orrgt	r1, r6
 800f4c2:	fa04 f101 	lslle.w	r1, r4, r1
 800f4c6:	ee07 1a90 	vmov	s15, r1
 800f4ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	ee17 1a90 	vmov	r1, s15
 800f4d4:	2501      	movs	r5, #1
 800f4d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f4da:	e7a8      	b.n	800f42e <_dtoa_r+0xf6>
 800f4dc:	2101      	movs	r1, #1
 800f4de:	1ad2      	subs	r2, r2, r3
 800f4e0:	1e53      	subs	r3, r2, #1
 800f4e2:	9306      	str	r3, [sp, #24]
 800f4e4:	bf45      	ittet	mi
 800f4e6:	f1c2 0301 	rsbmi	r3, r2, #1
 800f4ea:	9304      	strmi	r3, [sp, #16]
 800f4ec:	2300      	movpl	r3, #0
 800f4ee:	2300      	movmi	r3, #0
 800f4f0:	bf4c      	ite	mi
 800f4f2:	9306      	strmi	r3, [sp, #24]
 800f4f4:	9304      	strpl	r3, [sp, #16]
 800f4f6:	f1b8 0f00 	cmp.w	r8, #0
 800f4fa:	910c      	str	r1, [sp, #48]	@ 0x30
 800f4fc:	db18      	blt.n	800f530 <_dtoa_r+0x1f8>
 800f4fe:	9b06      	ldr	r3, [sp, #24]
 800f500:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f504:	4443      	add	r3, r8
 800f506:	9306      	str	r3, [sp, #24]
 800f508:	2300      	movs	r3, #0
 800f50a:	9a07      	ldr	r2, [sp, #28]
 800f50c:	2a09      	cmp	r2, #9
 800f50e:	d845      	bhi.n	800f59c <_dtoa_r+0x264>
 800f510:	2a05      	cmp	r2, #5
 800f512:	bfc4      	itt	gt
 800f514:	3a04      	subgt	r2, #4
 800f516:	9207      	strgt	r2, [sp, #28]
 800f518:	9a07      	ldr	r2, [sp, #28]
 800f51a:	f1a2 0202 	sub.w	r2, r2, #2
 800f51e:	bfcc      	ite	gt
 800f520:	2400      	movgt	r4, #0
 800f522:	2401      	movle	r4, #1
 800f524:	2a03      	cmp	r2, #3
 800f526:	d844      	bhi.n	800f5b2 <_dtoa_r+0x27a>
 800f528:	e8df f002 	tbb	[pc, r2]
 800f52c:	0b173634 	.word	0x0b173634
 800f530:	9b04      	ldr	r3, [sp, #16]
 800f532:	2200      	movs	r2, #0
 800f534:	eba3 0308 	sub.w	r3, r3, r8
 800f538:	9304      	str	r3, [sp, #16]
 800f53a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f53c:	f1c8 0300 	rsb	r3, r8, #0
 800f540:	e7e3      	b.n	800f50a <_dtoa_r+0x1d2>
 800f542:	2201      	movs	r2, #1
 800f544:	9208      	str	r2, [sp, #32]
 800f546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f548:	eb08 0b02 	add.w	fp, r8, r2
 800f54c:	f10b 0a01 	add.w	sl, fp, #1
 800f550:	4652      	mov	r2, sl
 800f552:	2a01      	cmp	r2, #1
 800f554:	bfb8      	it	lt
 800f556:	2201      	movlt	r2, #1
 800f558:	e006      	b.n	800f568 <_dtoa_r+0x230>
 800f55a:	2201      	movs	r2, #1
 800f55c:	9208      	str	r2, [sp, #32]
 800f55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f560:	2a00      	cmp	r2, #0
 800f562:	dd29      	ble.n	800f5b8 <_dtoa_r+0x280>
 800f564:	4693      	mov	fp, r2
 800f566:	4692      	mov	sl, r2
 800f568:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f56c:	2100      	movs	r1, #0
 800f56e:	2004      	movs	r0, #4
 800f570:	f100 0614 	add.w	r6, r0, #20
 800f574:	4296      	cmp	r6, r2
 800f576:	d926      	bls.n	800f5c6 <_dtoa_r+0x28e>
 800f578:	6079      	str	r1, [r7, #4]
 800f57a:	4648      	mov	r0, r9
 800f57c:	9305      	str	r3, [sp, #20]
 800f57e:	f001 f885 	bl	801068c <_Balloc>
 800f582:	9b05      	ldr	r3, [sp, #20]
 800f584:	4607      	mov	r7, r0
 800f586:	2800      	cmp	r0, #0
 800f588:	d13e      	bne.n	800f608 <_dtoa_r+0x2d0>
 800f58a:	4b1e      	ldr	r3, [pc, #120]	@ (800f604 <_dtoa_r+0x2cc>)
 800f58c:	4602      	mov	r2, r0
 800f58e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f592:	e6ea      	b.n	800f36a <_dtoa_r+0x32>
 800f594:	2200      	movs	r2, #0
 800f596:	e7e1      	b.n	800f55c <_dtoa_r+0x224>
 800f598:	2200      	movs	r2, #0
 800f59a:	e7d3      	b.n	800f544 <_dtoa_r+0x20c>
 800f59c:	2401      	movs	r4, #1
 800f59e:	2200      	movs	r2, #0
 800f5a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f5a4:	f04f 3bff 	mov.w	fp, #4294967295
 800f5a8:	2100      	movs	r1, #0
 800f5aa:	46da      	mov	sl, fp
 800f5ac:	2212      	movs	r2, #18
 800f5ae:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5b0:	e7da      	b.n	800f568 <_dtoa_r+0x230>
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	9208      	str	r2, [sp, #32]
 800f5b6:	e7f5      	b.n	800f5a4 <_dtoa_r+0x26c>
 800f5b8:	f04f 0b01 	mov.w	fp, #1
 800f5bc:	46da      	mov	sl, fp
 800f5be:	465a      	mov	r2, fp
 800f5c0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f5c4:	e7d0      	b.n	800f568 <_dtoa_r+0x230>
 800f5c6:	3101      	adds	r1, #1
 800f5c8:	0040      	lsls	r0, r0, #1
 800f5ca:	e7d1      	b.n	800f570 <_dtoa_r+0x238>
 800f5cc:	f3af 8000 	nop.w
 800f5d0:	636f4361 	.word	0x636f4361
 800f5d4:	3fd287a7 	.word	0x3fd287a7
 800f5d8:	8b60c8b3 	.word	0x8b60c8b3
 800f5dc:	3fc68a28 	.word	0x3fc68a28
 800f5e0:	509f79fb 	.word	0x509f79fb
 800f5e4:	3fd34413 	.word	0x3fd34413
 800f5e8:	08011743 	.word	0x08011743
 800f5ec:	0801175a 	.word	0x0801175a
 800f5f0:	7ff00000 	.word	0x7ff00000
 800f5f4:	0801173f 	.word	0x0801173f
 800f5f8:	0801170b 	.word	0x0801170b
 800f5fc:	0801170a 	.word	0x0801170a
 800f600:	08011958 	.word	0x08011958
 800f604:	080117b2 	.word	0x080117b2
 800f608:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f60c:	f1ba 0f0e 	cmp.w	sl, #14
 800f610:	6010      	str	r0, [r2, #0]
 800f612:	d86e      	bhi.n	800f6f2 <_dtoa_r+0x3ba>
 800f614:	2c00      	cmp	r4, #0
 800f616:	d06c      	beq.n	800f6f2 <_dtoa_r+0x3ba>
 800f618:	f1b8 0f00 	cmp.w	r8, #0
 800f61c:	f340 80b4 	ble.w	800f788 <_dtoa_r+0x450>
 800f620:	4ac8      	ldr	r2, [pc, #800]	@ (800f944 <_dtoa_r+0x60c>)
 800f622:	f008 010f 	and.w	r1, r8, #15
 800f626:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f62a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f62e:	ed92 7b00 	vldr	d7, [r2]
 800f632:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f636:	f000 809b 	beq.w	800f770 <_dtoa_r+0x438>
 800f63a:	4ac3      	ldr	r2, [pc, #780]	@ (800f948 <_dtoa_r+0x610>)
 800f63c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f640:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f644:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f648:	f001 010f 	and.w	r1, r1, #15
 800f64c:	2203      	movs	r2, #3
 800f64e:	48be      	ldr	r0, [pc, #760]	@ (800f948 <_dtoa_r+0x610>)
 800f650:	2900      	cmp	r1, #0
 800f652:	f040 808f 	bne.w	800f774 <_dtoa_r+0x43c>
 800f656:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f65a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f65e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f662:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f664:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f668:	2900      	cmp	r1, #0
 800f66a:	f000 80b3 	beq.w	800f7d4 <_dtoa_r+0x49c>
 800f66e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f672:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67a:	f140 80ab 	bpl.w	800f7d4 <_dtoa_r+0x49c>
 800f67e:	f1ba 0f00 	cmp.w	sl, #0
 800f682:	f000 80a7 	beq.w	800f7d4 <_dtoa_r+0x49c>
 800f686:	f1bb 0f00 	cmp.w	fp, #0
 800f68a:	dd30      	ble.n	800f6ee <_dtoa_r+0x3b6>
 800f68c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f690:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f694:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f698:	f108 31ff 	add.w	r1, r8, #4294967295
 800f69c:	9105      	str	r1, [sp, #20]
 800f69e:	3201      	adds	r2, #1
 800f6a0:	465c      	mov	r4, fp
 800f6a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f6a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f6aa:	ee07 2a90 	vmov	s15, r2
 800f6ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f6b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f6b6:	ee15 2a90 	vmov	r2, s11
 800f6ba:	ec51 0b15 	vmov	r0, r1, d5
 800f6be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f6c2:	2c00      	cmp	r4, #0
 800f6c4:	f040 808a 	bne.w	800f7dc <_dtoa_r+0x4a4>
 800f6c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f6cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f6d0:	ec41 0b17 	vmov	d7, r0, r1
 800f6d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6dc:	f300 826a 	bgt.w	800fbb4 <_dtoa_r+0x87c>
 800f6e0:	eeb1 7b47 	vneg.f64	d7, d7
 800f6e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ec:	d423      	bmi.n	800f736 <_dtoa_r+0x3fe>
 800f6ee:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f6f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f6f4:	2a00      	cmp	r2, #0
 800f6f6:	f2c0 8129 	blt.w	800f94c <_dtoa_r+0x614>
 800f6fa:	f1b8 0f0e 	cmp.w	r8, #14
 800f6fe:	f300 8125 	bgt.w	800f94c <_dtoa_r+0x614>
 800f702:	4b90      	ldr	r3, [pc, #576]	@ (800f944 <_dtoa_r+0x60c>)
 800f704:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f708:	ed93 6b00 	vldr	d6, [r3]
 800f70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f280 80c8 	bge.w	800f8a4 <_dtoa_r+0x56c>
 800f714:	f1ba 0f00 	cmp.w	sl, #0
 800f718:	f300 80c4 	bgt.w	800f8a4 <_dtoa_r+0x56c>
 800f71c:	d10b      	bne.n	800f736 <_dtoa_r+0x3fe>
 800f71e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f722:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f726:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f72a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f732:	f2c0 823c 	blt.w	800fbae <_dtoa_r+0x876>
 800f736:	2400      	movs	r4, #0
 800f738:	4625      	mov	r5, r4
 800f73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f73c:	43db      	mvns	r3, r3
 800f73e:	9305      	str	r3, [sp, #20]
 800f740:	463e      	mov	r6, r7
 800f742:	f04f 0800 	mov.w	r8, #0
 800f746:	4621      	mov	r1, r4
 800f748:	4648      	mov	r0, r9
 800f74a:	f000 ffdf 	bl	801070c <_Bfree>
 800f74e:	2d00      	cmp	r5, #0
 800f750:	f000 80a2 	beq.w	800f898 <_dtoa_r+0x560>
 800f754:	f1b8 0f00 	cmp.w	r8, #0
 800f758:	d005      	beq.n	800f766 <_dtoa_r+0x42e>
 800f75a:	45a8      	cmp	r8, r5
 800f75c:	d003      	beq.n	800f766 <_dtoa_r+0x42e>
 800f75e:	4641      	mov	r1, r8
 800f760:	4648      	mov	r0, r9
 800f762:	f000 ffd3 	bl	801070c <_Bfree>
 800f766:	4629      	mov	r1, r5
 800f768:	4648      	mov	r0, r9
 800f76a:	f000 ffcf 	bl	801070c <_Bfree>
 800f76e:	e093      	b.n	800f898 <_dtoa_r+0x560>
 800f770:	2202      	movs	r2, #2
 800f772:	e76c      	b.n	800f64e <_dtoa_r+0x316>
 800f774:	07cc      	lsls	r4, r1, #31
 800f776:	d504      	bpl.n	800f782 <_dtoa_r+0x44a>
 800f778:	ed90 6b00 	vldr	d6, [r0]
 800f77c:	3201      	adds	r2, #1
 800f77e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f782:	1049      	asrs	r1, r1, #1
 800f784:	3008      	adds	r0, #8
 800f786:	e763      	b.n	800f650 <_dtoa_r+0x318>
 800f788:	d022      	beq.n	800f7d0 <_dtoa_r+0x498>
 800f78a:	f1c8 0100 	rsb	r1, r8, #0
 800f78e:	4a6d      	ldr	r2, [pc, #436]	@ (800f944 <_dtoa_r+0x60c>)
 800f790:	f001 000f 	and.w	r0, r1, #15
 800f794:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f798:	ed92 7b00 	vldr	d7, [r2]
 800f79c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f7a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7a4:	4868      	ldr	r0, [pc, #416]	@ (800f948 <_dtoa_r+0x610>)
 800f7a6:	1109      	asrs	r1, r1, #4
 800f7a8:	2400      	movs	r4, #0
 800f7aa:	2202      	movs	r2, #2
 800f7ac:	b929      	cbnz	r1, 800f7ba <_dtoa_r+0x482>
 800f7ae:	2c00      	cmp	r4, #0
 800f7b0:	f43f af57 	beq.w	800f662 <_dtoa_r+0x32a>
 800f7b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7b8:	e753      	b.n	800f662 <_dtoa_r+0x32a>
 800f7ba:	07ce      	lsls	r6, r1, #31
 800f7bc:	d505      	bpl.n	800f7ca <_dtoa_r+0x492>
 800f7be:	ed90 6b00 	vldr	d6, [r0]
 800f7c2:	3201      	adds	r2, #1
 800f7c4:	2401      	movs	r4, #1
 800f7c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7ca:	1049      	asrs	r1, r1, #1
 800f7cc:	3008      	adds	r0, #8
 800f7ce:	e7ed      	b.n	800f7ac <_dtoa_r+0x474>
 800f7d0:	2202      	movs	r2, #2
 800f7d2:	e746      	b.n	800f662 <_dtoa_r+0x32a>
 800f7d4:	f8cd 8014 	str.w	r8, [sp, #20]
 800f7d8:	4654      	mov	r4, sl
 800f7da:	e762      	b.n	800f6a2 <_dtoa_r+0x36a>
 800f7dc:	4a59      	ldr	r2, [pc, #356]	@ (800f944 <_dtoa_r+0x60c>)
 800f7de:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f7e2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f7e6:	9a08      	ldr	r2, [sp, #32]
 800f7e8:	ec41 0b17 	vmov	d7, r0, r1
 800f7ec:	443c      	add	r4, r7
 800f7ee:	b34a      	cbz	r2, 800f844 <_dtoa_r+0x50c>
 800f7f0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f7f4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f7f8:	463e      	mov	r6, r7
 800f7fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f7fe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f802:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f806:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f80a:	ee14 2a90 	vmov	r2, s9
 800f80e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f812:	3230      	adds	r2, #48	@ 0x30
 800f814:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f818:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f820:	f806 2b01 	strb.w	r2, [r6], #1
 800f824:	d438      	bmi.n	800f898 <_dtoa_r+0x560>
 800f826:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f82a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f832:	d46e      	bmi.n	800f912 <_dtoa_r+0x5da>
 800f834:	42a6      	cmp	r6, r4
 800f836:	f43f af5a 	beq.w	800f6ee <_dtoa_r+0x3b6>
 800f83a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f83e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f842:	e7e0      	b.n	800f806 <_dtoa_r+0x4ce>
 800f844:	4621      	mov	r1, r4
 800f846:	463e      	mov	r6, r7
 800f848:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f84c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f850:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f854:	ee14 2a90 	vmov	r2, s9
 800f858:	3230      	adds	r2, #48	@ 0x30
 800f85a:	f806 2b01 	strb.w	r2, [r6], #1
 800f85e:	42a6      	cmp	r6, r4
 800f860:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f864:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f868:	d119      	bne.n	800f89e <_dtoa_r+0x566>
 800f86a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f86e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f872:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87a:	dc4a      	bgt.n	800f912 <_dtoa_r+0x5da>
 800f87c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f880:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f888:	f57f af31 	bpl.w	800f6ee <_dtoa_r+0x3b6>
 800f88c:	460e      	mov	r6, r1
 800f88e:	3901      	subs	r1, #1
 800f890:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f894:	2b30      	cmp	r3, #48	@ 0x30
 800f896:	d0f9      	beq.n	800f88c <_dtoa_r+0x554>
 800f898:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f89c:	e027      	b.n	800f8ee <_dtoa_r+0x5b6>
 800f89e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f8a2:	e7d5      	b.n	800f850 <_dtoa_r+0x518>
 800f8a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8a8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f8ac:	463e      	mov	r6, r7
 800f8ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f8b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f8b6:	ee15 3a10 	vmov	r3, s10
 800f8ba:	3330      	adds	r3, #48	@ 0x30
 800f8bc:	f806 3b01 	strb.w	r3, [r6], #1
 800f8c0:	1bf3      	subs	r3, r6, r7
 800f8c2:	459a      	cmp	sl, r3
 800f8c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f8c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f8cc:	d132      	bne.n	800f934 <_dtoa_r+0x5fc>
 800f8ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f8d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8da:	dc18      	bgt.n	800f90e <_dtoa_r+0x5d6>
 800f8dc:	eeb4 7b46 	vcmp.f64	d7, d6
 800f8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e4:	d103      	bne.n	800f8ee <_dtoa_r+0x5b6>
 800f8e6:	ee15 3a10 	vmov	r3, s10
 800f8ea:	07db      	lsls	r3, r3, #31
 800f8ec:	d40f      	bmi.n	800f90e <_dtoa_r+0x5d6>
 800f8ee:	9901      	ldr	r1, [sp, #4]
 800f8f0:	4648      	mov	r0, r9
 800f8f2:	f000 ff0b 	bl	801070c <_Bfree>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f8fa:	7033      	strb	r3, [r6, #0]
 800f8fc:	f108 0301 	add.w	r3, r8, #1
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 824b 	beq.w	800fda0 <_dtoa_r+0xa68>
 800f90a:	601e      	str	r6, [r3, #0]
 800f90c:	e248      	b.n	800fda0 <_dtoa_r+0xa68>
 800f90e:	f8cd 8014 	str.w	r8, [sp, #20]
 800f912:	4633      	mov	r3, r6
 800f914:	461e      	mov	r6, r3
 800f916:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f91a:	2a39      	cmp	r2, #57	@ 0x39
 800f91c:	d106      	bne.n	800f92c <_dtoa_r+0x5f4>
 800f91e:	429f      	cmp	r7, r3
 800f920:	d1f8      	bne.n	800f914 <_dtoa_r+0x5dc>
 800f922:	9a05      	ldr	r2, [sp, #20]
 800f924:	3201      	adds	r2, #1
 800f926:	9205      	str	r2, [sp, #20]
 800f928:	2230      	movs	r2, #48	@ 0x30
 800f92a:	703a      	strb	r2, [r7, #0]
 800f92c:	781a      	ldrb	r2, [r3, #0]
 800f92e:	3201      	adds	r2, #1
 800f930:	701a      	strb	r2, [r3, #0]
 800f932:	e7b1      	b.n	800f898 <_dtoa_r+0x560>
 800f934:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f938:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f940:	d1b5      	bne.n	800f8ae <_dtoa_r+0x576>
 800f942:	e7d4      	b.n	800f8ee <_dtoa_r+0x5b6>
 800f944:	08011958 	.word	0x08011958
 800f948:	08011930 	.word	0x08011930
 800f94c:	9908      	ldr	r1, [sp, #32]
 800f94e:	2900      	cmp	r1, #0
 800f950:	f000 80e9 	beq.w	800fb26 <_dtoa_r+0x7ee>
 800f954:	9907      	ldr	r1, [sp, #28]
 800f956:	2901      	cmp	r1, #1
 800f958:	f300 80cb 	bgt.w	800faf2 <_dtoa_r+0x7ba>
 800f95c:	2d00      	cmp	r5, #0
 800f95e:	f000 80c4 	beq.w	800faea <_dtoa_r+0x7b2>
 800f962:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f966:	9e04      	ldr	r6, [sp, #16]
 800f968:	461c      	mov	r4, r3
 800f96a:	9305      	str	r3, [sp, #20]
 800f96c:	9b04      	ldr	r3, [sp, #16]
 800f96e:	4413      	add	r3, r2
 800f970:	9304      	str	r3, [sp, #16]
 800f972:	9b06      	ldr	r3, [sp, #24]
 800f974:	2101      	movs	r1, #1
 800f976:	4413      	add	r3, r2
 800f978:	4648      	mov	r0, r9
 800f97a:	9306      	str	r3, [sp, #24]
 800f97c:	f000 ffc4 	bl	8010908 <__i2b>
 800f980:	9b05      	ldr	r3, [sp, #20]
 800f982:	4605      	mov	r5, r0
 800f984:	b166      	cbz	r6, 800f9a0 <_dtoa_r+0x668>
 800f986:	9a06      	ldr	r2, [sp, #24]
 800f988:	2a00      	cmp	r2, #0
 800f98a:	dd09      	ble.n	800f9a0 <_dtoa_r+0x668>
 800f98c:	42b2      	cmp	r2, r6
 800f98e:	9904      	ldr	r1, [sp, #16]
 800f990:	bfa8      	it	ge
 800f992:	4632      	movge	r2, r6
 800f994:	1a89      	subs	r1, r1, r2
 800f996:	9104      	str	r1, [sp, #16]
 800f998:	9906      	ldr	r1, [sp, #24]
 800f99a:	1ab6      	subs	r6, r6, r2
 800f99c:	1a8a      	subs	r2, r1, r2
 800f99e:	9206      	str	r2, [sp, #24]
 800f9a0:	b30b      	cbz	r3, 800f9e6 <_dtoa_r+0x6ae>
 800f9a2:	9a08      	ldr	r2, [sp, #32]
 800f9a4:	2a00      	cmp	r2, #0
 800f9a6:	f000 80c5 	beq.w	800fb34 <_dtoa_r+0x7fc>
 800f9aa:	2c00      	cmp	r4, #0
 800f9ac:	f000 80bf 	beq.w	800fb2e <_dtoa_r+0x7f6>
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	4622      	mov	r2, r4
 800f9b4:	4648      	mov	r0, r9
 800f9b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9b8:	f001 f85e 	bl	8010a78 <__pow5mult>
 800f9bc:	9a01      	ldr	r2, [sp, #4]
 800f9be:	4601      	mov	r1, r0
 800f9c0:	4605      	mov	r5, r0
 800f9c2:	4648      	mov	r0, r9
 800f9c4:	f000 ffb6 	bl	8010934 <__multiply>
 800f9c8:	9901      	ldr	r1, [sp, #4]
 800f9ca:	9005      	str	r0, [sp, #20]
 800f9cc:	4648      	mov	r0, r9
 800f9ce:	f000 fe9d 	bl	801070c <_Bfree>
 800f9d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9d4:	1b1b      	subs	r3, r3, r4
 800f9d6:	f000 80b0 	beq.w	800fb3a <_dtoa_r+0x802>
 800f9da:	9905      	ldr	r1, [sp, #20]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	4648      	mov	r0, r9
 800f9e0:	f001 f84a 	bl	8010a78 <__pow5mult>
 800f9e4:	9001      	str	r0, [sp, #4]
 800f9e6:	2101      	movs	r1, #1
 800f9e8:	4648      	mov	r0, r9
 800f9ea:	f000 ff8d 	bl	8010908 <__i2b>
 800f9ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9f0:	4604      	mov	r4, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f000 81da 	beq.w	800fdac <_dtoa_r+0xa74>
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	4648      	mov	r0, r9
 800f9fe:	f001 f83b 	bl	8010a78 <__pow5mult>
 800fa02:	9b07      	ldr	r3, [sp, #28]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	4604      	mov	r4, r0
 800fa08:	f300 80a0 	bgt.w	800fb4c <_dtoa_r+0x814>
 800fa0c:	9b02      	ldr	r3, [sp, #8]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f040 8096 	bne.w	800fb40 <_dtoa_r+0x808>
 800fa14:	9b03      	ldr	r3, [sp, #12]
 800fa16:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fa1a:	2a00      	cmp	r2, #0
 800fa1c:	f040 8092 	bne.w	800fb44 <_dtoa_r+0x80c>
 800fa20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fa24:	0d12      	lsrs	r2, r2, #20
 800fa26:	0512      	lsls	r2, r2, #20
 800fa28:	2a00      	cmp	r2, #0
 800fa2a:	f000 808d 	beq.w	800fb48 <_dtoa_r+0x810>
 800fa2e:	9b04      	ldr	r3, [sp, #16]
 800fa30:	3301      	adds	r3, #1
 800fa32:	9304      	str	r3, [sp, #16]
 800fa34:	9b06      	ldr	r3, [sp, #24]
 800fa36:	3301      	adds	r3, #1
 800fa38:	9306      	str	r3, [sp, #24]
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f000 81b9 	beq.w	800fdb8 <_dtoa_r+0xa80>
 800fa46:	6922      	ldr	r2, [r4, #16]
 800fa48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fa4c:	6910      	ldr	r0, [r2, #16]
 800fa4e:	f000 ff0f 	bl	8010870 <__hi0bits>
 800fa52:	f1c0 0020 	rsb	r0, r0, #32
 800fa56:	9b06      	ldr	r3, [sp, #24]
 800fa58:	4418      	add	r0, r3
 800fa5a:	f010 001f 	ands.w	r0, r0, #31
 800fa5e:	f000 8081 	beq.w	800fb64 <_dtoa_r+0x82c>
 800fa62:	f1c0 0220 	rsb	r2, r0, #32
 800fa66:	2a04      	cmp	r2, #4
 800fa68:	dd73      	ble.n	800fb52 <_dtoa_r+0x81a>
 800fa6a:	9b04      	ldr	r3, [sp, #16]
 800fa6c:	f1c0 001c 	rsb	r0, r0, #28
 800fa70:	4403      	add	r3, r0
 800fa72:	9304      	str	r3, [sp, #16]
 800fa74:	9b06      	ldr	r3, [sp, #24]
 800fa76:	4406      	add	r6, r0
 800fa78:	4403      	add	r3, r0
 800fa7a:	9306      	str	r3, [sp, #24]
 800fa7c:	9b04      	ldr	r3, [sp, #16]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	dd05      	ble.n	800fa8e <_dtoa_r+0x756>
 800fa82:	9901      	ldr	r1, [sp, #4]
 800fa84:	461a      	mov	r2, r3
 800fa86:	4648      	mov	r0, r9
 800fa88:	f001 f850 	bl	8010b2c <__lshift>
 800fa8c:	9001      	str	r0, [sp, #4]
 800fa8e:	9b06      	ldr	r3, [sp, #24]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	dd05      	ble.n	800faa0 <_dtoa_r+0x768>
 800fa94:	4621      	mov	r1, r4
 800fa96:	461a      	mov	r2, r3
 800fa98:	4648      	mov	r0, r9
 800fa9a:	f001 f847 	bl	8010b2c <__lshift>
 800fa9e:	4604      	mov	r4, r0
 800faa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d060      	beq.n	800fb68 <_dtoa_r+0x830>
 800faa6:	9801      	ldr	r0, [sp, #4]
 800faa8:	4621      	mov	r1, r4
 800faaa:	f001 f8ab 	bl	8010c04 <__mcmp>
 800faae:	2800      	cmp	r0, #0
 800fab0:	da5a      	bge.n	800fb68 <_dtoa_r+0x830>
 800fab2:	f108 33ff 	add.w	r3, r8, #4294967295
 800fab6:	9305      	str	r3, [sp, #20]
 800fab8:	9901      	ldr	r1, [sp, #4]
 800faba:	2300      	movs	r3, #0
 800fabc:	220a      	movs	r2, #10
 800fabe:	4648      	mov	r0, r9
 800fac0:	f000 fe46 	bl	8010750 <__multadd>
 800fac4:	9b08      	ldr	r3, [sp, #32]
 800fac6:	9001      	str	r0, [sp, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f000 8177 	beq.w	800fdbc <_dtoa_r+0xa84>
 800face:	4629      	mov	r1, r5
 800fad0:	2300      	movs	r3, #0
 800fad2:	220a      	movs	r2, #10
 800fad4:	4648      	mov	r0, r9
 800fad6:	f000 fe3b 	bl	8010750 <__multadd>
 800fada:	f1bb 0f00 	cmp.w	fp, #0
 800fade:	4605      	mov	r5, r0
 800fae0:	dc6e      	bgt.n	800fbc0 <_dtoa_r+0x888>
 800fae2:	9b07      	ldr	r3, [sp, #28]
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	dc48      	bgt.n	800fb7a <_dtoa_r+0x842>
 800fae8:	e06a      	b.n	800fbc0 <_dtoa_r+0x888>
 800faea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800faec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800faf0:	e739      	b.n	800f966 <_dtoa_r+0x62e>
 800faf2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800faf6:	42a3      	cmp	r3, r4
 800faf8:	db07      	blt.n	800fb0a <_dtoa_r+0x7d2>
 800fafa:	f1ba 0f00 	cmp.w	sl, #0
 800fafe:	eba3 0404 	sub.w	r4, r3, r4
 800fb02:	db0b      	blt.n	800fb1c <_dtoa_r+0x7e4>
 800fb04:	9e04      	ldr	r6, [sp, #16]
 800fb06:	4652      	mov	r2, sl
 800fb08:	e72f      	b.n	800f96a <_dtoa_r+0x632>
 800fb0a:	1ae2      	subs	r2, r4, r3
 800fb0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb0e:	9e04      	ldr	r6, [sp, #16]
 800fb10:	4413      	add	r3, r2
 800fb12:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb14:	4652      	mov	r2, sl
 800fb16:	4623      	mov	r3, r4
 800fb18:	2400      	movs	r4, #0
 800fb1a:	e726      	b.n	800f96a <_dtoa_r+0x632>
 800fb1c:	9a04      	ldr	r2, [sp, #16]
 800fb1e:	eba2 060a 	sub.w	r6, r2, sl
 800fb22:	2200      	movs	r2, #0
 800fb24:	e721      	b.n	800f96a <_dtoa_r+0x632>
 800fb26:	9e04      	ldr	r6, [sp, #16]
 800fb28:	9d08      	ldr	r5, [sp, #32]
 800fb2a:	461c      	mov	r4, r3
 800fb2c:	e72a      	b.n	800f984 <_dtoa_r+0x64c>
 800fb2e:	9a01      	ldr	r2, [sp, #4]
 800fb30:	9205      	str	r2, [sp, #20]
 800fb32:	e752      	b.n	800f9da <_dtoa_r+0x6a2>
 800fb34:	9901      	ldr	r1, [sp, #4]
 800fb36:	461a      	mov	r2, r3
 800fb38:	e751      	b.n	800f9de <_dtoa_r+0x6a6>
 800fb3a:	9b05      	ldr	r3, [sp, #20]
 800fb3c:	9301      	str	r3, [sp, #4]
 800fb3e:	e752      	b.n	800f9e6 <_dtoa_r+0x6ae>
 800fb40:	2300      	movs	r3, #0
 800fb42:	e77b      	b.n	800fa3c <_dtoa_r+0x704>
 800fb44:	9b02      	ldr	r3, [sp, #8]
 800fb46:	e779      	b.n	800fa3c <_dtoa_r+0x704>
 800fb48:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fb4a:	e778      	b.n	800fa3e <_dtoa_r+0x706>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb50:	e779      	b.n	800fa46 <_dtoa_r+0x70e>
 800fb52:	d093      	beq.n	800fa7c <_dtoa_r+0x744>
 800fb54:	9b04      	ldr	r3, [sp, #16]
 800fb56:	321c      	adds	r2, #28
 800fb58:	4413      	add	r3, r2
 800fb5a:	9304      	str	r3, [sp, #16]
 800fb5c:	9b06      	ldr	r3, [sp, #24]
 800fb5e:	4416      	add	r6, r2
 800fb60:	4413      	add	r3, r2
 800fb62:	e78a      	b.n	800fa7a <_dtoa_r+0x742>
 800fb64:	4602      	mov	r2, r0
 800fb66:	e7f5      	b.n	800fb54 <_dtoa_r+0x81c>
 800fb68:	f1ba 0f00 	cmp.w	sl, #0
 800fb6c:	f8cd 8014 	str.w	r8, [sp, #20]
 800fb70:	46d3      	mov	fp, sl
 800fb72:	dc21      	bgt.n	800fbb8 <_dtoa_r+0x880>
 800fb74:	9b07      	ldr	r3, [sp, #28]
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	dd1e      	ble.n	800fbb8 <_dtoa_r+0x880>
 800fb7a:	f1bb 0f00 	cmp.w	fp, #0
 800fb7e:	f47f addc 	bne.w	800f73a <_dtoa_r+0x402>
 800fb82:	4621      	mov	r1, r4
 800fb84:	465b      	mov	r3, fp
 800fb86:	2205      	movs	r2, #5
 800fb88:	4648      	mov	r0, r9
 800fb8a:	f000 fde1 	bl	8010750 <__multadd>
 800fb8e:	4601      	mov	r1, r0
 800fb90:	4604      	mov	r4, r0
 800fb92:	9801      	ldr	r0, [sp, #4]
 800fb94:	f001 f836 	bl	8010c04 <__mcmp>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	f77f adce 	ble.w	800f73a <_dtoa_r+0x402>
 800fb9e:	463e      	mov	r6, r7
 800fba0:	2331      	movs	r3, #49	@ 0x31
 800fba2:	f806 3b01 	strb.w	r3, [r6], #1
 800fba6:	9b05      	ldr	r3, [sp, #20]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	9305      	str	r3, [sp, #20]
 800fbac:	e5c9      	b.n	800f742 <_dtoa_r+0x40a>
 800fbae:	f8cd 8014 	str.w	r8, [sp, #20]
 800fbb2:	4654      	mov	r4, sl
 800fbb4:	4625      	mov	r5, r4
 800fbb6:	e7f2      	b.n	800fb9e <_dtoa_r+0x866>
 800fbb8:	9b08      	ldr	r3, [sp, #32]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f000 8102 	beq.w	800fdc4 <_dtoa_r+0xa8c>
 800fbc0:	2e00      	cmp	r6, #0
 800fbc2:	dd05      	ble.n	800fbd0 <_dtoa_r+0x898>
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	4632      	mov	r2, r6
 800fbc8:	4648      	mov	r0, r9
 800fbca:	f000 ffaf 	bl	8010b2c <__lshift>
 800fbce:	4605      	mov	r5, r0
 800fbd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d058      	beq.n	800fc88 <_dtoa_r+0x950>
 800fbd6:	6869      	ldr	r1, [r5, #4]
 800fbd8:	4648      	mov	r0, r9
 800fbda:	f000 fd57 	bl	801068c <_Balloc>
 800fbde:	4606      	mov	r6, r0
 800fbe0:	b928      	cbnz	r0, 800fbee <_dtoa_r+0x8b6>
 800fbe2:	4b82      	ldr	r3, [pc, #520]	@ (800fdec <_dtoa_r+0xab4>)
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fbea:	f7ff bbbe 	b.w	800f36a <_dtoa_r+0x32>
 800fbee:	692a      	ldr	r2, [r5, #16]
 800fbf0:	3202      	adds	r2, #2
 800fbf2:	0092      	lsls	r2, r2, #2
 800fbf4:	f105 010c 	add.w	r1, r5, #12
 800fbf8:	300c      	adds	r0, #12
 800fbfa:	f7ff faf6 	bl	800f1ea <memcpy>
 800fbfe:	2201      	movs	r2, #1
 800fc00:	4631      	mov	r1, r6
 800fc02:	4648      	mov	r0, r9
 800fc04:	f000 ff92 	bl	8010b2c <__lshift>
 800fc08:	1c7b      	adds	r3, r7, #1
 800fc0a:	9304      	str	r3, [sp, #16]
 800fc0c:	eb07 030b 	add.w	r3, r7, fp
 800fc10:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc12:	9b02      	ldr	r3, [sp, #8]
 800fc14:	f003 0301 	and.w	r3, r3, #1
 800fc18:	46a8      	mov	r8, r5
 800fc1a:	9308      	str	r3, [sp, #32]
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	9b04      	ldr	r3, [sp, #16]
 800fc20:	9801      	ldr	r0, [sp, #4]
 800fc22:	4621      	mov	r1, r4
 800fc24:	f103 3bff 	add.w	fp, r3, #4294967295
 800fc28:	f7ff fafc 	bl	800f224 <quorem>
 800fc2c:	4641      	mov	r1, r8
 800fc2e:	9002      	str	r0, [sp, #8]
 800fc30:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fc34:	9801      	ldr	r0, [sp, #4]
 800fc36:	f000 ffe5 	bl	8010c04 <__mcmp>
 800fc3a:	462a      	mov	r2, r5
 800fc3c:	9006      	str	r0, [sp, #24]
 800fc3e:	4621      	mov	r1, r4
 800fc40:	4648      	mov	r0, r9
 800fc42:	f000 fffb 	bl	8010c3c <__mdiff>
 800fc46:	68c2      	ldr	r2, [r0, #12]
 800fc48:	4606      	mov	r6, r0
 800fc4a:	b9fa      	cbnz	r2, 800fc8c <_dtoa_r+0x954>
 800fc4c:	4601      	mov	r1, r0
 800fc4e:	9801      	ldr	r0, [sp, #4]
 800fc50:	f000 ffd8 	bl	8010c04 <__mcmp>
 800fc54:	4602      	mov	r2, r0
 800fc56:	4631      	mov	r1, r6
 800fc58:	4648      	mov	r0, r9
 800fc5a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fc5c:	f000 fd56 	bl	801070c <_Bfree>
 800fc60:	9b07      	ldr	r3, [sp, #28]
 800fc62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc64:	9e04      	ldr	r6, [sp, #16]
 800fc66:	ea42 0103 	orr.w	r1, r2, r3
 800fc6a:	9b08      	ldr	r3, [sp, #32]
 800fc6c:	4319      	orrs	r1, r3
 800fc6e:	d10f      	bne.n	800fc90 <_dtoa_r+0x958>
 800fc70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fc74:	d028      	beq.n	800fcc8 <_dtoa_r+0x990>
 800fc76:	9b06      	ldr	r3, [sp, #24]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	dd02      	ble.n	800fc82 <_dtoa_r+0x94a>
 800fc7c:	9b02      	ldr	r3, [sp, #8]
 800fc7e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fc82:	f88b a000 	strb.w	sl, [fp]
 800fc86:	e55e      	b.n	800f746 <_dtoa_r+0x40e>
 800fc88:	4628      	mov	r0, r5
 800fc8a:	e7bd      	b.n	800fc08 <_dtoa_r+0x8d0>
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	e7e2      	b.n	800fc56 <_dtoa_r+0x91e>
 800fc90:	9b06      	ldr	r3, [sp, #24]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	db04      	blt.n	800fca0 <_dtoa_r+0x968>
 800fc96:	9907      	ldr	r1, [sp, #28]
 800fc98:	430b      	orrs	r3, r1
 800fc9a:	9908      	ldr	r1, [sp, #32]
 800fc9c:	430b      	orrs	r3, r1
 800fc9e:	d120      	bne.n	800fce2 <_dtoa_r+0x9aa>
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	ddee      	ble.n	800fc82 <_dtoa_r+0x94a>
 800fca4:	9901      	ldr	r1, [sp, #4]
 800fca6:	2201      	movs	r2, #1
 800fca8:	4648      	mov	r0, r9
 800fcaa:	f000 ff3f 	bl	8010b2c <__lshift>
 800fcae:	4621      	mov	r1, r4
 800fcb0:	9001      	str	r0, [sp, #4]
 800fcb2:	f000 ffa7 	bl	8010c04 <__mcmp>
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	dc03      	bgt.n	800fcc2 <_dtoa_r+0x98a>
 800fcba:	d1e2      	bne.n	800fc82 <_dtoa_r+0x94a>
 800fcbc:	f01a 0f01 	tst.w	sl, #1
 800fcc0:	d0df      	beq.n	800fc82 <_dtoa_r+0x94a>
 800fcc2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fcc6:	d1d9      	bne.n	800fc7c <_dtoa_r+0x944>
 800fcc8:	2339      	movs	r3, #57	@ 0x39
 800fcca:	f88b 3000 	strb.w	r3, [fp]
 800fcce:	4633      	mov	r3, r6
 800fcd0:	461e      	mov	r6, r3
 800fcd2:	3b01      	subs	r3, #1
 800fcd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fcd8:	2a39      	cmp	r2, #57	@ 0x39
 800fcda:	d052      	beq.n	800fd82 <_dtoa_r+0xa4a>
 800fcdc:	3201      	adds	r2, #1
 800fcde:	701a      	strb	r2, [r3, #0]
 800fce0:	e531      	b.n	800f746 <_dtoa_r+0x40e>
 800fce2:	2a00      	cmp	r2, #0
 800fce4:	dd07      	ble.n	800fcf6 <_dtoa_r+0x9be>
 800fce6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fcea:	d0ed      	beq.n	800fcc8 <_dtoa_r+0x990>
 800fcec:	f10a 0301 	add.w	r3, sl, #1
 800fcf0:	f88b 3000 	strb.w	r3, [fp]
 800fcf4:	e527      	b.n	800f746 <_dtoa_r+0x40e>
 800fcf6:	9b04      	ldr	r3, [sp, #16]
 800fcf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fcfa:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d029      	beq.n	800fd56 <_dtoa_r+0xa1e>
 800fd02:	9901      	ldr	r1, [sp, #4]
 800fd04:	2300      	movs	r3, #0
 800fd06:	220a      	movs	r2, #10
 800fd08:	4648      	mov	r0, r9
 800fd0a:	f000 fd21 	bl	8010750 <__multadd>
 800fd0e:	45a8      	cmp	r8, r5
 800fd10:	9001      	str	r0, [sp, #4]
 800fd12:	f04f 0300 	mov.w	r3, #0
 800fd16:	f04f 020a 	mov.w	r2, #10
 800fd1a:	4641      	mov	r1, r8
 800fd1c:	4648      	mov	r0, r9
 800fd1e:	d107      	bne.n	800fd30 <_dtoa_r+0x9f8>
 800fd20:	f000 fd16 	bl	8010750 <__multadd>
 800fd24:	4680      	mov	r8, r0
 800fd26:	4605      	mov	r5, r0
 800fd28:	9b04      	ldr	r3, [sp, #16]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	9304      	str	r3, [sp, #16]
 800fd2e:	e776      	b.n	800fc1e <_dtoa_r+0x8e6>
 800fd30:	f000 fd0e 	bl	8010750 <__multadd>
 800fd34:	4629      	mov	r1, r5
 800fd36:	4680      	mov	r8, r0
 800fd38:	2300      	movs	r3, #0
 800fd3a:	220a      	movs	r2, #10
 800fd3c:	4648      	mov	r0, r9
 800fd3e:	f000 fd07 	bl	8010750 <__multadd>
 800fd42:	4605      	mov	r5, r0
 800fd44:	e7f0      	b.n	800fd28 <_dtoa_r+0x9f0>
 800fd46:	f1bb 0f00 	cmp.w	fp, #0
 800fd4a:	bfcc      	ite	gt
 800fd4c:	465e      	movgt	r6, fp
 800fd4e:	2601      	movle	r6, #1
 800fd50:	443e      	add	r6, r7
 800fd52:	f04f 0800 	mov.w	r8, #0
 800fd56:	9901      	ldr	r1, [sp, #4]
 800fd58:	2201      	movs	r2, #1
 800fd5a:	4648      	mov	r0, r9
 800fd5c:	f000 fee6 	bl	8010b2c <__lshift>
 800fd60:	4621      	mov	r1, r4
 800fd62:	9001      	str	r0, [sp, #4]
 800fd64:	f000 ff4e 	bl	8010c04 <__mcmp>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	dcb0      	bgt.n	800fcce <_dtoa_r+0x996>
 800fd6c:	d102      	bne.n	800fd74 <_dtoa_r+0xa3c>
 800fd6e:	f01a 0f01 	tst.w	sl, #1
 800fd72:	d1ac      	bne.n	800fcce <_dtoa_r+0x996>
 800fd74:	4633      	mov	r3, r6
 800fd76:	461e      	mov	r6, r3
 800fd78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd7c:	2a30      	cmp	r2, #48	@ 0x30
 800fd7e:	d0fa      	beq.n	800fd76 <_dtoa_r+0xa3e>
 800fd80:	e4e1      	b.n	800f746 <_dtoa_r+0x40e>
 800fd82:	429f      	cmp	r7, r3
 800fd84:	d1a4      	bne.n	800fcd0 <_dtoa_r+0x998>
 800fd86:	9b05      	ldr	r3, [sp, #20]
 800fd88:	3301      	adds	r3, #1
 800fd8a:	9305      	str	r3, [sp, #20]
 800fd8c:	2331      	movs	r3, #49	@ 0x31
 800fd8e:	703b      	strb	r3, [r7, #0]
 800fd90:	e4d9      	b.n	800f746 <_dtoa_r+0x40e>
 800fd92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd94:	4f16      	ldr	r7, [pc, #88]	@ (800fdf0 <_dtoa_r+0xab8>)
 800fd96:	b11b      	cbz	r3, 800fda0 <_dtoa_r+0xa68>
 800fd98:	f107 0308 	add.w	r3, r7, #8
 800fd9c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fd9e:	6013      	str	r3, [r2, #0]
 800fda0:	4638      	mov	r0, r7
 800fda2:	b011      	add	sp, #68	@ 0x44
 800fda4:	ecbd 8b02 	vpop	{d8}
 800fda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdac:	9b07      	ldr	r3, [sp, #28]
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	f77f ae2c 	ble.w	800fa0c <_dtoa_r+0x6d4>
 800fdb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdb8:	2001      	movs	r0, #1
 800fdba:	e64c      	b.n	800fa56 <_dtoa_r+0x71e>
 800fdbc:	f1bb 0f00 	cmp.w	fp, #0
 800fdc0:	f77f aed8 	ble.w	800fb74 <_dtoa_r+0x83c>
 800fdc4:	463e      	mov	r6, r7
 800fdc6:	9801      	ldr	r0, [sp, #4]
 800fdc8:	4621      	mov	r1, r4
 800fdca:	f7ff fa2b 	bl	800f224 <quorem>
 800fdce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fdd2:	f806 ab01 	strb.w	sl, [r6], #1
 800fdd6:	1bf2      	subs	r2, r6, r7
 800fdd8:	4593      	cmp	fp, r2
 800fdda:	ddb4      	ble.n	800fd46 <_dtoa_r+0xa0e>
 800fddc:	9901      	ldr	r1, [sp, #4]
 800fdde:	2300      	movs	r3, #0
 800fde0:	220a      	movs	r2, #10
 800fde2:	4648      	mov	r0, r9
 800fde4:	f000 fcb4 	bl	8010750 <__multadd>
 800fde8:	9001      	str	r0, [sp, #4]
 800fdea:	e7ec      	b.n	800fdc6 <_dtoa_r+0xa8e>
 800fdec:	080117b2 	.word	0x080117b2
 800fdf0:	08011736 	.word	0x08011736

0800fdf4 <_free_r>:
 800fdf4:	b538      	push	{r3, r4, r5, lr}
 800fdf6:	4605      	mov	r5, r0
 800fdf8:	2900      	cmp	r1, #0
 800fdfa:	d041      	beq.n	800fe80 <_free_r+0x8c>
 800fdfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe00:	1f0c      	subs	r4, r1, #4
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	bfb8      	it	lt
 800fe06:	18e4      	addlt	r4, r4, r3
 800fe08:	f000 fc34 	bl	8010674 <__malloc_lock>
 800fe0c:	4a1d      	ldr	r2, [pc, #116]	@ (800fe84 <_free_r+0x90>)
 800fe0e:	6813      	ldr	r3, [r2, #0]
 800fe10:	b933      	cbnz	r3, 800fe20 <_free_r+0x2c>
 800fe12:	6063      	str	r3, [r4, #4]
 800fe14:	6014      	str	r4, [r2, #0]
 800fe16:	4628      	mov	r0, r5
 800fe18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe1c:	f000 bc30 	b.w	8010680 <__malloc_unlock>
 800fe20:	42a3      	cmp	r3, r4
 800fe22:	d908      	bls.n	800fe36 <_free_r+0x42>
 800fe24:	6820      	ldr	r0, [r4, #0]
 800fe26:	1821      	adds	r1, r4, r0
 800fe28:	428b      	cmp	r3, r1
 800fe2a:	bf01      	itttt	eq
 800fe2c:	6819      	ldreq	r1, [r3, #0]
 800fe2e:	685b      	ldreq	r3, [r3, #4]
 800fe30:	1809      	addeq	r1, r1, r0
 800fe32:	6021      	streq	r1, [r4, #0]
 800fe34:	e7ed      	b.n	800fe12 <_free_r+0x1e>
 800fe36:	461a      	mov	r2, r3
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	b10b      	cbz	r3, 800fe40 <_free_r+0x4c>
 800fe3c:	42a3      	cmp	r3, r4
 800fe3e:	d9fa      	bls.n	800fe36 <_free_r+0x42>
 800fe40:	6811      	ldr	r1, [r2, #0]
 800fe42:	1850      	adds	r0, r2, r1
 800fe44:	42a0      	cmp	r0, r4
 800fe46:	d10b      	bne.n	800fe60 <_free_r+0x6c>
 800fe48:	6820      	ldr	r0, [r4, #0]
 800fe4a:	4401      	add	r1, r0
 800fe4c:	1850      	adds	r0, r2, r1
 800fe4e:	4283      	cmp	r3, r0
 800fe50:	6011      	str	r1, [r2, #0]
 800fe52:	d1e0      	bne.n	800fe16 <_free_r+0x22>
 800fe54:	6818      	ldr	r0, [r3, #0]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	6053      	str	r3, [r2, #4]
 800fe5a:	4408      	add	r0, r1
 800fe5c:	6010      	str	r0, [r2, #0]
 800fe5e:	e7da      	b.n	800fe16 <_free_r+0x22>
 800fe60:	d902      	bls.n	800fe68 <_free_r+0x74>
 800fe62:	230c      	movs	r3, #12
 800fe64:	602b      	str	r3, [r5, #0]
 800fe66:	e7d6      	b.n	800fe16 <_free_r+0x22>
 800fe68:	6820      	ldr	r0, [r4, #0]
 800fe6a:	1821      	adds	r1, r4, r0
 800fe6c:	428b      	cmp	r3, r1
 800fe6e:	bf04      	itt	eq
 800fe70:	6819      	ldreq	r1, [r3, #0]
 800fe72:	685b      	ldreq	r3, [r3, #4]
 800fe74:	6063      	str	r3, [r4, #4]
 800fe76:	bf04      	itt	eq
 800fe78:	1809      	addeq	r1, r1, r0
 800fe7a:	6021      	streq	r1, [r4, #0]
 800fe7c:	6054      	str	r4, [r2, #4]
 800fe7e:	e7ca      	b.n	800fe16 <_free_r+0x22>
 800fe80:	bd38      	pop	{r3, r4, r5, pc}
 800fe82:	bf00      	nop
 800fe84:	24003984 	.word	0x24003984

0800fe88 <rshift>:
 800fe88:	6903      	ldr	r3, [r0, #16]
 800fe8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fe8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fe96:	f100 0414 	add.w	r4, r0, #20
 800fe9a:	dd45      	ble.n	800ff28 <rshift+0xa0>
 800fe9c:	f011 011f 	ands.w	r1, r1, #31
 800fea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fea8:	d10c      	bne.n	800fec4 <rshift+0x3c>
 800feaa:	f100 0710 	add.w	r7, r0, #16
 800feae:	4629      	mov	r1, r5
 800feb0:	42b1      	cmp	r1, r6
 800feb2:	d334      	bcc.n	800ff1e <rshift+0x96>
 800feb4:	1a9b      	subs	r3, r3, r2
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	1eea      	subs	r2, r5, #3
 800feba:	4296      	cmp	r6, r2
 800febc:	bf38      	it	cc
 800febe:	2300      	movcc	r3, #0
 800fec0:	4423      	add	r3, r4
 800fec2:	e015      	b.n	800fef0 <rshift+0x68>
 800fec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fec8:	f1c1 0820 	rsb	r8, r1, #32
 800fecc:	40cf      	lsrs	r7, r1
 800fece:	f105 0e04 	add.w	lr, r5, #4
 800fed2:	46a1      	mov	r9, r4
 800fed4:	4576      	cmp	r6, lr
 800fed6:	46f4      	mov	ip, lr
 800fed8:	d815      	bhi.n	800ff06 <rshift+0x7e>
 800feda:	1a9a      	subs	r2, r3, r2
 800fedc:	0092      	lsls	r2, r2, #2
 800fede:	3a04      	subs	r2, #4
 800fee0:	3501      	adds	r5, #1
 800fee2:	42ae      	cmp	r6, r5
 800fee4:	bf38      	it	cc
 800fee6:	2200      	movcc	r2, #0
 800fee8:	18a3      	adds	r3, r4, r2
 800feea:	50a7      	str	r7, [r4, r2]
 800feec:	b107      	cbz	r7, 800fef0 <rshift+0x68>
 800feee:	3304      	adds	r3, #4
 800fef0:	1b1a      	subs	r2, r3, r4
 800fef2:	42a3      	cmp	r3, r4
 800fef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fef8:	bf08      	it	eq
 800fefa:	2300      	moveq	r3, #0
 800fefc:	6102      	str	r2, [r0, #16]
 800fefe:	bf08      	it	eq
 800ff00:	6143      	streq	r3, [r0, #20]
 800ff02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff06:	f8dc c000 	ldr.w	ip, [ip]
 800ff0a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff0e:	ea4c 0707 	orr.w	r7, ip, r7
 800ff12:	f849 7b04 	str.w	r7, [r9], #4
 800ff16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff1a:	40cf      	lsrs	r7, r1
 800ff1c:	e7da      	b.n	800fed4 <rshift+0x4c>
 800ff1e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ff22:	f847 cf04 	str.w	ip, [r7, #4]!
 800ff26:	e7c3      	b.n	800feb0 <rshift+0x28>
 800ff28:	4623      	mov	r3, r4
 800ff2a:	e7e1      	b.n	800fef0 <rshift+0x68>

0800ff2c <__hexdig_fun>:
 800ff2c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ff30:	2b09      	cmp	r3, #9
 800ff32:	d802      	bhi.n	800ff3a <__hexdig_fun+0xe>
 800ff34:	3820      	subs	r0, #32
 800ff36:	b2c0      	uxtb	r0, r0
 800ff38:	4770      	bx	lr
 800ff3a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ff3e:	2b05      	cmp	r3, #5
 800ff40:	d801      	bhi.n	800ff46 <__hexdig_fun+0x1a>
 800ff42:	3847      	subs	r0, #71	@ 0x47
 800ff44:	e7f7      	b.n	800ff36 <__hexdig_fun+0xa>
 800ff46:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ff4a:	2b05      	cmp	r3, #5
 800ff4c:	d801      	bhi.n	800ff52 <__hexdig_fun+0x26>
 800ff4e:	3827      	subs	r0, #39	@ 0x27
 800ff50:	e7f1      	b.n	800ff36 <__hexdig_fun+0xa>
 800ff52:	2000      	movs	r0, #0
 800ff54:	4770      	bx	lr
	...

0800ff58 <__gethex>:
 800ff58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	468a      	mov	sl, r1
 800ff60:	9302      	str	r3, [sp, #8]
 800ff62:	680b      	ldr	r3, [r1, #0]
 800ff64:	9001      	str	r0, [sp, #4]
 800ff66:	4690      	mov	r8, r2
 800ff68:	1c9c      	adds	r4, r3, #2
 800ff6a:	46a1      	mov	r9, r4
 800ff6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ff70:	2830      	cmp	r0, #48	@ 0x30
 800ff72:	d0fa      	beq.n	800ff6a <__gethex+0x12>
 800ff74:	eba9 0303 	sub.w	r3, r9, r3
 800ff78:	f1a3 0b02 	sub.w	fp, r3, #2
 800ff7c:	f7ff ffd6 	bl	800ff2c <__hexdig_fun>
 800ff80:	4605      	mov	r5, r0
 800ff82:	2800      	cmp	r0, #0
 800ff84:	d168      	bne.n	8010058 <__gethex+0x100>
 800ff86:	49a0      	ldr	r1, [pc, #640]	@ (8010208 <__gethex+0x2b0>)
 800ff88:	2201      	movs	r2, #1
 800ff8a:	4648      	mov	r0, r9
 800ff8c:	f7ff f89c 	bl	800f0c8 <strncmp>
 800ff90:	4607      	mov	r7, r0
 800ff92:	2800      	cmp	r0, #0
 800ff94:	d167      	bne.n	8010066 <__gethex+0x10e>
 800ff96:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ff9a:	4626      	mov	r6, r4
 800ff9c:	f7ff ffc6 	bl	800ff2c <__hexdig_fun>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d062      	beq.n	801006a <__gethex+0x112>
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	7818      	ldrb	r0, [r3, #0]
 800ffa8:	2830      	cmp	r0, #48	@ 0x30
 800ffaa:	4699      	mov	r9, r3
 800ffac:	f103 0301 	add.w	r3, r3, #1
 800ffb0:	d0f9      	beq.n	800ffa6 <__gethex+0x4e>
 800ffb2:	f7ff ffbb 	bl	800ff2c <__hexdig_fun>
 800ffb6:	fab0 f580 	clz	r5, r0
 800ffba:	096d      	lsrs	r5, r5, #5
 800ffbc:	f04f 0b01 	mov.w	fp, #1
 800ffc0:	464a      	mov	r2, r9
 800ffc2:	4616      	mov	r6, r2
 800ffc4:	3201      	adds	r2, #1
 800ffc6:	7830      	ldrb	r0, [r6, #0]
 800ffc8:	f7ff ffb0 	bl	800ff2c <__hexdig_fun>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d1f8      	bne.n	800ffc2 <__gethex+0x6a>
 800ffd0:	498d      	ldr	r1, [pc, #564]	@ (8010208 <__gethex+0x2b0>)
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	f7ff f877 	bl	800f0c8 <strncmp>
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	d13f      	bne.n	801005e <__gethex+0x106>
 800ffde:	b944      	cbnz	r4, 800fff2 <__gethex+0x9a>
 800ffe0:	1c74      	adds	r4, r6, #1
 800ffe2:	4622      	mov	r2, r4
 800ffe4:	4616      	mov	r6, r2
 800ffe6:	3201      	adds	r2, #1
 800ffe8:	7830      	ldrb	r0, [r6, #0]
 800ffea:	f7ff ff9f 	bl	800ff2c <__hexdig_fun>
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d1f8      	bne.n	800ffe4 <__gethex+0x8c>
 800fff2:	1ba4      	subs	r4, r4, r6
 800fff4:	00a7      	lsls	r7, r4, #2
 800fff6:	7833      	ldrb	r3, [r6, #0]
 800fff8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fffc:	2b50      	cmp	r3, #80	@ 0x50
 800fffe:	d13e      	bne.n	801007e <__gethex+0x126>
 8010000:	7873      	ldrb	r3, [r6, #1]
 8010002:	2b2b      	cmp	r3, #43	@ 0x2b
 8010004:	d033      	beq.n	801006e <__gethex+0x116>
 8010006:	2b2d      	cmp	r3, #45	@ 0x2d
 8010008:	d034      	beq.n	8010074 <__gethex+0x11c>
 801000a:	1c71      	adds	r1, r6, #1
 801000c:	2400      	movs	r4, #0
 801000e:	7808      	ldrb	r0, [r1, #0]
 8010010:	f7ff ff8c 	bl	800ff2c <__hexdig_fun>
 8010014:	1e43      	subs	r3, r0, #1
 8010016:	b2db      	uxtb	r3, r3
 8010018:	2b18      	cmp	r3, #24
 801001a:	d830      	bhi.n	801007e <__gethex+0x126>
 801001c:	f1a0 0210 	sub.w	r2, r0, #16
 8010020:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010024:	f7ff ff82 	bl	800ff2c <__hexdig_fun>
 8010028:	f100 3cff 	add.w	ip, r0, #4294967295
 801002c:	fa5f fc8c 	uxtb.w	ip, ip
 8010030:	f1bc 0f18 	cmp.w	ip, #24
 8010034:	f04f 030a 	mov.w	r3, #10
 8010038:	d91e      	bls.n	8010078 <__gethex+0x120>
 801003a:	b104      	cbz	r4, 801003e <__gethex+0xe6>
 801003c:	4252      	negs	r2, r2
 801003e:	4417      	add	r7, r2
 8010040:	f8ca 1000 	str.w	r1, [sl]
 8010044:	b1ed      	cbz	r5, 8010082 <__gethex+0x12a>
 8010046:	f1bb 0f00 	cmp.w	fp, #0
 801004a:	bf0c      	ite	eq
 801004c:	2506      	moveq	r5, #6
 801004e:	2500      	movne	r5, #0
 8010050:	4628      	mov	r0, r5
 8010052:	b005      	add	sp, #20
 8010054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010058:	2500      	movs	r5, #0
 801005a:	462c      	mov	r4, r5
 801005c:	e7b0      	b.n	800ffc0 <__gethex+0x68>
 801005e:	2c00      	cmp	r4, #0
 8010060:	d1c7      	bne.n	800fff2 <__gethex+0x9a>
 8010062:	4627      	mov	r7, r4
 8010064:	e7c7      	b.n	800fff6 <__gethex+0x9e>
 8010066:	464e      	mov	r6, r9
 8010068:	462f      	mov	r7, r5
 801006a:	2501      	movs	r5, #1
 801006c:	e7c3      	b.n	800fff6 <__gethex+0x9e>
 801006e:	2400      	movs	r4, #0
 8010070:	1cb1      	adds	r1, r6, #2
 8010072:	e7cc      	b.n	801000e <__gethex+0xb6>
 8010074:	2401      	movs	r4, #1
 8010076:	e7fb      	b.n	8010070 <__gethex+0x118>
 8010078:	fb03 0002 	mla	r0, r3, r2, r0
 801007c:	e7ce      	b.n	801001c <__gethex+0xc4>
 801007e:	4631      	mov	r1, r6
 8010080:	e7de      	b.n	8010040 <__gethex+0xe8>
 8010082:	eba6 0309 	sub.w	r3, r6, r9
 8010086:	3b01      	subs	r3, #1
 8010088:	4629      	mov	r1, r5
 801008a:	2b07      	cmp	r3, #7
 801008c:	dc0a      	bgt.n	80100a4 <__gethex+0x14c>
 801008e:	9801      	ldr	r0, [sp, #4]
 8010090:	f000 fafc 	bl	801068c <_Balloc>
 8010094:	4604      	mov	r4, r0
 8010096:	b940      	cbnz	r0, 80100aa <__gethex+0x152>
 8010098:	4b5c      	ldr	r3, [pc, #368]	@ (801020c <__gethex+0x2b4>)
 801009a:	4602      	mov	r2, r0
 801009c:	21e4      	movs	r1, #228	@ 0xe4
 801009e:	485c      	ldr	r0, [pc, #368]	@ (8010210 <__gethex+0x2b8>)
 80100a0:	f001 fa2a 	bl	80114f8 <__assert_func>
 80100a4:	3101      	adds	r1, #1
 80100a6:	105b      	asrs	r3, r3, #1
 80100a8:	e7ef      	b.n	801008a <__gethex+0x132>
 80100aa:	f100 0a14 	add.w	sl, r0, #20
 80100ae:	2300      	movs	r3, #0
 80100b0:	4655      	mov	r5, sl
 80100b2:	469b      	mov	fp, r3
 80100b4:	45b1      	cmp	r9, r6
 80100b6:	d337      	bcc.n	8010128 <__gethex+0x1d0>
 80100b8:	f845 bb04 	str.w	fp, [r5], #4
 80100bc:	eba5 050a 	sub.w	r5, r5, sl
 80100c0:	10ad      	asrs	r5, r5, #2
 80100c2:	6125      	str	r5, [r4, #16]
 80100c4:	4658      	mov	r0, fp
 80100c6:	f000 fbd3 	bl	8010870 <__hi0bits>
 80100ca:	016d      	lsls	r5, r5, #5
 80100cc:	f8d8 6000 	ldr.w	r6, [r8]
 80100d0:	1a2d      	subs	r5, r5, r0
 80100d2:	42b5      	cmp	r5, r6
 80100d4:	dd54      	ble.n	8010180 <__gethex+0x228>
 80100d6:	1bad      	subs	r5, r5, r6
 80100d8:	4629      	mov	r1, r5
 80100da:	4620      	mov	r0, r4
 80100dc:	f000 ff5c 	bl	8010f98 <__any_on>
 80100e0:	4681      	mov	r9, r0
 80100e2:	b178      	cbz	r0, 8010104 <__gethex+0x1ac>
 80100e4:	1e6b      	subs	r3, r5, #1
 80100e6:	1159      	asrs	r1, r3, #5
 80100e8:	f003 021f 	and.w	r2, r3, #31
 80100ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80100f0:	f04f 0901 	mov.w	r9, #1
 80100f4:	fa09 f202 	lsl.w	r2, r9, r2
 80100f8:	420a      	tst	r2, r1
 80100fa:	d003      	beq.n	8010104 <__gethex+0x1ac>
 80100fc:	454b      	cmp	r3, r9
 80100fe:	dc36      	bgt.n	801016e <__gethex+0x216>
 8010100:	f04f 0902 	mov.w	r9, #2
 8010104:	4629      	mov	r1, r5
 8010106:	4620      	mov	r0, r4
 8010108:	f7ff febe 	bl	800fe88 <rshift>
 801010c:	442f      	add	r7, r5
 801010e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010112:	42bb      	cmp	r3, r7
 8010114:	da42      	bge.n	801019c <__gethex+0x244>
 8010116:	9801      	ldr	r0, [sp, #4]
 8010118:	4621      	mov	r1, r4
 801011a:	f000 faf7 	bl	801070c <_Bfree>
 801011e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010120:	2300      	movs	r3, #0
 8010122:	6013      	str	r3, [r2, #0]
 8010124:	25a3      	movs	r5, #163	@ 0xa3
 8010126:	e793      	b.n	8010050 <__gethex+0xf8>
 8010128:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801012c:	2a2e      	cmp	r2, #46	@ 0x2e
 801012e:	d012      	beq.n	8010156 <__gethex+0x1fe>
 8010130:	2b20      	cmp	r3, #32
 8010132:	d104      	bne.n	801013e <__gethex+0x1e6>
 8010134:	f845 bb04 	str.w	fp, [r5], #4
 8010138:	f04f 0b00 	mov.w	fp, #0
 801013c:	465b      	mov	r3, fp
 801013e:	7830      	ldrb	r0, [r6, #0]
 8010140:	9303      	str	r3, [sp, #12]
 8010142:	f7ff fef3 	bl	800ff2c <__hexdig_fun>
 8010146:	9b03      	ldr	r3, [sp, #12]
 8010148:	f000 000f 	and.w	r0, r0, #15
 801014c:	4098      	lsls	r0, r3
 801014e:	ea4b 0b00 	orr.w	fp, fp, r0
 8010152:	3304      	adds	r3, #4
 8010154:	e7ae      	b.n	80100b4 <__gethex+0x15c>
 8010156:	45b1      	cmp	r9, r6
 8010158:	d8ea      	bhi.n	8010130 <__gethex+0x1d8>
 801015a:	492b      	ldr	r1, [pc, #172]	@ (8010208 <__gethex+0x2b0>)
 801015c:	9303      	str	r3, [sp, #12]
 801015e:	2201      	movs	r2, #1
 8010160:	4630      	mov	r0, r6
 8010162:	f7fe ffb1 	bl	800f0c8 <strncmp>
 8010166:	9b03      	ldr	r3, [sp, #12]
 8010168:	2800      	cmp	r0, #0
 801016a:	d1e1      	bne.n	8010130 <__gethex+0x1d8>
 801016c:	e7a2      	b.n	80100b4 <__gethex+0x15c>
 801016e:	1ea9      	subs	r1, r5, #2
 8010170:	4620      	mov	r0, r4
 8010172:	f000 ff11 	bl	8010f98 <__any_on>
 8010176:	2800      	cmp	r0, #0
 8010178:	d0c2      	beq.n	8010100 <__gethex+0x1a8>
 801017a:	f04f 0903 	mov.w	r9, #3
 801017e:	e7c1      	b.n	8010104 <__gethex+0x1ac>
 8010180:	da09      	bge.n	8010196 <__gethex+0x23e>
 8010182:	1b75      	subs	r5, r6, r5
 8010184:	4621      	mov	r1, r4
 8010186:	9801      	ldr	r0, [sp, #4]
 8010188:	462a      	mov	r2, r5
 801018a:	f000 fccf 	bl	8010b2c <__lshift>
 801018e:	1b7f      	subs	r7, r7, r5
 8010190:	4604      	mov	r4, r0
 8010192:	f100 0a14 	add.w	sl, r0, #20
 8010196:	f04f 0900 	mov.w	r9, #0
 801019a:	e7b8      	b.n	801010e <__gethex+0x1b6>
 801019c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80101a0:	42bd      	cmp	r5, r7
 80101a2:	dd6f      	ble.n	8010284 <__gethex+0x32c>
 80101a4:	1bed      	subs	r5, r5, r7
 80101a6:	42ae      	cmp	r6, r5
 80101a8:	dc34      	bgt.n	8010214 <__gethex+0x2bc>
 80101aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101ae:	2b02      	cmp	r3, #2
 80101b0:	d022      	beq.n	80101f8 <__gethex+0x2a0>
 80101b2:	2b03      	cmp	r3, #3
 80101b4:	d024      	beq.n	8010200 <__gethex+0x2a8>
 80101b6:	2b01      	cmp	r3, #1
 80101b8:	d115      	bne.n	80101e6 <__gethex+0x28e>
 80101ba:	42ae      	cmp	r6, r5
 80101bc:	d113      	bne.n	80101e6 <__gethex+0x28e>
 80101be:	2e01      	cmp	r6, #1
 80101c0:	d10b      	bne.n	80101da <__gethex+0x282>
 80101c2:	9a02      	ldr	r2, [sp, #8]
 80101c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101c8:	6013      	str	r3, [r2, #0]
 80101ca:	2301      	movs	r3, #1
 80101cc:	6123      	str	r3, [r4, #16]
 80101ce:	f8ca 3000 	str.w	r3, [sl]
 80101d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101d4:	2562      	movs	r5, #98	@ 0x62
 80101d6:	601c      	str	r4, [r3, #0]
 80101d8:	e73a      	b.n	8010050 <__gethex+0xf8>
 80101da:	1e71      	subs	r1, r6, #1
 80101dc:	4620      	mov	r0, r4
 80101de:	f000 fedb 	bl	8010f98 <__any_on>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d1ed      	bne.n	80101c2 <__gethex+0x26a>
 80101e6:	9801      	ldr	r0, [sp, #4]
 80101e8:	4621      	mov	r1, r4
 80101ea:	f000 fa8f 	bl	801070c <_Bfree>
 80101ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101f0:	2300      	movs	r3, #0
 80101f2:	6013      	str	r3, [r2, #0]
 80101f4:	2550      	movs	r5, #80	@ 0x50
 80101f6:	e72b      	b.n	8010050 <__gethex+0xf8>
 80101f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d1f3      	bne.n	80101e6 <__gethex+0x28e>
 80101fe:	e7e0      	b.n	80101c2 <__gethex+0x26a>
 8010200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1dd      	bne.n	80101c2 <__gethex+0x26a>
 8010206:	e7ee      	b.n	80101e6 <__gethex+0x28e>
 8010208:	080116f8 	.word	0x080116f8
 801020c:	080117b2 	.word	0x080117b2
 8010210:	080117c3 	.word	0x080117c3
 8010214:	1e6f      	subs	r7, r5, #1
 8010216:	f1b9 0f00 	cmp.w	r9, #0
 801021a:	d130      	bne.n	801027e <__gethex+0x326>
 801021c:	b127      	cbz	r7, 8010228 <__gethex+0x2d0>
 801021e:	4639      	mov	r1, r7
 8010220:	4620      	mov	r0, r4
 8010222:	f000 feb9 	bl	8010f98 <__any_on>
 8010226:	4681      	mov	r9, r0
 8010228:	117a      	asrs	r2, r7, #5
 801022a:	2301      	movs	r3, #1
 801022c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010230:	f007 071f 	and.w	r7, r7, #31
 8010234:	40bb      	lsls	r3, r7
 8010236:	4213      	tst	r3, r2
 8010238:	4629      	mov	r1, r5
 801023a:	4620      	mov	r0, r4
 801023c:	bf18      	it	ne
 801023e:	f049 0902 	orrne.w	r9, r9, #2
 8010242:	f7ff fe21 	bl	800fe88 <rshift>
 8010246:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801024a:	1b76      	subs	r6, r6, r5
 801024c:	2502      	movs	r5, #2
 801024e:	f1b9 0f00 	cmp.w	r9, #0
 8010252:	d047      	beq.n	80102e4 <__gethex+0x38c>
 8010254:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010258:	2b02      	cmp	r3, #2
 801025a:	d015      	beq.n	8010288 <__gethex+0x330>
 801025c:	2b03      	cmp	r3, #3
 801025e:	d017      	beq.n	8010290 <__gethex+0x338>
 8010260:	2b01      	cmp	r3, #1
 8010262:	d109      	bne.n	8010278 <__gethex+0x320>
 8010264:	f019 0f02 	tst.w	r9, #2
 8010268:	d006      	beq.n	8010278 <__gethex+0x320>
 801026a:	f8da 3000 	ldr.w	r3, [sl]
 801026e:	ea49 0903 	orr.w	r9, r9, r3
 8010272:	f019 0f01 	tst.w	r9, #1
 8010276:	d10e      	bne.n	8010296 <__gethex+0x33e>
 8010278:	f045 0510 	orr.w	r5, r5, #16
 801027c:	e032      	b.n	80102e4 <__gethex+0x38c>
 801027e:	f04f 0901 	mov.w	r9, #1
 8010282:	e7d1      	b.n	8010228 <__gethex+0x2d0>
 8010284:	2501      	movs	r5, #1
 8010286:	e7e2      	b.n	801024e <__gethex+0x2f6>
 8010288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801028a:	f1c3 0301 	rsb	r3, r3, #1
 801028e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010292:	2b00      	cmp	r3, #0
 8010294:	d0f0      	beq.n	8010278 <__gethex+0x320>
 8010296:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801029a:	f104 0314 	add.w	r3, r4, #20
 801029e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80102a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80102a6:	f04f 0c00 	mov.w	ip, #0
 80102aa:	4618      	mov	r0, r3
 80102ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80102b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80102b4:	d01b      	beq.n	80102ee <__gethex+0x396>
 80102b6:	3201      	adds	r2, #1
 80102b8:	6002      	str	r2, [r0, #0]
 80102ba:	2d02      	cmp	r5, #2
 80102bc:	f104 0314 	add.w	r3, r4, #20
 80102c0:	d13c      	bne.n	801033c <__gethex+0x3e4>
 80102c2:	f8d8 2000 	ldr.w	r2, [r8]
 80102c6:	3a01      	subs	r2, #1
 80102c8:	42b2      	cmp	r2, r6
 80102ca:	d109      	bne.n	80102e0 <__gethex+0x388>
 80102cc:	1171      	asrs	r1, r6, #5
 80102ce:	2201      	movs	r2, #1
 80102d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102d4:	f006 061f 	and.w	r6, r6, #31
 80102d8:	fa02 f606 	lsl.w	r6, r2, r6
 80102dc:	421e      	tst	r6, r3
 80102de:	d13a      	bne.n	8010356 <__gethex+0x3fe>
 80102e0:	f045 0520 	orr.w	r5, r5, #32
 80102e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102e6:	601c      	str	r4, [r3, #0]
 80102e8:	9b02      	ldr	r3, [sp, #8]
 80102ea:	601f      	str	r7, [r3, #0]
 80102ec:	e6b0      	b.n	8010050 <__gethex+0xf8>
 80102ee:	4299      	cmp	r1, r3
 80102f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80102f4:	d8d9      	bhi.n	80102aa <__gethex+0x352>
 80102f6:	68a3      	ldr	r3, [r4, #8]
 80102f8:	459b      	cmp	fp, r3
 80102fa:	db17      	blt.n	801032c <__gethex+0x3d4>
 80102fc:	6861      	ldr	r1, [r4, #4]
 80102fe:	9801      	ldr	r0, [sp, #4]
 8010300:	3101      	adds	r1, #1
 8010302:	f000 f9c3 	bl	801068c <_Balloc>
 8010306:	4681      	mov	r9, r0
 8010308:	b918      	cbnz	r0, 8010312 <__gethex+0x3ba>
 801030a:	4b1a      	ldr	r3, [pc, #104]	@ (8010374 <__gethex+0x41c>)
 801030c:	4602      	mov	r2, r0
 801030e:	2184      	movs	r1, #132	@ 0x84
 8010310:	e6c5      	b.n	801009e <__gethex+0x146>
 8010312:	6922      	ldr	r2, [r4, #16]
 8010314:	3202      	adds	r2, #2
 8010316:	f104 010c 	add.w	r1, r4, #12
 801031a:	0092      	lsls	r2, r2, #2
 801031c:	300c      	adds	r0, #12
 801031e:	f7fe ff64 	bl	800f1ea <memcpy>
 8010322:	4621      	mov	r1, r4
 8010324:	9801      	ldr	r0, [sp, #4]
 8010326:	f000 f9f1 	bl	801070c <_Bfree>
 801032a:	464c      	mov	r4, r9
 801032c:	6923      	ldr	r3, [r4, #16]
 801032e:	1c5a      	adds	r2, r3, #1
 8010330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010334:	6122      	str	r2, [r4, #16]
 8010336:	2201      	movs	r2, #1
 8010338:	615a      	str	r2, [r3, #20]
 801033a:	e7be      	b.n	80102ba <__gethex+0x362>
 801033c:	6922      	ldr	r2, [r4, #16]
 801033e:	455a      	cmp	r2, fp
 8010340:	dd0b      	ble.n	801035a <__gethex+0x402>
 8010342:	2101      	movs	r1, #1
 8010344:	4620      	mov	r0, r4
 8010346:	f7ff fd9f 	bl	800fe88 <rshift>
 801034a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801034e:	3701      	adds	r7, #1
 8010350:	42bb      	cmp	r3, r7
 8010352:	f6ff aee0 	blt.w	8010116 <__gethex+0x1be>
 8010356:	2501      	movs	r5, #1
 8010358:	e7c2      	b.n	80102e0 <__gethex+0x388>
 801035a:	f016 061f 	ands.w	r6, r6, #31
 801035e:	d0fa      	beq.n	8010356 <__gethex+0x3fe>
 8010360:	4453      	add	r3, sl
 8010362:	f1c6 0620 	rsb	r6, r6, #32
 8010366:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801036a:	f000 fa81 	bl	8010870 <__hi0bits>
 801036e:	42b0      	cmp	r0, r6
 8010370:	dbe7      	blt.n	8010342 <__gethex+0x3ea>
 8010372:	e7f0      	b.n	8010356 <__gethex+0x3fe>
 8010374:	080117b2 	.word	0x080117b2

08010378 <L_shift>:
 8010378:	f1c2 0208 	rsb	r2, r2, #8
 801037c:	0092      	lsls	r2, r2, #2
 801037e:	b570      	push	{r4, r5, r6, lr}
 8010380:	f1c2 0620 	rsb	r6, r2, #32
 8010384:	6843      	ldr	r3, [r0, #4]
 8010386:	6804      	ldr	r4, [r0, #0]
 8010388:	fa03 f506 	lsl.w	r5, r3, r6
 801038c:	432c      	orrs	r4, r5
 801038e:	40d3      	lsrs	r3, r2
 8010390:	6004      	str	r4, [r0, #0]
 8010392:	f840 3f04 	str.w	r3, [r0, #4]!
 8010396:	4288      	cmp	r0, r1
 8010398:	d3f4      	bcc.n	8010384 <L_shift+0xc>
 801039a:	bd70      	pop	{r4, r5, r6, pc}

0801039c <__match>:
 801039c:	b530      	push	{r4, r5, lr}
 801039e:	6803      	ldr	r3, [r0, #0]
 80103a0:	3301      	adds	r3, #1
 80103a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103a6:	b914      	cbnz	r4, 80103ae <__match+0x12>
 80103a8:	6003      	str	r3, [r0, #0]
 80103aa:	2001      	movs	r0, #1
 80103ac:	bd30      	pop	{r4, r5, pc}
 80103ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80103b6:	2d19      	cmp	r5, #25
 80103b8:	bf98      	it	ls
 80103ba:	3220      	addls	r2, #32
 80103bc:	42a2      	cmp	r2, r4
 80103be:	d0f0      	beq.n	80103a2 <__match+0x6>
 80103c0:	2000      	movs	r0, #0
 80103c2:	e7f3      	b.n	80103ac <__match+0x10>

080103c4 <__hexnan>:
 80103c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c8:	680b      	ldr	r3, [r1, #0]
 80103ca:	6801      	ldr	r1, [r0, #0]
 80103cc:	115e      	asrs	r6, r3, #5
 80103ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80103d2:	f013 031f 	ands.w	r3, r3, #31
 80103d6:	b087      	sub	sp, #28
 80103d8:	bf18      	it	ne
 80103da:	3604      	addne	r6, #4
 80103dc:	2500      	movs	r5, #0
 80103de:	1f37      	subs	r7, r6, #4
 80103e0:	4682      	mov	sl, r0
 80103e2:	4690      	mov	r8, r2
 80103e4:	9301      	str	r3, [sp, #4]
 80103e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80103ea:	46b9      	mov	r9, r7
 80103ec:	463c      	mov	r4, r7
 80103ee:	9502      	str	r5, [sp, #8]
 80103f0:	46ab      	mov	fp, r5
 80103f2:	784a      	ldrb	r2, [r1, #1]
 80103f4:	1c4b      	adds	r3, r1, #1
 80103f6:	9303      	str	r3, [sp, #12]
 80103f8:	b342      	cbz	r2, 801044c <__hexnan+0x88>
 80103fa:	4610      	mov	r0, r2
 80103fc:	9105      	str	r1, [sp, #20]
 80103fe:	9204      	str	r2, [sp, #16]
 8010400:	f7ff fd94 	bl	800ff2c <__hexdig_fun>
 8010404:	2800      	cmp	r0, #0
 8010406:	d151      	bne.n	80104ac <__hexnan+0xe8>
 8010408:	9a04      	ldr	r2, [sp, #16]
 801040a:	9905      	ldr	r1, [sp, #20]
 801040c:	2a20      	cmp	r2, #32
 801040e:	d818      	bhi.n	8010442 <__hexnan+0x7e>
 8010410:	9b02      	ldr	r3, [sp, #8]
 8010412:	459b      	cmp	fp, r3
 8010414:	dd13      	ble.n	801043e <__hexnan+0x7a>
 8010416:	454c      	cmp	r4, r9
 8010418:	d206      	bcs.n	8010428 <__hexnan+0x64>
 801041a:	2d07      	cmp	r5, #7
 801041c:	dc04      	bgt.n	8010428 <__hexnan+0x64>
 801041e:	462a      	mov	r2, r5
 8010420:	4649      	mov	r1, r9
 8010422:	4620      	mov	r0, r4
 8010424:	f7ff ffa8 	bl	8010378 <L_shift>
 8010428:	4544      	cmp	r4, r8
 801042a:	d952      	bls.n	80104d2 <__hexnan+0x10e>
 801042c:	2300      	movs	r3, #0
 801042e:	f1a4 0904 	sub.w	r9, r4, #4
 8010432:	f844 3c04 	str.w	r3, [r4, #-4]
 8010436:	f8cd b008 	str.w	fp, [sp, #8]
 801043a:	464c      	mov	r4, r9
 801043c:	461d      	mov	r5, r3
 801043e:	9903      	ldr	r1, [sp, #12]
 8010440:	e7d7      	b.n	80103f2 <__hexnan+0x2e>
 8010442:	2a29      	cmp	r2, #41	@ 0x29
 8010444:	d157      	bne.n	80104f6 <__hexnan+0x132>
 8010446:	3102      	adds	r1, #2
 8010448:	f8ca 1000 	str.w	r1, [sl]
 801044c:	f1bb 0f00 	cmp.w	fp, #0
 8010450:	d051      	beq.n	80104f6 <__hexnan+0x132>
 8010452:	454c      	cmp	r4, r9
 8010454:	d206      	bcs.n	8010464 <__hexnan+0xa0>
 8010456:	2d07      	cmp	r5, #7
 8010458:	dc04      	bgt.n	8010464 <__hexnan+0xa0>
 801045a:	462a      	mov	r2, r5
 801045c:	4649      	mov	r1, r9
 801045e:	4620      	mov	r0, r4
 8010460:	f7ff ff8a 	bl	8010378 <L_shift>
 8010464:	4544      	cmp	r4, r8
 8010466:	d936      	bls.n	80104d6 <__hexnan+0x112>
 8010468:	f1a8 0204 	sub.w	r2, r8, #4
 801046c:	4623      	mov	r3, r4
 801046e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010472:	f842 1f04 	str.w	r1, [r2, #4]!
 8010476:	429f      	cmp	r7, r3
 8010478:	d2f9      	bcs.n	801046e <__hexnan+0xaa>
 801047a:	1b3b      	subs	r3, r7, r4
 801047c:	f023 0303 	bic.w	r3, r3, #3
 8010480:	3304      	adds	r3, #4
 8010482:	3401      	adds	r4, #1
 8010484:	3e03      	subs	r6, #3
 8010486:	42b4      	cmp	r4, r6
 8010488:	bf88      	it	hi
 801048a:	2304      	movhi	r3, #4
 801048c:	4443      	add	r3, r8
 801048e:	2200      	movs	r2, #0
 8010490:	f843 2b04 	str.w	r2, [r3], #4
 8010494:	429f      	cmp	r7, r3
 8010496:	d2fb      	bcs.n	8010490 <__hexnan+0xcc>
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	b91b      	cbnz	r3, 80104a4 <__hexnan+0xe0>
 801049c:	4547      	cmp	r7, r8
 801049e:	d128      	bne.n	80104f2 <__hexnan+0x12e>
 80104a0:	2301      	movs	r3, #1
 80104a2:	603b      	str	r3, [r7, #0]
 80104a4:	2005      	movs	r0, #5
 80104a6:	b007      	add	sp, #28
 80104a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ac:	3501      	adds	r5, #1
 80104ae:	2d08      	cmp	r5, #8
 80104b0:	f10b 0b01 	add.w	fp, fp, #1
 80104b4:	dd06      	ble.n	80104c4 <__hexnan+0x100>
 80104b6:	4544      	cmp	r4, r8
 80104b8:	d9c1      	bls.n	801043e <__hexnan+0x7a>
 80104ba:	2300      	movs	r3, #0
 80104bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80104c0:	2501      	movs	r5, #1
 80104c2:	3c04      	subs	r4, #4
 80104c4:	6822      	ldr	r2, [r4, #0]
 80104c6:	f000 000f 	and.w	r0, r0, #15
 80104ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80104ce:	6020      	str	r0, [r4, #0]
 80104d0:	e7b5      	b.n	801043e <__hexnan+0x7a>
 80104d2:	2508      	movs	r5, #8
 80104d4:	e7b3      	b.n	801043e <__hexnan+0x7a>
 80104d6:	9b01      	ldr	r3, [sp, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d0dd      	beq.n	8010498 <__hexnan+0xd4>
 80104dc:	f1c3 0320 	rsb	r3, r3, #32
 80104e0:	f04f 32ff 	mov.w	r2, #4294967295
 80104e4:	40da      	lsrs	r2, r3
 80104e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80104ea:	4013      	ands	r3, r2
 80104ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80104f0:	e7d2      	b.n	8010498 <__hexnan+0xd4>
 80104f2:	3f04      	subs	r7, #4
 80104f4:	e7d0      	b.n	8010498 <__hexnan+0xd4>
 80104f6:	2004      	movs	r0, #4
 80104f8:	e7d5      	b.n	80104a6 <__hexnan+0xe2>
	...

080104fc <malloc>:
 80104fc:	4b02      	ldr	r3, [pc, #8]	@ (8010508 <malloc+0xc>)
 80104fe:	4601      	mov	r1, r0
 8010500:	6818      	ldr	r0, [r3, #0]
 8010502:	f000 b825 	b.w	8010550 <_malloc_r>
 8010506:	bf00      	nop
 8010508:	2400027c 	.word	0x2400027c

0801050c <sbrk_aligned>:
 801050c:	b570      	push	{r4, r5, r6, lr}
 801050e:	4e0f      	ldr	r6, [pc, #60]	@ (801054c <sbrk_aligned+0x40>)
 8010510:	460c      	mov	r4, r1
 8010512:	6831      	ldr	r1, [r6, #0]
 8010514:	4605      	mov	r5, r0
 8010516:	b911      	cbnz	r1, 801051e <sbrk_aligned+0x12>
 8010518:	f000 ffde 	bl	80114d8 <_sbrk_r>
 801051c:	6030      	str	r0, [r6, #0]
 801051e:	4621      	mov	r1, r4
 8010520:	4628      	mov	r0, r5
 8010522:	f000 ffd9 	bl	80114d8 <_sbrk_r>
 8010526:	1c43      	adds	r3, r0, #1
 8010528:	d103      	bne.n	8010532 <sbrk_aligned+0x26>
 801052a:	f04f 34ff 	mov.w	r4, #4294967295
 801052e:	4620      	mov	r0, r4
 8010530:	bd70      	pop	{r4, r5, r6, pc}
 8010532:	1cc4      	adds	r4, r0, #3
 8010534:	f024 0403 	bic.w	r4, r4, #3
 8010538:	42a0      	cmp	r0, r4
 801053a:	d0f8      	beq.n	801052e <sbrk_aligned+0x22>
 801053c:	1a21      	subs	r1, r4, r0
 801053e:	4628      	mov	r0, r5
 8010540:	f000 ffca 	bl	80114d8 <_sbrk_r>
 8010544:	3001      	adds	r0, #1
 8010546:	d1f2      	bne.n	801052e <sbrk_aligned+0x22>
 8010548:	e7ef      	b.n	801052a <sbrk_aligned+0x1e>
 801054a:	bf00      	nop
 801054c:	24003980 	.word	0x24003980

08010550 <_malloc_r>:
 8010550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010554:	1ccd      	adds	r5, r1, #3
 8010556:	f025 0503 	bic.w	r5, r5, #3
 801055a:	3508      	adds	r5, #8
 801055c:	2d0c      	cmp	r5, #12
 801055e:	bf38      	it	cc
 8010560:	250c      	movcc	r5, #12
 8010562:	2d00      	cmp	r5, #0
 8010564:	4606      	mov	r6, r0
 8010566:	db01      	blt.n	801056c <_malloc_r+0x1c>
 8010568:	42a9      	cmp	r1, r5
 801056a:	d904      	bls.n	8010576 <_malloc_r+0x26>
 801056c:	230c      	movs	r3, #12
 801056e:	6033      	str	r3, [r6, #0]
 8010570:	2000      	movs	r0, #0
 8010572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801064c <_malloc_r+0xfc>
 801057a:	f000 f87b 	bl	8010674 <__malloc_lock>
 801057e:	f8d8 3000 	ldr.w	r3, [r8]
 8010582:	461c      	mov	r4, r3
 8010584:	bb44      	cbnz	r4, 80105d8 <_malloc_r+0x88>
 8010586:	4629      	mov	r1, r5
 8010588:	4630      	mov	r0, r6
 801058a:	f7ff ffbf 	bl	801050c <sbrk_aligned>
 801058e:	1c43      	adds	r3, r0, #1
 8010590:	4604      	mov	r4, r0
 8010592:	d158      	bne.n	8010646 <_malloc_r+0xf6>
 8010594:	f8d8 4000 	ldr.w	r4, [r8]
 8010598:	4627      	mov	r7, r4
 801059a:	2f00      	cmp	r7, #0
 801059c:	d143      	bne.n	8010626 <_malloc_r+0xd6>
 801059e:	2c00      	cmp	r4, #0
 80105a0:	d04b      	beq.n	801063a <_malloc_r+0xea>
 80105a2:	6823      	ldr	r3, [r4, #0]
 80105a4:	4639      	mov	r1, r7
 80105a6:	4630      	mov	r0, r6
 80105a8:	eb04 0903 	add.w	r9, r4, r3
 80105ac:	f000 ff94 	bl	80114d8 <_sbrk_r>
 80105b0:	4581      	cmp	r9, r0
 80105b2:	d142      	bne.n	801063a <_malloc_r+0xea>
 80105b4:	6821      	ldr	r1, [r4, #0]
 80105b6:	1a6d      	subs	r5, r5, r1
 80105b8:	4629      	mov	r1, r5
 80105ba:	4630      	mov	r0, r6
 80105bc:	f7ff ffa6 	bl	801050c <sbrk_aligned>
 80105c0:	3001      	adds	r0, #1
 80105c2:	d03a      	beq.n	801063a <_malloc_r+0xea>
 80105c4:	6823      	ldr	r3, [r4, #0]
 80105c6:	442b      	add	r3, r5
 80105c8:	6023      	str	r3, [r4, #0]
 80105ca:	f8d8 3000 	ldr.w	r3, [r8]
 80105ce:	685a      	ldr	r2, [r3, #4]
 80105d0:	bb62      	cbnz	r2, 801062c <_malloc_r+0xdc>
 80105d2:	f8c8 7000 	str.w	r7, [r8]
 80105d6:	e00f      	b.n	80105f8 <_malloc_r+0xa8>
 80105d8:	6822      	ldr	r2, [r4, #0]
 80105da:	1b52      	subs	r2, r2, r5
 80105dc:	d420      	bmi.n	8010620 <_malloc_r+0xd0>
 80105de:	2a0b      	cmp	r2, #11
 80105e0:	d917      	bls.n	8010612 <_malloc_r+0xc2>
 80105e2:	1961      	adds	r1, r4, r5
 80105e4:	42a3      	cmp	r3, r4
 80105e6:	6025      	str	r5, [r4, #0]
 80105e8:	bf18      	it	ne
 80105ea:	6059      	strne	r1, [r3, #4]
 80105ec:	6863      	ldr	r3, [r4, #4]
 80105ee:	bf08      	it	eq
 80105f0:	f8c8 1000 	streq.w	r1, [r8]
 80105f4:	5162      	str	r2, [r4, r5]
 80105f6:	604b      	str	r3, [r1, #4]
 80105f8:	4630      	mov	r0, r6
 80105fa:	f000 f841 	bl	8010680 <__malloc_unlock>
 80105fe:	f104 000b 	add.w	r0, r4, #11
 8010602:	1d23      	adds	r3, r4, #4
 8010604:	f020 0007 	bic.w	r0, r0, #7
 8010608:	1ac2      	subs	r2, r0, r3
 801060a:	bf1c      	itt	ne
 801060c:	1a1b      	subne	r3, r3, r0
 801060e:	50a3      	strne	r3, [r4, r2]
 8010610:	e7af      	b.n	8010572 <_malloc_r+0x22>
 8010612:	6862      	ldr	r2, [r4, #4]
 8010614:	42a3      	cmp	r3, r4
 8010616:	bf0c      	ite	eq
 8010618:	f8c8 2000 	streq.w	r2, [r8]
 801061c:	605a      	strne	r2, [r3, #4]
 801061e:	e7eb      	b.n	80105f8 <_malloc_r+0xa8>
 8010620:	4623      	mov	r3, r4
 8010622:	6864      	ldr	r4, [r4, #4]
 8010624:	e7ae      	b.n	8010584 <_malloc_r+0x34>
 8010626:	463c      	mov	r4, r7
 8010628:	687f      	ldr	r7, [r7, #4]
 801062a:	e7b6      	b.n	801059a <_malloc_r+0x4a>
 801062c:	461a      	mov	r2, r3
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	42a3      	cmp	r3, r4
 8010632:	d1fb      	bne.n	801062c <_malloc_r+0xdc>
 8010634:	2300      	movs	r3, #0
 8010636:	6053      	str	r3, [r2, #4]
 8010638:	e7de      	b.n	80105f8 <_malloc_r+0xa8>
 801063a:	230c      	movs	r3, #12
 801063c:	6033      	str	r3, [r6, #0]
 801063e:	4630      	mov	r0, r6
 8010640:	f000 f81e 	bl	8010680 <__malloc_unlock>
 8010644:	e794      	b.n	8010570 <_malloc_r+0x20>
 8010646:	6005      	str	r5, [r0, #0]
 8010648:	e7d6      	b.n	80105f8 <_malloc_r+0xa8>
 801064a:	bf00      	nop
 801064c:	24003984 	.word	0x24003984

08010650 <__ascii_mbtowc>:
 8010650:	b082      	sub	sp, #8
 8010652:	b901      	cbnz	r1, 8010656 <__ascii_mbtowc+0x6>
 8010654:	a901      	add	r1, sp, #4
 8010656:	b142      	cbz	r2, 801066a <__ascii_mbtowc+0x1a>
 8010658:	b14b      	cbz	r3, 801066e <__ascii_mbtowc+0x1e>
 801065a:	7813      	ldrb	r3, [r2, #0]
 801065c:	600b      	str	r3, [r1, #0]
 801065e:	7812      	ldrb	r2, [r2, #0]
 8010660:	1e10      	subs	r0, r2, #0
 8010662:	bf18      	it	ne
 8010664:	2001      	movne	r0, #1
 8010666:	b002      	add	sp, #8
 8010668:	4770      	bx	lr
 801066a:	4610      	mov	r0, r2
 801066c:	e7fb      	b.n	8010666 <__ascii_mbtowc+0x16>
 801066e:	f06f 0001 	mvn.w	r0, #1
 8010672:	e7f8      	b.n	8010666 <__ascii_mbtowc+0x16>

08010674 <__malloc_lock>:
 8010674:	4801      	ldr	r0, [pc, #4]	@ (801067c <__malloc_lock+0x8>)
 8010676:	f7fe bdae 	b.w	800f1d6 <__retarget_lock_acquire_recursive>
 801067a:	bf00      	nop
 801067c:	2400397c 	.word	0x2400397c

08010680 <__malloc_unlock>:
 8010680:	4801      	ldr	r0, [pc, #4]	@ (8010688 <__malloc_unlock+0x8>)
 8010682:	f7fe bda9 	b.w	800f1d8 <__retarget_lock_release_recursive>
 8010686:	bf00      	nop
 8010688:	2400397c 	.word	0x2400397c

0801068c <_Balloc>:
 801068c:	b570      	push	{r4, r5, r6, lr}
 801068e:	69c6      	ldr	r6, [r0, #28]
 8010690:	4604      	mov	r4, r0
 8010692:	460d      	mov	r5, r1
 8010694:	b976      	cbnz	r6, 80106b4 <_Balloc+0x28>
 8010696:	2010      	movs	r0, #16
 8010698:	f7ff ff30 	bl	80104fc <malloc>
 801069c:	4602      	mov	r2, r0
 801069e:	61e0      	str	r0, [r4, #28]
 80106a0:	b920      	cbnz	r0, 80106ac <_Balloc+0x20>
 80106a2:	4b18      	ldr	r3, [pc, #96]	@ (8010704 <_Balloc+0x78>)
 80106a4:	4818      	ldr	r0, [pc, #96]	@ (8010708 <_Balloc+0x7c>)
 80106a6:	216b      	movs	r1, #107	@ 0x6b
 80106a8:	f000 ff26 	bl	80114f8 <__assert_func>
 80106ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106b0:	6006      	str	r6, [r0, #0]
 80106b2:	60c6      	str	r6, [r0, #12]
 80106b4:	69e6      	ldr	r6, [r4, #28]
 80106b6:	68f3      	ldr	r3, [r6, #12]
 80106b8:	b183      	cbz	r3, 80106dc <_Balloc+0x50>
 80106ba:	69e3      	ldr	r3, [r4, #28]
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106c2:	b9b8      	cbnz	r0, 80106f4 <_Balloc+0x68>
 80106c4:	2101      	movs	r1, #1
 80106c6:	fa01 f605 	lsl.w	r6, r1, r5
 80106ca:	1d72      	adds	r2, r6, #5
 80106cc:	0092      	lsls	r2, r2, #2
 80106ce:	4620      	mov	r0, r4
 80106d0:	f000 ff30 	bl	8011534 <_calloc_r>
 80106d4:	b160      	cbz	r0, 80106f0 <_Balloc+0x64>
 80106d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80106da:	e00e      	b.n	80106fa <_Balloc+0x6e>
 80106dc:	2221      	movs	r2, #33	@ 0x21
 80106de:	2104      	movs	r1, #4
 80106e0:	4620      	mov	r0, r4
 80106e2:	f000 ff27 	bl	8011534 <_calloc_r>
 80106e6:	69e3      	ldr	r3, [r4, #28]
 80106e8:	60f0      	str	r0, [r6, #12]
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1e4      	bne.n	80106ba <_Balloc+0x2e>
 80106f0:	2000      	movs	r0, #0
 80106f2:	bd70      	pop	{r4, r5, r6, pc}
 80106f4:	6802      	ldr	r2, [r0, #0]
 80106f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106fa:	2300      	movs	r3, #0
 80106fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010700:	e7f7      	b.n	80106f2 <_Balloc+0x66>
 8010702:	bf00      	nop
 8010704:	08011743 	.word	0x08011743
 8010708:	08011823 	.word	0x08011823

0801070c <_Bfree>:
 801070c:	b570      	push	{r4, r5, r6, lr}
 801070e:	69c6      	ldr	r6, [r0, #28]
 8010710:	4605      	mov	r5, r0
 8010712:	460c      	mov	r4, r1
 8010714:	b976      	cbnz	r6, 8010734 <_Bfree+0x28>
 8010716:	2010      	movs	r0, #16
 8010718:	f7ff fef0 	bl	80104fc <malloc>
 801071c:	4602      	mov	r2, r0
 801071e:	61e8      	str	r0, [r5, #28]
 8010720:	b920      	cbnz	r0, 801072c <_Bfree+0x20>
 8010722:	4b09      	ldr	r3, [pc, #36]	@ (8010748 <_Bfree+0x3c>)
 8010724:	4809      	ldr	r0, [pc, #36]	@ (801074c <_Bfree+0x40>)
 8010726:	218f      	movs	r1, #143	@ 0x8f
 8010728:	f000 fee6 	bl	80114f8 <__assert_func>
 801072c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010730:	6006      	str	r6, [r0, #0]
 8010732:	60c6      	str	r6, [r0, #12]
 8010734:	b13c      	cbz	r4, 8010746 <_Bfree+0x3a>
 8010736:	69eb      	ldr	r3, [r5, #28]
 8010738:	6862      	ldr	r2, [r4, #4]
 801073a:	68db      	ldr	r3, [r3, #12]
 801073c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010740:	6021      	str	r1, [r4, #0]
 8010742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010746:	bd70      	pop	{r4, r5, r6, pc}
 8010748:	08011743 	.word	0x08011743
 801074c:	08011823 	.word	0x08011823

08010750 <__multadd>:
 8010750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010754:	690d      	ldr	r5, [r1, #16]
 8010756:	4607      	mov	r7, r0
 8010758:	460c      	mov	r4, r1
 801075a:	461e      	mov	r6, r3
 801075c:	f101 0c14 	add.w	ip, r1, #20
 8010760:	2000      	movs	r0, #0
 8010762:	f8dc 3000 	ldr.w	r3, [ip]
 8010766:	b299      	uxth	r1, r3
 8010768:	fb02 6101 	mla	r1, r2, r1, r6
 801076c:	0c1e      	lsrs	r6, r3, #16
 801076e:	0c0b      	lsrs	r3, r1, #16
 8010770:	fb02 3306 	mla	r3, r2, r6, r3
 8010774:	b289      	uxth	r1, r1
 8010776:	3001      	adds	r0, #1
 8010778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801077c:	4285      	cmp	r5, r0
 801077e:	f84c 1b04 	str.w	r1, [ip], #4
 8010782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010786:	dcec      	bgt.n	8010762 <__multadd+0x12>
 8010788:	b30e      	cbz	r6, 80107ce <__multadd+0x7e>
 801078a:	68a3      	ldr	r3, [r4, #8]
 801078c:	42ab      	cmp	r3, r5
 801078e:	dc19      	bgt.n	80107c4 <__multadd+0x74>
 8010790:	6861      	ldr	r1, [r4, #4]
 8010792:	4638      	mov	r0, r7
 8010794:	3101      	adds	r1, #1
 8010796:	f7ff ff79 	bl	801068c <_Balloc>
 801079a:	4680      	mov	r8, r0
 801079c:	b928      	cbnz	r0, 80107aa <__multadd+0x5a>
 801079e:	4602      	mov	r2, r0
 80107a0:	4b0c      	ldr	r3, [pc, #48]	@ (80107d4 <__multadd+0x84>)
 80107a2:	480d      	ldr	r0, [pc, #52]	@ (80107d8 <__multadd+0x88>)
 80107a4:	21ba      	movs	r1, #186	@ 0xba
 80107a6:	f000 fea7 	bl	80114f8 <__assert_func>
 80107aa:	6922      	ldr	r2, [r4, #16]
 80107ac:	3202      	adds	r2, #2
 80107ae:	f104 010c 	add.w	r1, r4, #12
 80107b2:	0092      	lsls	r2, r2, #2
 80107b4:	300c      	adds	r0, #12
 80107b6:	f7fe fd18 	bl	800f1ea <memcpy>
 80107ba:	4621      	mov	r1, r4
 80107bc:	4638      	mov	r0, r7
 80107be:	f7ff ffa5 	bl	801070c <_Bfree>
 80107c2:	4644      	mov	r4, r8
 80107c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80107c8:	3501      	adds	r5, #1
 80107ca:	615e      	str	r6, [r3, #20]
 80107cc:	6125      	str	r5, [r4, #16]
 80107ce:	4620      	mov	r0, r4
 80107d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d4:	080117b2 	.word	0x080117b2
 80107d8:	08011823 	.word	0x08011823

080107dc <__s2b>:
 80107dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107e0:	460c      	mov	r4, r1
 80107e2:	4615      	mov	r5, r2
 80107e4:	461f      	mov	r7, r3
 80107e6:	2209      	movs	r2, #9
 80107e8:	3308      	adds	r3, #8
 80107ea:	4606      	mov	r6, r0
 80107ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80107f0:	2100      	movs	r1, #0
 80107f2:	2201      	movs	r2, #1
 80107f4:	429a      	cmp	r2, r3
 80107f6:	db09      	blt.n	801080c <__s2b+0x30>
 80107f8:	4630      	mov	r0, r6
 80107fa:	f7ff ff47 	bl	801068c <_Balloc>
 80107fe:	b940      	cbnz	r0, 8010812 <__s2b+0x36>
 8010800:	4602      	mov	r2, r0
 8010802:	4b19      	ldr	r3, [pc, #100]	@ (8010868 <__s2b+0x8c>)
 8010804:	4819      	ldr	r0, [pc, #100]	@ (801086c <__s2b+0x90>)
 8010806:	21d3      	movs	r1, #211	@ 0xd3
 8010808:	f000 fe76 	bl	80114f8 <__assert_func>
 801080c:	0052      	lsls	r2, r2, #1
 801080e:	3101      	adds	r1, #1
 8010810:	e7f0      	b.n	80107f4 <__s2b+0x18>
 8010812:	9b08      	ldr	r3, [sp, #32]
 8010814:	6143      	str	r3, [r0, #20]
 8010816:	2d09      	cmp	r5, #9
 8010818:	f04f 0301 	mov.w	r3, #1
 801081c:	6103      	str	r3, [r0, #16]
 801081e:	dd16      	ble.n	801084e <__s2b+0x72>
 8010820:	f104 0909 	add.w	r9, r4, #9
 8010824:	46c8      	mov	r8, r9
 8010826:	442c      	add	r4, r5
 8010828:	f818 3b01 	ldrb.w	r3, [r8], #1
 801082c:	4601      	mov	r1, r0
 801082e:	3b30      	subs	r3, #48	@ 0x30
 8010830:	220a      	movs	r2, #10
 8010832:	4630      	mov	r0, r6
 8010834:	f7ff ff8c 	bl	8010750 <__multadd>
 8010838:	45a0      	cmp	r8, r4
 801083a:	d1f5      	bne.n	8010828 <__s2b+0x4c>
 801083c:	f1a5 0408 	sub.w	r4, r5, #8
 8010840:	444c      	add	r4, r9
 8010842:	1b2d      	subs	r5, r5, r4
 8010844:	1963      	adds	r3, r4, r5
 8010846:	42bb      	cmp	r3, r7
 8010848:	db04      	blt.n	8010854 <__s2b+0x78>
 801084a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801084e:	340a      	adds	r4, #10
 8010850:	2509      	movs	r5, #9
 8010852:	e7f6      	b.n	8010842 <__s2b+0x66>
 8010854:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010858:	4601      	mov	r1, r0
 801085a:	3b30      	subs	r3, #48	@ 0x30
 801085c:	220a      	movs	r2, #10
 801085e:	4630      	mov	r0, r6
 8010860:	f7ff ff76 	bl	8010750 <__multadd>
 8010864:	e7ee      	b.n	8010844 <__s2b+0x68>
 8010866:	bf00      	nop
 8010868:	080117b2 	.word	0x080117b2
 801086c:	08011823 	.word	0x08011823

08010870 <__hi0bits>:
 8010870:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010874:	4603      	mov	r3, r0
 8010876:	bf36      	itet	cc
 8010878:	0403      	lslcc	r3, r0, #16
 801087a:	2000      	movcs	r0, #0
 801087c:	2010      	movcc	r0, #16
 801087e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010882:	bf3c      	itt	cc
 8010884:	021b      	lslcc	r3, r3, #8
 8010886:	3008      	addcc	r0, #8
 8010888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801088c:	bf3c      	itt	cc
 801088e:	011b      	lslcc	r3, r3, #4
 8010890:	3004      	addcc	r0, #4
 8010892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010896:	bf3c      	itt	cc
 8010898:	009b      	lslcc	r3, r3, #2
 801089a:	3002      	addcc	r0, #2
 801089c:	2b00      	cmp	r3, #0
 801089e:	db05      	blt.n	80108ac <__hi0bits+0x3c>
 80108a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80108a4:	f100 0001 	add.w	r0, r0, #1
 80108a8:	bf08      	it	eq
 80108aa:	2020      	moveq	r0, #32
 80108ac:	4770      	bx	lr

080108ae <__lo0bits>:
 80108ae:	6803      	ldr	r3, [r0, #0]
 80108b0:	4602      	mov	r2, r0
 80108b2:	f013 0007 	ands.w	r0, r3, #7
 80108b6:	d00b      	beq.n	80108d0 <__lo0bits+0x22>
 80108b8:	07d9      	lsls	r1, r3, #31
 80108ba:	d421      	bmi.n	8010900 <__lo0bits+0x52>
 80108bc:	0798      	lsls	r0, r3, #30
 80108be:	bf49      	itett	mi
 80108c0:	085b      	lsrmi	r3, r3, #1
 80108c2:	089b      	lsrpl	r3, r3, #2
 80108c4:	2001      	movmi	r0, #1
 80108c6:	6013      	strmi	r3, [r2, #0]
 80108c8:	bf5c      	itt	pl
 80108ca:	6013      	strpl	r3, [r2, #0]
 80108cc:	2002      	movpl	r0, #2
 80108ce:	4770      	bx	lr
 80108d0:	b299      	uxth	r1, r3
 80108d2:	b909      	cbnz	r1, 80108d8 <__lo0bits+0x2a>
 80108d4:	0c1b      	lsrs	r3, r3, #16
 80108d6:	2010      	movs	r0, #16
 80108d8:	b2d9      	uxtb	r1, r3
 80108da:	b909      	cbnz	r1, 80108e0 <__lo0bits+0x32>
 80108dc:	3008      	adds	r0, #8
 80108de:	0a1b      	lsrs	r3, r3, #8
 80108e0:	0719      	lsls	r1, r3, #28
 80108e2:	bf04      	itt	eq
 80108e4:	091b      	lsreq	r3, r3, #4
 80108e6:	3004      	addeq	r0, #4
 80108e8:	0799      	lsls	r1, r3, #30
 80108ea:	bf04      	itt	eq
 80108ec:	089b      	lsreq	r3, r3, #2
 80108ee:	3002      	addeq	r0, #2
 80108f0:	07d9      	lsls	r1, r3, #31
 80108f2:	d403      	bmi.n	80108fc <__lo0bits+0x4e>
 80108f4:	085b      	lsrs	r3, r3, #1
 80108f6:	f100 0001 	add.w	r0, r0, #1
 80108fa:	d003      	beq.n	8010904 <__lo0bits+0x56>
 80108fc:	6013      	str	r3, [r2, #0]
 80108fe:	4770      	bx	lr
 8010900:	2000      	movs	r0, #0
 8010902:	4770      	bx	lr
 8010904:	2020      	movs	r0, #32
 8010906:	4770      	bx	lr

08010908 <__i2b>:
 8010908:	b510      	push	{r4, lr}
 801090a:	460c      	mov	r4, r1
 801090c:	2101      	movs	r1, #1
 801090e:	f7ff febd 	bl	801068c <_Balloc>
 8010912:	4602      	mov	r2, r0
 8010914:	b928      	cbnz	r0, 8010922 <__i2b+0x1a>
 8010916:	4b05      	ldr	r3, [pc, #20]	@ (801092c <__i2b+0x24>)
 8010918:	4805      	ldr	r0, [pc, #20]	@ (8010930 <__i2b+0x28>)
 801091a:	f240 1145 	movw	r1, #325	@ 0x145
 801091e:	f000 fdeb 	bl	80114f8 <__assert_func>
 8010922:	2301      	movs	r3, #1
 8010924:	6144      	str	r4, [r0, #20]
 8010926:	6103      	str	r3, [r0, #16]
 8010928:	bd10      	pop	{r4, pc}
 801092a:	bf00      	nop
 801092c:	080117b2 	.word	0x080117b2
 8010930:	08011823 	.word	0x08011823

08010934 <__multiply>:
 8010934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010938:	4617      	mov	r7, r2
 801093a:	690a      	ldr	r2, [r1, #16]
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	429a      	cmp	r2, r3
 8010940:	bfa8      	it	ge
 8010942:	463b      	movge	r3, r7
 8010944:	4689      	mov	r9, r1
 8010946:	bfa4      	itt	ge
 8010948:	460f      	movge	r7, r1
 801094a:	4699      	movge	r9, r3
 801094c:	693d      	ldr	r5, [r7, #16]
 801094e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	6879      	ldr	r1, [r7, #4]
 8010956:	eb05 060a 	add.w	r6, r5, sl
 801095a:	42b3      	cmp	r3, r6
 801095c:	b085      	sub	sp, #20
 801095e:	bfb8      	it	lt
 8010960:	3101      	addlt	r1, #1
 8010962:	f7ff fe93 	bl	801068c <_Balloc>
 8010966:	b930      	cbnz	r0, 8010976 <__multiply+0x42>
 8010968:	4602      	mov	r2, r0
 801096a:	4b41      	ldr	r3, [pc, #260]	@ (8010a70 <__multiply+0x13c>)
 801096c:	4841      	ldr	r0, [pc, #260]	@ (8010a74 <__multiply+0x140>)
 801096e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010972:	f000 fdc1 	bl	80114f8 <__assert_func>
 8010976:	f100 0414 	add.w	r4, r0, #20
 801097a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801097e:	4623      	mov	r3, r4
 8010980:	2200      	movs	r2, #0
 8010982:	4573      	cmp	r3, lr
 8010984:	d320      	bcc.n	80109c8 <__multiply+0x94>
 8010986:	f107 0814 	add.w	r8, r7, #20
 801098a:	f109 0114 	add.w	r1, r9, #20
 801098e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010992:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010996:	9302      	str	r3, [sp, #8]
 8010998:	1beb      	subs	r3, r5, r7
 801099a:	3b15      	subs	r3, #21
 801099c:	f023 0303 	bic.w	r3, r3, #3
 80109a0:	3304      	adds	r3, #4
 80109a2:	3715      	adds	r7, #21
 80109a4:	42bd      	cmp	r5, r7
 80109a6:	bf38      	it	cc
 80109a8:	2304      	movcc	r3, #4
 80109aa:	9301      	str	r3, [sp, #4]
 80109ac:	9b02      	ldr	r3, [sp, #8]
 80109ae:	9103      	str	r1, [sp, #12]
 80109b0:	428b      	cmp	r3, r1
 80109b2:	d80c      	bhi.n	80109ce <__multiply+0x9a>
 80109b4:	2e00      	cmp	r6, #0
 80109b6:	dd03      	ble.n	80109c0 <__multiply+0x8c>
 80109b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d055      	beq.n	8010a6c <__multiply+0x138>
 80109c0:	6106      	str	r6, [r0, #16]
 80109c2:	b005      	add	sp, #20
 80109c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c8:	f843 2b04 	str.w	r2, [r3], #4
 80109cc:	e7d9      	b.n	8010982 <__multiply+0x4e>
 80109ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80109d2:	f1ba 0f00 	cmp.w	sl, #0
 80109d6:	d01f      	beq.n	8010a18 <__multiply+0xe4>
 80109d8:	46c4      	mov	ip, r8
 80109da:	46a1      	mov	r9, r4
 80109dc:	2700      	movs	r7, #0
 80109de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80109e2:	f8d9 3000 	ldr.w	r3, [r9]
 80109e6:	fa1f fb82 	uxth.w	fp, r2
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80109f0:	443b      	add	r3, r7
 80109f2:	f8d9 7000 	ldr.w	r7, [r9]
 80109f6:	0c12      	lsrs	r2, r2, #16
 80109f8:	0c3f      	lsrs	r7, r7, #16
 80109fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80109fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a08:	4565      	cmp	r5, ip
 8010a0a:	f849 3b04 	str.w	r3, [r9], #4
 8010a0e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010a12:	d8e4      	bhi.n	80109de <__multiply+0xaa>
 8010a14:	9b01      	ldr	r3, [sp, #4]
 8010a16:	50e7      	str	r7, [r4, r3]
 8010a18:	9b03      	ldr	r3, [sp, #12]
 8010a1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010a1e:	3104      	adds	r1, #4
 8010a20:	f1b9 0f00 	cmp.w	r9, #0
 8010a24:	d020      	beq.n	8010a68 <__multiply+0x134>
 8010a26:	6823      	ldr	r3, [r4, #0]
 8010a28:	4647      	mov	r7, r8
 8010a2a:	46a4      	mov	ip, r4
 8010a2c:	f04f 0a00 	mov.w	sl, #0
 8010a30:	f8b7 b000 	ldrh.w	fp, [r7]
 8010a34:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010a38:	fb09 220b 	mla	r2, r9, fp, r2
 8010a3c:	4452      	add	r2, sl
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a44:	f84c 3b04 	str.w	r3, [ip], #4
 8010a48:	f857 3b04 	ldr.w	r3, [r7], #4
 8010a4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a50:	f8bc 3000 	ldrh.w	r3, [ip]
 8010a54:	fb09 330a 	mla	r3, r9, sl, r3
 8010a58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010a5c:	42bd      	cmp	r5, r7
 8010a5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a62:	d8e5      	bhi.n	8010a30 <__multiply+0xfc>
 8010a64:	9a01      	ldr	r2, [sp, #4]
 8010a66:	50a3      	str	r3, [r4, r2]
 8010a68:	3404      	adds	r4, #4
 8010a6a:	e79f      	b.n	80109ac <__multiply+0x78>
 8010a6c:	3e01      	subs	r6, #1
 8010a6e:	e7a1      	b.n	80109b4 <__multiply+0x80>
 8010a70:	080117b2 	.word	0x080117b2
 8010a74:	08011823 	.word	0x08011823

08010a78 <__pow5mult>:
 8010a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a7c:	4615      	mov	r5, r2
 8010a7e:	f012 0203 	ands.w	r2, r2, #3
 8010a82:	4607      	mov	r7, r0
 8010a84:	460e      	mov	r6, r1
 8010a86:	d007      	beq.n	8010a98 <__pow5mult+0x20>
 8010a88:	4c25      	ldr	r4, [pc, #148]	@ (8010b20 <__pow5mult+0xa8>)
 8010a8a:	3a01      	subs	r2, #1
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a92:	f7ff fe5d 	bl	8010750 <__multadd>
 8010a96:	4606      	mov	r6, r0
 8010a98:	10ad      	asrs	r5, r5, #2
 8010a9a:	d03d      	beq.n	8010b18 <__pow5mult+0xa0>
 8010a9c:	69fc      	ldr	r4, [r7, #28]
 8010a9e:	b97c      	cbnz	r4, 8010ac0 <__pow5mult+0x48>
 8010aa0:	2010      	movs	r0, #16
 8010aa2:	f7ff fd2b 	bl	80104fc <malloc>
 8010aa6:	4602      	mov	r2, r0
 8010aa8:	61f8      	str	r0, [r7, #28]
 8010aaa:	b928      	cbnz	r0, 8010ab8 <__pow5mult+0x40>
 8010aac:	4b1d      	ldr	r3, [pc, #116]	@ (8010b24 <__pow5mult+0xac>)
 8010aae:	481e      	ldr	r0, [pc, #120]	@ (8010b28 <__pow5mult+0xb0>)
 8010ab0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010ab4:	f000 fd20 	bl	80114f8 <__assert_func>
 8010ab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010abc:	6004      	str	r4, [r0, #0]
 8010abe:	60c4      	str	r4, [r0, #12]
 8010ac0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ac8:	b94c      	cbnz	r4, 8010ade <__pow5mult+0x66>
 8010aca:	f240 2171 	movw	r1, #625	@ 0x271
 8010ace:	4638      	mov	r0, r7
 8010ad0:	f7ff ff1a 	bl	8010908 <__i2b>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ada:	4604      	mov	r4, r0
 8010adc:	6003      	str	r3, [r0, #0]
 8010ade:	f04f 0900 	mov.w	r9, #0
 8010ae2:	07eb      	lsls	r3, r5, #31
 8010ae4:	d50a      	bpl.n	8010afc <__pow5mult+0x84>
 8010ae6:	4631      	mov	r1, r6
 8010ae8:	4622      	mov	r2, r4
 8010aea:	4638      	mov	r0, r7
 8010aec:	f7ff ff22 	bl	8010934 <__multiply>
 8010af0:	4631      	mov	r1, r6
 8010af2:	4680      	mov	r8, r0
 8010af4:	4638      	mov	r0, r7
 8010af6:	f7ff fe09 	bl	801070c <_Bfree>
 8010afa:	4646      	mov	r6, r8
 8010afc:	106d      	asrs	r5, r5, #1
 8010afe:	d00b      	beq.n	8010b18 <__pow5mult+0xa0>
 8010b00:	6820      	ldr	r0, [r4, #0]
 8010b02:	b938      	cbnz	r0, 8010b14 <__pow5mult+0x9c>
 8010b04:	4622      	mov	r2, r4
 8010b06:	4621      	mov	r1, r4
 8010b08:	4638      	mov	r0, r7
 8010b0a:	f7ff ff13 	bl	8010934 <__multiply>
 8010b0e:	6020      	str	r0, [r4, #0]
 8010b10:	f8c0 9000 	str.w	r9, [r0]
 8010b14:	4604      	mov	r4, r0
 8010b16:	e7e4      	b.n	8010ae2 <__pow5mult+0x6a>
 8010b18:	4630      	mov	r0, r6
 8010b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b1e:	bf00      	nop
 8010b20:	08011920 	.word	0x08011920
 8010b24:	08011743 	.word	0x08011743
 8010b28:	08011823 	.word	0x08011823

08010b2c <__lshift>:
 8010b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b30:	460c      	mov	r4, r1
 8010b32:	6849      	ldr	r1, [r1, #4]
 8010b34:	6923      	ldr	r3, [r4, #16]
 8010b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b3a:	68a3      	ldr	r3, [r4, #8]
 8010b3c:	4607      	mov	r7, r0
 8010b3e:	4691      	mov	r9, r2
 8010b40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b44:	f108 0601 	add.w	r6, r8, #1
 8010b48:	42b3      	cmp	r3, r6
 8010b4a:	db0b      	blt.n	8010b64 <__lshift+0x38>
 8010b4c:	4638      	mov	r0, r7
 8010b4e:	f7ff fd9d 	bl	801068c <_Balloc>
 8010b52:	4605      	mov	r5, r0
 8010b54:	b948      	cbnz	r0, 8010b6a <__lshift+0x3e>
 8010b56:	4602      	mov	r2, r0
 8010b58:	4b28      	ldr	r3, [pc, #160]	@ (8010bfc <__lshift+0xd0>)
 8010b5a:	4829      	ldr	r0, [pc, #164]	@ (8010c00 <__lshift+0xd4>)
 8010b5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010b60:	f000 fcca 	bl	80114f8 <__assert_func>
 8010b64:	3101      	adds	r1, #1
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	e7ee      	b.n	8010b48 <__lshift+0x1c>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f100 0114 	add.w	r1, r0, #20
 8010b70:	f100 0210 	add.w	r2, r0, #16
 8010b74:	4618      	mov	r0, r3
 8010b76:	4553      	cmp	r3, sl
 8010b78:	db33      	blt.n	8010be2 <__lshift+0xb6>
 8010b7a:	6920      	ldr	r0, [r4, #16]
 8010b7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b80:	f104 0314 	add.w	r3, r4, #20
 8010b84:	f019 091f 	ands.w	r9, r9, #31
 8010b88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b90:	d02b      	beq.n	8010bea <__lshift+0xbe>
 8010b92:	f1c9 0e20 	rsb	lr, r9, #32
 8010b96:	468a      	mov	sl, r1
 8010b98:	2200      	movs	r2, #0
 8010b9a:	6818      	ldr	r0, [r3, #0]
 8010b9c:	fa00 f009 	lsl.w	r0, r0, r9
 8010ba0:	4310      	orrs	r0, r2
 8010ba2:	f84a 0b04 	str.w	r0, [sl], #4
 8010ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010baa:	459c      	cmp	ip, r3
 8010bac:	fa22 f20e 	lsr.w	r2, r2, lr
 8010bb0:	d8f3      	bhi.n	8010b9a <__lshift+0x6e>
 8010bb2:	ebac 0304 	sub.w	r3, ip, r4
 8010bb6:	3b15      	subs	r3, #21
 8010bb8:	f023 0303 	bic.w	r3, r3, #3
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	f104 0015 	add.w	r0, r4, #21
 8010bc2:	4560      	cmp	r0, ip
 8010bc4:	bf88      	it	hi
 8010bc6:	2304      	movhi	r3, #4
 8010bc8:	50ca      	str	r2, [r1, r3]
 8010bca:	b10a      	cbz	r2, 8010bd0 <__lshift+0xa4>
 8010bcc:	f108 0602 	add.w	r6, r8, #2
 8010bd0:	3e01      	subs	r6, #1
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	612e      	str	r6, [r5, #16]
 8010bd6:	4621      	mov	r1, r4
 8010bd8:	f7ff fd98 	bl	801070c <_Bfree>
 8010bdc:	4628      	mov	r0, r5
 8010bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010be6:	3301      	adds	r3, #1
 8010be8:	e7c5      	b.n	8010b76 <__lshift+0x4a>
 8010bea:	3904      	subs	r1, #4
 8010bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bf4:	459c      	cmp	ip, r3
 8010bf6:	d8f9      	bhi.n	8010bec <__lshift+0xc0>
 8010bf8:	e7ea      	b.n	8010bd0 <__lshift+0xa4>
 8010bfa:	bf00      	nop
 8010bfc:	080117b2 	.word	0x080117b2
 8010c00:	08011823 	.word	0x08011823

08010c04 <__mcmp>:
 8010c04:	690a      	ldr	r2, [r1, #16]
 8010c06:	4603      	mov	r3, r0
 8010c08:	6900      	ldr	r0, [r0, #16]
 8010c0a:	1a80      	subs	r0, r0, r2
 8010c0c:	b530      	push	{r4, r5, lr}
 8010c0e:	d10e      	bne.n	8010c2e <__mcmp+0x2a>
 8010c10:	3314      	adds	r3, #20
 8010c12:	3114      	adds	r1, #20
 8010c14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010c18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010c20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010c24:	4295      	cmp	r5, r2
 8010c26:	d003      	beq.n	8010c30 <__mcmp+0x2c>
 8010c28:	d205      	bcs.n	8010c36 <__mcmp+0x32>
 8010c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2e:	bd30      	pop	{r4, r5, pc}
 8010c30:	42a3      	cmp	r3, r4
 8010c32:	d3f3      	bcc.n	8010c1c <__mcmp+0x18>
 8010c34:	e7fb      	b.n	8010c2e <__mcmp+0x2a>
 8010c36:	2001      	movs	r0, #1
 8010c38:	e7f9      	b.n	8010c2e <__mcmp+0x2a>
	...

08010c3c <__mdiff>:
 8010c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	4689      	mov	r9, r1
 8010c42:	4606      	mov	r6, r0
 8010c44:	4611      	mov	r1, r2
 8010c46:	4648      	mov	r0, r9
 8010c48:	4614      	mov	r4, r2
 8010c4a:	f7ff ffdb 	bl	8010c04 <__mcmp>
 8010c4e:	1e05      	subs	r5, r0, #0
 8010c50:	d112      	bne.n	8010c78 <__mdiff+0x3c>
 8010c52:	4629      	mov	r1, r5
 8010c54:	4630      	mov	r0, r6
 8010c56:	f7ff fd19 	bl	801068c <_Balloc>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	b928      	cbnz	r0, 8010c6a <__mdiff+0x2e>
 8010c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8010d5c <__mdiff+0x120>)
 8010c60:	f240 2137 	movw	r1, #567	@ 0x237
 8010c64:	483e      	ldr	r0, [pc, #248]	@ (8010d60 <__mdiff+0x124>)
 8010c66:	f000 fc47 	bl	80114f8 <__assert_func>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c70:	4610      	mov	r0, r2
 8010c72:	b003      	add	sp, #12
 8010c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c78:	bfbc      	itt	lt
 8010c7a:	464b      	movlt	r3, r9
 8010c7c:	46a1      	movlt	r9, r4
 8010c7e:	4630      	mov	r0, r6
 8010c80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010c84:	bfba      	itte	lt
 8010c86:	461c      	movlt	r4, r3
 8010c88:	2501      	movlt	r5, #1
 8010c8a:	2500      	movge	r5, #0
 8010c8c:	f7ff fcfe 	bl	801068c <_Balloc>
 8010c90:	4602      	mov	r2, r0
 8010c92:	b918      	cbnz	r0, 8010c9c <__mdiff+0x60>
 8010c94:	4b31      	ldr	r3, [pc, #196]	@ (8010d5c <__mdiff+0x120>)
 8010c96:	f240 2145 	movw	r1, #581	@ 0x245
 8010c9a:	e7e3      	b.n	8010c64 <__mdiff+0x28>
 8010c9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010ca0:	6926      	ldr	r6, [r4, #16]
 8010ca2:	60c5      	str	r5, [r0, #12]
 8010ca4:	f109 0310 	add.w	r3, r9, #16
 8010ca8:	f109 0514 	add.w	r5, r9, #20
 8010cac:	f104 0e14 	add.w	lr, r4, #20
 8010cb0:	f100 0b14 	add.w	fp, r0, #20
 8010cb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010cb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010cbc:	9301      	str	r3, [sp, #4]
 8010cbe:	46d9      	mov	r9, fp
 8010cc0:	f04f 0c00 	mov.w	ip, #0
 8010cc4:	9b01      	ldr	r3, [sp, #4]
 8010cc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010cca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	fa1f f38a 	uxth.w	r3, sl
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	b283      	uxth	r3, r0
 8010cd8:	1acb      	subs	r3, r1, r3
 8010cda:	0c00      	lsrs	r0, r0, #16
 8010cdc:	4463      	add	r3, ip
 8010cde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010ce2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010cec:	4576      	cmp	r6, lr
 8010cee:	f849 3b04 	str.w	r3, [r9], #4
 8010cf2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010cf6:	d8e5      	bhi.n	8010cc4 <__mdiff+0x88>
 8010cf8:	1b33      	subs	r3, r6, r4
 8010cfa:	3b15      	subs	r3, #21
 8010cfc:	f023 0303 	bic.w	r3, r3, #3
 8010d00:	3415      	adds	r4, #21
 8010d02:	3304      	adds	r3, #4
 8010d04:	42a6      	cmp	r6, r4
 8010d06:	bf38      	it	cc
 8010d08:	2304      	movcc	r3, #4
 8010d0a:	441d      	add	r5, r3
 8010d0c:	445b      	add	r3, fp
 8010d0e:	461e      	mov	r6, r3
 8010d10:	462c      	mov	r4, r5
 8010d12:	4544      	cmp	r4, r8
 8010d14:	d30e      	bcc.n	8010d34 <__mdiff+0xf8>
 8010d16:	f108 0103 	add.w	r1, r8, #3
 8010d1a:	1b49      	subs	r1, r1, r5
 8010d1c:	f021 0103 	bic.w	r1, r1, #3
 8010d20:	3d03      	subs	r5, #3
 8010d22:	45a8      	cmp	r8, r5
 8010d24:	bf38      	it	cc
 8010d26:	2100      	movcc	r1, #0
 8010d28:	440b      	add	r3, r1
 8010d2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d2e:	b191      	cbz	r1, 8010d56 <__mdiff+0x11a>
 8010d30:	6117      	str	r7, [r2, #16]
 8010d32:	e79d      	b.n	8010c70 <__mdiff+0x34>
 8010d34:	f854 1b04 	ldr.w	r1, [r4], #4
 8010d38:	46e6      	mov	lr, ip
 8010d3a:	0c08      	lsrs	r0, r1, #16
 8010d3c:	fa1c fc81 	uxtah	ip, ip, r1
 8010d40:	4471      	add	r1, lr
 8010d42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010d46:	b289      	uxth	r1, r1
 8010d48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010d4c:	f846 1b04 	str.w	r1, [r6], #4
 8010d50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d54:	e7dd      	b.n	8010d12 <__mdiff+0xd6>
 8010d56:	3f01      	subs	r7, #1
 8010d58:	e7e7      	b.n	8010d2a <__mdiff+0xee>
 8010d5a:	bf00      	nop
 8010d5c:	080117b2 	.word	0x080117b2
 8010d60:	08011823 	.word	0x08011823

08010d64 <__ulp>:
 8010d64:	b082      	sub	sp, #8
 8010d66:	ed8d 0b00 	vstr	d0, [sp]
 8010d6a:	9a01      	ldr	r2, [sp, #4]
 8010d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8010dac <__ulp+0x48>)
 8010d6e:	4013      	ands	r3, r2
 8010d70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	dc08      	bgt.n	8010d8a <__ulp+0x26>
 8010d78:	425b      	negs	r3, r3
 8010d7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010d7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010d82:	da04      	bge.n	8010d8e <__ulp+0x2a>
 8010d84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010d88:	4113      	asrs	r3, r2
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	e008      	b.n	8010da0 <__ulp+0x3c>
 8010d8e:	f1a2 0314 	sub.w	r3, r2, #20
 8010d92:	2b1e      	cmp	r3, #30
 8010d94:	bfda      	itte	le
 8010d96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010d9a:	40da      	lsrle	r2, r3
 8010d9c:	2201      	movgt	r2, #1
 8010d9e:	2300      	movs	r3, #0
 8010da0:	4619      	mov	r1, r3
 8010da2:	4610      	mov	r0, r2
 8010da4:	ec41 0b10 	vmov	d0, r0, r1
 8010da8:	b002      	add	sp, #8
 8010daa:	4770      	bx	lr
 8010dac:	7ff00000 	.word	0x7ff00000

08010db0 <__b2d>:
 8010db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010db4:	6906      	ldr	r6, [r0, #16]
 8010db6:	f100 0814 	add.w	r8, r0, #20
 8010dba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010dbe:	1f37      	subs	r7, r6, #4
 8010dc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010dc4:	4610      	mov	r0, r2
 8010dc6:	f7ff fd53 	bl	8010870 <__hi0bits>
 8010dca:	f1c0 0320 	rsb	r3, r0, #32
 8010dce:	280a      	cmp	r0, #10
 8010dd0:	600b      	str	r3, [r1, #0]
 8010dd2:	491b      	ldr	r1, [pc, #108]	@ (8010e40 <__b2d+0x90>)
 8010dd4:	dc15      	bgt.n	8010e02 <__b2d+0x52>
 8010dd6:	f1c0 0c0b 	rsb	ip, r0, #11
 8010dda:	fa22 f30c 	lsr.w	r3, r2, ip
 8010dde:	45b8      	cmp	r8, r7
 8010de0:	ea43 0501 	orr.w	r5, r3, r1
 8010de4:	bf34      	ite	cc
 8010de6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010dea:	2300      	movcs	r3, #0
 8010dec:	3015      	adds	r0, #21
 8010dee:	fa02 f000 	lsl.w	r0, r2, r0
 8010df2:	fa23 f30c 	lsr.w	r3, r3, ip
 8010df6:	4303      	orrs	r3, r0
 8010df8:	461c      	mov	r4, r3
 8010dfa:	ec45 4b10 	vmov	d0, r4, r5
 8010dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e02:	45b8      	cmp	r8, r7
 8010e04:	bf3a      	itte	cc
 8010e06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010e0a:	f1a6 0708 	subcc.w	r7, r6, #8
 8010e0e:	2300      	movcs	r3, #0
 8010e10:	380b      	subs	r0, #11
 8010e12:	d012      	beq.n	8010e3a <__b2d+0x8a>
 8010e14:	f1c0 0120 	rsb	r1, r0, #32
 8010e18:	fa23 f401 	lsr.w	r4, r3, r1
 8010e1c:	4082      	lsls	r2, r0
 8010e1e:	4322      	orrs	r2, r4
 8010e20:	4547      	cmp	r7, r8
 8010e22:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010e26:	bf8c      	ite	hi
 8010e28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010e2c:	2200      	movls	r2, #0
 8010e2e:	4083      	lsls	r3, r0
 8010e30:	40ca      	lsrs	r2, r1
 8010e32:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010e36:	4313      	orrs	r3, r2
 8010e38:	e7de      	b.n	8010df8 <__b2d+0x48>
 8010e3a:	ea42 0501 	orr.w	r5, r2, r1
 8010e3e:	e7db      	b.n	8010df8 <__b2d+0x48>
 8010e40:	3ff00000 	.word	0x3ff00000

08010e44 <__d2b>:
 8010e44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e48:	460f      	mov	r7, r1
 8010e4a:	2101      	movs	r1, #1
 8010e4c:	ec59 8b10 	vmov	r8, r9, d0
 8010e50:	4616      	mov	r6, r2
 8010e52:	f7ff fc1b 	bl	801068c <_Balloc>
 8010e56:	4604      	mov	r4, r0
 8010e58:	b930      	cbnz	r0, 8010e68 <__d2b+0x24>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	4b23      	ldr	r3, [pc, #140]	@ (8010eec <__d2b+0xa8>)
 8010e5e:	4824      	ldr	r0, [pc, #144]	@ (8010ef0 <__d2b+0xac>)
 8010e60:	f240 310f 	movw	r1, #783	@ 0x30f
 8010e64:	f000 fb48 	bl	80114f8 <__assert_func>
 8010e68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010e6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e70:	b10d      	cbz	r5, 8010e76 <__d2b+0x32>
 8010e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010e76:	9301      	str	r3, [sp, #4]
 8010e78:	f1b8 0300 	subs.w	r3, r8, #0
 8010e7c:	d023      	beq.n	8010ec6 <__d2b+0x82>
 8010e7e:	4668      	mov	r0, sp
 8010e80:	9300      	str	r3, [sp, #0]
 8010e82:	f7ff fd14 	bl	80108ae <__lo0bits>
 8010e86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e8a:	b1d0      	cbz	r0, 8010ec2 <__d2b+0x7e>
 8010e8c:	f1c0 0320 	rsb	r3, r0, #32
 8010e90:	fa02 f303 	lsl.w	r3, r2, r3
 8010e94:	430b      	orrs	r3, r1
 8010e96:	40c2      	lsrs	r2, r0
 8010e98:	6163      	str	r3, [r4, #20]
 8010e9a:	9201      	str	r2, [sp, #4]
 8010e9c:	9b01      	ldr	r3, [sp, #4]
 8010e9e:	61a3      	str	r3, [r4, #24]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	bf0c      	ite	eq
 8010ea4:	2201      	moveq	r2, #1
 8010ea6:	2202      	movne	r2, #2
 8010ea8:	6122      	str	r2, [r4, #16]
 8010eaa:	b1a5      	cbz	r5, 8010ed6 <__d2b+0x92>
 8010eac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010eb0:	4405      	add	r5, r0
 8010eb2:	603d      	str	r5, [r7, #0]
 8010eb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010eb8:	6030      	str	r0, [r6, #0]
 8010eba:	4620      	mov	r0, r4
 8010ebc:	b003      	add	sp, #12
 8010ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ec2:	6161      	str	r1, [r4, #20]
 8010ec4:	e7ea      	b.n	8010e9c <__d2b+0x58>
 8010ec6:	a801      	add	r0, sp, #4
 8010ec8:	f7ff fcf1 	bl	80108ae <__lo0bits>
 8010ecc:	9b01      	ldr	r3, [sp, #4]
 8010ece:	6163      	str	r3, [r4, #20]
 8010ed0:	3020      	adds	r0, #32
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	e7e8      	b.n	8010ea8 <__d2b+0x64>
 8010ed6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010eda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010ede:	6038      	str	r0, [r7, #0]
 8010ee0:	6918      	ldr	r0, [r3, #16]
 8010ee2:	f7ff fcc5 	bl	8010870 <__hi0bits>
 8010ee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010eea:	e7e5      	b.n	8010eb8 <__d2b+0x74>
 8010eec:	080117b2 	.word	0x080117b2
 8010ef0:	08011823 	.word	0x08011823

08010ef4 <__ratio>:
 8010ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef8:	4688      	mov	r8, r1
 8010efa:	4669      	mov	r1, sp
 8010efc:	4681      	mov	r9, r0
 8010efe:	f7ff ff57 	bl	8010db0 <__b2d>
 8010f02:	a901      	add	r1, sp, #4
 8010f04:	4640      	mov	r0, r8
 8010f06:	ec55 4b10 	vmov	r4, r5, d0
 8010f0a:	f7ff ff51 	bl	8010db0 <__b2d>
 8010f0e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010f12:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010f16:	1ad2      	subs	r2, r2, r3
 8010f18:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010f1c:	1a5b      	subs	r3, r3, r1
 8010f1e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8010f22:	ec57 6b10 	vmov	r6, r7, d0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	bfd6      	itet	le
 8010f2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010f2e:	462a      	movgt	r2, r5
 8010f30:	463a      	movle	r2, r7
 8010f32:	46ab      	mov	fp, r5
 8010f34:	46a2      	mov	sl, r4
 8010f36:	bfce      	itee	gt
 8010f38:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010f3c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010f40:	ee00 3a90 	vmovle	s1, r3
 8010f44:	ec4b ab17 	vmov	d7, sl, fp
 8010f48:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010f4c:	b003      	add	sp, #12
 8010f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f52 <__copybits>:
 8010f52:	3901      	subs	r1, #1
 8010f54:	b570      	push	{r4, r5, r6, lr}
 8010f56:	1149      	asrs	r1, r1, #5
 8010f58:	6914      	ldr	r4, [r2, #16]
 8010f5a:	3101      	adds	r1, #1
 8010f5c:	f102 0314 	add.w	r3, r2, #20
 8010f60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010f64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010f68:	1f05      	subs	r5, r0, #4
 8010f6a:	42a3      	cmp	r3, r4
 8010f6c:	d30c      	bcc.n	8010f88 <__copybits+0x36>
 8010f6e:	1aa3      	subs	r3, r4, r2
 8010f70:	3b11      	subs	r3, #17
 8010f72:	f023 0303 	bic.w	r3, r3, #3
 8010f76:	3211      	adds	r2, #17
 8010f78:	42a2      	cmp	r2, r4
 8010f7a:	bf88      	it	hi
 8010f7c:	2300      	movhi	r3, #0
 8010f7e:	4418      	add	r0, r3
 8010f80:	2300      	movs	r3, #0
 8010f82:	4288      	cmp	r0, r1
 8010f84:	d305      	bcc.n	8010f92 <__copybits+0x40>
 8010f86:	bd70      	pop	{r4, r5, r6, pc}
 8010f88:	f853 6b04 	ldr.w	r6, [r3], #4
 8010f8c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010f90:	e7eb      	b.n	8010f6a <__copybits+0x18>
 8010f92:	f840 3b04 	str.w	r3, [r0], #4
 8010f96:	e7f4      	b.n	8010f82 <__copybits+0x30>

08010f98 <__any_on>:
 8010f98:	f100 0214 	add.w	r2, r0, #20
 8010f9c:	6900      	ldr	r0, [r0, #16]
 8010f9e:	114b      	asrs	r3, r1, #5
 8010fa0:	4298      	cmp	r0, r3
 8010fa2:	b510      	push	{r4, lr}
 8010fa4:	db11      	blt.n	8010fca <__any_on+0x32>
 8010fa6:	dd0a      	ble.n	8010fbe <__any_on+0x26>
 8010fa8:	f011 011f 	ands.w	r1, r1, #31
 8010fac:	d007      	beq.n	8010fbe <__any_on+0x26>
 8010fae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010fb2:	fa24 f001 	lsr.w	r0, r4, r1
 8010fb6:	fa00 f101 	lsl.w	r1, r0, r1
 8010fba:	428c      	cmp	r4, r1
 8010fbc:	d10b      	bne.n	8010fd6 <__any_on+0x3e>
 8010fbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	d803      	bhi.n	8010fce <__any_on+0x36>
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	bd10      	pop	{r4, pc}
 8010fca:	4603      	mov	r3, r0
 8010fcc:	e7f7      	b.n	8010fbe <__any_on+0x26>
 8010fce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010fd2:	2900      	cmp	r1, #0
 8010fd4:	d0f5      	beq.n	8010fc2 <__any_on+0x2a>
 8010fd6:	2001      	movs	r0, #1
 8010fd8:	e7f6      	b.n	8010fc8 <__any_on+0x30>

08010fda <__ascii_wctomb>:
 8010fda:	4603      	mov	r3, r0
 8010fdc:	4608      	mov	r0, r1
 8010fde:	b141      	cbz	r1, 8010ff2 <__ascii_wctomb+0x18>
 8010fe0:	2aff      	cmp	r2, #255	@ 0xff
 8010fe2:	d904      	bls.n	8010fee <__ascii_wctomb+0x14>
 8010fe4:	228a      	movs	r2, #138	@ 0x8a
 8010fe6:	601a      	str	r2, [r3, #0]
 8010fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fec:	4770      	bx	lr
 8010fee:	700a      	strb	r2, [r1, #0]
 8010ff0:	2001      	movs	r0, #1
 8010ff2:	4770      	bx	lr

08010ff4 <__sfputc_r>:
 8010ff4:	6893      	ldr	r3, [r2, #8]
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	b410      	push	{r4}
 8010ffc:	6093      	str	r3, [r2, #8]
 8010ffe:	da08      	bge.n	8011012 <__sfputc_r+0x1e>
 8011000:	6994      	ldr	r4, [r2, #24]
 8011002:	42a3      	cmp	r3, r4
 8011004:	db01      	blt.n	801100a <__sfputc_r+0x16>
 8011006:	290a      	cmp	r1, #10
 8011008:	d103      	bne.n	8011012 <__sfputc_r+0x1e>
 801100a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801100e:	f7fd bfbe 	b.w	800ef8e <__swbuf_r>
 8011012:	6813      	ldr	r3, [r2, #0]
 8011014:	1c58      	adds	r0, r3, #1
 8011016:	6010      	str	r0, [r2, #0]
 8011018:	7019      	strb	r1, [r3, #0]
 801101a:	4608      	mov	r0, r1
 801101c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011020:	4770      	bx	lr

08011022 <__sfputs_r>:
 8011022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011024:	4606      	mov	r6, r0
 8011026:	460f      	mov	r7, r1
 8011028:	4614      	mov	r4, r2
 801102a:	18d5      	adds	r5, r2, r3
 801102c:	42ac      	cmp	r4, r5
 801102e:	d101      	bne.n	8011034 <__sfputs_r+0x12>
 8011030:	2000      	movs	r0, #0
 8011032:	e007      	b.n	8011044 <__sfputs_r+0x22>
 8011034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011038:	463a      	mov	r2, r7
 801103a:	4630      	mov	r0, r6
 801103c:	f7ff ffda 	bl	8010ff4 <__sfputc_r>
 8011040:	1c43      	adds	r3, r0, #1
 8011042:	d1f3      	bne.n	801102c <__sfputs_r+0xa>
 8011044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011048 <_vfiprintf_r>:
 8011048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104c:	460d      	mov	r5, r1
 801104e:	b09d      	sub	sp, #116	@ 0x74
 8011050:	4614      	mov	r4, r2
 8011052:	4698      	mov	r8, r3
 8011054:	4606      	mov	r6, r0
 8011056:	b118      	cbz	r0, 8011060 <_vfiprintf_r+0x18>
 8011058:	6a03      	ldr	r3, [r0, #32]
 801105a:	b90b      	cbnz	r3, 8011060 <_vfiprintf_r+0x18>
 801105c:	f7fd feae 	bl	800edbc <__sinit>
 8011060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011062:	07d9      	lsls	r1, r3, #31
 8011064:	d405      	bmi.n	8011072 <_vfiprintf_r+0x2a>
 8011066:	89ab      	ldrh	r3, [r5, #12]
 8011068:	059a      	lsls	r2, r3, #22
 801106a:	d402      	bmi.n	8011072 <_vfiprintf_r+0x2a>
 801106c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801106e:	f7fe f8b2 	bl	800f1d6 <__retarget_lock_acquire_recursive>
 8011072:	89ab      	ldrh	r3, [r5, #12]
 8011074:	071b      	lsls	r3, r3, #28
 8011076:	d501      	bpl.n	801107c <_vfiprintf_r+0x34>
 8011078:	692b      	ldr	r3, [r5, #16]
 801107a:	b99b      	cbnz	r3, 80110a4 <_vfiprintf_r+0x5c>
 801107c:	4629      	mov	r1, r5
 801107e:	4630      	mov	r0, r6
 8011080:	f7fd ffc4 	bl	800f00c <__swsetup_r>
 8011084:	b170      	cbz	r0, 80110a4 <_vfiprintf_r+0x5c>
 8011086:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011088:	07dc      	lsls	r4, r3, #31
 801108a:	d504      	bpl.n	8011096 <_vfiprintf_r+0x4e>
 801108c:	f04f 30ff 	mov.w	r0, #4294967295
 8011090:	b01d      	add	sp, #116	@ 0x74
 8011092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011096:	89ab      	ldrh	r3, [r5, #12]
 8011098:	0598      	lsls	r0, r3, #22
 801109a:	d4f7      	bmi.n	801108c <_vfiprintf_r+0x44>
 801109c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801109e:	f7fe f89b 	bl	800f1d8 <__retarget_lock_release_recursive>
 80110a2:	e7f3      	b.n	801108c <_vfiprintf_r+0x44>
 80110a4:	2300      	movs	r3, #0
 80110a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80110a8:	2320      	movs	r3, #32
 80110aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80110ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80110b2:	2330      	movs	r3, #48	@ 0x30
 80110b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011264 <_vfiprintf_r+0x21c>
 80110b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80110bc:	f04f 0901 	mov.w	r9, #1
 80110c0:	4623      	mov	r3, r4
 80110c2:	469a      	mov	sl, r3
 80110c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110c8:	b10a      	cbz	r2, 80110ce <_vfiprintf_r+0x86>
 80110ca:	2a25      	cmp	r2, #37	@ 0x25
 80110cc:	d1f9      	bne.n	80110c2 <_vfiprintf_r+0x7a>
 80110ce:	ebba 0b04 	subs.w	fp, sl, r4
 80110d2:	d00b      	beq.n	80110ec <_vfiprintf_r+0xa4>
 80110d4:	465b      	mov	r3, fp
 80110d6:	4622      	mov	r2, r4
 80110d8:	4629      	mov	r1, r5
 80110da:	4630      	mov	r0, r6
 80110dc:	f7ff ffa1 	bl	8011022 <__sfputs_r>
 80110e0:	3001      	adds	r0, #1
 80110e2:	f000 80a7 	beq.w	8011234 <_vfiprintf_r+0x1ec>
 80110e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110e8:	445a      	add	r2, fp
 80110ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80110ec:	f89a 3000 	ldrb.w	r3, [sl]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f000 809f 	beq.w	8011234 <_vfiprintf_r+0x1ec>
 80110f6:	2300      	movs	r3, #0
 80110f8:	f04f 32ff 	mov.w	r2, #4294967295
 80110fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011100:	f10a 0a01 	add.w	sl, sl, #1
 8011104:	9304      	str	r3, [sp, #16]
 8011106:	9307      	str	r3, [sp, #28]
 8011108:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801110c:	931a      	str	r3, [sp, #104]	@ 0x68
 801110e:	4654      	mov	r4, sl
 8011110:	2205      	movs	r2, #5
 8011112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011116:	4853      	ldr	r0, [pc, #332]	@ (8011264 <_vfiprintf_r+0x21c>)
 8011118:	f7ef f8f2 	bl	8000300 <memchr>
 801111c:	9a04      	ldr	r2, [sp, #16]
 801111e:	b9d8      	cbnz	r0, 8011158 <_vfiprintf_r+0x110>
 8011120:	06d1      	lsls	r1, r2, #27
 8011122:	bf44      	itt	mi
 8011124:	2320      	movmi	r3, #32
 8011126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801112a:	0713      	lsls	r3, r2, #28
 801112c:	bf44      	itt	mi
 801112e:	232b      	movmi	r3, #43	@ 0x2b
 8011130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011134:	f89a 3000 	ldrb.w	r3, [sl]
 8011138:	2b2a      	cmp	r3, #42	@ 0x2a
 801113a:	d015      	beq.n	8011168 <_vfiprintf_r+0x120>
 801113c:	9a07      	ldr	r2, [sp, #28]
 801113e:	4654      	mov	r4, sl
 8011140:	2000      	movs	r0, #0
 8011142:	f04f 0c0a 	mov.w	ip, #10
 8011146:	4621      	mov	r1, r4
 8011148:	f811 3b01 	ldrb.w	r3, [r1], #1
 801114c:	3b30      	subs	r3, #48	@ 0x30
 801114e:	2b09      	cmp	r3, #9
 8011150:	d94b      	bls.n	80111ea <_vfiprintf_r+0x1a2>
 8011152:	b1b0      	cbz	r0, 8011182 <_vfiprintf_r+0x13a>
 8011154:	9207      	str	r2, [sp, #28]
 8011156:	e014      	b.n	8011182 <_vfiprintf_r+0x13a>
 8011158:	eba0 0308 	sub.w	r3, r0, r8
 801115c:	fa09 f303 	lsl.w	r3, r9, r3
 8011160:	4313      	orrs	r3, r2
 8011162:	9304      	str	r3, [sp, #16]
 8011164:	46a2      	mov	sl, r4
 8011166:	e7d2      	b.n	801110e <_vfiprintf_r+0xc6>
 8011168:	9b03      	ldr	r3, [sp, #12]
 801116a:	1d19      	adds	r1, r3, #4
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	9103      	str	r1, [sp, #12]
 8011170:	2b00      	cmp	r3, #0
 8011172:	bfbb      	ittet	lt
 8011174:	425b      	neglt	r3, r3
 8011176:	f042 0202 	orrlt.w	r2, r2, #2
 801117a:	9307      	strge	r3, [sp, #28]
 801117c:	9307      	strlt	r3, [sp, #28]
 801117e:	bfb8      	it	lt
 8011180:	9204      	strlt	r2, [sp, #16]
 8011182:	7823      	ldrb	r3, [r4, #0]
 8011184:	2b2e      	cmp	r3, #46	@ 0x2e
 8011186:	d10a      	bne.n	801119e <_vfiprintf_r+0x156>
 8011188:	7863      	ldrb	r3, [r4, #1]
 801118a:	2b2a      	cmp	r3, #42	@ 0x2a
 801118c:	d132      	bne.n	80111f4 <_vfiprintf_r+0x1ac>
 801118e:	9b03      	ldr	r3, [sp, #12]
 8011190:	1d1a      	adds	r2, r3, #4
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	9203      	str	r2, [sp, #12]
 8011196:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801119a:	3402      	adds	r4, #2
 801119c:	9305      	str	r3, [sp, #20]
 801119e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011274 <_vfiprintf_r+0x22c>
 80111a2:	7821      	ldrb	r1, [r4, #0]
 80111a4:	2203      	movs	r2, #3
 80111a6:	4650      	mov	r0, sl
 80111a8:	f7ef f8aa 	bl	8000300 <memchr>
 80111ac:	b138      	cbz	r0, 80111be <_vfiprintf_r+0x176>
 80111ae:	9b04      	ldr	r3, [sp, #16]
 80111b0:	eba0 000a 	sub.w	r0, r0, sl
 80111b4:	2240      	movs	r2, #64	@ 0x40
 80111b6:	4082      	lsls	r2, r0
 80111b8:	4313      	orrs	r3, r2
 80111ba:	3401      	adds	r4, #1
 80111bc:	9304      	str	r3, [sp, #16]
 80111be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111c2:	4829      	ldr	r0, [pc, #164]	@ (8011268 <_vfiprintf_r+0x220>)
 80111c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80111c8:	2206      	movs	r2, #6
 80111ca:	f7ef f899 	bl	8000300 <memchr>
 80111ce:	2800      	cmp	r0, #0
 80111d0:	d03f      	beq.n	8011252 <_vfiprintf_r+0x20a>
 80111d2:	4b26      	ldr	r3, [pc, #152]	@ (801126c <_vfiprintf_r+0x224>)
 80111d4:	bb1b      	cbnz	r3, 801121e <_vfiprintf_r+0x1d6>
 80111d6:	9b03      	ldr	r3, [sp, #12]
 80111d8:	3307      	adds	r3, #7
 80111da:	f023 0307 	bic.w	r3, r3, #7
 80111de:	3308      	adds	r3, #8
 80111e0:	9303      	str	r3, [sp, #12]
 80111e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111e4:	443b      	add	r3, r7
 80111e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80111e8:	e76a      	b.n	80110c0 <_vfiprintf_r+0x78>
 80111ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80111ee:	460c      	mov	r4, r1
 80111f0:	2001      	movs	r0, #1
 80111f2:	e7a8      	b.n	8011146 <_vfiprintf_r+0xfe>
 80111f4:	2300      	movs	r3, #0
 80111f6:	3401      	adds	r4, #1
 80111f8:	9305      	str	r3, [sp, #20]
 80111fa:	4619      	mov	r1, r3
 80111fc:	f04f 0c0a 	mov.w	ip, #10
 8011200:	4620      	mov	r0, r4
 8011202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011206:	3a30      	subs	r2, #48	@ 0x30
 8011208:	2a09      	cmp	r2, #9
 801120a:	d903      	bls.n	8011214 <_vfiprintf_r+0x1cc>
 801120c:	2b00      	cmp	r3, #0
 801120e:	d0c6      	beq.n	801119e <_vfiprintf_r+0x156>
 8011210:	9105      	str	r1, [sp, #20]
 8011212:	e7c4      	b.n	801119e <_vfiprintf_r+0x156>
 8011214:	fb0c 2101 	mla	r1, ip, r1, r2
 8011218:	4604      	mov	r4, r0
 801121a:	2301      	movs	r3, #1
 801121c:	e7f0      	b.n	8011200 <_vfiprintf_r+0x1b8>
 801121e:	ab03      	add	r3, sp, #12
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	462a      	mov	r2, r5
 8011224:	4b12      	ldr	r3, [pc, #72]	@ (8011270 <_vfiprintf_r+0x228>)
 8011226:	a904      	add	r1, sp, #16
 8011228:	4630      	mov	r0, r6
 801122a:	f7fd f995 	bl	800e558 <_printf_float>
 801122e:	4607      	mov	r7, r0
 8011230:	1c78      	adds	r0, r7, #1
 8011232:	d1d6      	bne.n	80111e2 <_vfiprintf_r+0x19a>
 8011234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011236:	07d9      	lsls	r1, r3, #31
 8011238:	d405      	bmi.n	8011246 <_vfiprintf_r+0x1fe>
 801123a:	89ab      	ldrh	r3, [r5, #12]
 801123c:	059a      	lsls	r2, r3, #22
 801123e:	d402      	bmi.n	8011246 <_vfiprintf_r+0x1fe>
 8011240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011242:	f7fd ffc9 	bl	800f1d8 <__retarget_lock_release_recursive>
 8011246:	89ab      	ldrh	r3, [r5, #12]
 8011248:	065b      	lsls	r3, r3, #25
 801124a:	f53f af1f 	bmi.w	801108c <_vfiprintf_r+0x44>
 801124e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011250:	e71e      	b.n	8011090 <_vfiprintf_r+0x48>
 8011252:	ab03      	add	r3, sp, #12
 8011254:	9300      	str	r3, [sp, #0]
 8011256:	462a      	mov	r2, r5
 8011258:	4b05      	ldr	r3, [pc, #20]	@ (8011270 <_vfiprintf_r+0x228>)
 801125a:	a904      	add	r1, sp, #16
 801125c:	4630      	mov	r0, r6
 801125e:	f7fd fc03 	bl	800ea68 <_printf_i>
 8011262:	e7e4      	b.n	801122e <_vfiprintf_r+0x1e6>
 8011264:	0801187c 	.word	0x0801187c
 8011268:	08011886 	.word	0x08011886
 801126c:	0800e559 	.word	0x0800e559
 8011270:	08011023 	.word	0x08011023
 8011274:	08011882 	.word	0x08011882

08011278 <__sflush_r>:
 8011278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801127c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011280:	0716      	lsls	r6, r2, #28
 8011282:	4605      	mov	r5, r0
 8011284:	460c      	mov	r4, r1
 8011286:	d454      	bmi.n	8011332 <__sflush_r+0xba>
 8011288:	684b      	ldr	r3, [r1, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	dc02      	bgt.n	8011294 <__sflush_r+0x1c>
 801128e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011290:	2b00      	cmp	r3, #0
 8011292:	dd48      	ble.n	8011326 <__sflush_r+0xae>
 8011294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011296:	2e00      	cmp	r6, #0
 8011298:	d045      	beq.n	8011326 <__sflush_r+0xae>
 801129a:	2300      	movs	r3, #0
 801129c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80112a0:	682f      	ldr	r7, [r5, #0]
 80112a2:	6a21      	ldr	r1, [r4, #32]
 80112a4:	602b      	str	r3, [r5, #0]
 80112a6:	d030      	beq.n	801130a <__sflush_r+0x92>
 80112a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80112aa:	89a3      	ldrh	r3, [r4, #12]
 80112ac:	0759      	lsls	r1, r3, #29
 80112ae:	d505      	bpl.n	80112bc <__sflush_r+0x44>
 80112b0:	6863      	ldr	r3, [r4, #4]
 80112b2:	1ad2      	subs	r2, r2, r3
 80112b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80112b6:	b10b      	cbz	r3, 80112bc <__sflush_r+0x44>
 80112b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112ba:	1ad2      	subs	r2, r2, r3
 80112bc:	2300      	movs	r3, #0
 80112be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112c0:	6a21      	ldr	r1, [r4, #32]
 80112c2:	4628      	mov	r0, r5
 80112c4:	47b0      	blx	r6
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	d106      	bne.n	80112da <__sflush_r+0x62>
 80112cc:	6829      	ldr	r1, [r5, #0]
 80112ce:	291d      	cmp	r1, #29
 80112d0:	d82b      	bhi.n	801132a <__sflush_r+0xb2>
 80112d2:	4a2a      	ldr	r2, [pc, #168]	@ (801137c <__sflush_r+0x104>)
 80112d4:	40ca      	lsrs	r2, r1
 80112d6:	07d6      	lsls	r6, r2, #31
 80112d8:	d527      	bpl.n	801132a <__sflush_r+0xb2>
 80112da:	2200      	movs	r2, #0
 80112dc:	6062      	str	r2, [r4, #4]
 80112de:	04d9      	lsls	r1, r3, #19
 80112e0:	6922      	ldr	r2, [r4, #16]
 80112e2:	6022      	str	r2, [r4, #0]
 80112e4:	d504      	bpl.n	80112f0 <__sflush_r+0x78>
 80112e6:	1c42      	adds	r2, r0, #1
 80112e8:	d101      	bne.n	80112ee <__sflush_r+0x76>
 80112ea:	682b      	ldr	r3, [r5, #0]
 80112ec:	b903      	cbnz	r3, 80112f0 <__sflush_r+0x78>
 80112ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80112f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112f2:	602f      	str	r7, [r5, #0]
 80112f4:	b1b9      	cbz	r1, 8011326 <__sflush_r+0xae>
 80112f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112fa:	4299      	cmp	r1, r3
 80112fc:	d002      	beq.n	8011304 <__sflush_r+0x8c>
 80112fe:	4628      	mov	r0, r5
 8011300:	f7fe fd78 	bl	800fdf4 <_free_r>
 8011304:	2300      	movs	r3, #0
 8011306:	6363      	str	r3, [r4, #52]	@ 0x34
 8011308:	e00d      	b.n	8011326 <__sflush_r+0xae>
 801130a:	2301      	movs	r3, #1
 801130c:	4628      	mov	r0, r5
 801130e:	47b0      	blx	r6
 8011310:	4602      	mov	r2, r0
 8011312:	1c50      	adds	r0, r2, #1
 8011314:	d1c9      	bne.n	80112aa <__sflush_r+0x32>
 8011316:	682b      	ldr	r3, [r5, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d0c6      	beq.n	80112aa <__sflush_r+0x32>
 801131c:	2b1d      	cmp	r3, #29
 801131e:	d001      	beq.n	8011324 <__sflush_r+0xac>
 8011320:	2b16      	cmp	r3, #22
 8011322:	d11e      	bne.n	8011362 <__sflush_r+0xea>
 8011324:	602f      	str	r7, [r5, #0]
 8011326:	2000      	movs	r0, #0
 8011328:	e022      	b.n	8011370 <__sflush_r+0xf8>
 801132a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801132e:	b21b      	sxth	r3, r3
 8011330:	e01b      	b.n	801136a <__sflush_r+0xf2>
 8011332:	690f      	ldr	r7, [r1, #16]
 8011334:	2f00      	cmp	r7, #0
 8011336:	d0f6      	beq.n	8011326 <__sflush_r+0xae>
 8011338:	0793      	lsls	r3, r2, #30
 801133a:	680e      	ldr	r6, [r1, #0]
 801133c:	bf08      	it	eq
 801133e:	694b      	ldreq	r3, [r1, #20]
 8011340:	600f      	str	r7, [r1, #0]
 8011342:	bf18      	it	ne
 8011344:	2300      	movne	r3, #0
 8011346:	eba6 0807 	sub.w	r8, r6, r7
 801134a:	608b      	str	r3, [r1, #8]
 801134c:	f1b8 0f00 	cmp.w	r8, #0
 8011350:	dde9      	ble.n	8011326 <__sflush_r+0xae>
 8011352:	6a21      	ldr	r1, [r4, #32]
 8011354:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011356:	4643      	mov	r3, r8
 8011358:	463a      	mov	r2, r7
 801135a:	4628      	mov	r0, r5
 801135c:	47b0      	blx	r6
 801135e:	2800      	cmp	r0, #0
 8011360:	dc08      	bgt.n	8011374 <__sflush_r+0xfc>
 8011362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801136a:	81a3      	strh	r3, [r4, #12]
 801136c:	f04f 30ff 	mov.w	r0, #4294967295
 8011370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011374:	4407      	add	r7, r0
 8011376:	eba8 0800 	sub.w	r8, r8, r0
 801137a:	e7e7      	b.n	801134c <__sflush_r+0xd4>
 801137c:	20400001 	.word	0x20400001

08011380 <_fflush_r>:
 8011380:	b538      	push	{r3, r4, r5, lr}
 8011382:	690b      	ldr	r3, [r1, #16]
 8011384:	4605      	mov	r5, r0
 8011386:	460c      	mov	r4, r1
 8011388:	b913      	cbnz	r3, 8011390 <_fflush_r+0x10>
 801138a:	2500      	movs	r5, #0
 801138c:	4628      	mov	r0, r5
 801138e:	bd38      	pop	{r3, r4, r5, pc}
 8011390:	b118      	cbz	r0, 801139a <_fflush_r+0x1a>
 8011392:	6a03      	ldr	r3, [r0, #32]
 8011394:	b90b      	cbnz	r3, 801139a <_fflush_r+0x1a>
 8011396:	f7fd fd11 	bl	800edbc <__sinit>
 801139a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d0f3      	beq.n	801138a <_fflush_r+0xa>
 80113a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80113a4:	07d0      	lsls	r0, r2, #31
 80113a6:	d404      	bmi.n	80113b2 <_fflush_r+0x32>
 80113a8:	0599      	lsls	r1, r3, #22
 80113aa:	d402      	bmi.n	80113b2 <_fflush_r+0x32>
 80113ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113ae:	f7fd ff12 	bl	800f1d6 <__retarget_lock_acquire_recursive>
 80113b2:	4628      	mov	r0, r5
 80113b4:	4621      	mov	r1, r4
 80113b6:	f7ff ff5f 	bl	8011278 <__sflush_r>
 80113ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113bc:	07da      	lsls	r2, r3, #31
 80113be:	4605      	mov	r5, r0
 80113c0:	d4e4      	bmi.n	801138c <_fflush_r+0xc>
 80113c2:	89a3      	ldrh	r3, [r4, #12]
 80113c4:	059b      	lsls	r3, r3, #22
 80113c6:	d4e1      	bmi.n	801138c <_fflush_r+0xc>
 80113c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113ca:	f7fd ff05 	bl	800f1d8 <__retarget_lock_release_recursive>
 80113ce:	e7dd      	b.n	801138c <_fflush_r+0xc>

080113d0 <__swhatbuf_r>:
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	460c      	mov	r4, r1
 80113d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113d8:	2900      	cmp	r1, #0
 80113da:	b096      	sub	sp, #88	@ 0x58
 80113dc:	4615      	mov	r5, r2
 80113de:	461e      	mov	r6, r3
 80113e0:	da0d      	bge.n	80113fe <__swhatbuf_r+0x2e>
 80113e2:	89a3      	ldrh	r3, [r4, #12]
 80113e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80113e8:	f04f 0100 	mov.w	r1, #0
 80113ec:	bf14      	ite	ne
 80113ee:	2340      	movne	r3, #64	@ 0x40
 80113f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80113f4:	2000      	movs	r0, #0
 80113f6:	6031      	str	r1, [r6, #0]
 80113f8:	602b      	str	r3, [r5, #0]
 80113fa:	b016      	add	sp, #88	@ 0x58
 80113fc:	bd70      	pop	{r4, r5, r6, pc}
 80113fe:	466a      	mov	r2, sp
 8011400:	f000 f848 	bl	8011494 <_fstat_r>
 8011404:	2800      	cmp	r0, #0
 8011406:	dbec      	blt.n	80113e2 <__swhatbuf_r+0x12>
 8011408:	9901      	ldr	r1, [sp, #4]
 801140a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801140e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011412:	4259      	negs	r1, r3
 8011414:	4159      	adcs	r1, r3
 8011416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801141a:	e7eb      	b.n	80113f4 <__swhatbuf_r+0x24>

0801141c <__smakebuf_r>:
 801141c:	898b      	ldrh	r3, [r1, #12]
 801141e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011420:	079d      	lsls	r5, r3, #30
 8011422:	4606      	mov	r6, r0
 8011424:	460c      	mov	r4, r1
 8011426:	d507      	bpl.n	8011438 <__smakebuf_r+0x1c>
 8011428:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801142c:	6023      	str	r3, [r4, #0]
 801142e:	6123      	str	r3, [r4, #16]
 8011430:	2301      	movs	r3, #1
 8011432:	6163      	str	r3, [r4, #20]
 8011434:	b003      	add	sp, #12
 8011436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011438:	ab01      	add	r3, sp, #4
 801143a:	466a      	mov	r2, sp
 801143c:	f7ff ffc8 	bl	80113d0 <__swhatbuf_r>
 8011440:	9f00      	ldr	r7, [sp, #0]
 8011442:	4605      	mov	r5, r0
 8011444:	4639      	mov	r1, r7
 8011446:	4630      	mov	r0, r6
 8011448:	f7ff f882 	bl	8010550 <_malloc_r>
 801144c:	b948      	cbnz	r0, 8011462 <__smakebuf_r+0x46>
 801144e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011452:	059a      	lsls	r2, r3, #22
 8011454:	d4ee      	bmi.n	8011434 <__smakebuf_r+0x18>
 8011456:	f023 0303 	bic.w	r3, r3, #3
 801145a:	f043 0302 	orr.w	r3, r3, #2
 801145e:	81a3      	strh	r3, [r4, #12]
 8011460:	e7e2      	b.n	8011428 <__smakebuf_r+0xc>
 8011462:	89a3      	ldrh	r3, [r4, #12]
 8011464:	6020      	str	r0, [r4, #0]
 8011466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801146a:	81a3      	strh	r3, [r4, #12]
 801146c:	9b01      	ldr	r3, [sp, #4]
 801146e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011472:	b15b      	cbz	r3, 801148c <__smakebuf_r+0x70>
 8011474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011478:	4630      	mov	r0, r6
 801147a:	f000 f81d 	bl	80114b8 <_isatty_r>
 801147e:	b128      	cbz	r0, 801148c <__smakebuf_r+0x70>
 8011480:	89a3      	ldrh	r3, [r4, #12]
 8011482:	f023 0303 	bic.w	r3, r3, #3
 8011486:	f043 0301 	orr.w	r3, r3, #1
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	89a3      	ldrh	r3, [r4, #12]
 801148e:	431d      	orrs	r5, r3
 8011490:	81a5      	strh	r5, [r4, #12]
 8011492:	e7cf      	b.n	8011434 <__smakebuf_r+0x18>

08011494 <_fstat_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4d07      	ldr	r5, [pc, #28]	@ (80114b4 <_fstat_r+0x20>)
 8011498:	2300      	movs	r3, #0
 801149a:	4604      	mov	r4, r0
 801149c:	4608      	mov	r0, r1
 801149e:	4611      	mov	r1, r2
 80114a0:	602b      	str	r3, [r5, #0]
 80114a2:	f7f0 f9a5 	bl	80017f0 <_fstat>
 80114a6:	1c43      	adds	r3, r0, #1
 80114a8:	d102      	bne.n	80114b0 <_fstat_r+0x1c>
 80114aa:	682b      	ldr	r3, [r5, #0]
 80114ac:	b103      	cbz	r3, 80114b0 <_fstat_r+0x1c>
 80114ae:	6023      	str	r3, [r4, #0]
 80114b0:	bd38      	pop	{r3, r4, r5, pc}
 80114b2:	bf00      	nop
 80114b4:	24003978 	.word	0x24003978

080114b8 <_isatty_r>:
 80114b8:	b538      	push	{r3, r4, r5, lr}
 80114ba:	4d06      	ldr	r5, [pc, #24]	@ (80114d4 <_isatty_r+0x1c>)
 80114bc:	2300      	movs	r3, #0
 80114be:	4604      	mov	r4, r0
 80114c0:	4608      	mov	r0, r1
 80114c2:	602b      	str	r3, [r5, #0]
 80114c4:	f7f0 f9a4 	bl	8001810 <_isatty>
 80114c8:	1c43      	adds	r3, r0, #1
 80114ca:	d102      	bne.n	80114d2 <_isatty_r+0x1a>
 80114cc:	682b      	ldr	r3, [r5, #0]
 80114ce:	b103      	cbz	r3, 80114d2 <_isatty_r+0x1a>
 80114d0:	6023      	str	r3, [r4, #0]
 80114d2:	bd38      	pop	{r3, r4, r5, pc}
 80114d4:	24003978 	.word	0x24003978

080114d8 <_sbrk_r>:
 80114d8:	b538      	push	{r3, r4, r5, lr}
 80114da:	4d06      	ldr	r5, [pc, #24]	@ (80114f4 <_sbrk_r+0x1c>)
 80114dc:	2300      	movs	r3, #0
 80114de:	4604      	mov	r4, r0
 80114e0:	4608      	mov	r0, r1
 80114e2:	602b      	str	r3, [r5, #0]
 80114e4:	f7f0 f9ac 	bl	8001840 <_sbrk>
 80114e8:	1c43      	adds	r3, r0, #1
 80114ea:	d102      	bne.n	80114f2 <_sbrk_r+0x1a>
 80114ec:	682b      	ldr	r3, [r5, #0]
 80114ee:	b103      	cbz	r3, 80114f2 <_sbrk_r+0x1a>
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	bd38      	pop	{r3, r4, r5, pc}
 80114f4:	24003978 	.word	0x24003978

080114f8 <__assert_func>:
 80114f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114fa:	4614      	mov	r4, r2
 80114fc:	461a      	mov	r2, r3
 80114fe:	4b09      	ldr	r3, [pc, #36]	@ (8011524 <__assert_func+0x2c>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4605      	mov	r5, r0
 8011504:	68d8      	ldr	r0, [r3, #12]
 8011506:	b14c      	cbz	r4, 801151c <__assert_func+0x24>
 8011508:	4b07      	ldr	r3, [pc, #28]	@ (8011528 <__assert_func+0x30>)
 801150a:	9100      	str	r1, [sp, #0]
 801150c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011510:	4906      	ldr	r1, [pc, #24]	@ (801152c <__assert_func+0x34>)
 8011512:	462b      	mov	r3, r5
 8011514:	f000 f822 	bl	801155c <fiprintf>
 8011518:	f000 f832 	bl	8011580 <abort>
 801151c:	4b04      	ldr	r3, [pc, #16]	@ (8011530 <__assert_func+0x38>)
 801151e:	461c      	mov	r4, r3
 8011520:	e7f3      	b.n	801150a <__assert_func+0x12>
 8011522:	bf00      	nop
 8011524:	2400027c 	.word	0x2400027c
 8011528:	0801188d 	.word	0x0801188d
 801152c:	0801189a 	.word	0x0801189a
 8011530:	080118c8 	.word	0x080118c8

08011534 <_calloc_r>:
 8011534:	b570      	push	{r4, r5, r6, lr}
 8011536:	fba1 5402 	umull	r5, r4, r1, r2
 801153a:	b934      	cbnz	r4, 801154a <_calloc_r+0x16>
 801153c:	4629      	mov	r1, r5
 801153e:	f7ff f807 	bl	8010550 <_malloc_r>
 8011542:	4606      	mov	r6, r0
 8011544:	b928      	cbnz	r0, 8011552 <_calloc_r+0x1e>
 8011546:	4630      	mov	r0, r6
 8011548:	bd70      	pop	{r4, r5, r6, pc}
 801154a:	220c      	movs	r2, #12
 801154c:	6002      	str	r2, [r0, #0]
 801154e:	2600      	movs	r6, #0
 8011550:	e7f9      	b.n	8011546 <_calloc_r+0x12>
 8011552:	462a      	mov	r2, r5
 8011554:	4621      	mov	r1, r4
 8011556:	f7fd fdaf 	bl	800f0b8 <memset>
 801155a:	e7f4      	b.n	8011546 <_calloc_r+0x12>

0801155c <fiprintf>:
 801155c:	b40e      	push	{r1, r2, r3}
 801155e:	b503      	push	{r0, r1, lr}
 8011560:	4601      	mov	r1, r0
 8011562:	ab03      	add	r3, sp, #12
 8011564:	4805      	ldr	r0, [pc, #20]	@ (801157c <fiprintf+0x20>)
 8011566:	f853 2b04 	ldr.w	r2, [r3], #4
 801156a:	6800      	ldr	r0, [r0, #0]
 801156c:	9301      	str	r3, [sp, #4]
 801156e:	f7ff fd6b 	bl	8011048 <_vfiprintf_r>
 8011572:	b002      	add	sp, #8
 8011574:	f85d eb04 	ldr.w	lr, [sp], #4
 8011578:	b003      	add	sp, #12
 801157a:	4770      	bx	lr
 801157c:	2400027c 	.word	0x2400027c

08011580 <abort>:
 8011580:	b508      	push	{r3, lr}
 8011582:	2006      	movs	r0, #6
 8011584:	f000 f82c 	bl	80115e0 <raise>
 8011588:	2001      	movs	r0, #1
 801158a:	f7f0 f8e1 	bl	8001750 <_exit>

0801158e <_raise_r>:
 801158e:	291f      	cmp	r1, #31
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	4605      	mov	r5, r0
 8011594:	460c      	mov	r4, r1
 8011596:	d904      	bls.n	80115a2 <_raise_r+0x14>
 8011598:	2316      	movs	r3, #22
 801159a:	6003      	str	r3, [r0, #0]
 801159c:	f04f 30ff 	mov.w	r0, #4294967295
 80115a0:	bd38      	pop	{r3, r4, r5, pc}
 80115a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80115a4:	b112      	cbz	r2, 80115ac <_raise_r+0x1e>
 80115a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115aa:	b94b      	cbnz	r3, 80115c0 <_raise_r+0x32>
 80115ac:	4628      	mov	r0, r5
 80115ae:	f000 f831 	bl	8011614 <_getpid_r>
 80115b2:	4622      	mov	r2, r4
 80115b4:	4601      	mov	r1, r0
 80115b6:	4628      	mov	r0, r5
 80115b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115bc:	f000 b818 	b.w	80115f0 <_kill_r>
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d00a      	beq.n	80115da <_raise_r+0x4c>
 80115c4:	1c59      	adds	r1, r3, #1
 80115c6:	d103      	bne.n	80115d0 <_raise_r+0x42>
 80115c8:	2316      	movs	r3, #22
 80115ca:	6003      	str	r3, [r0, #0]
 80115cc:	2001      	movs	r0, #1
 80115ce:	e7e7      	b.n	80115a0 <_raise_r+0x12>
 80115d0:	2100      	movs	r1, #0
 80115d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80115d6:	4620      	mov	r0, r4
 80115d8:	4798      	blx	r3
 80115da:	2000      	movs	r0, #0
 80115dc:	e7e0      	b.n	80115a0 <_raise_r+0x12>
	...

080115e0 <raise>:
 80115e0:	4b02      	ldr	r3, [pc, #8]	@ (80115ec <raise+0xc>)
 80115e2:	4601      	mov	r1, r0
 80115e4:	6818      	ldr	r0, [r3, #0]
 80115e6:	f7ff bfd2 	b.w	801158e <_raise_r>
 80115ea:	bf00      	nop
 80115ec:	2400027c 	.word	0x2400027c

080115f0 <_kill_r>:
 80115f0:	b538      	push	{r3, r4, r5, lr}
 80115f2:	4d07      	ldr	r5, [pc, #28]	@ (8011610 <_kill_r+0x20>)
 80115f4:	2300      	movs	r3, #0
 80115f6:	4604      	mov	r4, r0
 80115f8:	4608      	mov	r0, r1
 80115fa:	4611      	mov	r1, r2
 80115fc:	602b      	str	r3, [r5, #0]
 80115fe:	f7f0 f897 	bl	8001730 <_kill>
 8011602:	1c43      	adds	r3, r0, #1
 8011604:	d102      	bne.n	801160c <_kill_r+0x1c>
 8011606:	682b      	ldr	r3, [r5, #0]
 8011608:	b103      	cbz	r3, 801160c <_kill_r+0x1c>
 801160a:	6023      	str	r3, [r4, #0]
 801160c:	bd38      	pop	{r3, r4, r5, pc}
 801160e:	bf00      	nop
 8011610:	24003978 	.word	0x24003978

08011614 <_getpid_r>:
 8011614:	f7f0 b884 	b.w	8001720 <_getpid>

08011618 <_init>:
 8011618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161a:	bf00      	nop
 801161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801161e:	bc08      	pop	{r3}
 8011620:	469e      	mov	lr, r3
 8011622:	4770      	bx	lr

08011624 <_fini>:
 8011624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011626:	bf00      	nop
 8011628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801162a:	bc08      	pop	{r3}
 801162c:	469e      	mov	lr, r3
 801162e:	4770      	bx	lr
